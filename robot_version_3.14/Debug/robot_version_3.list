
robot_version_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007164  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080072f4  080072f4  000082f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  000091c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800739c  0800739c  0000839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a4  080073a4  000091c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073a8  080073a8  000083a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  080073ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091c0  2**0
                  CONTENTS
 10 .bss          000005ec  200001c0  200001c0  000091c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  000091c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff0f  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e3  00000000  00000000  000190ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0001b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b04  00000000  00000000  0001c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224d2  00000000  00000000  0001d22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b0d  00000000  00000000  0003f6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4a9  00000000  00000000  0005320b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f6b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ed4  00000000  00000000  0011f6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001235cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c0 	.word	0x200001c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072dc 	.word	0x080072dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c4 	.word	0x200001c4
 80001cc:	080072dc 	.word	0x080072dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <MX_DMA_Init+0x6c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a17      	ldr	r2, [pc, #92]	@ (80005cc <MX_DMA_Init+0x6c>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <MX_DMA_Init+0x6c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	200c      	movs	r0, #12
 8000588:	f002 fd85 	bl	8003096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800058c:	200c      	movs	r0, #12
 800058e:	f002 fd9e 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	200e      	movs	r0, #14
 8000598:	f002 fd7d 	bl	8003096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800059c:	200e      	movs	r0, #14
 800059e:	f002 fd96 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2010      	movs	r0, #16
 80005a8:	f002 fd75 	bl	8003096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005ac:	2010      	movs	r0, #16
 80005ae:	f002 fd8e 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2011      	movs	r0, #17
 80005b8:	f002 fd6d 	bl	8003096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005bc:	2011      	movs	r0, #17
 80005be:	f002 fd86 	bl	80030ce <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <Move_Turn>:
//direction：1 前进； 2 后退
//Delay:560 空载90度左右；650 2物块90度左右
int first = 1;

void Move_Turn(int direction, int first)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	int Left_In = -74, Left_Out = 68;	//左初始速度 	-67, 70
 80005da:	f06f 0349 	mvn.w	r3, #73	@ 0x49
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	2344      	movs	r3, #68	@ 0x44
 80005e2:	617b      	str	r3, [r7, #20]
	int Right_In = -74, Right_Out = 68;	//右初始速度	-67, 70
 80005e4:	f06f 0349 	mvn.w	r3, #73	@ 0x49
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	2344      	movs	r3, #68	@ 0x44
 80005ec:	60fb      	str	r3, [r7, #12]
	int Left_Speed = 0, Right_Speed = 0;//实际转化参数
 80005ee:	2300      	movs	r3, #0
 80005f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005f2:	2300      	movs	r3, #0
 80005f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int Adj_cnt = 1000;		//计数值，确定调整时长
 80005f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fa:	60bb      	str	r3, [r7, #8]
	int fact = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24

	if(direction == 1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d104      	bne.n	8000610 <Move_Turn+0x40>
	{
		Left_Speed = Left_In;
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Right_Speed = Right_Out;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800060e:	e006      	b.n	800061e <Move_Turn+0x4e>
	}
	else if(direction == 2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b02      	cmp	r3, #2
 8000614:	d103      	bne.n	800061e <Move_Turn+0x4e>
	{
		Left_Speed = Left_Out;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Right_Speed = Right_In;
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	if(Left_Speed > 100)
 800061e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000620:	2b64      	cmp	r3, #100	@ 0x64
 8000622:	dd02      	ble.n	800062a <Move_Turn+0x5a>
		Left_Speed = 100;
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000628:	e014      	b.n	8000654 <Move_Turn+0x84>
	else if (Left_Speed < -100)
 800062a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800062c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000630:	da03      	bge.n	800063a <Move_Turn+0x6a>
		Left_Speed = -100;
 8000632:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000638:	e00c      	b.n	8000654 <Move_Turn+0x84>
	else if(Right_Speed > 100)
 800063a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800063c:	2b64      	cmp	r3, #100	@ 0x64
 800063e:	dd02      	ble.n	8000646 <Move_Turn+0x76>
		Right_Speed = 100;
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000644:	e006      	b.n	8000654 <Move_Turn+0x84>
	else if (Right_Speed < -100)
 8000646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000648:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800064c:	da02      	bge.n	8000654 <Move_Turn+0x84>
		Right_Speed = -100;
 800064e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28

	for(int i = 0; i < Adj_cnt && fact == 1; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
 8000658:	e017      	b.n	800068a <Move_Turn+0xba>
	{
		Move_Twin_Wheels(Left_Speed, Right_Speed);
 800065a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800065c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800065e:	f001 fd7d 	bl	800215c <Move_Twin_Wheels>
		HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f002 fc18 	bl	8002e98 <HAL_Delay>
		if(GrayData[1] == OUT  && GrayData[2] == OUT && GrayData[3] == OUT)
 8000668:	4b36      	ldr	r3, [pc, #216]	@ (8000744 <Move_Turn+0x174>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d109      	bne.n	8000684 <Move_Turn+0xb4>
 8000670:	4b34      	ldr	r3, [pc, #208]	@ (8000744 <Move_Turn+0x174>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d105      	bne.n	8000684 <Move_Turn+0xb4>
 8000678:	4b32      	ldr	r3, [pc, #200]	@ (8000744 <Move_Turn+0x174>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d101      	bne.n	8000684 <Move_Turn+0xb4>
		{
			 fact = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < Adj_cnt && fact == 1; i++)
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	3301      	adds	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
 800068a:	6a3a      	ldr	r2, [r7, #32]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	429a      	cmp	r2, r3
 8000690:	da02      	bge.n	8000698 <Move_Turn+0xc8>
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	2b01      	cmp	r3, #1
 8000696:	d0e0      	beq.n	800065a <Move_Turn+0x8a>
		}
	}

	fact = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24

	for(int i = 0; i < Adj_cnt && fact == 1; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e044      	b.n	800072c <Move_Turn+0x15c>
	{
		Move_Twin_Wheels(Left_Speed, Right_Speed);
 80006a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80006a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80006a6:	f001 fd59 	bl	800215c <Move_Twin_Wheels>
		HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f002 fbf4 	bl	8002e98 <HAL_Delay>
//		if((GrayData[1] == IN  && BackData[1] == IN && BackData[2] == IN) || (GrayData[2] == IN  && BackData[2] == IN && GrayData[3] == IN  && BackData[3] == IN))
		if((BackData[1] == IN && GrayData[1] == IN && BackData[2] == IN) || (GrayData[3] == IN  && BackData[2] == IN && BackData[3] == IN))
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <Move_Turn+0x178>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d107      	bne.n	80006c8 <Move_Turn+0xf8>
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <Move_Turn+0x174>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d103      	bne.n	80006c8 <Move_Turn+0xf8>
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <Move_Turn+0x178>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00b      	beq.n	80006e0 <Move_Turn+0x110>
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <Move_Turn+0x174>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d12a      	bne.n	8000726 <Move_Turn+0x156>
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <Move_Turn+0x178>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d126      	bne.n	8000726 <Move_Turn+0x156>
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <Move_Turn+0x178>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d122      	bne.n	8000726 <Move_Turn+0x156>
		{
			if(first == 0)
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d116      	bne.n	8000714 <Move_Turn+0x144>
			{
				if(direction == 1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d108      	bne.n	80006fe <Move_Turn+0x12e>
				{
					Move_Twin_Wheels(82, -80); //85, -82
 80006ec:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 80006f0:	2052      	movs	r0, #82	@ 0x52
 80006f2:	f001 fd33 	bl	800215c <Move_Twin_Wheels>
					HAL_Delay(50);
 80006f6:	2032      	movs	r0, #50	@ 0x32
 80006f8:	f002 fbce 	bl	8002e98 <HAL_Delay>
 80006fc:	e00a      	b.n	8000714 <Move_Turn+0x144>
				}
				else if(direction == 2)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d107      	bne.n	8000714 <Move_Turn+0x144>
				{
					Move_Twin_Wheels(-80,78); //-90, 87
 8000704:	214e      	movs	r1, #78	@ 0x4e
 8000706:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 800070a:	f001 fd27 	bl	800215c <Move_Twin_Wheels>
					HAL_Delay(50);
 800070e:	2032      	movs	r0, #50	@ 0x32
 8000710:	f002 fbc2 	bl	8002e98 <HAL_Delay>
				}
			}

			 Move_Twin_Wheels(0, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2000      	movs	r0, #0
 8000718:	f001 fd20 	bl	800215c <Move_Twin_Wheels>
			 HAL_Delay(100);
 800071c:	2064      	movs	r0, #100	@ 0x64
 800071e:	f002 fbbb 	bl	8002e98 <HAL_Delay>
			 fact = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < Adj_cnt && fact == 1; i++)
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3301      	adds	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	69fa      	ldr	r2, [r7, #28]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	429a      	cmp	r2, r3
 8000732:	da02      	bge.n	800073a <Move_Turn+0x16a>
 8000734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000736:	2b01      	cmp	r3, #1
 8000738:	d0b3      	beq.n	80006a2 <Move_Turn+0xd2>
		}
	}
}
 800073a:	bf00      	nop
 800073c:	3730      	adds	r7, #48	@ 0x30
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200002bc 	.word	0x200002bc
 8000748:	200002d0 	.word	0x200002d0

0800074c <Move_Straight>:
//direction：1 前进； 2 后退; 3 低速前行

int turn_s = 0,error_s = 0;

void Move_Straight(int direction)
{
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b09a      	sub	sp, #104	@ 0x68
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	int Left_ori = 0, Right_ori = 0;//53
 8000754:	2300      	movs	r3, #0
 8000756:	657b      	str	r3, [r7, #84]	@ 0x54
 8000758:	2300      	movs	r3, #0
 800075a:	653b      	str	r3, [r7, #80]	@ 0x50
	int Left_Adj = 0, Right_Adj = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000760:	2300      	movs	r3, #0
 8000762:	64bb      	str	r3, [r7, #72]	@ 0x48
	int Left_Speed = 0, Right_Speed = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	667b      	str	r3, [r7, #100]	@ 0x64
 8000768:	2300      	movs	r3, #0
 800076a:	663b      	str	r3, [r7, #96]	@ 0x60
	int Error_S[5] = {0};
 800076c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

	if(direction == 1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b01      	cmp	r3, #1
 8000780:	f040 8155 	bne.w	8000a2e <Move_Straight+0x2e2>
	{
		 Left_ori = 70;//53
 8000784:	2346      	movs	r3, #70	@ 0x46
 8000786:	657b      	str	r3, [r7, #84]	@ 0x54
		 Right_ori = 72;//50
 8000788:	2348      	movs	r3, #72	@ 0x48
 800078a:	653b      	str	r3, [r7, #80]	@ 0x50
		 Left_Adj = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		 Right_Adj = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	@ 0x48
		 Left_Speed = 0, Right_Speed = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	667b      	str	r3, [r7, #100]	@ 0x64
 8000798:	2300      	movs	r3, #0
 800079a:	663b      	str	r3, [r7, #96]	@ 0x60
		 int Error_set[5] = {1,4,3,5,10}; //1 5 4 5 5
 800079c:	4b83      	ldr	r3, [pc, #524]	@ (80009ac <Move_Straight+0x260>)
 800079e:	f107 0420 	add.w	r4, r7, #32
 80007a2:	461d      	mov	r5, r3
 80007a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a8:	682b      	ldr	r3, [r5, #0]
 80007aa:	6023      	str	r3, [r4, #0]

		 for(int i = 0; i < 5; i++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80007b0:	e00e      	b.n	80007d0 <Move_Straight+0x84>
		 {
			 Error_S[i] = Error_set[i];
 80007b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	3368      	adds	r3, #104	@ 0x68
 80007b8:	443b      	add	r3, r7
 80007ba:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80007be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	3368      	adds	r3, #104	@ 0x68
 80007c4:	443b      	add	r3, r7
 80007c6:	f843 2c34 	str.w	r2, [r3, #-52]
		 for(int i = 0; i < 5; i++)
 80007ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007cc:	3301      	adds	r3, #1
 80007ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80007d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	dded      	ble.n	80007b2 <Move_Straight+0x66>
		 }

	    if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == OUT)
 80007d6:	4b76      	ldr	r3, [pc, #472]	@ (80009b0 <Move_Straight+0x264>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d10b      	bne.n	80007f6 <Move_Straight+0xaa>
 80007de:	4b74      	ldr	r3, [pc, #464]	@ (80009b0 <Move_Straight+0x264>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d107      	bne.n	80007f6 <Move_Straight+0xaa>
 80007e6:	4b72      	ldr	r3, [pc, #456]	@ (80009b0 <Move_Straight+0x264>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d103      	bne.n	80007f6 <Move_Straight+0xaa>
	    {
	    	error_s = Error_S[4];
 80007ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007f0:	4a70      	ldr	r2, [pc, #448]	@ (80009b4 <Move_Straight+0x268>)
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	e0ca      	b.n	800098c <Move_Straight+0x240>
	    }
	    else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT && BackData[1] == IN && BackData[3] == OUT)
 80007f6:	4b6e      	ldr	r3, [pc, #440]	@ (80009b0 <Move_Straight+0x264>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d117      	bne.n	800082e <Move_Straight+0xe2>
 80007fe:	4b6c      	ldr	r3, [pc, #432]	@ (80009b0 <Move_Straight+0x264>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d113      	bne.n	800082e <Move_Straight+0xe2>
 8000806:	4b6a      	ldr	r3, [pc, #424]	@ (80009b0 <Move_Straight+0x264>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d10f      	bne.n	800082e <Move_Straight+0xe2>
 800080e:	4b6a      	ldr	r3, [pc, #424]	@ (80009b8 <Move_Straight+0x26c>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10b      	bne.n	800082e <Move_Straight+0xe2>
 8000816:	4b68      	ldr	r3, [pc, #416]	@ (80009b8 <Move_Straight+0x26c>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d107      	bne.n	800082e <Move_Straight+0xe2>
		{
	    	turn_s = -1;
 800081e:	4b67      	ldr	r3, [pc, #412]	@ (80009bc <Move_Straight+0x270>)
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	601a      	str	r2, [r3, #0]
	    	error_s = Error_S[3];
 8000826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000828:	4a62      	ldr	r2, [pc, #392]	@ (80009b4 <Move_Straight+0x268>)
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	e0ae      	b.n	800098c <Move_Straight+0x240>
		}
	    else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT && BackData[1] == OUT && BackData[3] == IN)
 800082e:	4b60      	ldr	r3, [pc, #384]	@ (80009b0 <Move_Straight+0x264>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d117      	bne.n	8000866 <Move_Straight+0x11a>
 8000836:	4b5e      	ldr	r3, [pc, #376]	@ (80009b0 <Move_Straight+0x264>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d113      	bne.n	8000866 <Move_Straight+0x11a>
 800083e:	4b5c      	ldr	r3, [pc, #368]	@ (80009b0 <Move_Straight+0x264>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10f      	bne.n	8000866 <Move_Straight+0x11a>
 8000846:	4b5c      	ldr	r3, [pc, #368]	@ (80009b8 <Move_Straight+0x26c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10b      	bne.n	8000866 <Move_Straight+0x11a>
 800084e:	4b5a      	ldr	r3, [pc, #360]	@ (80009b8 <Move_Straight+0x26c>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d107      	bne.n	8000866 <Move_Straight+0x11a>
		{
			turn_s = -1;
 8000856:	4b59      	ldr	r3, [pc, #356]	@ (80009bc <Move_Straight+0x270>)
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	601a      	str	r2, [r3, #0]
			error_s = Error_S[2];
 800085e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000860:	4a54      	ldr	r2, [pc, #336]	@ (80009b4 <Move_Straight+0x268>)
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e092      	b.n	800098c <Move_Straight+0x240>
		}
	    else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT)
 8000866:	4b52      	ldr	r3, [pc, #328]	@ (80009b0 <Move_Straight+0x264>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10f      	bne.n	800088e <Move_Straight+0x142>
 800086e:	4b50      	ldr	r3, [pc, #320]	@ (80009b0 <Move_Straight+0x264>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10b      	bne.n	800088e <Move_Straight+0x142>
 8000876:	4b4e      	ldr	r3, [pc, #312]	@ (80009b0 <Move_Straight+0x264>)
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d107      	bne.n	800088e <Move_Straight+0x142>
		{
			turn_s = -1;
 800087e:	4b4f      	ldr	r3, [pc, #316]	@ (80009bc <Move_Straight+0x270>)
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	601a      	str	r2, [r3, #0]
			error_s = Error_S[1];
 8000886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000888:	4a4a      	ldr	r2, [pc, #296]	@ (80009b4 <Move_Straight+0x268>)
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	e07e      	b.n	800098c <Move_Straight+0x240>
		}
		else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 800088e:	4b48      	ldr	r3, [pc, #288]	@ (80009b0 <Move_Straight+0x264>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10f      	bne.n	80008b6 <Move_Straight+0x16a>
 8000896:	4b46      	ldr	r3, [pc, #280]	@ (80009b0 <Move_Straight+0x264>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <Move_Straight+0x16a>
 800089e:	4b44      	ldr	r3, [pc, #272]	@ (80009b0 <Move_Straight+0x264>)
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d107      	bne.n	80008b6 <Move_Straight+0x16a>
		{
			turn_s = -1;
 80008a6:	4b45      	ldr	r3, [pc, #276]	@ (80009bc <Move_Straight+0x270>)
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ac:	601a      	str	r2, [r3, #0]
			error_s = Error_S[0];
 80008ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008b0:	4a40      	ldr	r2, [pc, #256]	@ (80009b4 <Move_Straight+0x268>)
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e06a      	b.n	800098c <Move_Straight+0x240>
		}
		else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN)
 80008b6:	4b3e      	ldr	r3, [pc, #248]	@ (80009b0 <Move_Straight+0x264>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10b      	bne.n	80008d6 <Move_Straight+0x18a>
 80008be:	4b3c      	ldr	r3, [pc, #240]	@ (80009b0 <Move_Straight+0x264>)
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d107      	bne.n	80008d6 <Move_Straight+0x18a>
 80008c6:	4b3a      	ldr	r3, [pc, #232]	@ (80009b0 <Move_Straight+0x264>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <Move_Straight+0x18a>
		{
			turn_s = 0;
 80008ce:	4b3b      	ldr	r3, [pc, #236]	@ (80009bc <Move_Straight+0x270>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e05a      	b.n	800098c <Move_Straight+0x240>
		}
		else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 80008d6:	4b36      	ldr	r3, [pc, #216]	@ (80009b0 <Move_Straight+0x264>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10e      	bne.n	80008fc <Move_Straight+0x1b0>
 80008de:	4b34      	ldr	r3, [pc, #208]	@ (80009b0 <Move_Straight+0x264>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10a      	bne.n	80008fc <Move_Straight+0x1b0>
 80008e6:	4b32      	ldr	r3, [pc, #200]	@ (80009b0 <Move_Straight+0x264>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d106      	bne.n	80008fc <Move_Straight+0x1b0>
		{
			turn_s = 1;
 80008ee:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <Move_Straight+0x270>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
			error_s = 3;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	@ (80009b4 <Move_Straight+0x268>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e047      	b.n	800098c <Move_Straight+0x240>
		}
		else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN && BackData[1] == OUT && BackData[3] == IN)
 80008fc:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <Move_Straight+0x264>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d116      	bne.n	8000932 <Move_Straight+0x1e6>
 8000904:	4b2a      	ldr	r3, [pc, #168]	@ (80009b0 <Move_Straight+0x264>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d112      	bne.n	8000932 <Move_Straight+0x1e6>
 800090c:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <Move_Straight+0x264>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10e      	bne.n	8000932 <Move_Straight+0x1e6>
 8000914:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <Move_Straight+0x26c>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10a      	bne.n	8000932 <Move_Straight+0x1e6>
 800091c:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <Move_Straight+0x26c>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d106      	bne.n	8000932 <Move_Straight+0x1e6>
		{
			turn_s = 1;
 8000924:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <Move_Straight+0x270>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
			error_s = Error_S[3];
 800092a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800092c:	4a21      	ldr	r2, [pc, #132]	@ (80009b4 <Move_Straight+0x268>)
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	e02c      	b.n	800098c <Move_Straight+0x240>
		}
		else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN && BackData[1] == IN && BackData[3] == OUT)
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <Move_Straight+0x264>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d116      	bne.n	8000968 <Move_Straight+0x21c>
 800093a:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <Move_Straight+0x264>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d112      	bne.n	8000968 <Move_Straight+0x21c>
 8000942:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <Move_Straight+0x264>)
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10e      	bne.n	8000968 <Move_Straight+0x21c>
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <Move_Straight+0x26c>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10a      	bne.n	8000968 <Move_Straight+0x21c>
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <Move_Straight+0x26c>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d106      	bne.n	8000968 <Move_Straight+0x21c>
		{
			turn_s = 1;
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <Move_Straight+0x270>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
			error_s = Error_S[2];
 8000960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000962:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <Move_Straight+0x268>)
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	e011      	b.n	800098c <Move_Straight+0x240>
		}
		else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN)
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <Move_Straight+0x264>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10d      	bne.n	800098c <Move_Straight+0x240>
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <Move_Straight+0x264>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d109      	bne.n	800098c <Move_Straight+0x240>
 8000978:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <Move_Straight+0x264>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d105      	bne.n	800098c <Move_Straight+0x240>
		{
			turn_s = 1;
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <Move_Straight+0x270>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
			error_s = Error_S[1];
 8000986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000988:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <Move_Straight+0x268>)
 800098a:	6013      	str	r3, [r2, #0]
		}

	    if(turn_s == -1)
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <Move_Straight+0x270>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d114      	bne.n	80009c0 <Move_Straight+0x274>
		{
			Left_Speed = Left_ori;
 8000996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000998:	667b      	str	r3, [r7, #100]	@ 0x64
			Right_Speed = (Right_ori + error_s * Right_Adj);
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <Move_Straight+0x268>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80009a0:	fb02 f303 	mul.w	r3, r2, r3
 80009a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80009a6:	4413      	add	r3, r2
 80009a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80009aa:	e020      	b.n	80009ee <Move_Straight+0x2a2>
 80009ac:	080072f4 	.word	0x080072f4
 80009b0:	200002bc 	.word	0x200002bc
 80009b4:	200001e0 	.word	0x200001e0
 80009b8:	200002d0 	.word	0x200002d0
 80009bc:	200001dc 	.word	0x200001dc
		}
		else if(turn_s == 1)
 80009c0:	4b88      	ldr	r3, [pc, #544]	@ (8000be4 <Move_Straight+0x498>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d10a      	bne.n	80009de <Move_Straight+0x292>
		{
			Left_Speed = (Left_ori + error_s * Left_Adj);
 80009c8:	4b87      	ldr	r3, [pc, #540]	@ (8000be8 <Move_Straight+0x49c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80009d4:	4413      	add	r3, r2
 80009d6:	667b      	str	r3, [r7, #100]	@ 0x64
			Right_Speed = Right_ori;
 80009d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009da:	663b      	str	r3, [r7, #96]	@ 0x60
 80009dc:	e007      	b.n	80009ee <Move_Straight+0x2a2>
		}
		else if(turn_s == 0)
 80009de:	4b81      	ldr	r3, [pc, #516]	@ (8000be4 <Move_Straight+0x498>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d103      	bne.n	80009ee <Move_Straight+0x2a2>
		{
			Left_Speed = Left_ori;
 80009e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009e8:	667b      	str	r3, [r7, #100]	@ 0x64
			Right_Speed = Right_ori;
 80009ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009ec:	663b      	str	r3, [r7, #96]	@ 0x60
		}

		if(Left_Speed > 100)
 80009ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009f0:	2b64      	cmp	r3, #100	@ 0x64
 80009f2:	dd02      	ble.n	80009fa <Move_Straight+0x2ae>
			Left_Speed = 100;
 80009f4:	2364      	movs	r3, #100	@ 0x64
 80009f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80009f8:	e014      	b.n	8000a24 <Move_Straight+0x2d8>
		else if (Left_Speed < -100)
 80009fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009fc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000a00:	da03      	bge.n	8000a0a <Move_Straight+0x2be>
			Left_Speed = -100;
 8000a02:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8000a08:	e00c      	b.n	8000a24 <Move_Straight+0x2d8>
		else if(Right_Speed > 100)
 8000a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a0c:	2b64      	cmp	r3, #100	@ 0x64
 8000a0e:	dd02      	ble.n	8000a16 <Move_Straight+0x2ca>
			Right_Speed = 100;
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	663b      	str	r3, [r7, #96]	@ 0x60
 8000a14:	e006      	b.n	8000a24 <Move_Straight+0x2d8>
		else if (Right_Speed < -100)
 8000a16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a18:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000a1c:	da02      	bge.n	8000a24 <Move_Straight+0x2d8>
			Right_Speed = -100;
 8000a1e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000a22:	663b      	str	r3, [r7, #96]	@ 0x60

		Move_Twin_Wheels(Left_Speed, Right_Speed);
 8000a24:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000a26:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000a28:	f001 fb98 	bl	800215c <Move_Twin_Wheels>
		else if (Right_Speed < -100)
			Right_Speed = -100;

		Move_Twin_Wheels(Right_Speed, Left_Speed);
	}
}
 8000a2c:	e14f      	b.n	8000cce <Move_Straight+0x582>
	else if(direction == 2)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	f040 814c 	bne.w	8000cce <Move_Straight+0x582>
		 Left_ori = 72;//53
 8000a36:	2348      	movs	r3, #72	@ 0x48
 8000a38:	657b      	str	r3, [r7, #84]	@ 0x54
		 Right_ori = 70;//50
 8000a3a:	2346      	movs	r3, #70	@ 0x46
 8000a3c:	653b      	str	r3, [r7, #80]	@ 0x50
		 Left_Adj = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
		 Right_Adj = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64bb      	str	r3, [r7, #72]	@ 0x48
		 Left_Speed = 0, Right_Speed = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	663b      	str	r3, [r7, #96]	@ 0x60
		 int Error_set[5] = {2,4,3,5,10};
 8000a4e:	4b67      	ldr	r3, [pc, #412]	@ (8000bec <Move_Straight+0x4a0>)
 8000a50:	f107 040c 	add.w	r4, r7, #12
 8000a54:	461d      	mov	r5, r3
 8000a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5a:	682b      	ldr	r3, [r5, #0]
 8000a5c:	6023      	str	r3, [r4, #0]
		 for(int i = 0; i < 5; i++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000a62:	e00e      	b.n	8000a82 <Move_Straight+0x336>
			 Error_S[i] = Error_set[i];
 8000a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	3368      	adds	r3, #104	@ 0x68
 8000a6a:	443b      	add	r3, r7
 8000a6c:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 8000a70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	3368      	adds	r3, #104	@ 0x68
 8000a76:	443b      	add	r3, r7
 8000a78:	f843 2c34 	str.w	r2, [r3, #-52]
		 for(int i = 0; i < 5; i++)
 8000a7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a7e:	3301      	adds	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	dded      	ble.n	8000a64 <Move_Straight+0x318>
		if(BackData[3] == OUT && BackData[2] == OUT && BackData[1] == OUT)
 8000a88:	4b59      	ldr	r3, [pc, #356]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10b      	bne.n	8000aa8 <Move_Straight+0x35c>
 8000a90:	4b57      	ldr	r3, [pc, #348]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d107      	bne.n	8000aa8 <Move_Straight+0x35c>
 8000a98:	4b55      	ldr	r3, [pc, #340]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d103      	bne.n	8000aa8 <Move_Straight+0x35c>
			error_s = Error_S[4];
 8000aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000aa2:	4a51      	ldr	r2, [pc, #324]	@ (8000be8 <Move_Straight+0x49c>)
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e0d4      	b.n	8000c52 <Move_Straight+0x506>
		else if(BackData[3] == IN && BackData[2] == OUT && BackData[1] == OUT && GrayData[3] == IN && GrayData[1] == OUT)
 8000aa8:	4b51      	ldr	r3, [pc, #324]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d117      	bne.n	8000ae0 <Move_Straight+0x394>
 8000ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d113      	bne.n	8000ae0 <Move_Straight+0x394>
 8000ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d10f      	bne.n	8000ae0 <Move_Straight+0x394>
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10b      	bne.n	8000ae0 <Move_Straight+0x394>
 8000ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d107      	bne.n	8000ae0 <Move_Straight+0x394>
			turn_s = -1;
 8000ad0:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <Move_Straight+0x498>)
 8000ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad6:	601a      	str	r2, [r3, #0]
			error_s = Error_S[3];
 8000ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ada:	4a43      	ldr	r2, [pc, #268]	@ (8000be8 <Move_Straight+0x49c>)
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e0b8      	b.n	8000c52 <Move_Straight+0x506>
		else if(BackData[3] == IN && BackData[2] == OUT && BackData[1] == OUT && GrayData[3] == OUT && GrayData[1] == IN)
 8000ae0:	4b43      	ldr	r3, [pc, #268]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d117      	bne.n	8000b18 <Move_Straight+0x3cc>
 8000ae8:	4b41      	ldr	r3, [pc, #260]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d113      	bne.n	8000b18 <Move_Straight+0x3cc>
 8000af0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d10f      	bne.n	8000b18 <Move_Straight+0x3cc>
 8000af8:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10b      	bne.n	8000b18 <Move_Straight+0x3cc>
 8000b00:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <Move_Straight+0x3cc>
			turn_s = -1;
 8000b08:	4b36      	ldr	r3, [pc, #216]	@ (8000be4 <Move_Straight+0x498>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
			error_s = Error_S[2];
 8000b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b12:	4a35      	ldr	r2, [pc, #212]	@ (8000be8 <Move_Straight+0x49c>)
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e09c      	b.n	8000c52 <Move_Straight+0x506>
		else if(BackData[3] == IN && BackData[2] == OUT && BackData[1] == OUT)
 8000b18:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10f      	bne.n	8000b40 <Move_Straight+0x3f4>
 8000b20:	4b33      	ldr	r3, [pc, #204]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d10b      	bne.n	8000b40 <Move_Straight+0x3f4>
 8000b28:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d107      	bne.n	8000b40 <Move_Straight+0x3f4>
			turn_s = -1;
 8000b30:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <Move_Straight+0x498>)
 8000b32:	f04f 32ff 	mov.w	r2, #4294967295
 8000b36:	601a      	str	r2, [r3, #0]
			error_s = Error_S[1];
 8000b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <Move_Straight+0x49c>)
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e088      	b.n	8000c52 <Move_Straight+0x506>
		else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 8000b40:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10f      	bne.n	8000b68 <Move_Straight+0x41c>
 8000b48:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10b      	bne.n	8000b68 <Move_Straight+0x41c>
 8000b50:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d107      	bne.n	8000b68 <Move_Straight+0x41c>
			turn_s = -1;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <Move_Straight+0x498>)
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5e:	601a      	str	r2, [r3, #0]
			error_s = Error_S[0];
 8000b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b62:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <Move_Straight+0x49c>)
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e074      	b.n	8000c52 <Move_Straight+0x506>
		else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN)
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10b      	bne.n	8000b88 <Move_Straight+0x43c>
 8000b70:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d107      	bne.n	8000b88 <Move_Straight+0x43c>
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d103      	bne.n	8000b88 <Move_Straight+0x43c>
			turn_s = 0;
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <Move_Straight+0x498>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	e064      	b.n	8000c52 <Move_Straight+0x506>
		else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d10e      	bne.n	8000bae <Move_Straight+0x462>
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d10a      	bne.n	8000bae <Move_Straight+0x462>
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d106      	bne.n	8000bae <Move_Straight+0x462>
			turn_s = 1;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <Move_Straight+0x498>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
			error_s = 3;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <Move_Straight+0x49c>)
 8000ba8:	2203      	movs	r2, #3
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e051      	b.n	8000c52 <Move_Straight+0x506>
		else if(BackData[3] == OUT && BackData[2] == OUT && BackData[1] == IN && GrayData[3] == OUT && GrayData[1] == IN)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d120      	bne.n	8000bf8 <Move_Straight+0x4ac>
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d11c      	bne.n	8000bf8 <Move_Straight+0x4ac>
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <Move_Straight+0x4a4>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d118      	bne.n	8000bf8 <Move_Straight+0x4ac>
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d114      	bne.n	8000bf8 <Move_Straight+0x4ac>
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <Move_Straight+0x4a8>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d110      	bne.n	8000bf8 <Move_Straight+0x4ac>
			turn_s = 1;
 8000bd6:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <Move_Straight+0x498>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
			error_s = Error_S[3];
 8000bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bde:	4a02      	ldr	r2, [pc, #8]	@ (8000be8 <Move_Straight+0x49c>)
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e036      	b.n	8000c52 <Move_Straight+0x506>
 8000be4:	200001dc 	.word	0x200001dc
 8000be8:	200001e0 	.word	0x200001e0
 8000bec:	08007308 	.word	0x08007308
 8000bf0:	200002d0 	.word	0x200002d0
 8000bf4:	200002bc 	.word	0x200002bc
		else if(BackData[3] == OUT && BackData[2] == OUT && BackData[1] == IN && GrayData[3] == IN && GrayData[1] == OUT)
 8000bf8:	4b37      	ldr	r3, [pc, #220]	@ (8000cd8 <Move_Straight+0x58c>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d116      	bne.n	8000c2e <Move_Straight+0x4e2>
 8000c00:	4b35      	ldr	r3, [pc, #212]	@ (8000cd8 <Move_Straight+0x58c>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d112      	bne.n	8000c2e <Move_Straight+0x4e2>
 8000c08:	4b33      	ldr	r3, [pc, #204]	@ (8000cd8 <Move_Straight+0x58c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10e      	bne.n	8000c2e <Move_Straight+0x4e2>
 8000c10:	4b32      	ldr	r3, [pc, #200]	@ (8000cdc <Move_Straight+0x590>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10a      	bne.n	8000c2e <Move_Straight+0x4e2>
 8000c18:	4b30      	ldr	r3, [pc, #192]	@ (8000cdc <Move_Straight+0x590>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d106      	bne.n	8000c2e <Move_Straight+0x4e2>
			turn_s = 1;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <Move_Straight+0x594>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
			error_s = Error_S[2];
 8000c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c28:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce4 <Move_Straight+0x598>)
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e011      	b.n	8000c52 <Move_Straight+0x506>
		else if(BackData[3] == OUT && BackData[2] == OUT && BackData[1] == IN)
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <Move_Straight+0x58c>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d10d      	bne.n	8000c52 <Move_Straight+0x506>
 8000c36:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <Move_Straight+0x58c>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d109      	bne.n	8000c52 <Move_Straight+0x506>
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <Move_Straight+0x58c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d105      	bne.n	8000c52 <Move_Straight+0x506>
			turn_s = 1;
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <Move_Straight+0x594>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
			error_s = Error_S[1];
 8000c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ce4 <Move_Straight+0x598>)
 8000c50:	6013      	str	r3, [r2, #0]
		if(turn_s == -1)
 8000c52:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <Move_Straight+0x594>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5a:	d105      	bne.n	8000c68 <Move_Straight+0x51c>
			Left_Speed = 60;
 8000c5c:	233c      	movs	r3, #60	@ 0x3c
 8000c5e:	667b      	str	r3, [r7, #100]	@ 0x64
			Right_Speed = -Right_ori;
 8000c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c62:	425b      	negs	r3, r3
 8000c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c66:	e013      	b.n	8000c90 <Move_Straight+0x544>
		else if(turn_s == 1)
 8000c68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <Move_Straight+0x594>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d105      	bne.n	8000c7c <Move_Straight+0x530>
			Left_Speed = -Left_ori;
 8000c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c72:	425b      	negs	r3, r3
 8000c74:	667b      	str	r3, [r7, #100]	@ 0x64
			Right_Speed = 60;
 8000c76:	233c      	movs	r3, #60	@ 0x3c
 8000c78:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c7a:	e009      	b.n	8000c90 <Move_Straight+0x544>
		else if(turn_s == 0)
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <Move_Straight+0x594>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d105      	bne.n	8000c90 <Move_Straight+0x544>
			Left_Speed = -Left_ori;
 8000c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c86:	425b      	negs	r3, r3
 8000c88:	667b      	str	r3, [r7, #100]	@ 0x64
			Right_Speed = -Right_ori;
 8000c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	663b      	str	r3, [r7, #96]	@ 0x60
		if(Left_Speed > 100)
 8000c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000c92:	2b64      	cmp	r3, #100	@ 0x64
 8000c94:	dd02      	ble.n	8000c9c <Move_Straight+0x550>
			Left_Speed = 100;
 8000c96:	2364      	movs	r3, #100	@ 0x64
 8000c98:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c9a:	e014      	b.n	8000cc6 <Move_Straight+0x57a>
		else if (Left_Speed < -100)
 8000c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000c9e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000ca2:	da03      	bge.n	8000cac <Move_Straight+0x560>
			Left_Speed = -100;
 8000ca4:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000ca8:	667b      	str	r3, [r7, #100]	@ 0x64
 8000caa:	e00c      	b.n	8000cc6 <Move_Straight+0x57a>
		else if(Right_Speed > 100)
 8000cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000cae:	2b64      	cmp	r3, #100	@ 0x64
 8000cb0:	dd02      	ble.n	8000cb8 <Move_Straight+0x56c>
			Right_Speed = 100;
 8000cb2:	2364      	movs	r3, #100	@ 0x64
 8000cb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8000cb6:	e006      	b.n	8000cc6 <Move_Straight+0x57a>
		else if (Right_Speed < -100)
 8000cb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000cba:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000cbe:	da02      	bge.n	8000cc6 <Move_Straight+0x57a>
			Right_Speed = -100;
 8000cc0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000cc4:	663b      	str	r3, [r7, #96]	@ 0x60
		Move_Twin_Wheels(Right_Speed, Left_Speed);
 8000cc6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000cc8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000cca:	f001 fa47 	bl	800215c <Move_Twin_Wheels>
}
 8000cce:	bf00      	nop
 8000cd0:	3768      	adds	r7, #104	@ 0x68
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200002d0 	.word	0x200002d0
 8000cdc:	200002bc 	.word	0x200002bc
 8000ce0:	200001dc 	.word	0x200001dc
 8000ce4:	200001e0 	.word	0x200001e0

08000ce8 <Move_Stop>:

//直行停止函数
//direction: 0 0物块前进后停止；1 1物块前进后停止；2 2物块前进后停止；3 后退后停止

void Move_Stop(int direction)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	if(direction == 0)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d13b      	bne.n	8000d6e <Move_Stop+0x86>
	{
		int fact = 1;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]

		for(int i = 0; i < 1000 && fact == 1; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	e02e      	b.n	8000d5e <Move_Stop+0x76>
		{
			Move_Straight(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f7ff fd23 	bl	800074c <Move_Straight>
			HAL_Delay(1);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f002 f8c6 	bl	8002e98 <HAL_Delay>
			if(BackData[0] == IN && BackData[1] == IN && BackData[2] == IN && BackData[3] == IN && BackData[4] == IN )
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc4 <Move_Stop+0xdc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d121      	bne.n	8000d58 <Move_Stop+0x70>
 8000d14:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc4 <Move_Stop+0xdc>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d11d      	bne.n	8000d58 <Move_Stop+0x70>
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <Move_Stop+0xdc>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d119      	bne.n	8000d58 <Move_Stop+0x70>
 8000d24:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <Move_Stop+0xdc>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d115      	bne.n	8000d58 <Move_Stop+0x70>
 8000d2c:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <Move_Stop+0xdc>)
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d111      	bne.n	8000d58 <Move_Stop+0x70>
			{
				Move_Twin_Wheels(-80, -80);			//0, 0
 8000d34:	f06f 014f 	mvn.w	r1, #79	@ 0x4f
 8000d38:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 8000d3c:	f001 fa0e 	bl	800215c <Move_Twin_Wheels>
				HAL_Delay(50  );	//100			//50
 8000d40:	2032      	movs	r0, #50	@ 0x32
 8000d42:	f002 f8a9 	bl	8002e98 <HAL_Delay>
				Move_Twin_Wheels(0, 0);			//0, 0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f001 fa07 	bl	800215c <Move_Twin_Wheels>
				HAL_Delay(100);	//100			//50
 8000d4e:	2064      	movs	r0, #100	@ 0x64
 8000d50:	f002 f8a2 	bl	8002e98 <HAL_Delay>
				fact = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 1000 && fact == 1; i++)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d64:	da2a      	bge.n	8000dbc <Move_Stop+0xd4>
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d0c9      	beq.n	8000d00 <Move_Stop+0x18>
		Move_Twin_Wheels(-67, -67);		//-70, -70
		HAL_Delay(19);	//70			//120
		Move_Twin_Wheels(0, 0);			//0, 0
		HAL_Delay(100);	//100			//50
	}
}
 8000d6c:	e026      	b.n	8000dbc <Move_Stop+0xd4>
	else if(direction == 1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d110      	bne.n	8000d96 <Move_Stop+0xae>
		Move_Twin_Wheels(-72, -70);		//-70, -70
 8000d74:	f06f 0145 	mvn.w	r1, #69	@ 0x45
 8000d78:	f06f 0047 	mvn.w	r0, #71	@ 0x47
 8000d7c:	f001 f9ee 	bl	800215c <Move_Twin_Wheels>
	    HAL_Delay(50);	//70			//120
 8000d80:	2032      	movs	r0, #50	@ 0x32
 8000d82:	f002 f889 	bl	8002e98 <HAL_Delay>
		Move_Twin_Wheels(0, 0);			//0, 0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f001 f9e7 	bl	800215c <Move_Twin_Wheels>
		HAL_Delay(100);	//100			//50
 8000d8e:	2064      	movs	r0, #100	@ 0x64
 8000d90:	f002 f882 	bl	8002e98 <HAL_Delay>
}
 8000d94:	e012      	b.n	8000dbc <Move_Stop+0xd4>
	else if(direction == 2)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d10f      	bne.n	8000dbc <Move_Stop+0xd4>
		Move_Twin_Wheels(-67, -67);		//-70, -70
 8000d9c:	f06f 0142 	mvn.w	r1, #66	@ 0x42
 8000da0:	f06f 0042 	mvn.w	r0, #66	@ 0x42
 8000da4:	f001 f9da 	bl	800215c <Move_Twin_Wheels>
		HAL_Delay(19);	//70			//120
 8000da8:	2013      	movs	r0, #19
 8000daa:	f002 f875 	bl	8002e98 <HAL_Delay>
		Move_Twin_Wheels(0, 0);			//0, 0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2000      	movs	r0, #0
 8000db2:	f001 f9d3 	bl	800215c <Move_Twin_Wheels>
		HAL_Delay(100);	//100			//50
 8000db6:	2064      	movs	r0, #100	@ 0x64
 8000db8:	f002 f86e 	bl	8002e98 <HAL_Delay>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200002d0 	.word	0x200002d0

08000dc8 <Judge_cross>:

int Judge_cross(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	if(GrayData[0] == IN && GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN && GrayData[4] == IN)
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <Judge_cross+0x3c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d111      	bne.n	8000df8 <Judge_cross+0x30>
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <Judge_cross+0x3c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10d      	bne.n	8000df8 <Judge_cross+0x30>
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <Judge_cross+0x3c>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <Judge_cross+0x30>
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <Judge_cross+0x3c>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d105      	bne.n	8000df8 <Judge_cross+0x30>
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <Judge_cross+0x3c>)
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <Judge_cross+0x30>
	{
		return 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <Judge_cross+0x32>
	}
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200002bc 	.word	0x200002bc

08000e08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	@ 0x30
 8000e0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	4b58      	ldr	r3, [pc, #352]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a57      	ldr	r2, [pc, #348]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b55      	ldr	r3, [pc, #340]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	4b51      	ldr	r3, [pc, #324]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a50      	ldr	r2, [pc, #320]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a49      	ldr	r2, [pc, #292]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b47      	ldr	r3, [pc, #284]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b43      	ldr	r3, [pc, #268]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a42      	ldr	r2, [pc, #264]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b40      	ldr	r3, [pc, #256]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	4b3c      	ldr	r3, [pc, #240]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a3b      	ldr	r2, [pc, #236]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b39      	ldr	r3, [pc, #228]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b35      	ldr	r3, [pc, #212]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a34      	ldr	r2, [pc, #208]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b32      	ldr	r3, [pc, #200]	@ (8000f84 <MX_GPIO_Init+0x17c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210f      	movs	r1, #15
 8000eca:	482f      	ldr	r0, [pc, #188]	@ (8000f88 <MX_GPIO_Init+0x180>)
 8000ecc:	f002 fed0 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4829      	ldr	r0, [pc, #164]	@ (8000f8c <MX_GPIO_Init+0x184>)
 8000ee6:	f002 fd0f 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eea:	2310      	movs	r3, #16
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4823      	ldr	r0, [pc, #140]	@ (8000f8c <MX_GPIO_Init+0x184>)
 8000efe:	f002 fd03 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Back_L2_Pin|Back_L1_Pin;
 8000f02:	2360      	movs	r3, #96	@ 0x60
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	481d      	ldr	r0, [pc, #116]	@ (8000f8c <MX_GPIO_Init+0x184>)
 8000f16:	f002 fcf7 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Back_M_Pin|Back_R1_Pin|Back_R2_Pin;
 8000f1a:	f242 0303 	movw	r3, #8195	@ 0x2003
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <MX_GPIO_Init+0x188>)
 8000f30:	f002 fcea 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin;
 8000f34:	230f      	movs	r3, #15
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <MX_GPIO_Init+0x180>)
 8000f4c:	f002 fcdc 	bl	8003908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Gray_L2_Pin|Gray_L1_Pin|Gray_M_Pin|Gray_R1_Pin
 8000f50:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000f54:	61fb      	str	r3, [r7, #28]
                          |Gray_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <MX_GPIO_Init+0x18c>)
 8000f66:	f002 fccf 	bl	8003908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 12, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	210c      	movs	r1, #12
 8000f6e:	2009      	movs	r0, #9
 8000f70:	f002 f891 	bl	8003096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f74:	2009      	movs	r0, #9
 8000f76:	f002 f8aa 	bl	80030ce <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3730      	adds	r7, #48	@ 0x30
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020400 	.word	0x40020400

08000f98 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af04      	add	r7, sp, #16
 8000f9e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim5.Instance) // 确认是正确的定时�?????????
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b81      	ldr	r3, [pc, #516]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d117      	bne.n	8000fdc <HAL_TIM_PeriodElapsedCallback+0x44>
    {
    	sprintf((char*)TransmitData, "巡线灰度传感器：%d %d %d %d %d \n"
 8000fac:	4b80      	ldr	r3, [pc, #512]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fae:	6858      	ldr	r0, [r3, #4]
 8000fb0:	4b7f      	ldr	r3, [pc, #508]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fb2:	689c      	ldr	r4, [r3, #8]
 8000fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a7e      	ldr	r2, [pc, #504]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000fba:	6852      	ldr	r2, [r2, #4]
 8000fbc:	497d      	ldr	r1, [pc, #500]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000fbe:	68c9      	ldr	r1, [r1, #12]
 8000fc0:	9102      	str	r1, [sp, #8]
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4602      	mov	r2, r0
 8000fca:	497b      	ldr	r1, [pc, #492]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000fcc:	487b      	ldr	r0, [pc, #492]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000fce:	f005 fce5 	bl	800699c <siprintf>
    			, GrayData[1],GrayData[2],GrayData[3],BackData[1],BackData[3]);
    	HAL_UART_Transmit_DMA(&huart3, TransmitData, sizeof(TransmitData));//传输信息
 8000fd2:	22c8      	movs	r2, #200	@ 0xc8
 8000fd4:	4979      	ldr	r1, [pc, #484]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000fd6:	487a      	ldr	r0, [pc, #488]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000fd8:	f004 fccc 	bl	8005974 <HAL_UART_Transmit_DMA>
    }//此为TIM5触发的中�?????????

    if(htim->Instance == htim6.Instance)		              //10ms中断
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b78      	ldr	r3, [pc, #480]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 80dd 	bne.w	80011a4 <HAL_TIM_PeriodElapsedCallback+0x20c>
    {
    	//前置灰度传感器刷新数�???
        if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_SET)
 8000fea:	2120      	movs	r1, #32
 8000fec:	4876      	ldr	r0, [pc, #472]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000fee:	f002 fe27 	bl	8003c40 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d103      	bne.n	8001000 <HAL_TIM_PeriodElapsedCallback+0x68>
        {
        	GrayData[0] = 1;
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e009      	b.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x7c>
        }
        else if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_RESET)
 8001000:	2120      	movs	r1, #32
 8001002:	4871      	ldr	r0, [pc, #452]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001004:	f002 fe1c 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x7c>
        {
        	GrayData[0] = 0;
 800100e:	4b68      	ldr	r3, [pc, #416]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_SET)
 8001014:	2140      	movs	r1, #64	@ 0x40
 8001016:	486c      	ldr	r0, [pc, #432]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001018:	f002 fe12 	bl	8003c40 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d103      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0x92>
        {
        	GrayData[1] = 1;
 8001022:	4b63      	ldr	r3, [pc, #396]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001024:	2201      	movs	r2, #1
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	e009      	b.n	800103e <HAL_TIM_PeriodElapsedCallback+0xa6>
        }
        else if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_RESET)
 800102a:	2140      	movs	r1, #64	@ 0x40
 800102c:	4866      	ldr	r0, [pc, #408]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800102e:	f002 fe07 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0xa6>
        {
        	GrayData[1] = 0;
 8001038:	4b5d      	ldr	r3, [pc, #372]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
        }
        if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_SET)
 800103e:	2180      	movs	r1, #128	@ 0x80
 8001040:	4861      	ldr	r0, [pc, #388]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001042:	f002 fdfd 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d103      	bne.n	8001054 <HAL_TIM_PeriodElapsedCallback+0xbc>
        {
        	GrayData[2] = 1;
 800104c:	4b58      	ldr	r3, [pc, #352]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800104e:	2201      	movs	r2, #1
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	e009      	b.n	8001068 <HAL_TIM_PeriodElapsedCallback+0xd0>
        }
        else if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_RESET)
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	485c      	ldr	r0, [pc, #368]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001058:	f002 fdf2 	bl	8003c40 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_TIM_PeriodElapsedCallback+0xd0>
        {
        	GrayData[2] = 0;
 8001062:	4b53      	ldr	r3, [pc, #332]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
        }
        if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_SET)
 8001068:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800106c:	4856      	ldr	r0, [pc, #344]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800106e:	f002 fde7 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d103      	bne.n	8001080 <HAL_TIM_PeriodElapsedCallback+0xe8>
        {
        	GrayData[3] = 1;
 8001078:	4b4d      	ldr	r3, [pc, #308]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800107a:	2201      	movs	r2, #1
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	e00a      	b.n	8001096 <HAL_TIM_PeriodElapsedCallback+0xfe>
        }
        else if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_RESET)
 8001080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001084:	4850      	ldr	r0, [pc, #320]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001086:	f002 fddb 	bl	8003c40 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <HAL_TIM_PeriodElapsedCallback+0xfe>
        {
        	GrayData[3] = 0;
 8001090:	4b47      	ldr	r3, [pc, #284]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
        }
        if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_SET)
 8001096:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109a:	484b      	ldr	r0, [pc, #300]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800109c:	f002 fdd0 	bl	8003c40 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d103      	bne.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x116>
        {
        	GrayData[4] = 1;
 80010a6:	4b42      	ldr	r3, [pc, #264]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	e00a      	b.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x12c>
        }
        else if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_RESET)
 80010ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010b2:	4845      	ldr	r0, [pc, #276]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80010b4:	f002 fdc4 	bl	8003c40 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x12c>
        {
        	GrayData[4] = 0;
 80010be:	4b3c      	ldr	r3, [pc, #240]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
        }

        //后置灰度传感器刷新数�???
		if(HAL_GPIO_ReadPin(Back_L2_GPIO_Port, Back_L2_Pin) == GPIO_PIN_SET)
 80010c4:	2120      	movs	r1, #32
 80010c6:	4841      	ldr	r0, [pc, #260]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010c8:	f002 fdba 	bl	8003c40 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d103      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x142>
		{
			BackData[0] = 1;
 80010d2:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e009      	b.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x156>
		}
		else if(HAL_GPIO_ReadPin(Back_L2_GPIO_Port, Back_L2_Pin) == GPIO_PIN_RESET)
 80010da:	2120      	movs	r1, #32
 80010dc:	483b      	ldr	r0, [pc, #236]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010de:	f002 fdaf 	bl	8003c40 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x156>
		{
			BackData[0] = 0;
 80010e8:	4b32      	ldr	r3, [pc, #200]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(Back_L1_GPIO_Port, Back_L1_Pin) == GPIO_PIN_SET)
 80010ee:	2140      	movs	r1, #64	@ 0x40
 80010f0:	4836      	ldr	r0, [pc, #216]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x234>)
 80010f2:	f002 fda5 	bl	8003c40 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d103      	bne.n	8001104 <HAL_TIM_PeriodElapsedCallback+0x16c>
		{
			BackData[1] = 1;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	e009      	b.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x180>
		}
		else if(HAL_GPIO_ReadPin(Back_L1_GPIO_Port, Back_L1_Pin) == GPIO_PIN_RESET)
 8001104:	2140      	movs	r1, #64	@ 0x40
 8001106:	4831      	ldr	r0, [pc, #196]	@ (80011cc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001108:	f002 fd9a 	bl	8003c40 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x180>
		{
			BackData[1] = 0;
 8001112:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
		}
		if(HAL_GPIO_ReadPin(Back_M_GPIO_Port, Back_M_Pin) == GPIO_PIN_SET)
 8001118:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800111e:	f002 fd8f 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d103      	bne.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x198>
		{
			BackData[2] = 1;
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800112a:	2201      	movs	r2, #1
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	e00a      	b.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x1ae>
		}
		else if(HAL_GPIO_ReadPin(Back_M_GPIO_Port, Back_M_Pin) == GPIO_PIN_RESET)
 8001130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001134:	4826      	ldr	r0, [pc, #152]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001136:	f002 fd83 	bl	8003c40 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <HAL_TIM_PeriodElapsedCallback+0x1ae>
		{
			BackData[2] = 0;
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
		}
		if(HAL_GPIO_ReadPin(Back_R1_GPIO_Port, Back_R1_Pin) == GPIO_PIN_SET)
 8001146:	2101      	movs	r1, #1
 8001148:	4821      	ldr	r0, [pc, #132]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800114a:	f002 fd79 	bl	8003c40 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d103      	bne.n	800115c <HAL_TIM_PeriodElapsedCallback+0x1c4>
		{
			BackData[3] = 1;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001156:	2201      	movs	r2, #1
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	e009      	b.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		}
		else if(HAL_GPIO_ReadPin(Back_R1_GPIO_Port, Back_R1_Pin) == GPIO_PIN_RESET)
 800115c:	2101      	movs	r1, #1
 800115e:	481c      	ldr	r0, [pc, #112]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001160:	f002 fd6e 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		{
			BackData[3] = 0;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
		}
		if(HAL_GPIO_ReadPin(Back_R2_GPIO_Port, Back_R2_Pin) == GPIO_PIN_SET)
 8001170:	2102      	movs	r1, #2
 8001172:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001174:	f002 fd64 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d103      	bne.n	8001186 <HAL_TIM_PeriodElapsedCallback+0x1ee>
		{
			BackData[4] = 1;
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001180:	2201      	movs	r2, #1
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	e009      	b.n	800119a <HAL_TIM_PeriodElapsedCallback+0x202>
		}
		else if(HAL_GPIO_ReadPin(Back_R2_GPIO_Port, Back_R2_Pin) == GPIO_PIN_RESET)
 8001186:	2102      	movs	r1, #2
 8001188:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800118a:	f002 fd59 	bl	8003c40 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <HAL_TIM_PeriodElapsedCallback+0x202>
		{
			BackData[4] = 0;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
		}
		Timer_cnt++; // 1ms自增一次的定时器计数变量
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a0c      	ldr	r2, [pc, #48]	@ (80011d4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011a2:	6013      	str	r3, [r2, #0]
    }//此为TIM6触发的中�?????????
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	200003c0 	.word	0x200003c0
 80011b0:	200002bc 	.word	0x200002bc
 80011b4:	200002d0 	.word	0x200002d0
 80011b8:	0800731c 	.word	0x0800731c
 80011bc:	200001e4 	.word	0x200001e4
 80011c0:	20000498 	.word	0x20000498
 80011c4:	20000408 	.word	0x20000408
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40020800 	.word	0x40020800
 80011d4:	200002b4 	.word	0x200002b4

080011d8 <HAL_GPIO_EXTI_Callback>:
//TIM5每秒溢出触发回调函数向计算机发�?�参�???????


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET)
 80011e2:	2108      	movs	r1, #8
 80011e4:	4812      	ldr	r0, [pc, #72]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x58>)
 80011e6:	f002 fd2b 	bl	8003c40 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11a      	bne.n	8001226 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f001 fe51 	bl	8002e98 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET)
 80011f6:	2108      	movs	r1, #8
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x58>)
 80011fa:	f002 fd21 	bl	8003c40 <HAL_GPIO_ReadPin>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d110      	bne.n	8001226 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			if(path_selection <= 8)
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b08      	cmp	r3, #8
 800120a:	dc05      	bgt.n	8001218 <HAL_GPIO_EXTI_Callback+0x40>
			path_selection++;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x5c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001214:	6013      	str	r3, [r2, #0]
			else if(path_selection == 9)
			path_selection = 0;
		}
	}
}
 8001216:	e006      	b.n	8001226 <HAL_GPIO_EXTI_Callback+0x4e>
			else if(path_selection == 9)
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x5c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b09      	cmp	r3, #9
 800121e:	d102      	bne.n	8001226 <HAL_GPIO_EXTI_Callback+0x4e>
			path_selection = 0;
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	200002b0 	.word	0x200002b0

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	f6ad 4d88 	subw	sp, sp, #3208	@ 0xc88
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f001 fdb8 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 feba 	bl	8001fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f7ff fdde 	bl	8000e08 <MX_GPIO_Init>
  MX_DMA_Init();
 800124c:	f7ff f988 	bl	8000560 <MX_DMA_Init>
  MX_TIM2_Init();
 8001250:	f001 f8f2 	bl	8002438 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001254:	f001 f93c 	bl	80024d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001258:	f001 f9c6 	bl	80025e8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800125c:	f001 fa50 	bl	8002700 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001260:	f001 fa9c 	bl	800279c <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001264:	f001 fbfa 	bl	8002a5c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001268:	f001 fbce 	bl	8002a08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Engine_Init();
 800126c:	f000 ff86 	bl	800217c <Engine_Init>
  GraySensor_Init();
 8001270:	f000 ff9e 	bl	80021b0 <GraySensor_Init>
  HAL_TIM_Base_Start_IT(&htim5);//初始化TIM5，用于发送非阻塞信息
 8001274:	48ed      	ldr	r0, [pc, #948]	@ (800162c <main+0x3f4>)
 8001276:	f003 fa2d 	bl	80046d4 <HAL_TIM_Base_Start_IT>
  Robotic_Arm_Move(0);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 ffb0 	bl	80021e0 <Robotic_Arm_Move>
  HAL_Delay(2000);
 8001280:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001284:	f001 fe08 	bl	8002e98 <HAL_Delay>

  int path[10][80] = {{3,3,6,8,3,9,3,6,1,3,3,3,6,10,3,6,1,3,4,5,2,3,3,9,3,6,1,1,3,6,1,3,6,2,3,3,3,6,13,3,6,2,3,3,6,0}
 8001288:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800128c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001290:	4618      	mov	r0, r3
 8001292:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8001296:	461a      	mov	r2, r3
 8001298:	2100      	movs	r1, #0
 800129a:	f005 fb9f 	bl	80069dc <memset>
 800129e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012a2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012a6:	2203      	movs	r2, #3
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012ae:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012b2:	2203      	movs	r2, #3
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012ba:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012be:	2206      	movs	r2, #6
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012c6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012ca:	2208      	movs	r2, #8
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012d2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012d6:	2203      	movs	r2, #3
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012de:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012e2:	2209      	movs	r2, #9
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012ea:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012ee:	2203      	movs	r2, #3
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80012f6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80012fa:	2206      	movs	r2, #6
 80012fc:	61da      	str	r2, [r3, #28]
 80012fe:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001302:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001306:	2201      	movs	r2, #1
 8001308:	621a      	str	r2, [r3, #32]
 800130a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800130e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001312:	2203      	movs	r2, #3
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
 8001316:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800131a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800131e:	2203      	movs	r2, #3
 8001320:	629a      	str	r2, [r3, #40]	@ 0x28
 8001322:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001326:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800132a:	2203      	movs	r2, #3
 800132c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800132e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001332:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001336:	2206      	movs	r2, #6
 8001338:	631a      	str	r2, [r3, #48]	@ 0x30
 800133a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800133e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001342:	220a      	movs	r2, #10
 8001344:	635a      	str	r2, [r3, #52]	@ 0x34
 8001346:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800134a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800134e:	2203      	movs	r2, #3
 8001350:	639a      	str	r2, [r3, #56]	@ 0x38
 8001352:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001356:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800135a:	2206      	movs	r2, #6
 800135c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800135e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001362:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001366:	2201      	movs	r2, #1
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
 800136a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800136e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001372:	2203      	movs	r2, #3
 8001374:	645a      	str	r2, [r3, #68]	@ 0x44
 8001376:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800137a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800137e:	2204      	movs	r2, #4
 8001380:	649a      	str	r2, [r3, #72]	@ 0x48
 8001382:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001386:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800138a:	2205      	movs	r2, #5
 800138c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800138e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001392:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001396:	2202      	movs	r2, #2
 8001398:	651a      	str	r2, [r3, #80]	@ 0x50
 800139a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800139e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013a2:	2203      	movs	r2, #3
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80013a6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013aa:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013ae:	2203      	movs	r2, #3
 80013b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80013b2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013b6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013ba:	2209      	movs	r2, #9
 80013bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013be:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013c2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013c6:	2203      	movs	r2, #3
 80013c8:	661a      	str	r2, [r3, #96]	@ 0x60
 80013ca:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013ce:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013d2:	2206      	movs	r2, #6
 80013d4:	665a      	str	r2, [r3, #100]	@ 0x64
 80013d6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013da:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013de:	2201      	movs	r2, #1
 80013e0:	669a      	str	r2, [r3, #104]	@ 0x68
 80013e2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013e6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013ea:	2201      	movs	r2, #1
 80013ec:	66da      	str	r2, [r3, #108]	@ 0x6c
 80013ee:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013f2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80013f6:	2203      	movs	r2, #3
 80013f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80013fa:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80013fe:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001402:	2206      	movs	r2, #6
 8001404:	675a      	str	r2, [r3, #116]	@ 0x74
 8001406:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800140a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800140e:	2201      	movs	r2, #1
 8001410:	679a      	str	r2, [r3, #120]	@ 0x78
 8001412:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001416:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800141a:	2203      	movs	r2, #3
 800141c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800141e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001422:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001426:	2206      	movs	r2, #6
 8001428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800142c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001430:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001434:	2202      	movs	r2, #2
 8001436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800143a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800143e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001442:	2203      	movs	r2, #3
 8001444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8001448:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800144c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001450:	2203      	movs	r2, #3
 8001452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001456:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800145a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800145e:	2203      	movs	r2, #3
 8001460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001464:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001468:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800146c:	2206      	movs	r2, #6
 800146e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001472:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001476:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800147a:	220d      	movs	r2, #13
 800147c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001480:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001484:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001488:	2203      	movs	r2, #3
 800148a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800148e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001492:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001496:	2206      	movs	r2, #6
 8001498:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800149c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80014a0:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80014a4:	2202      	movs	r2, #2
 80014a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80014aa:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80014ae:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80014b2:	2203      	movs	r2, #3
 80014b4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80014b8:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80014bc:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80014c0:	2203      	movs	r2, #3
 80014c2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80014c6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80014ca:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80014ce:	2206      	movs	r2, #6
 80014d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80014d4:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80014d8:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80014dc:	2203      	movs	r2, #3
 80014de:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80014e2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80014e6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80014ea:	2206      	movs	r2, #6
 80014ec:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 80014f0:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80014f4:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80014f8:	2201      	movs	r2, #1
 80014fa:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 80014fe:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001502:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001506:	2203      	movs	r2, #3
 8001508:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 800150c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001510:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001514:	220b      	movs	r2, #11
 8001516:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 800151a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800151e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001522:	2203      	movs	r2, #3
 8001524:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8001528:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800152c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001530:	2206      	movs	r2, #6
 8001532:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 8001536:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800153a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800153e:	2202      	movs	r2, #2
 8001540:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 8001544:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001548:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800154c:	2203      	movs	r2, #3
 800154e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 8001552:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001556:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800155a:	2203      	movs	r2, #3
 800155c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 8001560:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001564:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001568:	2206      	movs	r2, #6
 800156a:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 800156e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001572:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001576:	2201      	movs	r2, #1
 8001578:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800157c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001580:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001584:	220c      	movs	r2, #12
 8001586:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 800158a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800158e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001592:	2205      	movs	r2, #5
 8001594:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8001598:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800159c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80015a0:	2201      	movs	r2, #1
 80015a2:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 80015a6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80015aa:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80015ae:	2201      	movs	r2, #1
 80015b0:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 80015b4:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80015b8:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80015bc:	2203      	movs	r2, #3
 80015be:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 80015c2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80015c6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80015ca:	2203      	movs	r2, #3
 80015cc:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 80015d0:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80015d4:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80015d8:	220b      	movs	r2, #11
 80015da:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 80015de:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80015e2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80015e6:	2205      	movs	r2, #5
 80015e8:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 80015ec:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80015f0:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80015f4:	2201      	movs	r2, #1
 80015f6:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 80015fa:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80015fe:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001602:	2203      	movs	r2, #3
 8001604:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 8001608:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800160c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001610:	2203      	movs	r2, #3
 8001612:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 8001616:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800161a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800161e:	2203      	movs	r2, #3
 8001620:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 8001624:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001628:	e002      	b.n	8001630 <main+0x3f8>
 800162a:	bf00      	nop
 800162c:	200003c0 	.word	0x200003c0
 8001630:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001634:	2203      	movs	r2, #3
 8001636:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 800163a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800163e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001642:	2206      	movs	r2, #6
 8001644:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 8001648:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800164c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001650:	2201      	movs	r2, #1
 8001652:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
 8001656:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800165a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800165e:	2203      	movs	r2, #3
 8001660:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8001664:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001668:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800166c:	220c      	movs	r2, #12
 800166e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
 8001672:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001676:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800167a:	2203      	movs	r2, #3
 800167c:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
 8001680:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001684:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001688:	2206      	movs	r2, #6
 800168a:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
 800168e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001692:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001696:	2201      	movs	r2, #1
 8001698:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
 800169c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80016a0:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80016a4:	2203      	movs	r2, #3
 80016a6:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
 80016aa:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80016ae:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80016b2:	2203      	movs	r2, #3
 80016b4:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
 80016b8:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80016bc:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80016c0:	220b      	movs	r2, #11
 80016c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
 80016c6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80016ca:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80016ce:	2203      	movs	r2, #3
 80016d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
 80016d4:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80016d8:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80016dc:	2203      	movs	r2, #3
 80016de:	f8c3 229c 	str.w	r2, [r3, #668]	@ 0x29c
 80016e2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80016e6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80016ea:	2206      	movs	r2, #6
 80016ec:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
 80016f0:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80016f4:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80016f8:	2202      	movs	r2, #2
 80016fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
 80016fe:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001702:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001706:	2203      	movs	r2, #3
 8001708:	f8c3 22a8 	str.w	r2, [r3, #680]	@ 0x2a8
 800170c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001710:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001714:	2203      	movs	r2, #3
 8001716:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac
 800171a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800171e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001722:	2203      	movs	r2, #3
 8001724:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
 8001728:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800172c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001730:	2203      	movs	r2, #3
 8001732:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
 8001736:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800173a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800173e:	2206      	movs	r2, #6
 8001740:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
 8001744:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001748:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800174c:	2201      	movs	r2, #1
 800174e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 8001752:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001756:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800175a:	2203      	movs	r2, #3
 800175c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 8001760:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001764:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001768:	220c      	movs	r2, #12
 800176a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800176e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001772:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001776:	2203      	movs	r2, #3
 8001778:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
 800177c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001780:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001784:	2203      	movs	r2, #3
 8001786:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
 800178a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800178e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001792:	2206      	movs	r2, #6
 8001794:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
 8001798:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800179c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80017a0:	2201      	movs	r2, #1
 80017a2:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 80017a6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80017aa:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80017ae:	2203      	movs	r2, #3
 80017b0:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0
 80017b4:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80017b8:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80017bc:	2209      	movs	r2, #9
 80017be:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
 80017c2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80017c6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80017ca:	2203      	movs	r2, #3
 80017cc:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8
 80017d0:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80017d4:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80017d8:	2206      	movs	r2, #6
 80017da:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc
 80017de:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80017e2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80017e6:	2202      	movs	r2, #2
 80017e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
 80017ec:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80017f0:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80017f4:	2203      	movs	r2, #3
 80017f6:	f8c3 23e4 	str.w	r2, [r3, #996]	@ 0x3e4
 80017fa:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80017fe:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001802:	2203      	movs	r2, #3
 8001804:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
 8001808:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800180c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001810:	2206      	movs	r2, #6
 8001812:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
 8001816:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800181a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800181e:	2201      	movs	r2, #1
 8001820:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
 8001824:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001828:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800182c:	2203      	movs	r2, #3
 800182e:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
 8001832:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001836:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800183a:	2206      	movs	r2, #6
 800183c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
 8001840:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001844:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001848:	220a      	movs	r2, #10
 800184a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
 800184e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001852:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001856:	2203      	movs	r2, #3
 8001858:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
 800185c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001860:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001864:	2203      	movs	r2, #3
 8001866:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800186a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800186e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001872:	2204      	movs	r2, #4
 8001874:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001878:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800187c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001880:	2205      	movs	r2, #5
 8001882:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
 8001886:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800188a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800188e:	2201      	movs	r2, #1
 8001890:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
 8001894:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001898:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800189c:	2203      	movs	r2, #3
 800189e:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 80018a2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80018a6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80018aa:	2203      	movs	r2, #3
 80018ac:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 80018b0:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80018b4:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80018b8:	2206      	movs	r2, #6
 80018ba:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 80018be:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80018c2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80018c6:	2201      	movs	r2, #1
 80018c8:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 80018cc:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80018d0:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80018d4:	2203      	movs	r2, #3
 80018d6:	f8c3 2424 	str.w	r2, [r3, #1060]	@ 0x424
 80018da:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80018de:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80018e2:	2203      	movs	r2, #3
 80018e4:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
 80018e8:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80018ec:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80018f0:	220b      	movs	r2, #11
 80018f2:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
 80018f6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80018fa:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80018fe:	2205      	movs	r2, #5
 8001900:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8001904:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001908:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800190c:	2201      	movs	r2, #1
 800190e:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
 8001912:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001916:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800191a:	2203      	movs	r2, #3
 800191c:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
 8001920:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001924:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001928:	2203      	movs	r2, #3
 800192a:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
 800192e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001932:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001936:	2203      	movs	r2, #3
 8001938:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
 800193c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001940:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001944:	2206      	movs	r2, #6
 8001946:	f8c3 2444 	str.w	r2, [r3, #1092]	@ 0x444
 800194a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800194e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001952:	2201      	movs	r2, #1
 8001954:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
 8001958:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800195c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001960:	2203      	movs	r2, #3
 8001962:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
 8001966:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 800196a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800196e:	220c      	movs	r2, #12
 8001970:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
 8001974:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001978:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800197c:	2203      	movs	r2, #3
 800197e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
 8001982:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001986:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 800198a:	2203      	movs	r2, #3
 800198c:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
 8001990:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001994:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001998:	2206      	movs	r2, #6
 800199a:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 800199e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80019a2:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80019a6:	2201      	movs	r2, #1
 80019a8:	f8c3 250c 	str.w	r2, [r3, #1292]	@ 0x50c
 80019ac:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80019b0:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80019b4:	2203      	movs	r2, #3
 80019b6:	f8c3 2510 	str.w	r2, [r3, #1296]	@ 0x510
 80019ba:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80019be:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80019c2:	2206      	movs	r2, #6
 80019c4:	f8c3 2514 	str.w	r2, [r3, #1300]	@ 0x514
 80019c8:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80019cc:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80019d0:	2202      	movs	r2, #2
 80019d2:	f8c3 2518 	str.w	r2, [r3, #1304]	@ 0x518
 80019d6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80019da:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80019de:	2203      	movs	r2, #3
 80019e0:	f8c3 251c 	str.w	r2, [r3, #1308]	@ 0x51c
 80019e4:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80019e8:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80019ec:	2206      	movs	r2, #6
 80019ee:	f8c3 2520 	str.w	r2, [r3, #1312]	@ 0x520
 80019f2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 80019f6:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 80019fa:	2202      	movs	r2, #2
 80019fc:	f8c3 2524 	str.w	r2, [r3, #1316]	@ 0x524
 8001a00:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a04:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a08:	220e      	movs	r2, #14
 8001a0a:	f8c3 2528 	str.w	r2, [r3, #1320]	@ 0x528
 8001a0e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a12:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a16:	2205      	movs	r2, #5
 8001a18:	f8c3 252c 	str.w	r2, [r3, #1324]	@ 0x52c
 8001a1c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a20:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a24:	2201      	movs	r2, #1
 8001a26:	f8c3 2530 	str.w	r2, [r3, #1328]	@ 0x530
 8001a2a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a2e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a32:	2203      	movs	r2, #3
 8001a34:	f8c3 2534 	str.w	r2, [r3, #1332]	@ 0x534
 8001a38:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a3c:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a40:	2203      	movs	r2, #3
 8001a42:	f8c3 2538 	str.w	r2, [r3, #1336]	@ 0x538
 8001a46:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a4a:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a4e:	2206      	movs	r2, #6
 8001a50:	f8c3 253c 	str.w	r2, [r3, #1340]	@ 0x53c
 8001a54:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a58:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f8c3 2540 	str.w	r2, [r3, #1344]	@ 0x540
 8001a62:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a66:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a6a:	220e      	movs	r2, #14
 8001a6c:	f8c3 2544 	str.w	r2, [r3, #1348]	@ 0x544
 8001a70:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a74:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f8c3 2548 	str.w	r2, [r3, #1352]	@ 0x548
 8001a7e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a82:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a86:	2201      	movs	r2, #1
 8001a88:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c
 8001a8c:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a90:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001a94:	2203      	movs	r2, #3
 8001a96:	f8c3 2550 	str.w	r2, [r3, #1360]	@ 0x550
 8001a9a:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001a9e:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f8c3 2554 	str.w	r2, [r3, #1364]	@ 0x554
 8001aa8:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001aac:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001ab0:	2206      	movs	r2, #6
 8001ab2:	f8c3 2558 	str.w	r2, [r3, #1368]	@ 0x558
 8001ab6:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001aba:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f8c3 255c 	str.w	r2, [r3, #1372]	@ 0x55c
 8001ac4:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001ac8:	f6a3 4388 	subw	r3, r3, #3208	@ 0xc88
 8001acc:	220e      	movs	r2, #14
 8001ace:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(path[path_selection][cross_cnt] == 0){
 8001ad2:	4bad      	ldr	r3, [pc, #692]	@ (8001d88 <main+0xb50>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4bad      	ldr	r3, [pc, #692]	@ (8001d8c <main+0xb54>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001ade:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4403      	add	r3, r0
 8001aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <main+0x8c8>
//		  Move_Twin_Wheels(70, 70);
//		  HAL_Delay(80);
		  Move_Twin_Wheels(0, 0);
 8001af4:	2100      	movs	r1, #0
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 fb30 	bl	800215c <Move_Twin_Wheels>
		  while(1);
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <main+0x8c4>
	  }else if(path[path_selection][cross_cnt] == 1){
 8001b00:	4ba1      	ldr	r3, [pc, #644]	@ (8001d88 <main+0xb50>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4ba1      	ldr	r3, [pc, #644]	@ (8001d8c <main+0xb54>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001b0c:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4403      	add	r3, r0
 8001b1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d109      	bne.n	8001b36 <main+0x8fe>
		  Move_Turn(1,0);
 8001b22:	2100      	movs	r1, #0
 8001b24:	2001      	movs	r0, #1
 8001b26:	f7fe fd53 	bl	80005d0 <Move_Turn>
		  cross_cnt++;
 8001b2a:	4b98      	ldr	r3, [pc, #608]	@ (8001d8c <main+0xb54>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a96      	ldr	r2, [pc, #600]	@ (8001d8c <main+0xb54>)
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e200      	b.n	8001f38 <main+0xd00>

//		  for(int i = 0; i < 20; i++){
//			  Move_Straight(1);
//		  }
	  }else if(path[path_selection][cross_cnt] == 2){
 8001b36:	4b94      	ldr	r3, [pc, #592]	@ (8001d88 <main+0xb50>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b94      	ldr	r3, [pc, #592]	@ (8001d8c <main+0xb54>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001b42:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4403      	add	r3, r0
 8001b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d109      	bne.n	8001b6c <main+0x934>
		  Move_Turn(2,0);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f7fe fd38 	bl	80005d0 <Move_Turn>
		  cross_cnt++;
 8001b60:	4b8a      	ldr	r3, [pc, #552]	@ (8001d8c <main+0xb54>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a89      	ldr	r2, [pc, #548]	@ (8001d8c <main+0xb54>)
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e1e5      	b.n	8001f38 <main+0xd00>

//		  for(int i = 0; i < 20; i++){
//			  Move_Straight(1);
//		  }
	  }else if(path[path_selection][cross_cnt] == 3){
 8001b6c:	4b86      	ldr	r3, [pc, #536]	@ (8001d88 <main+0xb50>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b86      	ldr	r3, [pc, #536]	@ (8001d8c <main+0xb54>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001b78:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4403      	add	r3, r0
 8001b86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d103      	bne.n	8001b96 <main+0x95e>
		  Move_Straight(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7fe fddc 	bl	800074c <Move_Straight>
 8001b94:	e1d0      	b.n	8001f38 <main+0xd00>
	  }
//	  else if(path[path_selection][cross_cnt] == 4){
//		  Move_Straight(3);
//	  }
	  else if(path[path_selection][cross_cnt] == 5)
 8001b96:	4b7c      	ldr	r3, [pc, #496]	@ (8001d88 <main+0xb50>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d8c <main+0xb54>)
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001ba2:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4403      	add	r3, r0
 8001bb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d146      	bne.n	8001c46 <main+0xa0e>
	  {
//		  Move_Straight(2);
		  if(Back_first == 1)
 8001bb8:	4b75      	ldr	r3, [pc, #468]	@ (8001d90 <main+0xb58>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10c      	bne.n	8001bda <main+0x9a2>
		  {
			  Move_Twin_Wheels(-72,-71);
 8001bc0:	f06f 0146 	mvn.w	r1, #70	@ 0x46
 8001bc4:	f06f 0047 	mvn.w	r0, #71	@ 0x47
 8001bc8:	f000 fac8 	bl	800215c <Move_Twin_Wheels>
			  HAL_Delay(800);
 8001bcc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001bd0:	f001 f962 	bl	8002e98 <HAL_Delay>
			  Back_first = 0;
 8001bd4:	4b6e      	ldr	r3, [pc, #440]	@ (8001d90 <main+0xb58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
		  }
		  Move_Twin_Wheels(-72,-71);
 8001bda:	f06f 0146 	mvn.w	r1, #70	@ 0x46
 8001bde:	f06f 0047 	mvn.w	r0, #71	@ 0x47
 8001be2:	f000 fabb 	bl	800215c <Move_Twin_Wheels>
	      if(BackData[0] == IN && BackData[1] == IN && BackData[2] == IN && BackData[3] == IN && BackData[4] == IN)
 8001be6:	4b6b      	ldr	r3, [pc, #428]	@ (8001d94 <main+0xb5c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 81a4 	bne.w	8001f38 <main+0xd00>
 8001bf0:	4b68      	ldr	r3, [pc, #416]	@ (8001d94 <main+0xb5c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 819f 	bne.w	8001f38 <main+0xd00>
 8001bfa:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <main+0xb5c>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 819a 	bne.w	8001f38 <main+0xd00>
 8001c04:	4b63      	ldr	r3, [pc, #396]	@ (8001d94 <main+0xb5c>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 8195 	bne.w	8001f38 <main+0xd00>
 8001c0e:	4b61      	ldr	r3, [pc, #388]	@ (8001d94 <main+0xb5c>)
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 8190 	bne.w	8001f38 <main+0xd00>
	      {
			  Move_Twin_Wheels(80, 80);
 8001c18:	2150      	movs	r1, #80	@ 0x50
 8001c1a:	2050      	movs	r0, #80	@ 0x50
 8001c1c:	f000 fa9e 	bl	800215c <Move_Twin_Wheels>
			  HAL_Delay(30);
 8001c20:	201e      	movs	r0, #30
 8001c22:	f001 f939 	bl	8002e98 <HAL_Delay>
			  Move_Twin_Wheels(0, 0);
 8001c26:	2100      	movs	r1, #0
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 fa97 	bl	800215c <Move_Twin_Wheels>
			  HAL_Delay(70);
 8001c2e:	2046      	movs	r0, #70	@ 0x46
 8001c30:	f001 f932 	bl	8002e98 <HAL_Delay>
			  Back_first = 1;
 8001c34:	4b56      	ldr	r3, [pc, #344]	@ (8001d90 <main+0xb58>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
			  cross_cnt++;
 8001c3a:	4b54      	ldr	r3, [pc, #336]	@ (8001d8c <main+0xb54>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a52      	ldr	r2, [pc, #328]	@ (8001d8c <main+0xb54>)
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e178      	b.n	8001f38 <main+0xd00>
	      }
	  }
	  else if(path[path_selection][cross_cnt] == 6)
 8001c46:	4b50      	ldr	r3, [pc, #320]	@ (8001d88 <main+0xb50>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b50      	ldr	r3, [pc, #320]	@ (8001d8c <main+0xb54>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001c52:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	4403      	add	r3, r0
 8001c60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d108      	bne.n	8001c7a <main+0xa42>
	  {
		  cross_cnt++;
 8001c68:	4b48      	ldr	r3, [pc, #288]	@ (8001d8c <main+0xb54>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <main+0xb54>)
 8001c70:	6013      	str	r3, [r2, #0]
		  Move_Stop(0);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff f838 	bl	8000ce8 <Move_Stop>
 8001c78:	e15e      	b.n	8001f38 <main+0xd00>
	  }
	  else if(path[path_selection][cross_cnt] == 7)
 8001c7a:	4b43      	ldr	r3, [pc, #268]	@ (8001d88 <main+0xb50>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b43      	ldr	r3, [pc, #268]	@ (8001d8c <main+0xb54>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001c86:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	4403      	add	r3, r0
 8001c94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c98:	2b07      	cmp	r3, #7
 8001c9a:	d109      	bne.n	8001cb0 <main+0xa78>
	  {
		  cross_cnt++;
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d8c <main+0xb54>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <main+0xb54>)
 8001ca4:	6013      	str	r3, [r2, #0]
		    Move_Turn(1,1);
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7fe fc91 	bl	80005d0 <Move_Turn>
 8001cae:	e143      	b.n	8001f38 <main+0xd00>
	  }
	  else if(path[path_selection][cross_cnt] == 8)
 8001cb0:	4b35      	ldr	r3, [pc, #212]	@ (8001d88 <main+0xb50>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b35      	ldr	r3, [pc, #212]	@ (8001d8c <main+0xb54>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001cbc:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4403      	add	r3, r0
 8001cca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d109      	bne.n	8001ce6 <main+0xaae>
	  {
		  Move_Turn(2,1);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f7fe fc7b 	bl	80005d0 <Move_Turn>
		  cross_cnt++;
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <main+0xb54>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d8c <main+0xb54>)
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e128      	b.n	8001f38 <main+0xd00>
	  }
	  else if(path[path_selection][cross_cnt] == 9)
 8001ce6:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <main+0xb50>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b28      	ldr	r3, [pc, #160]	@ (8001d8c <main+0xb54>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001cf2:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4403      	add	r3, r0
 8001d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d04:	2b09      	cmp	r3, #9
 8001d06:	d11a      	bne.n	8001d3e <main+0xb06>
	  {
			//刹车至轮胎中心
		  cross_cnt++;
 8001d08:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <main+0xb54>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d8c <main+0xb54>)
 8001d10:	6013      	str	r3, [r2, #0]
		  Move_Twin_Wheels(60, 60);			//0, 0
 8001d12:	213c      	movs	r1, #60	@ 0x3c
 8001d14:	203c      	movs	r0, #60	@ 0x3c
 8001d16:	f000 fa21 	bl	800215c <Move_Twin_Wheels>
		  HAL_Delay(200);	//100			//50
 8001d1a:	20c8      	movs	r0, #200	@ 0xc8
 8001d1c:	f001 f8bc 	bl	8002e98 <HAL_Delay>
		  Move_Twin_Wheels(0, 0);			//0, 0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 fa1a 	bl	800215c <Move_Twin_Wheels>
		  HAL_Delay(100);	//100			//50
 8001d28:	2064      	movs	r0, #100	@ 0x64
 8001d2a:	f001 f8b5 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f000 fa56 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(2500);
 8001d34:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001d38:	f001 f8ae 	bl	8002e98 <HAL_Delay>
 8001d3c:	e0fc      	b.n	8001f38 <main+0xd00>
	  }
	  else if(path[path_selection][cross_cnt] == 10)
 8001d3e:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <main+0xb50>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <main+0xb54>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001d4a:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4403      	add	r3, r0
 8001d58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d5c:	2b0a      	cmp	r3, #10
 8001d5e:	d11b      	bne.n	8001d98 <main+0xb60>
	  {
		  Robotic_Arm_Move(2);
 8001d60:	2002      	movs	r0, #2
 8001d62:	f000 fa3d 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(2500);//
 8001d66:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001d6a:	f001 f895 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(0);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f000 fa36 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(1000);//
 8001d74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d78:	f001 f88e 	bl	8002e98 <HAL_Delay>
		  cross_cnt++;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <main+0xb54>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	4a02      	ldr	r2, [pc, #8]	@ (8001d8c <main+0xb54>)
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e0d7      	b.n	8001f38 <main+0xd00>
 8001d88:	200002b0 	.word	0x200002b0
 8001d8c:	200002ac 	.word	0x200002ac
 8001d90:	20000000 	.word	0x20000000
 8001d94:	200002d0 	.word	0x200002d0
	  }
	  else if(path[path_selection][cross_cnt] == 11)
 8001d98:	4b83      	ldr	r3, [pc, #524]	@ (8001fa8 <main+0xd70>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b83      	ldr	r3, [pc, #524]	@ (8001fac <main+0xd74>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001da4:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	4403      	add	r3, r0
 8001db2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001db6:	2b0b      	cmp	r3, #11
 8001db8:	d11a      	bne.n	8001df0 <main+0xbb8>
	  {
		  cross_cnt++;
 8001dba:	4b7c      	ldr	r3, [pc, #496]	@ (8001fac <main+0xd74>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a7a      	ldr	r2, [pc, #488]	@ (8001fac <main+0xd74>)
 8001dc2:	6013      	str	r3, [r2, #0]
		  Move_Twin_Wheels(60, 60);			//0, 0
 8001dc4:	213c      	movs	r1, #60	@ 0x3c
 8001dc6:	203c      	movs	r0, #60	@ 0x3c
 8001dc8:	f000 f9c8 	bl	800215c <Move_Twin_Wheels>
		  HAL_Delay(200);	//100			//50
 8001dcc:	20c8      	movs	r0, #200	@ 0xc8
 8001dce:	f001 f863 	bl	8002e98 <HAL_Delay>
		  Move_Twin_Wheels(0, 0);			//0, 0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 f9c1 	bl	800215c <Move_Twin_Wheels>
		  HAL_Delay(100);	//100			//50
 8001dda:	2064      	movs	r0, #100	@ 0x64
 8001ddc:	f001 f85c 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(3);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f9fd 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(3000);//
 8001de6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001dea:	f001 f855 	bl	8002e98 <HAL_Delay>
 8001dee:	e0a3      	b.n	8001f38 <main+0xd00>
	  }
	  else if(path[path_selection][cross_cnt] == 12)
 8001df0:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa8 <main+0xd70>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b6d      	ldr	r3, [pc, #436]	@ (8001fac <main+0xd74>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001dfc:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4403      	add	r3, r0
 8001e0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d12e      	bne.n	8001e70 <main+0xc38>
	  {
		  for(int i = 0; i < 800; i++){
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 3c84 	str.w	r3, [r7, #3204]	@ 0xc84
 8001e18:	e00a      	b.n	8001e30 <main+0xbf8>
			  Move_Straight(1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7fe fc96 	bl	800074c <Move_Straight>
			  HAL_Delay(1);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f001 f839 	bl	8002e98 <HAL_Delay>
		  for(int i = 0; i < 800; i++){
 8001e26:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	@ 0xc84
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f8c7 3c84 	str.w	r3, [r7, #3204]	@ 0xc84
 8001e30:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	@ 0xc84
 8001e34:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001e38:	dbef      	blt.n	8001e1a <main+0xbe2>
		  }
		  Move_Twin_Wheels(0, 0);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f98d 	bl	800215c <Move_Twin_Wheels>
		  HAL_Delay(50);
 8001e42:	2032      	movs	r0, #50	@ 0x32
 8001e44:	f001 f828 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(4);
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f000 f9c9 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(1300);//
 8001e4e:	f240 5014 	movw	r0, #1300	@ 0x514
 8001e52:	f001 f821 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(0);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f9c2 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(1000);//
 8001e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e60:	f001 f81a 	bl	8002e98 <HAL_Delay>
		  cross_cnt++;
 8001e64:	4b51      	ldr	r3, [pc, #324]	@ (8001fac <main+0xd74>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4a50      	ldr	r2, [pc, #320]	@ (8001fac <main+0xd74>)
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e063      	b.n	8001f38 <main+0xd00>
	  }
	  else if(path[path_selection][cross_cnt] == 13)
 8001e70:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa8 <main+0xd70>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b4d      	ldr	r3, [pc, #308]	@ (8001fac <main+0xd74>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001e7c:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4403      	add	r3, r0
 8001e8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e8e:	2b0d      	cmp	r3, #13
 8001e90:	d113      	bne.n	8001eba <main+0xc82>
	  {
		  Robotic_Arm_Move(6);
 8001e92:	2006      	movs	r0, #6
 8001e94:	f000 f9a4 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(5000);//
 8001e98:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e9c:	f000 fffc 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(0);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f000 f99d 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(500);//
 8001ea6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001eaa:	f000 fff5 	bl	8002e98 <HAL_Delay>
		  cross_cnt++;
 8001eae:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <main+0xd74>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4a3d      	ldr	r2, [pc, #244]	@ (8001fac <main+0xd74>)
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e03e      	b.n	8001f38 <main+0xd00>
	  }
	  else if(path[path_selection][cross_cnt] == 14)
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <main+0xd70>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <main+0xd74>)
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	f607 4388 	addw	r3, r7, #3208	@ 0xc88
 8001ec6:	f6a3 4188 	subw	r1, r3, #3208	@ 0xc88
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4403      	add	r3, r0
 8001ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ed8:	2b0e      	cmp	r3, #14
 8001eda:	d12d      	bne.n	8001f38 <main+0xd00>
	  {
		  for(int i = 0; i < 800; i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3c80 	str.w	r3, [r7, #3200]	@ 0xc80
 8001ee2:	e00a      	b.n	8001efa <main+0xcc2>
		  {
			  Move_Straight(1);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7fe fc31 	bl	800074c <Move_Straight>
			  HAL_Delay(1);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f000 ffd4 	bl	8002e98 <HAL_Delay>
		  for(int i = 0; i < 800; i++)
 8001ef0:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	@ 0xc80
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f8c7 3c80 	str.w	r3, [r7, #3200]	@ 0xc80
 8001efa:	f8d7 3c80 	ldr.w	r3, [r7, #3200]	@ 0xc80
 8001efe:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001f02:	dbef      	blt.n	8001ee4 <main+0xcac>
		  }
		  Move_Twin_Wheels(0, 0);
 8001f04:	2100      	movs	r1, #0
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 f928 	bl	800215c <Move_Twin_Wheels>
		  HAL_Delay(50);
 8001f0c:	2032      	movs	r0, #50	@ 0x32
 8001f0e:	f000 ffc3 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(5);
 8001f12:	2005      	movs	r0, #5
 8001f14:	f000 f964 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(8000);//
 8001f18:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8001f1c:	f000 ffbc 	bl	8002e98 <HAL_Delay>
		  Robotic_Arm_Move(0);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f000 f95d 	bl	80021e0 <Robotic_Arm_Move>
		  HAL_Delay(1000);//
 8001f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f2a:	f000 ffb5 	bl	8002e98 <HAL_Delay>
		  cross_cnt++;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <main+0xd74>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a1d      	ldr	r2, [pc, #116]	@ (8001fac <main+0xd74>)
 8001f36:	6013      	str	r3, [r2, #0]
	  }
	  if(Timer_cnt >= 600)
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <main+0xd78>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001f40:	db02      	blt.n	8001f48 <main+0xd10>
	  {
		  Cross_fact = 1;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <main+0xd7c>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
	  }

	  if(Judge_cross() == 1 && Cross_fact == 1){
 8001f48:	f7fe ff3e 	bl	8000dc8 <Judge_cross>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10e      	bne.n	8001f70 <main+0xd38>
 8001f52:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <main+0xd7c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10a      	bne.n	8001f70 <main+0xd38>
		  cross_cnt++;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <main+0xd74>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <main+0xd74>)
 8001f62:	6013      	str	r3, [r2, #0]
		  Timer_cnt = 0;
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <main+0xd78>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
		  Cross_fact = 0;
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <main+0xd7c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
	  }

	    if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // �?????????????测到按键按下
 8001f70:	2110      	movs	r1, #16
 8001f72:	4811      	ldr	r0, [pc, #68]	@ (8001fb8 <main+0xd80>)
 8001f74:	f001 fe64 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f ada9 	bne.w	8001ad2 <main+0x89a>
	    {
	        HAL_Delay(50); // 50ms单延迟，以便于消�?????????
 8001f80:	2032      	movs	r0, #50	@ 0x32
 8001f82:	f000 ff89 	bl	8002e98 <HAL_Delay>
	        if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // 再次确认按键确实被按�?????????
 8001f86:	2110      	movs	r1, #16
 8001f88:	480b      	ldr	r0, [pc, #44]	@ (8001fb8 <main+0xd80>)
 8001f8a:	f001 fe59 	bl	8003c40 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f47f ad9e 	bne.w	8001ad2 <main+0x89a>
	        {
	      	  HAL_PWR_EnterSTANDBYMode();
 8001f96:	f001 fe9d 	bl	8003cd4 <HAL_PWR_EnterSTANDBYMode>
	      	  break;
 8001f9a:	bf00      	nop
 8001f9c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f607 4788 	addw	r7, r7, #3208	@ 0xc88
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200002b0 	.word	0x200002b0
 8001fac:	200002ac 	.word	0x200002ac
 8001fb0:	200002b4 	.word	0x200002b4
 8001fb4:	200002b8 	.word	0x200002b8
 8001fb8:	40021000 	.word	0x40021000

08001fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b094      	sub	sp, #80	@ 0x50
 8001fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc2:	f107 0320 	add.w	r3, r7, #32
 8001fc6:	2230      	movs	r2, #48	@ 0x30
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fd06 	bl	80069dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <SystemClock_Config+0xcc>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	4a27      	ldr	r2, [pc, #156]	@ (8002088 <SystemClock_Config+0xcc>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <SystemClock_Config+0xcc>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	4b22      	ldr	r3, [pc, #136]	@ (800208c <SystemClock_Config+0xd0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a21      	ldr	r2, [pc, #132]	@ (800208c <SystemClock_Config+0xd0>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <SystemClock_Config+0xd0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002018:	2301      	movs	r3, #1
 800201a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800201c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002022:	2302      	movs	r3, #2
 8002024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002026:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800202a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800202c:	2308      	movs	r3, #8
 800202e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002030:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002034:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002036:	2302      	movs	r3, #2
 8002038:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800203a:	2304      	movs	r3, #4
 800203c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203e:	f107 0320 	add.w	r3, r7, #32
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fe5e 	bl	8003d04 <HAL_RCC_OscConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800204e:	f000 f81f 	bl	8002090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800205e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002068:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2105      	movs	r1, #5
 8002070:	4618      	mov	r0, r3
 8002072:	f002 f8bf 	bl	80041f4 <HAL_RCC_ClockConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800207c:	f000 f808 	bl	8002090 <Error_Handler>
  }
}
 8002080:	bf00      	nop
 8002082:	3750      	adds	r7, #80	@ 0x50
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
}
 8002096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <Error_Handler+0x8>

0800209c <Move_Left>:
{0x55, 0x55, 0x05, 0x06, 0x0A, 0x01, 0x00}
};

//TIM3左轮 TIM4右轮
void Move_Left(int velocity)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0e      	blt.n	80020c8 <Move_Left+0x2c>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_SET);
 80020aa:	2201      	movs	r2, #1
 80020ac:	2108      	movs	r1, #8
 80020ae:	4811      	ldr	r0, [pc, #68]	@ (80020f4 <Move_Left+0x58>)
 80020b0:	f001 fdde 	bl	8003c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2104      	movs	r1, #4
 80020b8:	480e      	ldr	r0, [pc, #56]	@ (80020f4 <Move_Left+0x58>)
 80020ba:	f001 fdd9 	bl	8003c70 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, velocity);
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <Move_Left+0x5c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
		}
}
 80020c6:	e011      	b.n	80020ec <Move_Left+0x50>
		else if(velocity < 0){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da0e      	bge.n	80020ec <Move_Left+0x50>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2108      	movs	r1, #8
 80020d2:	4808      	ldr	r0, [pc, #32]	@ (80020f4 <Move_Left+0x58>)
 80020d4:	f001 fdcc 	bl	8003c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
 80020d8:	2201      	movs	r2, #1
 80020da:	2104      	movs	r1, #4
 80020dc:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <Move_Left+0x58>)
 80020de:	f001 fdc7 	bl	8003c70 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	425a      	negs	r2, r3
 80020e6:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <Move_Left+0x5c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	20000330 	.word	0x20000330

080020fc <Move_Right>:

void Move_Right(int velocity)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0e      	blt.n	8002128 <Move_Right+0x2c>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_SET);
 800210a:	2201      	movs	r2, #1
 800210c:	2102      	movs	r1, #2
 800210e:	4811      	ldr	r0, [pc, #68]	@ (8002154 <Move_Right+0x58>)
 8002110:	f001 fdae 	bl	8003c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	2101      	movs	r1, #1
 8002118:	480e      	ldr	r0, [pc, #56]	@ (8002154 <Move_Right+0x58>)
 800211a:	f001 fda9 	bl	8003c70 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, velocity);
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <Move_Right+0x5c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
		}
}
 8002126:	e011      	b.n	800214c <Move_Right+0x50>
		else if(velocity < 0){
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	da0e      	bge.n	800214c <Move_Right+0x50>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2102      	movs	r1, #2
 8002132:	4808      	ldr	r0, [pc, #32]	@ (8002154 <Move_Right+0x58>)
 8002134:	f001 fd9c 	bl	8003c70 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	2101      	movs	r1, #1
 800213c:	4805      	ldr	r0, [pc, #20]	@ (8002154 <Move_Right+0x58>)
 800213e:	f001 fd97 	bl	8003c70 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	425a      	negs	r2, r3
 8002146:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <Move_Right+0x5c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40020c00 	.word	0x40020c00
 8002158:	20000378 	.word	0x20000378

0800215c <Move_Twin_Wheels>:
//分别控制左右轮 velocity 范围 -100 - -50  50 - 100

void Move_Twin_Wheels(int velocity_1 ,int velocity_2)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
	Move_Left(velocity_1);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff98 	bl	800209c <Move_Left>
	Move_Right(velocity_2);
 800216c:	6838      	ldr	r0, [r7, #0]
 800216e:	f7ff ffc5 	bl	80020fc <Move_Right>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <Engine_Init>:
//注意接线！！！
//65， 63几乎直行（偏右）


void Engine_Init()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);                       //开启10ms定时器中断
 8002180:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <Engine_Init+0x28>)
 8002182:	f002 faa7 	bl	80046d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002186:	2100      	movs	r1, #0
 8002188:	4807      	ldr	r0, [pc, #28]	@ (80021a8 <Engine_Init+0x2c>)
 800218a:	f002 fb6d 	bl	8004868 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800218e:	2100      	movs	r1, #0
 8002190:	4806      	ldr	r0, [pc, #24]	@ (80021ac <Engine_Init+0x30>)
 8002192:	f002 fb69 	bl	8004868 <HAL_TIM_PWM_Start_IT>
	Move_Twin_Wheels(0, 0);
 8002196:	2100      	movs	r1, #0
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff ffdf 	bl	800215c <Move_Twin_Wheels>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000408 	.word	0x20000408
 80021a8:	20000330 	.word	0x20000330
 80021ac:	20000378 	.word	0x20000378

080021b0 <GraySensor_Init>:


void GraySensor_Init()
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	GrayData[0] = 0;
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <GraySensor_Init+0x2c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
	GrayData[1] = 0;
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <GraySensor_Init+0x2c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
	GrayData[2] = 0;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <GraySensor_Init+0x2c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
	GrayData[3] = 0;
 80021c6:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <GraySensor_Init+0x2c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
	GrayData[4] = 0;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <GraySensor_Init+0x2c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	200002bc 	.word	0x200002bc

080021e0 <Robotic_Arm_Move>:

void Robotic_Arm_Move(int action_group)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Control_message[action_group], sizeof(Control_message[action_group]));
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <Robotic_Arm_Move+0x28>)
 80021f2:	4413      	add	r3, r2
 80021f4:	2207      	movs	r2, #7
 80021f6:	4619      	mov	r1, r3
 80021f8:	4804      	ldr	r0, [pc, #16]	@ (800220c <Robotic_Arm_Move+0x2c>)
 80021fa:	f003 fbbb 	bl	8005974 <HAL_UART_Transmit_DMA>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000004 	.word	0x20000004
 800220c:	20000450 	.word	0x20000450

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_MspInit+0x4c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a0f      	ldr	r2, [pc, #60]	@ (800225c <HAL_MspInit+0x4c>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_MspInit+0x4c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a08      	ldr	r2, [pc, #32]	@ (800225c <HAL_MspInit+0x4c>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_MspInit+0x4c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <NMI_Handler+0x4>

08002268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <MemManage_Handler+0x4>

08002278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <UsageFault_Handler+0x4>

08002288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b6:	f000 fdcf 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}

080022be <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80022c2:	2008      	movs	r0, #8
 80022c4:	f001 fcee 	bl	8003ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <DMA1_Stream1_IRQHandler+0x10>)
 80022d2:	f001 f8af 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200005a0 	.word	0x200005a0

080022e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <DMA1_Stream3_IRQHandler+0x10>)
 80022e6:	f001 f8a5 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000600 	.word	0x20000600

080022f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <DMA1_Stream5_IRQHandler+0x10>)
 80022fa:	f001 f89b 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200004e0 	.word	0x200004e0

08002308 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA1_Stream6_IRQHandler+0x10>)
 800230e:	f001 f891 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000540 	.word	0x20000540

0800231c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <TIM2_IRQHandler+0x10>)
 8002322:	f002 fbb7 	bl	8004a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200002e8 	.word	0x200002e8

08002330 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002334:	4802      	ldr	r0, [pc, #8]	@ (8002340 <TIM3_IRQHandler+0x10>)
 8002336:	f002 fbad 	bl	8004a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000330 	.word	0x20000330

08002344 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <TIM4_IRQHandler+0x10>)
 800234a:	f002 fba3 	bl	8004a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000378 	.word	0x20000378

08002358 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <USART2_IRQHandler+0x10>)
 800235e:	f003 fb79 	bl	8005a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000450 	.word	0x20000450

0800236c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <USART3_IRQHandler+0x10>)
 8002372:	f003 fb6f 	bl	8005a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000498 	.word	0x20000498

08002380 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <TIM5_IRQHandler+0x10>)
 8002386:	f002 fb85 	bl	8004a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200003c0 	.word	0x200003c0

08002394 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <TIM6_DAC_IRQHandler+0x10>)
 800239a:	f002 fb7b 	bl	8004a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000408 	.word	0x20000408

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f004 fb08 	bl	80069ec <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20020000 	.word	0x20020000
 8002408:	00000400 	.word	0x00000400
 800240c:	200002e4 	.word	0x200002e4
 8002410:	200007b0 	.word	0x200007b0

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	463b      	mov	r3, r7
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800245a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800245c:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <MX_TIM2_Init+0x94>)
 800245e:	2253      	movs	r2, #83	@ 0x53
 8002460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002468:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <MX_TIM2_Init+0x94>)
 800246a:	2263      	movs	r2, #99	@ 0x63
 800246c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247a:	4814      	ldr	r0, [pc, #80]	@ (80024cc <MX_TIM2_Init+0x94>)
 800247c:	f002 f8da 	bl	8004634 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002486:	f7ff fe03 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800248e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	@ (80024cc <MX_TIM2_Init+0x94>)
 8002498:	f002 fcae 	bl	8004df8 <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80024a2:	f7ff fdf5 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ae:	463b      	mov	r3, r7
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	@ (80024cc <MX_TIM2_Init+0x94>)
 80024b4:	f003 f97e 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80024be:	f7ff fde7 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200002e8 	.word	0x200002e8

080024d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b092      	sub	sp, #72	@ 0x48
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80024e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fe:	463b      	mov	r3, r7
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
 800250c:	615a      	str	r2, [r3, #20]
 800250e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002510:	4b33      	ldr	r3, [pc, #204]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002512:	4a34      	ldr	r2, [pc, #208]	@ (80025e4 <MX_TIM3_Init+0x114>)
 8002514:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002516:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002518:	2253      	movs	r2, #83	@ 0x53
 800251a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251c:	4b30      	ldr	r3, [pc, #192]	@ (80025e0 <MX_TIM3_Init+0x110>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002522:	4b2f      	ldr	r3, [pc, #188]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002524:	2263      	movs	r2, #99	@ 0x63
 8002526:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <MX_TIM3_Init+0x110>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002534:	482a      	ldr	r0, [pc, #168]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002536:	f002 f87d 	bl	8004634 <HAL_TIM_Base_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002540:	f7ff fda6 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800254a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800254e:	4619      	mov	r1, r3
 8002550:	4823      	ldr	r0, [pc, #140]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002552:	f002 fc51 	bl	8004df8 <HAL_TIM_ConfigClockSource>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800255c:	f7ff fd98 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002560:	481f      	ldr	r0, [pc, #124]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002562:	f002 f927 	bl	80047b4 <HAL_TIM_PWM_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800256c:	f7ff fd90 	bl	8002090 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002574:	2310      	movs	r3, #16
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800257c:	4619      	mov	r1, r3
 800257e:	4818      	ldr	r0, [pc, #96]	@ (80025e0 <MX_TIM3_Init+0x110>)
 8002580:	f002 fd01 	bl	8004f86 <HAL_TIM_SlaveConfigSynchro>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 800258a:	f7ff fd81 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	4810      	ldr	r0, [pc, #64]	@ (80025e0 <MX_TIM3_Init+0x110>)
 800259e:	f003 f909 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80025a8:	f7ff fd72 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ac:	2360      	movs	r3, #96	@ 0x60
 80025ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025bc:	463b      	mov	r3, r7
 80025be:	2200      	movs	r2, #0
 80025c0:	4619      	mov	r1, r3
 80025c2:	4807      	ldr	r0, [pc, #28]	@ (80025e0 <MX_TIM3_Init+0x110>)
 80025c4:	f002 fb56 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80025ce:	f7ff fd5f 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025d2:	4803      	ldr	r0, [pc, #12]	@ (80025e0 <MX_TIM3_Init+0x110>)
 80025d4:	f000 f9b6 	bl	8002944 <HAL_TIM_MspPostInit>

}
 80025d8:	bf00      	nop
 80025da:	3748      	adds	r7, #72	@ 0x48
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000330 	.word	0x20000330
 80025e4:	40000400 	.word	0x40000400

080025e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b092      	sub	sp, #72	@ 0x48
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80025fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002616:	463b      	mov	r3, r7
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
 8002624:	615a      	str	r2, [r3, #20]
 8002626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002628:	4b33      	ldr	r3, [pc, #204]	@ (80026f8 <MX_TIM4_Init+0x110>)
 800262a:	4a34      	ldr	r2, [pc, #208]	@ (80026fc <MX_TIM4_Init+0x114>)
 800262c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800262e:	4b32      	ldr	r3, [pc, #200]	@ (80026f8 <MX_TIM4_Init+0x110>)
 8002630:	2253      	movs	r2, #83	@ 0x53
 8002632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002634:	4b30      	ldr	r3, [pc, #192]	@ (80026f8 <MX_TIM4_Init+0x110>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800263a:	4b2f      	ldr	r3, [pc, #188]	@ (80026f8 <MX_TIM4_Init+0x110>)
 800263c:	2263      	movs	r2, #99	@ 0x63
 800263e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b2d      	ldr	r3, [pc, #180]	@ (80026f8 <MX_TIM4_Init+0x110>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b2c      	ldr	r3, [pc, #176]	@ (80026f8 <MX_TIM4_Init+0x110>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800264c:	482a      	ldr	r0, [pc, #168]	@ (80026f8 <MX_TIM4_Init+0x110>)
 800264e:	f001 fff1 	bl	8004634 <HAL_TIM_Base_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002658:	f7ff fd1a 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002666:	4619      	mov	r1, r3
 8002668:	4823      	ldr	r0, [pc, #140]	@ (80026f8 <MX_TIM4_Init+0x110>)
 800266a:	f002 fbc5 	bl	8004df8 <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002674:	f7ff fd0c 	bl	8002090 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002678:	481f      	ldr	r0, [pc, #124]	@ (80026f8 <MX_TIM4_Init+0x110>)
 800267a:	f002 f89b 	bl	80047b4 <HAL_TIM_PWM_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002684:	f7ff fd04 	bl	8002090 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800268c:	2310      	movs	r3, #16
 800268e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	4818      	ldr	r0, [pc, #96]	@ (80026f8 <MX_TIM4_Init+0x110>)
 8002698:	f002 fc75 	bl	8004f86 <HAL_TIM_SlaveConfigSynchro>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 80026a2:	f7ff fcf5 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	4810      	ldr	r0, [pc, #64]	@ (80026f8 <MX_TIM4_Init+0x110>)
 80026b6:	f003 f87d 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80026c0:	f7ff fce6 	bl	8002090 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c4:	2360      	movs	r3, #96	@ 0x60
 80026c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	4807      	ldr	r0, [pc, #28]	@ (80026f8 <MX_TIM4_Init+0x110>)
 80026dc:	f002 faca 	bl	8004c74 <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80026e6:	f7ff fcd3 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026ea:	4803      	ldr	r0, [pc, #12]	@ (80026f8 <MX_TIM4_Init+0x110>)
 80026ec:	f000 f92a 	bl	8002944 <HAL_TIM_MspPostInit>

}
 80026f0:	bf00      	nop
 80026f2:	3748      	adds	r7, #72	@ 0x48
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000378 	.word	0x20000378
 80026fc:	40000800 	.word	0x40000800

08002700 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	463b      	mov	r3, r7
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <MX_TIM5_Init+0x94>)
 800271e:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <MX_TIM5_Init+0x98>)
 8002720:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 8002722:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <MX_TIM5_Init+0x94>)
 8002724:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002728:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <MX_TIM5_Init+0x94>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <MX_TIM5_Init+0x94>)
 8002732:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002736:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <MX_TIM5_Init+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <MX_TIM5_Init+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002744:	4813      	ldr	r0, [pc, #76]	@ (8002794 <MX_TIM5_Init+0x94>)
 8002746:	f001 ff75 	bl	8004634 <HAL_TIM_Base_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002750:	f7ff fc9e 	bl	8002090 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002758:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	4619      	mov	r1, r3
 8002760:	480c      	ldr	r0, [pc, #48]	@ (8002794 <MX_TIM5_Init+0x94>)
 8002762:	f002 fb49 	bl	8004df8 <HAL_TIM_ConfigClockSource>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800276c:	f7ff fc90 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002778:	463b      	mov	r3, r7
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	@ (8002794 <MX_TIM5_Init+0x94>)
 800277e:	f003 f819 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002788:	f7ff fc82 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200003c0 	.word	0x200003c0
 8002798:	40000c00 	.word	0x40000c00

0800279c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a2:	463b      	mov	r3, r7
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <MX_TIM6_Init+0x64>)
 80027ac:	4a15      	ldr	r2, [pc, #84]	@ (8002804 <MX_TIM6_Init+0x68>)
 80027ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 80027b0:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <MX_TIM6_Init+0x64>)
 80027b2:	2253      	movs	r2, #83	@ 0x53
 80027b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <MX_TIM6_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80027bc:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <MX_TIM6_Init+0x64>)
 80027be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <MX_TIM6_Init+0x64>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027ca:	480d      	ldr	r0, [pc, #52]	@ (8002800 <MX_TIM6_Init+0x64>)
 80027cc:	f001 ff32 	bl	8004634 <HAL_TIM_Base_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80027d6:	f7ff fc5b 	bl	8002090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027e2:	463b      	mov	r3, r7
 80027e4:	4619      	mov	r1, r3
 80027e6:	4806      	ldr	r0, [pc, #24]	@ (8002800 <MX_TIM6_Init+0x64>)
 80027e8:	f002 ffe4 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80027f2:	f7ff fc4d 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000408 	.word	0x20000408
 8002804:	40001000 	.word	0x40001000

08002808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002818:	d116      	bne.n	8002848 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a43      	ldr	r2, [pc, #268]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	2101      	movs	r1, #1
 800283a:	201c      	movs	r0, #28
 800283c:	f000 fc2b 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002840:	201c      	movs	r0, #28
 8002842:	f000 fc44 	bl	80030ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002846:	e06e      	b.n	8002926 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a39      	ldr	r2, [pc, #228]	@ (8002934 <HAL_TIM_Base_MspInit+0x12c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d116      	bne.n	8002880 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	4a35      	ldr	r2, [pc, #212]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6413      	str	r3, [r2, #64]	@ 0x40
 8002862:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2103      	movs	r1, #3
 8002872:	201d      	movs	r0, #29
 8002874:	f000 fc0f 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002878:	201d      	movs	r0, #29
 800287a:	f000 fc28 	bl	80030ce <HAL_NVIC_EnableIRQ>
}
 800287e:	e052      	b.n	8002926 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2c      	ldr	r2, [pc, #176]	@ (8002938 <HAL_TIM_Base_MspInit+0x130>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d116      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a27      	ldr	r2, [pc, #156]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40
 800289a:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2103      	movs	r1, #3
 80028aa:	201e      	movs	r0, #30
 80028ac:	f000 fbf3 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028b0:	201e      	movs	r0, #30
 80028b2:	f000 fc0c 	bl	80030ce <HAL_NVIC_EnableIRQ>
}
 80028b6:	e036      	b.n	8002926 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM5)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d116      	bne.n	80028f0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	4a19      	ldr	r2, [pc, #100]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d2:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2105      	movs	r1, #5
 80028e2:	2032      	movs	r0, #50	@ 0x32
 80028e4:	f000 fbd7 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028e8:	2032      	movs	r0, #50	@ 0x32
 80028ea:	f000 fbf0 	bl	80030ce <HAL_NVIC_EnableIRQ>
}
 80028ee:	e01a      	b.n	8002926 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM6)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a12      	ldr	r2, [pc, #72]	@ (8002940 <HAL_TIM_Base_MspInit+0x138>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d115      	bne.n	8002926 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a0b      	ldr	r2, [pc, #44]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002904:	f043 0310 	orr.w	r3, r3, #16
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2107      	movs	r1, #7
 800291a:	2036      	movs	r0, #54	@ 0x36
 800291c:	f000 fbbb 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002920:	2036      	movs	r0, #54	@ 0x36
 8002922:	f000 fbd4 	bl	80030ce <HAL_NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	40000c00 	.word	0x40000c00
 8002940:	40001000 	.word	0x40001000

08002944 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a24      	ldr	r2, [pc, #144]	@ (80029f4 <HAL_TIM_MspPostInit+0xb0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d11e      	bne.n	80029a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b23      	ldr	r3, [pc, #140]	@ (80029f8 <HAL_TIM_MspPostInit+0xb4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_TIM_MspPostInit+0xb4>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <HAL_TIM_MspPostInit+0xb4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Engine_PWM_Left_Pin;
 8002982:	2340      	movs	r3, #64	@ 0x40
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002992:	2302      	movs	r3, #2
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Left_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	4817      	ldr	r0, [pc, #92]	@ (80029fc <HAL_TIM_MspPostInit+0xb8>)
 800299e:	f000 ffb3 	bl	8003908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029a2:	e023      	b.n	80029ec <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a15      	ldr	r2, [pc, #84]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d11e      	bne.n	80029ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <HAL_TIM_MspPostInit+0xb4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4a10      	ldr	r2, [pc, #64]	@ (80029f8 <HAL_TIM_MspPostInit+0xb4>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <HAL_TIM_MspPostInit+0xb4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Engine_PWM_Right_Pin;
 80029ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029dc:	2302      	movs	r3, #2
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Right_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4807      	ldr	r0, [pc, #28]	@ (8002a04 <HAL_TIM_MspPostInit+0xc0>)
 80029e8:	f000 ff8e 	bl	8003908 <HAL_GPIO_Init>
}
 80029ec:	bf00      	nop
 80029ee:	3728      	adds	r7, #40	@ 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40020c00 	.word	0x40020c00

08002a08 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a0e:	4a12      	ldr	r2, [pc, #72]	@ (8002a58 <MX_USART2_UART_Init+0x50>)
 8002a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a26:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a2e:	220c      	movs	r2, #12
 8002a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a32:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a3e:	4805      	ldr	r0, [pc, #20]	@ (8002a54 <MX_USART2_UART_Init+0x4c>)
 8002a40:	f002 ff48 	bl	80058d4 <HAL_UART_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a4a:	f7ff fb21 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000450 	.word	0x20000450
 8002a58:	40004400 	.word	0x40004400

08002a5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a60:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a62:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <MX_USART3_UART_Init+0x50>)
 8002a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a74:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a80:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a82:	220c      	movs	r2, #12
 8002a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a92:	4805      	ldr	r0, [pc, #20]	@ (8002aa8 <MX_USART3_UART_Init+0x4c>)
 8002a94:	f002 ff1e 	bl	80058d4 <HAL_UART_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a9e:	f7ff faf7 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000498 	.word	0x20000498
 8002aac:	40004800 	.word	0x40004800

08002ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08c      	sub	sp, #48	@ 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a97      	ldr	r2, [pc, #604]	@ (8002d2c <HAL_UART_MspInit+0x27c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f040 8091 	bne.w	8002bf6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	4b95      	ldr	r3, [pc, #596]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	4a94      	ldr	r2, [pc, #592]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae4:	4b92      	ldr	r3, [pc, #584]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	4a8d      	ldr	r2, [pc, #564]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b00:	4b8b      	ldr	r3, [pc, #556]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b1c:	2307      	movs	r3, #7
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	4619      	mov	r1, r3
 8002b26:	4883      	ldr	r0, [pc, #524]	@ (8002d34 <HAL_UART_MspInit+0x284>)
 8002b28:	f000 feee 	bl	8003908 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b2c:	4b82      	ldr	r3, [pc, #520]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b2e:	4a83      	ldr	r2, [pc, #524]	@ (8002d3c <HAL_UART_MspInit+0x28c>)
 8002b30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b32:	4b81      	ldr	r3, [pc, #516]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b34:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b40:	4b7d      	ldr	r3, [pc, #500]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b46:	4b7c      	ldr	r3, [pc, #496]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b54:	4b78      	ldr	r3, [pc, #480]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b5a:	4b77      	ldr	r3, [pc, #476]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b60:	4b75      	ldr	r3, [pc, #468]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b66:	4b74      	ldr	r3, [pc, #464]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b6c:	4872      	ldr	r0, [pc, #456]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b6e:	f000 fac9 	bl	8003104 <HAL_DMA_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002b78:	f7ff fa8a 	bl	8002090 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b82:	4a6d      	ldr	r2, [pc, #436]	@ (8002d38 <HAL_UART_MspInit+0x288>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b88:	4b6d      	ldr	r3, [pc, #436]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_UART_MspInit+0x294>)
 8002b8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002b90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b96:	4b6a      	ldr	r3, [pc, #424]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002b98:	2240      	movs	r2, #64	@ 0x40
 8002b9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9c:	4b68      	ldr	r3, [pc, #416]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba2:	4b67      	ldr	r3, [pc, #412]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002ba4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ba8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002baa:	4b65      	ldr	r3, [pc, #404]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb0:	4b63      	ldr	r3, [pc, #396]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002bb6:	4b62      	ldr	r3, [pc, #392]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bbc:	4b60      	ldr	r3, [pc, #384]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bc8:	485d      	ldr	r0, [pc, #372]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002bca:	f000 fa9b 	bl	8003104 <HAL_DMA_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002bd4:	f7ff fa5c 	bl	8002090 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a59      	ldr	r2, [pc, #356]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002bdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bde:	4a58      	ldr	r2, [pc, #352]	@ (8002d40 <HAL_UART_MspInit+0x290>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2026      	movs	r0, #38	@ 0x26
 8002bea:	f000 fa54 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bee:	2026      	movs	r0, #38	@ 0x26
 8002bf0:	f000 fa6d 	bl	80030ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002bf4:	e096      	b.n	8002d24 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a53      	ldr	r2, [pc, #332]	@ (8002d48 <HAL_UART_MspInit+0x298>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	f040 8091 	bne.w	8002d24 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b4a      	ldr	r3, [pc, #296]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a49      	ldr	r2, [pc, #292]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b47      	ldr	r3, [pc, #284]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	4a42      	ldr	r2, [pc, #264]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2e:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_UART_MspInit+0x280>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	4619      	mov	r1, r3
 8002c56:	483d      	ldr	r0, [pc, #244]	@ (8002d4c <HAL_UART_MspInit+0x29c>)
 8002c58:	f000 fe56 	bl	8003908 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d54 <HAL_UART_MspInit+0x2a4>)
 8002c60:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002c62:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c68:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c6a:	4b39      	ldr	r3, [pc, #228]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c76:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c7e:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c84:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c8a:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c90:	4b2f      	ldr	r3, [pc, #188]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c96:	4b2e      	ldr	r3, [pc, #184]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c9c:	482c      	ldr	r0, [pc, #176]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002c9e:	f000 fa31 	bl	8003104 <HAL_DMA_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002ca8:	f7ff f9f2 	bl	8002090 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cb2:	4a27      	ldr	r2, [pc, #156]	@ (8002d50 <HAL_UART_MspInit+0x2a0>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002cb8:	4b27      	ldr	r3, [pc, #156]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cba:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <HAL_UART_MspInit+0x2ac>)
 8002cbc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002cbe:	4b26      	ldr	r3, [pc, #152]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cc4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cc6:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cc8:	2240      	movs	r2, #64	@ 0x40
 8002cca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ccc:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd2:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cd8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cda:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cec:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf2:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002cf8:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002cfa:	f000 fa03 	bl	8003104 <HAL_DMA_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002d04:	f7ff f9c4 	bl	8002090 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <HAL_UART_MspInit+0x2a8>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2106      	movs	r1, #6
 8002d18:	2027      	movs	r0, #39	@ 0x27
 8002d1a:	f000 f9bc 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d1e:	2027      	movs	r0, #39	@ 0x27
 8002d20:	f000 f9d5 	bl	80030ce <HAL_NVIC_EnableIRQ>
}
 8002d24:	bf00      	nop
 8002d26:	3730      	adds	r7, #48	@ 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40004400 	.word	0x40004400
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	200004e0 	.word	0x200004e0
 8002d3c:	40026088 	.word	0x40026088
 8002d40:	20000540 	.word	0x20000540
 8002d44:	400260a0 	.word	0x400260a0
 8002d48:	40004800 	.word	0x40004800
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	200005a0 	.word	0x200005a0
 8002d54:	40026028 	.word	0x40026028
 8002d58:	20000600 	.word	0x20000600
 8002d5c:	40026058 	.word	0x40026058

08002d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d64:	f7ff fb56 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d68:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d6a:	490d      	ldr	r1, [pc, #52]	@ (8002da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d70:	e002      	b.n	8002d78 <LoopCopyDataInit>

08002d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d76:	3304      	adds	r3, #4

08002d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d7c:	d3f9      	bcc.n	8002d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d80:	4c0a      	ldr	r4, [pc, #40]	@ (8002dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d84:	e001      	b.n	8002d8a <LoopFillZerobss>

08002d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d88:	3204      	adds	r2, #4

08002d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d8c:	d3fb      	bcc.n	8002d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d8e:	f003 fe33 	bl	80069f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d92:	f7fe fa51 	bl	8001238 <main>
  bx  lr    
 8002d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da0:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8002da4:	080073ac 	.word	0x080073ac
  ldr r2, =_sbss
 8002da8:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002dac:	200007ac 	.word	0x200007ac

08002db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC_IRQHandler>
	...

08002db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <HAL_Init+0x40>)
 8002dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <HAL_Init+0x40>)
 8002dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd0:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a07      	ldr	r2, [pc, #28]	@ (8002df4 <HAL_Init+0x40>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f000 f94f 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de2:	200a      	movs	r0, #10
 8002de4:	f000 f808 	bl	8002df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de8:	f7ff fa12 	bl	8002210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_InitTick+0x54>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_InitTick+0x58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f967 	bl	80030ea <HAL_SYSTICK_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00e      	b.n	8002e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d80a      	bhi.n	8002e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f000 f92f 	bl	8003096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e38:	4a06      	ldr	r2, [pc, #24]	@ (8002e54 <HAL_InitTick+0x5c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000164 	.word	0x20000164
 8002e50:	2000016c 	.word	0x2000016c
 8002e54:	20000168 	.word	0x20000168

08002e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_IncTick+0x24>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <HAL_IncTick+0x24>)
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2000016c 	.word	0x2000016c
 8002e7c:	20000660 	.word	0x20000660

08002e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return uwTick;
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <HAL_GetTick+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000660 	.word	0x20000660

08002e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff ffee 	bl	8002e80 <HAL_GetTick>
 8002ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d005      	beq.n	8002ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002edc <HAL_Delay+0x44>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ebe:	bf00      	nop
 8002ec0:	f7ff ffde 	bl	8002e80 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d8f7      	bhi.n	8002ec0 <HAL_Delay+0x28>
  {
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000016c 	.word	0x2000016c

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800304c:	d301      	bcc.n	8003052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304e:	2301      	movs	r3, #1
 8003050:	e00f      	b.n	8003072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <SysTick_Config+0x40>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305a:	210f      	movs	r1, #15
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	f7ff ff8e 	bl	8002f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <SysTick_Config+0x40>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	@ (800307c <SysTick_Config+0x40>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff29 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff3e 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff8e 	bl	8002fd4 <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff5d 	bl	8002f80 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff31 	bl	8002f44 <__NVIC_EnableIRQ>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ffa2 	bl	800303c <SysTick_Config>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003110:	f7ff feb6 	bl	8002e80 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e099      	b.n	8003254 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003140:	e00f      	b.n	8003162 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003142:	f7ff fe9d 	bl	8002e80 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b05      	cmp	r3, #5
 800314e:	d908      	bls.n	8003162 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2203      	movs	r2, #3
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e078      	b.n	8003254 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e8      	bne.n	8003142 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4b38      	ldr	r3, [pc, #224]	@ (800325c <HAL_DMA_Init+0x158>)
 800317c:	4013      	ands	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d107      	bne.n	80031cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	4313      	orrs	r3, r2
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0307 	bic.w	r3, r3, #7
 80031e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d117      	bne.n	8003226 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fb01 	bl	8003810 <DMA_CheckFifoParam>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2240      	movs	r2, #64	@ 0x40
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003222:	2301      	movs	r3, #1
 8003224:	e016      	b.n	8003254 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fab8 	bl	80037a4 <DMA_CalcBaseAndBitshift>
 8003234:	4603      	mov	r3, r0
 8003236:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323c:	223f      	movs	r2, #63	@ 0x3f
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	f010803f 	.word	0xf010803f

08003260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003276:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_DMA_Start_IT+0x26>
 8003282:	2302      	movs	r3, #2
 8003284:	e040      	b.n	8003308 <HAL_DMA_Start_IT+0xa8>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d12f      	bne.n	80032fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa4a 	bl	8003748 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	223f      	movs	r2, #63	@ 0x3f
 80032ba:	409a      	lsls	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0216 	orr.w	r2, r2, #22
 80032ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e005      	b.n	8003306 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003306:	7dfb      	ldrb	r3, [r7, #23]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800331e:	f7ff fdaf 	bl	8002e80 <HAL_GetTick>
 8003322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	@ 0x80
 8003334:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e052      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0216 	bic.w	r2, r2, #22
 8003350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_DMA_Abort+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003392:	e013      	b.n	80033bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003394:	f7ff fd74 	bl	8002e80 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d90c      	bls.n	80033bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2203      	movs	r2, #3
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e015      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e4      	bne.n	8003394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	223f      	movs	r2, #63	@ 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d004      	beq.n	800340e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00c      	b.n	8003428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003440:	4b8e      	ldr	r3, [pc, #568]	@ (800367c <HAL_DMA_IRQHandler+0x248>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a8e      	ldr	r2, [pc, #568]	@ (8003680 <HAL_DMA_IRQHandler+0x24c>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	2208      	movs	r2, #8
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	2208      	movs	r2, #8
 800348e:	409a      	lsls	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	2201      	movs	r2, #1
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	2204      	movs	r2, #4
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	2210      	movs	r2, #16
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d043      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	2210      	movs	r2, #16
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d024      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e01f      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e016      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0208 	bic.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	2220      	movs	r2, #32
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 808f 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8087 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d136      	bne.n	800364c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0216 	bic.w	r2, r2, #22
 80035ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_DMA_IRQHandler+0x1da>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0208 	bic.w	r2, r2, #8
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	223f      	movs	r2, #63	@ 0x3f
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	d07e      	beq.n	8003740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
        }
        return;
 800364a:	e079      	b.n	8003740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01d      	beq.n	8003696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366c:	2b00      	cmp	r3, #0
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e02c      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
 800367a:	bf00      	nop
 800367c:	20000164 	.word	0x20000164
 8003680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d023      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e01e      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0210 	bic.w	r2, r2, #16
 80036b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d032      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d022      	beq.n	800372e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2205      	movs	r2, #5
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3301      	adds	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d307      	bcc.n	800371c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_DMA_IRQHandler+0x2cc>
 800371a:	e000      	b.n	800371e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800371c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e000      	b.n	8003742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003740:	bf00      	nop
    }
  }
}
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003764:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b40      	cmp	r3, #64	@ 0x40
 8003774:	d108      	bne.n	8003788 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003786:	e007      	b.n	8003798 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3b10      	subs	r3, #16
 80037b4:	4a14      	ldr	r2, [pc, #80]	@ (8003808 <DMA_CalcBaseAndBitshift+0x64>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037be:	4a13      	ldr	r2, [pc, #76]	@ (800380c <DMA_CalcBaseAndBitshift+0x68>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d909      	bls.n	80037e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	1d1a      	adds	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80037e4:	e007      	b.n	80037f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	aaaaaaab 	.word	0xaaaaaaab
 800380c:	08007360 	.word	0x08007360

08003810 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11f      	bne.n	800386a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d856      	bhi.n	80038de <DMA_CheckFifoParam+0xce>
 8003830:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <DMA_CheckFifoParam+0x28>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003849 	.word	0x08003849
 800383c:	0800385b 	.word	0x0800385b
 8003840:	08003849 	.word	0x08003849
 8003844:	080038df 	.word	0x080038df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d046      	beq.n	80038e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e043      	b.n	80038e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003862:	d140      	bne.n	80038e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003868:	e03d      	b.n	80038e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003872:	d121      	bne.n	80038b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d837      	bhi.n	80038ea <DMA_CheckFifoParam+0xda>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <DMA_CheckFifoParam+0x70>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003891 	.word	0x08003891
 8003884:	08003897 	.word	0x08003897
 8003888:	08003891 	.word	0x08003891
 800388c:	080038a9 	.word	0x080038a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e030      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d025      	beq.n	80038ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a6:	e022      	b.n	80038ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038b0:	d11f      	bne.n	80038f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038b6:	e01c      	b.n	80038f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d903      	bls.n	80038c6 <DMA_CheckFifoParam+0xb6>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d003      	beq.n	80038cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038c4:	e018      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      break;
 80038ca:	e015      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      break;
 80038dc:	e00b      	b.n	80038f6 <DMA_CheckFifoParam+0xe6>
      break;
 80038de:	bf00      	nop
 80038e0:	e00a      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e008      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e006      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ea:	bf00      	nop
 80038ec:	e004      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
 80038f0:	e002      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038f2:	bf00      	nop
 80038f4:	e000      	b.n	80038f8 <DMA_CheckFifoParam+0xe8>
      break;
 80038f6:	bf00      	nop
    }
  } 
  
  return status; 
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	e16b      	b.n	8003bfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003924:	2201      	movs	r2, #1
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	f040 815a 	bne.w	8003bf6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d005      	beq.n	800395a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003956:	2b02      	cmp	r3, #2
 8003958:	d130      	bne.n	80039bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	2203      	movs	r2, #3
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003990:	2201      	movs	r2, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 0201 	and.w	r2, r3, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d017      	beq.n	80039f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d123      	bne.n	8003a4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	08da      	lsrs	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	220f      	movs	r2, #15
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	08da      	lsrs	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3208      	adds	r2, #8
 8003a46:	69b9      	ldr	r1, [r7, #24]
 8003a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0203 	and.w	r2, r3, #3
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80b4 	beq.w	8003bf6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b60      	ldr	r3, [pc, #384]	@ (8003c14 <HAL_GPIO_Init+0x30c>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	4a5f      	ldr	r2, [pc, #380]	@ (8003c14 <HAL_GPIO_Init+0x30c>)
 8003a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003c14 <HAL_GPIO_Init+0x30c>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8003c18 <HAL_GPIO_Init+0x310>)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	@ (8003c1c <HAL_GPIO_Init+0x314>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02b      	beq.n	8003b2e <HAL_GPIO_Init+0x226>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a51      	ldr	r2, [pc, #324]	@ (8003c20 <HAL_GPIO_Init+0x318>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d025      	beq.n	8003b2a <HAL_GPIO_Init+0x222>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a50      	ldr	r2, [pc, #320]	@ (8003c24 <HAL_GPIO_Init+0x31c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01f      	beq.n	8003b26 <HAL_GPIO_Init+0x21e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4f      	ldr	r2, [pc, #316]	@ (8003c28 <HAL_GPIO_Init+0x320>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d019      	beq.n	8003b22 <HAL_GPIO_Init+0x21a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4e      	ldr	r2, [pc, #312]	@ (8003c2c <HAL_GPIO_Init+0x324>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_GPIO_Init+0x216>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4d      	ldr	r2, [pc, #308]	@ (8003c30 <HAL_GPIO_Init+0x328>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00d      	beq.n	8003b1a <HAL_GPIO_Init+0x212>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4c      	ldr	r2, [pc, #304]	@ (8003c34 <HAL_GPIO_Init+0x32c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <HAL_GPIO_Init+0x20e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4b      	ldr	r2, [pc, #300]	@ (8003c38 <HAL_GPIO_Init+0x330>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_GPIO_Init+0x20a>
 8003b0e:	2307      	movs	r3, #7
 8003b10:	e00e      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b12:	2308      	movs	r3, #8
 8003b14:	e00c      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b16:	2306      	movs	r3, #6
 8003b18:	e00a      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b1a:	2305      	movs	r3, #5
 8003b1c:	e008      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	e006      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b22:	2303      	movs	r3, #3
 8003b24:	e004      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <HAL_GPIO_Init+0x228>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f002 0203 	and.w	r2, r2, #3
 8003b36:	0092      	lsls	r2, r2, #2
 8003b38:	4093      	lsls	r3, r2
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b40:	4935      	ldr	r1, [pc, #212]	@ (8003c18 <HAL_GPIO_Init+0x310>)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b72:	4a32      	ldr	r2, [pc, #200]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b78:	4b30      	ldr	r3, [pc, #192]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b9c:	4a27      	ldr	r2, [pc, #156]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ba2:	4b26      	ldr	r3, [pc, #152]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bf0:	4a12      	ldr	r2, [pc, #72]	@ (8003c3c <HAL_GPIO_Init+0x334>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	f67f ae90 	bls.w	8003924 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3724      	adds	r7, #36	@ 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	40020400 	.word	0x40020400
 8003c24:	40020800 	.word	0x40020800
 8003c28:	40020c00 	.word	0x40020c00
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40021400 	.word	0x40021400
 8003c34:	40021800 	.word	0x40021800
 8003c38:	40021c00 	.word	0x40021c00
 8003c3c:	40013c00 	.word	0x40013c00

08003c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e001      	b.n	8003c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c80:	787b      	ldrb	r3, [r7, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c8c:	e003      	b.n	8003c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cba:	4a05      	ldr	r2, [pc, #20]	@ (8003cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fa88 	bl	80011d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40013c00 	.word	0x40013c00

08003cd4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	@ (8003cfc <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003cde:	f043 0302 	orr.w	r3, r3, #2
 8003ce2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003cf0:	bf30      	wfi
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e267      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d075      	beq.n	8003e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d22:	4b88      	ldr	r3, [pc, #544]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d00c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2e:	4b85      	ldr	r3, [pc, #532]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d112      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3a:	4b82      	ldr	r3, [pc, #520]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	4b7e      	ldr	r3, [pc, #504]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d05b      	beq.n	8003e0c <HAL_RCC_OscConfig+0x108>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d157      	bne.n	8003e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e242      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x74>
 8003d6a:	4b76      	ldr	r3, [pc, #472]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a75      	ldr	r2, [pc, #468]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xb0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x98>
 8003d82:	4b70      	ldr	r3, [pc, #448]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6f      	ldr	r2, [pc, #444]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6c      	ldr	r2, [pc, #432]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xb0>
 8003d9c:	4b69      	ldr	r3, [pc, #420]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a68      	ldr	r2, [pc, #416]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b66      	ldr	r3, [pc, #408]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a65      	ldr	r2, [pc, #404]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7ff f860 	bl	8002e80 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7ff f85c 	bl	8002e80 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	@ 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e207      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xc0>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7ff f84c 	bl	8002e80 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7ff f848 	bl	8002e80 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	@ 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1f3      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b51      	ldr	r3, [pc, #324]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0xe8>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d063      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e26:	4b47      	ldr	r3, [pc, #284]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e32:	4b44      	ldr	r3, [pc, #272]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d116      	bne.n	8003e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	4b41      	ldr	r3, [pc, #260]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCC_OscConfig+0x152>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1c7      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b3b      	ldr	r3, [pc, #236]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4937      	ldr	r1, [pc, #220]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	e03a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <HAL_RCC_OscConfig+0x244>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7ff f801 	bl	8002e80 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fe fffd 	bl	8002e80 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e1a8      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	4b2b      	ldr	r3, [pc, #172]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	4b28      	ldr	r3, [pc, #160]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4925      	ldr	r1, [pc, #148]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]
 8003eb4:	e015      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb6:	4b24      	ldr	r3, [pc, #144]	@ (8003f48 <HAL_RCC_OscConfig+0x244>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe ffe0 	bl	8002e80 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fe ffdc 	bl	8002e80 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e187      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d036      	beq.n	8003f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <HAL_RCC_OscConfig+0x248>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fe ffc0 	bl	8002e80 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f04:	f7fe ffbc 	bl	8002e80 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e167      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x200>
 8003f22:	e01b      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f24:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <HAL_RCC_OscConfig+0x248>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fe ffa9 	bl	8002e80 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f30:	e00e      	b.n	8003f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fe ffa5 	bl	8002e80 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d907      	bls.n	8003f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e150      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
 8003f44:	40023800 	.word	0x40023800
 8003f48:	42470000 	.word	0x42470000
 8003f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	4b88      	ldr	r3, [pc, #544]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ea      	bne.n	8003f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8097 	beq.w	8004098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6e:	4b81      	ldr	r3, [pc, #516]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	4a7c      	ldr	r2, [pc, #496]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9a:	4b77      	ldr	r3, [pc, #476]	@ (8004178 <HAL_RCC_OscConfig+0x474>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d118      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa6:	4b74      	ldr	r3, [pc, #464]	@ (8004178 <HAL_RCC_OscConfig+0x474>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a73      	ldr	r2, [pc, #460]	@ (8004178 <HAL_RCC_OscConfig+0x474>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb2:	f7fe ff65 	bl	8002e80 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fe ff61 	bl	8002e80 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e10c      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8004178 <HAL_RCC_OscConfig+0x474>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_OscConfig+0x2ea>
 8003fe0:	4b64      	ldr	r3, [pc, #400]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	4a63      	ldr	r2, [pc, #396]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fec:	e01c      	b.n	8004028 <HAL_RCC_OscConfig+0x324>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x30c>
 8003ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6713      	str	r3, [r2, #112]	@ 0x70
 8004002:	4b5c      	ldr	r3, [pc, #368]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004006:	4a5b      	ldr	r2, [pc, #364]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6713      	str	r3, [r2, #112]	@ 0x70
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0x324>
 8004010:	4b58      	ldr	r3, [pc, #352]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	4a57      	ldr	r2, [pc, #348]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	@ 0x70
 800401c:	4b55      	ldr	r3, [pc, #340]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004020:	4a54      	ldr	r2, [pc, #336]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004022:	f023 0304 	bic.w	r3, r3, #4
 8004026:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fe ff26 	bl	8002e80 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004036:	e00a      	b.n	800404e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7fe ff22 	bl	8002e80 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0cb      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	4b49      	ldr	r3, [pc, #292]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ee      	beq.n	8004038 <HAL_RCC_OscConfig+0x334>
 800405a:	e014      	b.n	8004086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405c:	f7fe ff10 	bl	8002e80 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fe ff0c 	bl	8002e80 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e0b5      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407a:	4b3e      	ldr	r3, [pc, #248]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ee      	bne.n	8004064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b39      	ldr	r3, [pc, #228]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	4a38      	ldr	r2, [pc, #224]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004096:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80a1 	beq.w	80041e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a2:	4b34      	ldr	r3, [pc, #208]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d05c      	beq.n	8004168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d141      	bne.n	800413a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b31      	ldr	r3, [pc, #196]	@ (800417c <HAL_RCC_OscConfig+0x478>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fe fee0 	bl	8002e80 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fe fedc 	bl	8002e80 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e087      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	3b01      	subs	r3, #1
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	491b      	ldr	r1, [pc, #108]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800410c:	4b1b      	ldr	r3, [pc, #108]	@ (800417c <HAL_RCC_OscConfig+0x478>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fe feb5 	bl	8002e80 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411a:	f7fe feb1 	bl	8002e80 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e05c      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412c:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x416>
 8004138:	e054      	b.n	80041e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413a:	4b10      	ldr	r3, [pc, #64]	@ (800417c <HAL_RCC_OscConfig+0x478>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fe fe9e 	bl	8002e80 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004148:	f7fe fe9a 	bl	8002e80 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e045      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_RCC_OscConfig+0x470>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x444>
 8004166:	e03d      	b.n	80041e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d107      	bne.n	8004180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e038      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
 8004174:	40023800 	.word	0x40023800
 8004178:	40007000 	.word	0x40007000
 800417c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004180:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <HAL_RCC_OscConfig+0x4ec>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d028      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d121      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d11a      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	3b01      	subs	r3, #1
 80041ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800

080041f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0cc      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004208:	4b68      	ldr	r3, [pc, #416]	@ (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d90c      	bls.n	8004230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b65      	ldr	r3, [pc, #404]	@ (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b63      	ldr	r3, [pc, #396]	@ (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b8      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b59      	ldr	r3, [pc, #356]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a58      	ldr	r2, [pc, #352]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004260:	4b53      	ldr	r3, [pc, #332]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a52      	ldr	r2, [pc, #328]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800426a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b50      	ldr	r3, [pc, #320]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	494d      	ldr	r1, [pc, #308]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d044      	beq.n	8004314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b47      	ldr	r3, [pc, #284]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d119      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b3f      	ldr	r3, [pc, #252]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e06f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c2:	4b3b      	ldr	r3, [pc, #236]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e067      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d2:	4b37      	ldr	r3, [pc, #220]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4934      	ldr	r1, [pc, #208]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e4:	f7fe fdcc 	bl	8002e80 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fe fdc8 	bl	8002e80 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e04f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	4b2b      	ldr	r3, [pc, #172]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 020c 	and.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d1eb      	bne.n	80042ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004314:	4b25      	ldr	r3, [pc, #148]	@ (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d20c      	bcs.n	800433c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b22      	ldr	r3, [pc, #136]	@ (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e032      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b19      	ldr	r3, [pc, #100]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4916      	ldr	r1, [pc, #88]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004366:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	490e      	ldr	r1, [pc, #56]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437a:	f000 f821 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	490a      	ldr	r1, [pc, #40]	@ (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a09      	ldr	r2, [pc, #36]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004396:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fd2c 	bl	8002df8 <HAL_InitTick>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023c00 	.word	0x40023c00
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08007348 	.word	0x08007348
 80043b8:	20000164 	.word	0x20000164
 80043bc:	20000168 	.word	0x20000168

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c4:	b094      	sub	sp, #80	@ 0x50
 80043c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80043cc:	2300      	movs	r3, #0
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d0:	2300      	movs	r3, #0
 80043d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d8:	4b79      	ldr	r3, [pc, #484]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d00d      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x40>
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	f200 80e1 	bhi.w	80045ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0x3a>
 80043f2:	e0db      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f4:	4b73      	ldr	r3, [pc, #460]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043f8:	e0db      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fa:	4b73      	ldr	r3, [pc, #460]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80043fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043fe:	e0d8      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004400:	4b6f      	ldr	r3, [pc, #444]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004408:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440a:	4b6d      	ldr	r3, [pc, #436]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d063      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004416:	4b6a      	ldr	r3, [pc, #424]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	099b      	lsrs	r3, r3, #6
 800441c:	2200      	movs	r2, #0
 800441e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
 800442a:	2300      	movs	r3, #0
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
 800442e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004432:	4622      	mov	r2, r4
 8004434:	462b      	mov	r3, r5
 8004436:	f04f 0000 	mov.w	r0, #0
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	0159      	lsls	r1, r3, #5
 8004440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004444:	0150      	lsls	r0, r2, #5
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4621      	mov	r1, r4
 800444c:	1a51      	subs	r1, r2, r1
 800444e:	6139      	str	r1, [r7, #16]
 8004450:	4629      	mov	r1, r5
 8004452:	eb63 0301 	sbc.w	r3, r3, r1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004464:	4659      	mov	r1, fp
 8004466:	018b      	lsls	r3, r1, #6
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800446e:	4651      	mov	r1, sl
 8004470:	018a      	lsls	r2, r1, #6
 8004472:	4651      	mov	r1, sl
 8004474:	ebb2 0801 	subs.w	r8, r2, r1
 8004478:	4659      	mov	r1, fp
 800447a:	eb63 0901 	sbc.w	r9, r3, r1
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800448e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004492:	4690      	mov	r8, r2
 8004494:	4699      	mov	r9, r3
 8004496:	4623      	mov	r3, r4
 8004498:	eb18 0303 	adds.w	r3, r8, r3
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	462b      	mov	r3, r5
 80044a0:	eb49 0303 	adc.w	r3, r9, r3
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044b2:	4629      	mov	r1, r5
 80044b4:	024b      	lsls	r3, r1, #9
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044bc:	4621      	mov	r1, r4
 80044be:	024a      	lsls	r2, r1, #9
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044c6:	2200      	movs	r2, #0
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044d0:	f7fb fece 	bl	8000270 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4613      	mov	r3, r2
 80044da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044dc:	e058      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044de:	4b38      	ldr	r3, [pc, #224]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	2200      	movs	r2, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	4611      	mov	r1, r2
 80044ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	2300      	movs	r3, #0
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	0159      	lsls	r1, r3, #5
 8004506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450a:	0150      	lsls	r0, r2, #5
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4641      	mov	r1, r8
 8004512:	ebb2 0a01 	subs.w	sl, r2, r1
 8004516:	4649      	mov	r1, r9
 8004518:	eb63 0b01 	sbc.w	fp, r3, r1
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800452c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004530:	ebb2 040a 	subs.w	r4, r2, sl
 8004534:	eb63 050b 	sbc.w	r5, r3, fp
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004546:	00e2      	lsls	r2, r4, #3
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	4643      	mov	r3, r8
 800454e:	18e3      	adds	r3, r4, r3
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	464b      	mov	r3, r9
 8004554:	eb45 0303 	adc.w	r3, r5, r3
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004566:	4629      	mov	r1, r5
 8004568:	028b      	lsls	r3, r1, #10
 800456a:	4621      	mov	r1, r4
 800456c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004570:	4621      	mov	r1, r4
 8004572:	028a      	lsls	r2, r1, #10
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457a:	2200      	movs	r2, #0
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	61fa      	str	r2, [r7, #28]
 8004580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004584:	f7fb fe74 	bl	8000270 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4613      	mov	r3, r2
 800458e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	3301      	adds	r3, #1
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80045a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3750      	adds	r7, #80	@ 0x50
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	007a1200 	.word	0x007a1200

080045cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d0:	4b03      	ldr	r3, [pc, #12]	@ (80045e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000164 	.word	0x20000164

080045e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e8:	f7ff fff0 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0a9b      	lsrs	r3, r3, #10
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	08007358 	.word	0x08007358

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004610:	f7ff ffdc 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b05      	ldr	r3, [pc, #20]	@ (800462c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0b5b      	lsrs	r3, r3, #13
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4903      	ldr	r1, [pc, #12]	@ (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	08007358 	.word	0x08007358

08004634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e041      	b.n	80046ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fe f8d4 	bl	8002808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 fcf2 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e04e      	b.n	800478a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a23      	ldr	r2, [pc, #140]	@ (8004798 <HAL_TIM_Base_Start_IT+0xc4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004716:	d01d      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <HAL_TIM_Base_Start_IT+0xc8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1e      	ldr	r2, [pc, #120]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1c      	ldr	r2, [pc, #112]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a1b      	ldr	r2, [pc, #108]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a19      	ldr	r2, [pc, #100]	@ (80047ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a18      	ldr	r2, [pc, #96]	@ (80047b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b06      	cmp	r3, #6
 8004764:	d010      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	e007      	b.n	8004788 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40001800 	.word	0x40001800

080047b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e041      	b.n	800484a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f839 	bl	8004852 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 fc32 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_TIM_PWM_Start_IT+0x28>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e022      	b.n	80048d6 <HAL_TIM_PWM_Start_IT+0x6e>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b04      	cmp	r3, #4
 8004894:	d109      	bne.n	80048aa <HAL_TIM_PWM_Start_IT+0x42>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b01      	cmp	r3, #1
 80048a0:	bf14      	ite	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	2300      	moveq	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	e015      	b.n	80048d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d109      	bne.n	80048c4 <HAL_TIM_PWM_Start_IT+0x5c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e008      	b.n	80048d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0c7      	b.n	8004a6e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <HAL_TIM_PWM_Start_IT+0x86>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048ec:	e013      	b.n	8004916 <HAL_TIM_PWM_Start_IT+0xae>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d104      	bne.n	80048fe <HAL_TIM_PWM_Start_IT+0x96>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048fc:	e00b      	b.n	8004916 <HAL_TIM_PWM_Start_IT+0xae>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d104      	bne.n	800490e <HAL_TIM_PWM_Start_IT+0xa6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800490c:	e003      	b.n	8004916 <HAL_TIM_PWM_Start_IT+0xae>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d841      	bhi.n	80049a0 <HAL_TIM_PWM_Start_IT+0x138>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <HAL_TIM_PWM_Start_IT+0xbc>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004959 	.word	0x08004959
 8004928:	080049a1 	.word	0x080049a1
 800492c:	080049a1 	.word	0x080049a1
 8004930:	080049a1 	.word	0x080049a1
 8004934:	0800496b 	.word	0x0800496b
 8004938:	080049a1 	.word	0x080049a1
 800493c:	080049a1 	.word	0x080049a1
 8004940:	080049a1 	.word	0x080049a1
 8004944:	0800497d 	.word	0x0800497d
 8004948:	080049a1 	.word	0x080049a1
 800494c:	080049a1 	.word	0x080049a1
 8004950:	080049a1 	.word	0x080049a1
 8004954:	0800498f 	.word	0x0800498f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0202 	orr.w	r2, r2, #2
 8004966:	60da      	str	r2, [r3, #12]
      break;
 8004968:	e01d      	b.n	80049a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0204 	orr.w	r2, r2, #4
 8004978:	60da      	str	r2, [r3, #12]
      break;
 800497a:	e014      	b.n	80049a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	60da      	str	r2, [r3, #12]
      break;
 800498c:	e00b      	b.n	80049a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0210 	orr.w	r2, r2, #16
 800499c:	60da      	str	r2, [r3, #12]
      break;
 800499e:	e002      	b.n	80049a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
      break;
 80049a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d15f      	bne.n	8004a6c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fed8 	bl	800576a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2e      	ldr	r2, [pc, #184]	@ (8004a78 <HAL_TIM_PWM_Start_IT+0x210>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_TIM_PWM_Start_IT+0x166>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a7c <HAL_TIM_PWM_Start_IT+0x214>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_TIM_PWM_Start_IT+0x16a>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_TIM_PWM_Start_IT+0x16c>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a22      	ldr	r2, [pc, #136]	@ (8004a78 <HAL_TIM_PWM_Start_IT+0x210>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d022      	beq.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1d0>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fa:	d01d      	beq.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1d0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1f      	ldr	r2, [pc, #124]	@ (8004a80 <HAL_TIM_PWM_Start_IT+0x218>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004a84 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <HAL_TIM_PWM_Start_IT+0x220>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a17      	ldr	r2, [pc, #92]	@ (8004a7c <HAL_TIM_PWM_Start_IT+0x214>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a18      	ldr	r2, [pc, #96]	@ (8004a8c <HAL_TIM_PWM_Start_IT+0x224>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a17      	ldr	r2, [pc, #92]	@ (8004a90 <HAL_TIM_PWM_Start_IT+0x228>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d111      	bne.n	8004a5c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d010      	beq.n	8004a6c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	e007      	b.n	8004a6c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40010400 	.word	0x40010400
 8004a80:	40000400 	.word	0x40000400
 8004a84:	40000800 	.word	0x40000800
 8004a88:	40000c00 	.word	0x40000c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40001800 	.word	0x40001800

08004a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d020      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0202 	mvn.w	r2, #2
 8004ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa9d 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa8f 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 faa0 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d020      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0204 	mvn.w	r2, #4
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa77 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa69 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fa7a 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d020      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0208 	mvn.w	r2, #8
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa51 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fa43 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa54 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d020      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01b      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0210 	mvn.w	r2, #16
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa2b 	bl	800501e <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa1d 	bl	800500a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa2e 	bl	8005032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00c      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0201 	mvn.w	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc f9cc 	bl	8000f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fe4e 	bl	80058c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f9ff 	bl	8005046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0220 	mvn.w	r2, #32
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fe20 	bl	80058ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e0ae      	b.n	8004df0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	f200 809f 	bhi.w	8004de0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cdd 	.word	0x08004cdd
 8004cac:	08004de1 	.word	0x08004de1
 8004cb0:	08004de1 	.word	0x08004de1
 8004cb4:	08004de1 	.word	0x08004de1
 8004cb8:	08004d1d 	.word	0x08004d1d
 8004cbc:	08004de1 	.word	0x08004de1
 8004cc0:	08004de1 	.word	0x08004de1
 8004cc4:	08004de1 	.word	0x08004de1
 8004cc8:	08004d5f 	.word	0x08004d5f
 8004ccc:	08004de1 	.word	0x08004de1
 8004cd0:	08004de1 	.word	0x08004de1
 8004cd4:	08004de1 	.word	0x08004de1
 8004cd8:	08004d9f 	.word	0x08004d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fa66 	bl	80051b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0208 	orr.w	r2, r2, #8
 8004cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0204 	bic.w	r2, r2, #4
 8004d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6999      	ldr	r1, [r3, #24]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	619a      	str	r2, [r3, #24]
      break;
 8004d1a:	e064      	b.n	8004de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fab6 	bl	8005294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6999      	ldr	r1, [r3, #24]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	021a      	lsls	r2, r3, #8
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	619a      	str	r2, [r3, #24]
      break;
 8004d5c:	e043      	b.n	8004de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fb0b 	bl	8005380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0208 	orr.w	r2, r2, #8
 8004d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0204 	bic.w	r2, r2, #4
 8004d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	61da      	str	r2, [r3, #28]
      break;
 8004d9c:	e023      	b.n	8004de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fb5f 	bl	8005468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69d9      	ldr	r1, [r3, #28]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	021a      	lsls	r2, r3, #8
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	61da      	str	r2, [r3, #28]
      break;
 8004dde:	e002      	b.n	8004de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
      break;
 8004de4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIM_ConfigClockSource+0x1c>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0b4      	b.n	8004f7e <HAL_TIM_ConfigClockSource+0x186>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e4c:	d03e      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0xd4>
 8004e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e52:	f200 8087 	bhi.w	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5a:	f000 8086 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x172>
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e62:	d87f      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b70      	cmp	r3, #112	@ 0x70
 8004e66:	d01a      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0xa6>
 8004e68:	2b70      	cmp	r3, #112	@ 0x70
 8004e6a:	d87b      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b60      	cmp	r3, #96	@ 0x60
 8004e6e:	d050      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x11a>
 8004e70:	2b60      	cmp	r3, #96	@ 0x60
 8004e72:	d877      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b50      	cmp	r3, #80	@ 0x50
 8004e76:	d03c      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8004e78:	2b50      	cmp	r3, #80	@ 0x50
 8004e7a:	d873      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b40      	cmp	r3, #64	@ 0x40
 8004e7e:	d058      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x13a>
 8004e80:	2b40      	cmp	r3, #64	@ 0x40
 8004e82:	d86f      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b30      	cmp	r3, #48	@ 0x30
 8004e86:	d064      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x15a>
 8004e88:	2b30      	cmp	r3, #48	@ 0x30
 8004e8a:	d86b      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d060      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d867      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05c      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x15a>
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d05a      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	e062      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eae:	f000 fc3c 	bl	800572a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	609a      	str	r2, [r3, #8]
      break;
 8004eca:	e04f      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004edc:	f000 fc25 	bl	800572a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eee:	609a      	str	r2, [r3, #8]
      break;
 8004ef0:	e03c      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fb99 	bl	8005636 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2150      	movs	r1, #80	@ 0x50
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fbf2 	bl	80056f4 <TIM_ITRx_SetConfig>
      break;
 8004f10:	e02c      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 fbb8 	bl	8005694 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2160      	movs	r1, #96	@ 0x60
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fbe2 	bl	80056f4 <TIM_ITRx_SetConfig>
      break;
 8004f30:	e01c      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f000 fb79 	bl	8005636 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2140      	movs	r1, #64	@ 0x40
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fbd2 	bl	80056f4 <TIM_ITRx_SetConfig>
      break;
 8004f50:	e00c      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f000 fbc9 	bl	80056f4 <TIM_ITRx_SetConfig>
      break;
 8004f62:	e003      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
      break;
 8004f68:	e000      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e031      	b.n	8005002 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 faaf 	bl	8005514 <TIM_SlaveTimer_SetConfig>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e018      	b.n	8005002 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fde:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004fee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a46      	ldr	r2, [pc, #280]	@ (8005188 <TIM_Base_SetConfig+0x12c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507a:	d00f      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a43      	ldr	r2, [pc, #268]	@ (800518c <TIM_Base_SetConfig+0x130>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a42      	ldr	r2, [pc, #264]	@ (8005190 <TIM_Base_SetConfig+0x134>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a41      	ldr	r2, [pc, #260]	@ (8005194 <TIM_Base_SetConfig+0x138>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a40      	ldr	r2, [pc, #256]	@ (8005198 <TIM_Base_SetConfig+0x13c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d108      	bne.n	80050ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a35      	ldr	r2, [pc, #212]	@ (8005188 <TIM_Base_SetConfig+0x12c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050bc:	d027      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a32      	ldr	r2, [pc, #200]	@ (800518c <TIM_Base_SetConfig+0x130>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d023      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a31      	ldr	r2, [pc, #196]	@ (8005190 <TIM_Base_SetConfig+0x134>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01f      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a30      	ldr	r2, [pc, #192]	@ (8005194 <TIM_Base_SetConfig+0x138>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005198 <TIM_Base_SetConfig+0x13c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d017      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2e      	ldr	r2, [pc, #184]	@ (800519c <TIM_Base_SetConfig+0x140>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2d      	ldr	r2, [pc, #180]	@ (80051a0 <TIM_Base_SetConfig+0x144>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <TIM_Base_SetConfig+0x148>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2b      	ldr	r2, [pc, #172]	@ (80051a8 <TIM_Base_SetConfig+0x14c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2a      	ldr	r2, [pc, #168]	@ (80051ac <TIM_Base_SetConfig+0x150>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a29      	ldr	r2, [pc, #164]	@ (80051b0 <TIM_Base_SetConfig+0x154>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d108      	bne.n	8005120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a10      	ldr	r2, [pc, #64]	@ (8005188 <TIM_Base_SetConfig+0x12c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_Base_SetConfig+0xf8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <TIM_Base_SetConfig+0x13c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d103      	bne.n	800515c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f023 0201 	bic.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	611a      	str	r2, [r3, #16]
  }
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40010400 	.word	0x40010400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800
 80051a8:	40001800 	.word	0x40001800
 80051ac:	40001c00 	.word	0x40001c00
 80051b0:	40002000 	.word	0x40002000

080051b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f023 0201 	bic.w	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0302 	bic.w	r3, r3, #2
 80051fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a20      	ldr	r2, [pc, #128]	@ (800528c <TIM_OC1_SetConfig+0xd8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC1_SetConfig+0x64>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1f      	ldr	r2, [pc, #124]	@ (8005290 <TIM_OC1_SetConfig+0xdc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10c      	bne.n	8005232 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0308 	bic.w	r3, r3, #8
 800521e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 0304 	bic.w	r3, r3, #4
 8005230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a15      	ldr	r2, [pc, #84]	@ (800528c <TIM_OC1_SetConfig+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC1_SetConfig+0x8e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a14      	ldr	r2, [pc, #80]	@ (8005290 <TIM_OC1_SetConfig+0xdc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d111      	bne.n	8005266 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400

08005294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f023 0210 	bic.w	r2, r3, #16
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a22      	ldr	r2, [pc, #136]	@ (8005378 <TIM_OC2_SetConfig+0xe4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_OC2_SetConfig+0x68>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a21      	ldr	r2, [pc, #132]	@ (800537c <TIM_OC2_SetConfig+0xe8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d10d      	bne.n	8005318 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a17      	ldr	r2, [pc, #92]	@ (8005378 <TIM_OC2_SetConfig+0xe4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC2_SetConfig+0x94>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a16      	ldr	r2, [pc, #88]	@ (800537c <TIM_OC2_SetConfig+0xe8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d113      	bne.n	8005350 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800532e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a21      	ldr	r2, [pc, #132]	@ (8005460 <TIM_OC3_SetConfig+0xe0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC3_SetConfig+0x66>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a20      	ldr	r2, [pc, #128]	@ (8005464 <TIM_OC3_SetConfig+0xe4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10d      	bne.n	8005402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a16      	ldr	r2, [pc, #88]	@ (8005460 <TIM_OC3_SetConfig+0xe0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_OC3_SetConfig+0x92>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a15      	ldr	r2, [pc, #84]	@ (8005464 <TIM_OC3_SetConfig+0xe4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d113      	bne.n	800543a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400

08005468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a12      	ldr	r2, [pc, #72]	@ (800550c <TIM_OC4_SetConfig+0xa4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC4_SetConfig+0x68>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <TIM_OC4_SetConfig+0xa8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d109      	bne.n	80054e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40010000 	.word	0x40010000
 8005510:	40010400 	.word	0x40010400

08005514 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005530:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b70      	cmp	r3, #112	@ 0x70
 800555c:	d01a      	beq.n	8005594 <TIM_SlaveTimer_SetConfig+0x80>
 800555e:	2b70      	cmp	r3, #112	@ 0x70
 8005560:	d860      	bhi.n	8005624 <TIM_SlaveTimer_SetConfig+0x110>
 8005562:	2b60      	cmp	r3, #96	@ 0x60
 8005564:	d054      	beq.n	8005610 <TIM_SlaveTimer_SetConfig+0xfc>
 8005566:	2b60      	cmp	r3, #96	@ 0x60
 8005568:	d85c      	bhi.n	8005624 <TIM_SlaveTimer_SetConfig+0x110>
 800556a:	2b50      	cmp	r3, #80	@ 0x50
 800556c:	d046      	beq.n	80055fc <TIM_SlaveTimer_SetConfig+0xe8>
 800556e:	2b50      	cmp	r3, #80	@ 0x50
 8005570:	d858      	bhi.n	8005624 <TIM_SlaveTimer_SetConfig+0x110>
 8005572:	2b40      	cmp	r3, #64	@ 0x40
 8005574:	d019      	beq.n	80055aa <TIM_SlaveTimer_SetConfig+0x96>
 8005576:	2b40      	cmp	r3, #64	@ 0x40
 8005578:	d854      	bhi.n	8005624 <TIM_SlaveTimer_SetConfig+0x110>
 800557a:	2b30      	cmp	r3, #48	@ 0x30
 800557c:	d055      	beq.n	800562a <TIM_SlaveTimer_SetConfig+0x116>
 800557e:	2b30      	cmp	r3, #48	@ 0x30
 8005580:	d850      	bhi.n	8005624 <TIM_SlaveTimer_SetConfig+0x110>
 8005582:	2b20      	cmp	r3, #32
 8005584:	d051      	beq.n	800562a <TIM_SlaveTimer_SetConfig+0x116>
 8005586:	2b20      	cmp	r3, #32
 8005588:	d84c      	bhi.n	8005624 <TIM_SlaveTimer_SetConfig+0x110>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d04d      	beq.n	800562a <TIM_SlaveTimer_SetConfig+0x116>
 800558e:	2b10      	cmp	r3, #16
 8005590:	d04b      	beq.n	800562a <TIM_SlaveTimer_SetConfig+0x116>
 8005592:	e047      	b.n	8005624 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80055a4:	f000 f8c1 	bl	800572a <TIM_ETR_SetConfig>
      break;
 80055a8:	e040      	b.n	800562c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d101      	bne.n	80055b6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e03b      	b.n	800562e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a1a      	ldr	r2, [r3, #32]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
      break;
 80055fa:	e017      	b.n	800562c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005608:	461a      	mov	r2, r3
 800560a:	f000 f814 	bl	8005636 <TIM_TI1_ConfigInputStage>
      break;
 800560e:	e00d      	b.n	800562c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800561c:	461a      	mov	r2, r3
 800561e:	f000 f839 	bl	8005694 <TIM_TI2_ConfigInputStage>
      break;
 8005622:	e003      	b.n	800562c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e000      	b.n	800562c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800562a:	bf00      	nop
  }

  return status;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005636:	b480      	push	{r7}
 8005638:	b087      	sub	sp, #28
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f023 0201 	bic.w	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 030a 	bic.w	r3, r3, #10
 8005672:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f023 0210 	bic.w	r2, r3, #16
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	031b      	lsls	r3, r3, #12
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	f043 0307 	orr.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	609a      	str	r2, [r3, #8]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800572a:	b480      	push	{r7}
 800572c:	b087      	sub	sp, #28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	021a      	lsls	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	431a      	orrs	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4313      	orrs	r3, r2
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	609a      	str	r2, [r3, #8]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800576a:	b480      	push	{r7}
 800576c:	b087      	sub	sp, #28
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2201      	movs	r2, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	43db      	mvns	r3, r3
 800578c:	401a      	ands	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	431a      	orrs	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	621a      	str	r2, [r3, #32]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e05a      	b.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a21      	ldr	r2, [pc, #132]	@ (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005818:	d01d      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	@ (8005894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1b      	ldr	r2, [pc, #108]	@ (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1a      	ldr	r2, [pc, #104]	@ (800589c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a18      	ldr	r2, [pc, #96]	@ (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a17      	ldr	r2, [pc, #92]	@ (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10c      	bne.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800585c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4313      	orrs	r3, r2
 8005866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40010400 	.word	0x40010400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40001800 	.word	0x40001800

080058ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e042      	b.n	800596c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fd f8d8 	bl	8002ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2224      	movs	r2, #36	@ 0x24
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fdcb 	bl	80064b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800592c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800593c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800594c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08c      	sub	sp, #48	@ 0x30
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	d156      	bne.n	8005a3c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_UART_Transmit_DMA+0x26>
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e04f      	b.n	8005a3e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2221      	movs	r2, #33	@ 0x21
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	4a21      	ldr	r2, [pc, #132]	@ (8005a48 <HAL_UART_Transmit_DMA+0xd4>)
 80059c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ca:	4a20      	ldr	r2, [pc, #128]	@ (8005a4c <HAL_UART_Transmit_DMA+0xd8>)
 80059cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a50 <HAL_UART_Transmit_DMA+0xdc>)
 80059d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059da:	2200      	movs	r2, #0
 80059dc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3304      	adds	r3, #4
 80059f2:	461a      	mov	r2, r3
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	f7fd fc33 	bl	8003260 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	617b      	str	r3, [r7, #20]
   return(result);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3314      	adds	r3, #20
 8005a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a24:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6a39      	ldr	r1, [r7, #32]
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e5      	bne.n	8005a04 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e000      	b.n	8005a3e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3730      	adds	r7, #48	@ 0x30
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	08005fe1 	.word	0x08005fe1
 8005a4c:	0800607b 	.word	0x0800607b
 8005a50:	08006097 	.word	0x08006097

08005a54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b0ba      	sub	sp, #232	@ 0xe8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_UART_IRQHandler+0x66>
 8005aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fc40 	bl	8006338 <UART_Receive_IT>
      return;
 8005ab8:	e25b      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005aba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80de 	beq.w	8005c80 <HAL_UART_IRQHandler+0x22c>
 8005ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80d1 	beq.w	8005c80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_UART_IRQHandler+0xae>
 8005aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_UART_IRQHandler+0xd2>
 8005b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	f043 0202 	orr.w	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_UART_IRQHandler+0xf6>
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f043 0204 	orr.w	r2, r3, #4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <HAL_UART_IRQHandler+0x126>
 8005b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	f043 0208 	orr.w	r2, r3, #8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 81f2 	beq.w	8005f68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x14e>
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fbcb 	bl	8006338 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bac:	2b40      	cmp	r3, #64	@ 0x40
 8005bae:	bf0c      	ite	eq
 8005bb0:	2301      	moveq	r3, #1
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <HAL_UART_IRQHandler+0x17a>
 8005bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d04f      	beq.n	8005c6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fad3 	bl	800617a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b40      	cmp	r3, #64	@ 0x40
 8005be0:	d141      	bne.n	8005c66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1d9      	bne.n	8005be2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d013      	beq.n	8005c5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8005e34 <HAL_UART_IRQHandler+0x3e0>)
 8005c3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd fbd4 	bl	80033f0 <HAL_DMA_Abort_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	e00e      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9a8 	bl	8005fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	e00a      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9a4 	bl	8005fb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e006      	b.n	8005c7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9a0 	bl	8005fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c7a:	e175      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7c:	bf00      	nop
    return;
 8005c7e:	e173      	b.n	8005f68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 814f 	bne.w	8005f28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8148 	beq.w	8005f28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8141 	beq.w	8005f28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b40      	cmp	r3, #64	@ 0x40
 8005cc8:	f040 80b6 	bne.w	8005e38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8145 	beq.w	8005f6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cea:	429a      	cmp	r2, r3
 8005cec:	f080 813e 	bcs.w	8005f6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d02:	f000 8088 	beq.w	8005e16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1d9      	bne.n	8005d06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e1      	bne.n	8005d52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3314      	adds	r3, #20
 8005d94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005db4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005db8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e3      	bne.n	8005d8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de6:	f023 0310 	bic.w	r3, r3, #16
 8005dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005df8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fd fa7d 	bl	8003310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f8cb 	bl	8005fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e32:	e09b      	b.n	8005f6c <HAL_UART_IRQHandler+0x518>
 8005e34:	08006241 	.word	0x08006241
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 808e 	beq.w	8005f70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8089 	beq.w	8005f70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e3      	bne.n	8005e5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eba:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e3      	bne.n	8005e96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0310 	bic.w	r3, r3, #16
 8005ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	330c      	adds	r3, #12
 8005efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f00:	61fa      	str	r2, [r7, #28]
 8005f02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	69b9      	ldr	r1, [r7, #24]
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e3      	bne.n	8005edc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f851 	bl	8005fc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f26:	e023      	b.n	8005f70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d009      	beq.n	8005f48 <HAL_UART_IRQHandler+0x4f4>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f991 	bl	8006268 <UART_Transmit_IT>
    return;
 8005f46:	e014      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <HAL_UART_IRQHandler+0x51e>
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f9d1 	bl	8006308 <UART_EndTransmit_IT>
    return;
 8005f66:	e004      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
    return;
 8005f68:	bf00      	nop
 8005f6a:	e002      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <HAL_UART_IRQHandler+0x51e>
      return;
 8005f70:	bf00      	nop
  }
}
 8005f72:	37e8      	adds	r7, #232	@ 0xe8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b090      	sub	sp, #64	@ 0x40
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d137      	bne.n	800606c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffe:	2200      	movs	r2, #0
 8006000:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3314      	adds	r3, #20
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	623b      	str	r3, [r7, #32]
   return(result);
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800601a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3314      	adds	r3, #20
 8006020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006022:	633a      	str	r2, [r7, #48]	@ 0x30
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e5      	bne.n	8006002 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	60fb      	str	r3, [r7, #12]
   return(result);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
 800604e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006056:	61fa      	str	r2, [r7, #28]
 8006058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	69b9      	ldr	r1, [r7, #24]
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	617b      	str	r3, [r7, #20]
   return(result);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800606a:	e002      	b.n	8006072 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800606c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800606e:	f7ff ff83 	bl	8005f78 <HAL_UART_TxCpltCallback>
}
 8006072:	bf00      	nop
 8006074:	3740      	adds	r7, #64	@ 0x40
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006086:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff ff7f 	bl	8005f8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b2:	2b80      	cmp	r3, #128	@ 0x80
 80060b4:	bf0c      	ite	eq
 80060b6:	2301      	moveq	r3, #1
 80060b8:	2300      	movne	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b21      	cmp	r3, #33	@ 0x21
 80060c8:	d108      	bne.n	80060dc <UART_DMAError+0x46>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80060d6:	68b8      	ldr	r0, [r7, #8]
 80060d8:	f000 f827 	bl	800612a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e6:	2b40      	cmp	r3, #64	@ 0x40
 80060e8:	bf0c      	ite	eq
 80060ea:	2301      	moveq	r3, #1
 80060ec:	2300      	movne	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b22      	cmp	r3, #34	@ 0x22
 80060fc:	d108      	bne.n	8006110 <UART_DMAError+0x7a>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2200      	movs	r2, #0
 8006108:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800610a:	68b8      	ldr	r0, [r7, #8]
 800610c:	f000 f835 	bl	800617a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006114:	f043 0210 	orr.w	r2, r3, #16
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800611c:	68b8      	ldr	r0, [r7, #8]
 800611e:	f7ff ff49 	bl	8005fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800612a:	b480      	push	{r7}
 800612c:	b089      	sub	sp, #36	@ 0x24
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	60bb      	str	r3, [r7, #8]
   return(result);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	61ba      	str	r2, [r7, #24]
 8006154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800616e:	bf00      	nop
 8006170:	3724      	adds	r7, #36	@ 0x24
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800617a:	b480      	push	{r7}
 800617c:	b095      	sub	sp, #84	@ 0x54
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006198:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80061a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e5      	bne.n	8006182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3314      	adds	r3, #20
 80061bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3314      	adds	r3, #20
 80061d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e5      	bne.n	80061b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d119      	bne.n	8006226 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	330c      	adds	r3, #12
 80061f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	60bb      	str	r3, [r7, #8]
   return(result);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f023 0310 	bic.w	r3, r3, #16
 8006208:	647b      	str	r3, [r7, #68]	@ 0x44
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006212:	61ba      	str	r2, [r7, #24]
 8006214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	613b      	str	r3, [r7, #16]
   return(result);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e5      	bne.n	80061f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006234:	bf00      	nop
 8006236:	3754      	adds	r7, #84	@ 0x54
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff feaa 	bl	8005fb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b21      	cmp	r3, #33	@ 0x21
 800627a:	d13e      	bne.n	80062fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006284:	d114      	bne.n	80062b0 <UART_Transmit_IT+0x48>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d110      	bne.n	80062b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	1c9a      	adds	r2, r3, #2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]
 80062ae:	e008      	b.n	80062c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	1c59      	adds	r1, r3, #1
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	6211      	str	r1, [r2, #32]
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	4619      	mov	r1, r3
 80062d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10f      	bne.n	80062f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e000      	b.n	80062fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062fa:	2302      	movs	r3, #2
  }
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800631e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fe25 	bl	8005f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	@ 0x30
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b22      	cmp	r3, #34	@ 0x22
 800634a:	f040 80ae 	bne.w	80064aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006356:	d117      	bne.n	8006388 <UART_Receive_IT+0x50>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d113      	bne.n	8006388 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	b29a      	uxth	r2, r3
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006380:	1c9a      	adds	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	629a      	str	r2, [r3, #40]	@ 0x28
 8006386:	e026      	b.n	80063d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800639a:	d007      	beq.n	80063ac <UART_Receive_IT+0x74>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <UART_Receive_IT+0x82>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	e008      	b.n	80063cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29b      	uxth	r3, r3
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4619      	mov	r1, r3
 80063e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d15d      	bne.n	80064a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0220 	bic.w	r2, r2, #32
 80063f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	2b01      	cmp	r3, #1
 800642e:	d135      	bne.n	800649c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	613b      	str	r3, [r7, #16]
   return(result);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f023 0310 	bic.w	r3, r3, #16
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006456:	623a      	str	r2, [r7, #32]
 8006458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	61bb      	str	r3, [r7, #24]
   return(result);
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e5      	bne.n	8006436 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b10      	cmp	r3, #16
 8006476:	d10a      	bne.n	800648e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fd97 	bl	8005fc8 <HAL_UARTEx_RxEventCallback>
 800649a:	e002      	b.n	80064a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff fd7f 	bl	8005fa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e002      	b.n	80064ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	e000      	b.n	80064ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064aa:	2302      	movs	r3, #2
  }
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3730      	adds	r7, #48	@ 0x30
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b8:	b0c0      	sub	sp, #256	@ 0x100
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d0:	68d9      	ldr	r1, [r3, #12]
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	ea40 0301 	orr.w	r3, r0, r1
 80064dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800650c:	f021 010c 	bic.w	r1, r1, #12
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800651a:	430b      	orrs	r3, r1
 800651c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652e:	6999      	ldr	r1, [r3, #24]
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	ea40 0301 	orr.w	r3, r0, r1
 800653a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4b8f      	ldr	r3, [pc, #572]	@ (8006780 <UART_SetConfig+0x2cc>)
 8006544:	429a      	cmp	r2, r3
 8006546:	d005      	beq.n	8006554 <UART_SetConfig+0xa0>
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b8d      	ldr	r3, [pc, #564]	@ (8006784 <UART_SetConfig+0x2d0>)
 8006550:	429a      	cmp	r2, r3
 8006552:	d104      	bne.n	800655e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fe f85a 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8006558:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800655c:	e003      	b.n	8006566 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800655e:	f7fe f841 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 8006562:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006570:	f040 810c 	bne.w	800678c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006578:	2200      	movs	r2, #0
 800657a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800657e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006582:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	1891      	adds	r1, r2, r2
 800658c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800658e:	415b      	adcs	r3, r3
 8006590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006592:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006596:	4621      	mov	r1, r4
 8006598:	eb12 0801 	adds.w	r8, r2, r1
 800659c:	4629      	mov	r1, r5
 800659e:	eb43 0901 	adc.w	r9, r3, r1
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065b6:	4690      	mov	r8, r2
 80065b8:	4699      	mov	r9, r3
 80065ba:	4623      	mov	r3, r4
 80065bc:	eb18 0303 	adds.w	r3, r8, r3
 80065c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065c4:	462b      	mov	r3, r5
 80065c6:	eb49 0303 	adc.w	r3, r9, r3
 80065ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065e2:	460b      	mov	r3, r1
 80065e4:	18db      	adds	r3, r3, r3
 80065e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80065e8:	4613      	mov	r3, r2
 80065ea:	eb42 0303 	adc.w	r3, r2, r3
 80065ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80065f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80065f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80065f8:	f7f9 fe3a 	bl	8000270 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4b61      	ldr	r3, [pc, #388]	@ (8006788 <UART_SetConfig+0x2d4>)
 8006602:	fba3 2302 	umull	r2, r3, r3, r2
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	011c      	lsls	r4, r3, #4
 800660a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800660e:	2200      	movs	r2, #0
 8006610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006614:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006618:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800661c:	4642      	mov	r2, r8
 800661e:	464b      	mov	r3, r9
 8006620:	1891      	adds	r1, r2, r2
 8006622:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006624:	415b      	adcs	r3, r3
 8006626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006628:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800662c:	4641      	mov	r1, r8
 800662e:	eb12 0a01 	adds.w	sl, r2, r1
 8006632:	4649      	mov	r1, r9
 8006634:	eb43 0b01 	adc.w	fp, r3, r1
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006644:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800664c:	4692      	mov	sl, r2
 800664e:	469b      	mov	fp, r3
 8006650:	4643      	mov	r3, r8
 8006652:	eb1a 0303 	adds.w	r3, sl, r3
 8006656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800665a:	464b      	mov	r3, r9
 800665c:	eb4b 0303 	adc.w	r3, fp, r3
 8006660:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006670:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006674:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006678:	460b      	mov	r3, r1
 800667a:	18db      	adds	r3, r3, r3
 800667c:	643b      	str	r3, [r7, #64]	@ 0x40
 800667e:	4613      	mov	r3, r2
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	647b      	str	r3, [r7, #68]	@ 0x44
 8006686:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800668a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800668e:	f7f9 fdef 	bl	8000270 <__aeabi_uldivmod>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4611      	mov	r1, r2
 8006698:	4b3b      	ldr	r3, [pc, #236]	@ (8006788 <UART_SetConfig+0x2d4>)
 800669a:	fba3 2301 	umull	r2, r3, r3, r1
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	2264      	movs	r2, #100	@ 0x64
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	1acb      	subs	r3, r1, r3
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066ae:	4b36      	ldr	r3, [pc, #216]	@ (8006788 <UART_SetConfig+0x2d4>)
 80066b0:	fba3 2302 	umull	r2, r3, r3, r2
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066bc:	441c      	add	r4, r3
 80066be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	1891      	adds	r1, r2, r2
 80066d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066d8:	415b      	adcs	r3, r3
 80066da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80066e0:	4641      	mov	r1, r8
 80066e2:	1851      	adds	r1, r2, r1
 80066e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80066e6:	4649      	mov	r1, r9
 80066e8:	414b      	adcs	r3, r1
 80066ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80066f8:	4659      	mov	r1, fp
 80066fa:	00cb      	lsls	r3, r1, #3
 80066fc:	4651      	mov	r1, sl
 80066fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006702:	4651      	mov	r1, sl
 8006704:	00ca      	lsls	r2, r1, #3
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	4603      	mov	r3, r0
 800670c:	4642      	mov	r2, r8
 800670e:	189b      	adds	r3, r3, r2
 8006710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006714:	464b      	mov	r3, r9
 8006716:	460a      	mov	r2, r1
 8006718:	eb42 0303 	adc.w	r3, r2, r3
 800671c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800672c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006734:	460b      	mov	r3, r1
 8006736:	18db      	adds	r3, r3, r3
 8006738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800673a:	4613      	mov	r3, r2
 800673c:	eb42 0303 	adc.w	r3, r2, r3
 8006740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006742:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006746:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800674a:	f7f9 fd91 	bl	8000270 <__aeabi_uldivmod>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4b0d      	ldr	r3, [pc, #52]	@ (8006788 <UART_SetConfig+0x2d4>)
 8006754:	fba3 1302 	umull	r1, r3, r3, r2
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	2164      	movs	r1, #100	@ 0x64
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	3332      	adds	r3, #50	@ 0x32
 8006766:	4a08      	ldr	r2, [pc, #32]	@ (8006788 <UART_SetConfig+0x2d4>)
 8006768:	fba2 2303 	umull	r2, r3, r2, r3
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	f003 0207 	and.w	r2, r3, #7
 8006772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4422      	add	r2, r4
 800677a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800677c:	e106      	b.n	800698c <UART_SetConfig+0x4d8>
 800677e:	bf00      	nop
 8006780:	40011000 	.word	0x40011000
 8006784:	40011400 	.word	0x40011400
 8006788:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800678c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006790:	2200      	movs	r2, #0
 8006792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006796:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800679a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800679e:	4642      	mov	r2, r8
 80067a0:	464b      	mov	r3, r9
 80067a2:	1891      	adds	r1, r2, r2
 80067a4:	6239      	str	r1, [r7, #32]
 80067a6:	415b      	adcs	r3, r3
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ae:	4641      	mov	r1, r8
 80067b0:	1854      	adds	r4, r2, r1
 80067b2:	4649      	mov	r1, r9
 80067b4:	eb43 0501 	adc.w	r5, r3, r1
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	00eb      	lsls	r3, r5, #3
 80067c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067c6:	00e2      	lsls	r2, r4, #3
 80067c8:	4614      	mov	r4, r2
 80067ca:	461d      	mov	r5, r3
 80067cc:	4643      	mov	r3, r8
 80067ce:	18e3      	adds	r3, r4, r3
 80067d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067d4:	464b      	mov	r3, r9
 80067d6:	eb45 0303 	adc.w	r3, r5, r3
 80067da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067ee:	f04f 0200 	mov.w	r2, #0
 80067f2:	f04f 0300 	mov.w	r3, #0
 80067f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067fa:	4629      	mov	r1, r5
 80067fc:	008b      	lsls	r3, r1, #2
 80067fe:	4621      	mov	r1, r4
 8006800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006804:	4621      	mov	r1, r4
 8006806:	008a      	lsls	r2, r1, #2
 8006808:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800680c:	f7f9 fd30 	bl	8000270 <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4b60      	ldr	r3, [pc, #384]	@ (8006998 <UART_SetConfig+0x4e4>)
 8006816:	fba3 2302 	umull	r2, r3, r3, r2
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	011c      	lsls	r4, r3, #4
 800681e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006828:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800682c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006830:	4642      	mov	r2, r8
 8006832:	464b      	mov	r3, r9
 8006834:	1891      	adds	r1, r2, r2
 8006836:	61b9      	str	r1, [r7, #24]
 8006838:	415b      	adcs	r3, r3
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006840:	4641      	mov	r1, r8
 8006842:	1851      	adds	r1, r2, r1
 8006844:	6139      	str	r1, [r7, #16]
 8006846:	4649      	mov	r1, r9
 8006848:	414b      	adcs	r3, r1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006858:	4659      	mov	r1, fp
 800685a:	00cb      	lsls	r3, r1, #3
 800685c:	4651      	mov	r1, sl
 800685e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006862:	4651      	mov	r1, sl
 8006864:	00ca      	lsls	r2, r1, #3
 8006866:	4610      	mov	r0, r2
 8006868:	4619      	mov	r1, r3
 800686a:	4603      	mov	r3, r0
 800686c:	4642      	mov	r2, r8
 800686e:	189b      	adds	r3, r3, r2
 8006870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006874:	464b      	mov	r3, r9
 8006876:	460a      	mov	r2, r1
 8006878:	eb42 0303 	adc.w	r3, r2, r3
 800687c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	67bb      	str	r3, [r7, #120]	@ 0x78
 800688a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	f04f 0300 	mov.w	r3, #0
 8006894:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006898:	4649      	mov	r1, r9
 800689a:	008b      	lsls	r3, r1, #2
 800689c:	4641      	mov	r1, r8
 800689e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068a2:	4641      	mov	r1, r8
 80068a4:	008a      	lsls	r2, r1, #2
 80068a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068aa:	f7f9 fce1 	bl	8000270 <__aeabi_uldivmod>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	4b38      	ldr	r3, [pc, #224]	@ (8006998 <UART_SetConfig+0x4e4>)
 80068b6:	fba3 2301 	umull	r2, r3, r3, r1
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2264      	movs	r2, #100	@ 0x64
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	1acb      	subs	r3, r1, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	3332      	adds	r3, #50	@ 0x32
 80068c8:	4a33      	ldr	r2, [pc, #204]	@ (8006998 <UART_SetConfig+0x4e4>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068d4:	441c      	add	r4, r3
 80068d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068da:	2200      	movs	r2, #0
 80068dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80068de:	677a      	str	r2, [r7, #116]	@ 0x74
 80068e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80068e4:	4642      	mov	r2, r8
 80068e6:	464b      	mov	r3, r9
 80068e8:	1891      	adds	r1, r2, r2
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	415b      	adcs	r3, r3
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068f4:	4641      	mov	r1, r8
 80068f6:	1851      	adds	r1, r2, r1
 80068f8:	6039      	str	r1, [r7, #0]
 80068fa:	4649      	mov	r1, r9
 80068fc:	414b      	adcs	r3, r1
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800690c:	4659      	mov	r1, fp
 800690e:	00cb      	lsls	r3, r1, #3
 8006910:	4651      	mov	r1, sl
 8006912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006916:	4651      	mov	r1, sl
 8006918:	00ca      	lsls	r2, r1, #3
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	4603      	mov	r3, r0
 8006920:	4642      	mov	r2, r8
 8006922:	189b      	adds	r3, r3, r2
 8006924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006926:	464b      	mov	r3, r9
 8006928:	460a      	mov	r2, r1
 800692a:	eb42 0303 	adc.w	r3, r2, r3
 800692e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	663b      	str	r3, [r7, #96]	@ 0x60
 800693a:	667a      	str	r2, [r7, #100]	@ 0x64
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006948:	4649      	mov	r1, r9
 800694a:	008b      	lsls	r3, r1, #2
 800694c:	4641      	mov	r1, r8
 800694e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006952:	4641      	mov	r1, r8
 8006954:	008a      	lsls	r2, r1, #2
 8006956:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800695a:	f7f9 fc89 	bl	8000270 <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <UART_SetConfig+0x4e4>)
 8006964:	fba3 1302 	umull	r1, r3, r3, r2
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	2164      	movs	r1, #100	@ 0x64
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	3332      	adds	r3, #50	@ 0x32
 8006976:	4a08      	ldr	r2, [pc, #32]	@ (8006998 <UART_SetConfig+0x4e4>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	f003 020f 	and.w	r2, r3, #15
 8006982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4422      	add	r2, r4
 800698a:	609a      	str	r2, [r3, #8]
}
 800698c:	bf00      	nop
 800698e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006992:	46bd      	mov	sp, r7
 8006994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006998:	51eb851f 	.word	0x51eb851f

0800699c <siprintf>:
 800699c:	b40e      	push	{r1, r2, r3}
 800699e:	b500      	push	{lr}
 80069a0:	b09c      	sub	sp, #112	@ 0x70
 80069a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80069a4:	9002      	str	r0, [sp, #8]
 80069a6:	9006      	str	r0, [sp, #24]
 80069a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069ac:	4809      	ldr	r0, [pc, #36]	@ (80069d4 <siprintf+0x38>)
 80069ae:	9107      	str	r1, [sp, #28]
 80069b0:	9104      	str	r1, [sp, #16]
 80069b2:	4909      	ldr	r1, [pc, #36]	@ (80069d8 <siprintf+0x3c>)
 80069b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b8:	9105      	str	r1, [sp, #20]
 80069ba:	6800      	ldr	r0, [r0, #0]
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	a902      	add	r1, sp, #8
 80069c0:	f000 f994 	bl	8006cec <_svfiprintf_r>
 80069c4:	9b02      	ldr	r3, [sp, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	b01c      	add	sp, #112	@ 0x70
 80069cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d0:	b003      	add	sp, #12
 80069d2:	4770      	bx	lr
 80069d4:	20000170 	.word	0x20000170
 80069d8:	ffff0208 	.word	0xffff0208

080069dc <memset>:
 80069dc:	4402      	add	r2, r0
 80069de:	4603      	mov	r3, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <__errno>:
 80069ec:	4b01      	ldr	r3, [pc, #4]	@ (80069f4 <__errno+0x8>)
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000170 	.word	0x20000170

080069f8 <__libc_init_array>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006a30 <__libc_init_array+0x38>)
 80069fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006a34 <__libc_init_array+0x3c>)
 80069fe:	1b64      	subs	r4, r4, r5
 8006a00:	10a4      	asrs	r4, r4, #2
 8006a02:	2600      	movs	r6, #0
 8006a04:	42a6      	cmp	r6, r4
 8006a06:	d109      	bne.n	8006a1c <__libc_init_array+0x24>
 8006a08:	4d0b      	ldr	r5, [pc, #44]	@ (8006a38 <__libc_init_array+0x40>)
 8006a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006a3c <__libc_init_array+0x44>)
 8006a0c:	f000 fc66 	bl	80072dc <_init>
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	2600      	movs	r6, #0
 8006a16:	42a6      	cmp	r6, r4
 8006a18:	d105      	bne.n	8006a26 <__libc_init_array+0x2e>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a20:	4798      	blx	r3
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7ee      	b.n	8006a04 <__libc_init_array+0xc>
 8006a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2a:	4798      	blx	r3
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	e7f2      	b.n	8006a16 <__libc_init_array+0x1e>
 8006a30:	080073a4 	.word	0x080073a4
 8006a34:	080073a4 	.word	0x080073a4
 8006a38:	080073a4 	.word	0x080073a4
 8006a3c:	080073a8 	.word	0x080073a8

08006a40 <__retarget_lock_acquire_recursive>:
 8006a40:	4770      	bx	lr

08006a42 <__retarget_lock_release_recursive>:
 8006a42:	4770      	bx	lr

08006a44 <_free_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4605      	mov	r5, r0
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	d041      	beq.n	8006ad0 <_free_r+0x8c>
 8006a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a50:	1f0c      	subs	r4, r1, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bfb8      	it	lt
 8006a56:	18e4      	addlt	r4, r4, r3
 8006a58:	f000 f8e0 	bl	8006c1c <__malloc_lock>
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad4 <_free_r+0x90>)
 8006a5e:	6813      	ldr	r3, [r2, #0]
 8006a60:	b933      	cbnz	r3, 8006a70 <_free_r+0x2c>
 8006a62:	6063      	str	r3, [r4, #4]
 8006a64:	6014      	str	r4, [r2, #0]
 8006a66:	4628      	mov	r0, r5
 8006a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a6c:	f000 b8dc 	b.w	8006c28 <__malloc_unlock>
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	d908      	bls.n	8006a86 <_free_r+0x42>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	1821      	adds	r1, r4, r0
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf01      	itttt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	e7ed      	b.n	8006a62 <_free_r+0x1e>
 8006a86:	461a      	mov	r2, r3
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	b10b      	cbz	r3, 8006a90 <_free_r+0x4c>
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	d9fa      	bls.n	8006a86 <_free_r+0x42>
 8006a90:	6811      	ldr	r1, [r2, #0]
 8006a92:	1850      	adds	r0, r2, r1
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d10b      	bne.n	8006ab0 <_free_r+0x6c>
 8006a98:	6820      	ldr	r0, [r4, #0]
 8006a9a:	4401      	add	r1, r0
 8006a9c:	1850      	adds	r0, r2, r1
 8006a9e:	4283      	cmp	r3, r0
 8006aa0:	6011      	str	r1, [r2, #0]
 8006aa2:	d1e0      	bne.n	8006a66 <_free_r+0x22>
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	6053      	str	r3, [r2, #4]
 8006aaa:	4408      	add	r0, r1
 8006aac:	6010      	str	r0, [r2, #0]
 8006aae:	e7da      	b.n	8006a66 <_free_r+0x22>
 8006ab0:	d902      	bls.n	8006ab8 <_free_r+0x74>
 8006ab2:	230c      	movs	r3, #12
 8006ab4:	602b      	str	r3, [r5, #0]
 8006ab6:	e7d6      	b.n	8006a66 <_free_r+0x22>
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	1821      	adds	r1, r4, r0
 8006abc:	428b      	cmp	r3, r1
 8006abe:	bf04      	itt	eq
 8006ac0:	6819      	ldreq	r1, [r3, #0]
 8006ac2:	685b      	ldreq	r3, [r3, #4]
 8006ac4:	6063      	str	r3, [r4, #4]
 8006ac6:	bf04      	itt	eq
 8006ac8:	1809      	addeq	r1, r1, r0
 8006aca:	6021      	streq	r1, [r4, #0]
 8006acc:	6054      	str	r4, [r2, #4]
 8006ace:	e7ca      	b.n	8006a66 <_free_r+0x22>
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200007a8 	.word	0x200007a8

08006ad8 <sbrk_aligned>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	4e0f      	ldr	r6, [pc, #60]	@ (8006b18 <sbrk_aligned+0x40>)
 8006adc:	460c      	mov	r4, r1
 8006ade:	6831      	ldr	r1, [r6, #0]
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	b911      	cbnz	r1, 8006aea <sbrk_aligned+0x12>
 8006ae4:	f000 fba6 	bl	8007234 <_sbrk_r>
 8006ae8:	6030      	str	r0, [r6, #0]
 8006aea:	4621      	mov	r1, r4
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fba1 	bl	8007234 <_sbrk_r>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	d103      	bne.n	8006afe <sbrk_aligned+0x26>
 8006af6:	f04f 34ff 	mov.w	r4, #4294967295
 8006afa:	4620      	mov	r0, r4
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	1cc4      	adds	r4, r0, #3
 8006b00:	f024 0403 	bic.w	r4, r4, #3
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	d0f8      	beq.n	8006afa <sbrk_aligned+0x22>
 8006b08:	1a21      	subs	r1, r4, r0
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	f000 fb92 	bl	8007234 <_sbrk_r>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d1f2      	bne.n	8006afa <sbrk_aligned+0x22>
 8006b14:	e7ef      	b.n	8006af6 <sbrk_aligned+0x1e>
 8006b16:	bf00      	nop
 8006b18:	200007a4 	.word	0x200007a4

08006b1c <_malloc_r>:
 8006b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b20:	1ccd      	adds	r5, r1, #3
 8006b22:	f025 0503 	bic.w	r5, r5, #3
 8006b26:	3508      	adds	r5, #8
 8006b28:	2d0c      	cmp	r5, #12
 8006b2a:	bf38      	it	cc
 8006b2c:	250c      	movcc	r5, #12
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	4606      	mov	r6, r0
 8006b32:	db01      	blt.n	8006b38 <_malloc_r+0x1c>
 8006b34:	42a9      	cmp	r1, r5
 8006b36:	d904      	bls.n	8006b42 <_malloc_r+0x26>
 8006b38:	230c      	movs	r3, #12
 8006b3a:	6033      	str	r3, [r6, #0]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c18 <_malloc_r+0xfc>
 8006b46:	f000 f869 	bl	8006c1c <__malloc_lock>
 8006b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b4e:	461c      	mov	r4, r3
 8006b50:	bb44      	cbnz	r4, 8006ba4 <_malloc_r+0x88>
 8006b52:	4629      	mov	r1, r5
 8006b54:	4630      	mov	r0, r6
 8006b56:	f7ff ffbf 	bl	8006ad8 <sbrk_aligned>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	d158      	bne.n	8006c12 <_malloc_r+0xf6>
 8006b60:	f8d8 4000 	ldr.w	r4, [r8]
 8006b64:	4627      	mov	r7, r4
 8006b66:	2f00      	cmp	r7, #0
 8006b68:	d143      	bne.n	8006bf2 <_malloc_r+0xd6>
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	d04b      	beq.n	8006c06 <_malloc_r+0xea>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	4639      	mov	r1, r7
 8006b72:	4630      	mov	r0, r6
 8006b74:	eb04 0903 	add.w	r9, r4, r3
 8006b78:	f000 fb5c 	bl	8007234 <_sbrk_r>
 8006b7c:	4581      	cmp	r9, r0
 8006b7e:	d142      	bne.n	8006c06 <_malloc_r+0xea>
 8006b80:	6821      	ldr	r1, [r4, #0]
 8006b82:	1a6d      	subs	r5, r5, r1
 8006b84:	4629      	mov	r1, r5
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ffa6 	bl	8006ad8 <sbrk_aligned>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d03a      	beq.n	8006c06 <_malloc_r+0xea>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	442b      	add	r3, r5
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	f8d8 3000 	ldr.w	r3, [r8]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	bb62      	cbnz	r2, 8006bf8 <_malloc_r+0xdc>
 8006b9e:	f8c8 7000 	str.w	r7, [r8]
 8006ba2:	e00f      	b.n	8006bc4 <_malloc_r+0xa8>
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	1b52      	subs	r2, r2, r5
 8006ba8:	d420      	bmi.n	8006bec <_malloc_r+0xd0>
 8006baa:	2a0b      	cmp	r2, #11
 8006bac:	d917      	bls.n	8006bde <_malloc_r+0xc2>
 8006bae:	1961      	adds	r1, r4, r5
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	6025      	str	r5, [r4, #0]
 8006bb4:	bf18      	it	ne
 8006bb6:	6059      	strne	r1, [r3, #4]
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	bf08      	it	eq
 8006bbc:	f8c8 1000 	streq.w	r1, [r8]
 8006bc0:	5162      	str	r2, [r4, r5]
 8006bc2:	604b      	str	r3, [r1, #4]
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f000 f82f 	bl	8006c28 <__malloc_unlock>
 8006bca:	f104 000b 	add.w	r0, r4, #11
 8006bce:	1d23      	adds	r3, r4, #4
 8006bd0:	f020 0007 	bic.w	r0, r0, #7
 8006bd4:	1ac2      	subs	r2, r0, r3
 8006bd6:	bf1c      	itt	ne
 8006bd8:	1a1b      	subne	r3, r3, r0
 8006bda:	50a3      	strne	r3, [r4, r2]
 8006bdc:	e7af      	b.n	8006b3e <_malloc_r+0x22>
 8006bde:	6862      	ldr	r2, [r4, #4]
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	bf0c      	ite	eq
 8006be4:	f8c8 2000 	streq.w	r2, [r8]
 8006be8:	605a      	strne	r2, [r3, #4]
 8006bea:	e7eb      	b.n	8006bc4 <_malloc_r+0xa8>
 8006bec:	4623      	mov	r3, r4
 8006bee:	6864      	ldr	r4, [r4, #4]
 8006bf0:	e7ae      	b.n	8006b50 <_malloc_r+0x34>
 8006bf2:	463c      	mov	r4, r7
 8006bf4:	687f      	ldr	r7, [r7, #4]
 8006bf6:	e7b6      	b.n	8006b66 <_malloc_r+0x4a>
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	d1fb      	bne.n	8006bf8 <_malloc_r+0xdc>
 8006c00:	2300      	movs	r3, #0
 8006c02:	6053      	str	r3, [r2, #4]
 8006c04:	e7de      	b.n	8006bc4 <_malloc_r+0xa8>
 8006c06:	230c      	movs	r3, #12
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f80c 	bl	8006c28 <__malloc_unlock>
 8006c10:	e794      	b.n	8006b3c <_malloc_r+0x20>
 8006c12:	6005      	str	r5, [r0, #0]
 8006c14:	e7d6      	b.n	8006bc4 <_malloc_r+0xa8>
 8006c16:	bf00      	nop
 8006c18:	200007a8 	.word	0x200007a8

08006c1c <__malloc_lock>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__malloc_lock+0x8>)
 8006c1e:	f7ff bf0f 	b.w	8006a40 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	200007a0 	.word	0x200007a0

08006c28 <__malloc_unlock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__malloc_unlock+0x8>)
 8006c2a:	f7ff bf0a 	b.w	8006a42 <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	200007a0 	.word	0x200007a0

08006c34 <__ssputs_r>:
 8006c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	688e      	ldr	r6, [r1, #8]
 8006c3a:	461f      	mov	r7, r3
 8006c3c:	42be      	cmp	r6, r7
 8006c3e:	680b      	ldr	r3, [r1, #0]
 8006c40:	4682      	mov	sl, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	4690      	mov	r8, r2
 8006c46:	d82d      	bhi.n	8006ca4 <__ssputs_r+0x70>
 8006c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c50:	d026      	beq.n	8006ca0 <__ssputs_r+0x6c>
 8006c52:	6965      	ldr	r5, [r4, #20]
 8006c54:	6909      	ldr	r1, [r1, #16]
 8006c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c5a:	eba3 0901 	sub.w	r9, r3, r1
 8006c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c62:	1c7b      	adds	r3, r7, #1
 8006c64:	444b      	add	r3, r9
 8006c66:	106d      	asrs	r5, r5, #1
 8006c68:	429d      	cmp	r5, r3
 8006c6a:	bf38      	it	cc
 8006c6c:	461d      	movcc	r5, r3
 8006c6e:	0553      	lsls	r3, r2, #21
 8006c70:	d527      	bpl.n	8006cc2 <__ssputs_r+0x8e>
 8006c72:	4629      	mov	r1, r5
 8006c74:	f7ff ff52 	bl	8006b1c <_malloc_r>
 8006c78:	4606      	mov	r6, r0
 8006c7a:	b360      	cbz	r0, 8006cd6 <__ssputs_r+0xa2>
 8006c7c:	6921      	ldr	r1, [r4, #16]
 8006c7e:	464a      	mov	r2, r9
 8006c80:	f000 fae8 	bl	8007254 <memcpy>
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	6126      	str	r6, [r4, #16]
 8006c92:	6165      	str	r5, [r4, #20]
 8006c94:	444e      	add	r6, r9
 8006c96:	eba5 0509 	sub.w	r5, r5, r9
 8006c9a:	6026      	str	r6, [r4, #0]
 8006c9c:	60a5      	str	r5, [r4, #8]
 8006c9e:	463e      	mov	r6, r7
 8006ca0:	42be      	cmp	r6, r7
 8006ca2:	d900      	bls.n	8006ca6 <__ssputs_r+0x72>
 8006ca4:	463e      	mov	r6, r7
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	4632      	mov	r2, r6
 8006caa:	4641      	mov	r1, r8
 8006cac:	f000 faa8 	bl	8007200 <memmove>
 8006cb0:	68a3      	ldr	r3, [r4, #8]
 8006cb2:	1b9b      	subs	r3, r3, r6
 8006cb4:	60a3      	str	r3, [r4, #8]
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	4433      	add	r3, r6
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	f000 fad4 	bl	8007270 <_realloc_r>
 8006cc8:	4606      	mov	r6, r0
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d1e0      	bne.n	8006c90 <__ssputs_r+0x5c>
 8006cce:	6921      	ldr	r1, [r4, #16]
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	f7ff feb7 	bl	8006a44 <_free_r>
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	f8ca 3000 	str.w	r3, [sl]
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e7e9      	b.n	8006cbe <__ssputs_r+0x8a>
	...

08006cec <_svfiprintf_r>:
 8006cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	4698      	mov	r8, r3
 8006cf2:	898b      	ldrh	r3, [r1, #12]
 8006cf4:	061b      	lsls	r3, r3, #24
 8006cf6:	b09d      	sub	sp, #116	@ 0x74
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	460d      	mov	r5, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	d510      	bpl.n	8006d22 <_svfiprintf_r+0x36>
 8006d00:	690b      	ldr	r3, [r1, #16]
 8006d02:	b973      	cbnz	r3, 8006d22 <_svfiprintf_r+0x36>
 8006d04:	2140      	movs	r1, #64	@ 0x40
 8006d06:	f7ff ff09 	bl	8006b1c <_malloc_r>
 8006d0a:	6028      	str	r0, [r5, #0]
 8006d0c:	6128      	str	r0, [r5, #16]
 8006d0e:	b930      	cbnz	r0, 8006d1e <_svfiprintf_r+0x32>
 8006d10:	230c      	movs	r3, #12
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295
 8006d18:	b01d      	add	sp, #116	@ 0x74
 8006d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1e:	2340      	movs	r3, #64	@ 0x40
 8006d20:	616b      	str	r3, [r5, #20]
 8006d22:	2300      	movs	r3, #0
 8006d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d26:	2320      	movs	r3, #32
 8006d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d30:	2330      	movs	r3, #48	@ 0x30
 8006d32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ed0 <_svfiprintf_r+0x1e4>
 8006d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d3a:	f04f 0901 	mov.w	r9, #1
 8006d3e:	4623      	mov	r3, r4
 8006d40:	469a      	mov	sl, r3
 8006d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d46:	b10a      	cbz	r2, 8006d4c <_svfiprintf_r+0x60>
 8006d48:	2a25      	cmp	r2, #37	@ 0x25
 8006d4a:	d1f9      	bne.n	8006d40 <_svfiprintf_r+0x54>
 8006d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006d50:	d00b      	beq.n	8006d6a <_svfiprintf_r+0x7e>
 8006d52:	465b      	mov	r3, fp
 8006d54:	4622      	mov	r2, r4
 8006d56:	4629      	mov	r1, r5
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff ff6b 	bl	8006c34 <__ssputs_r>
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f000 80a7 	beq.w	8006eb2 <_svfiprintf_r+0x1c6>
 8006d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d66:	445a      	add	r2, fp
 8006d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 809f 	beq.w	8006eb2 <_svfiprintf_r+0x1c6>
 8006d74:	2300      	movs	r3, #0
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d7e:	f10a 0a01 	add.w	sl, sl, #1
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	9307      	str	r3, [sp, #28]
 8006d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d8c:	4654      	mov	r4, sl
 8006d8e:	2205      	movs	r2, #5
 8006d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d94:	484e      	ldr	r0, [pc, #312]	@ (8006ed0 <_svfiprintf_r+0x1e4>)
 8006d96:	f7f9 fa1b 	bl	80001d0 <memchr>
 8006d9a:	9a04      	ldr	r2, [sp, #16]
 8006d9c:	b9d8      	cbnz	r0, 8006dd6 <_svfiprintf_r+0xea>
 8006d9e:	06d0      	lsls	r0, r2, #27
 8006da0:	bf44      	itt	mi
 8006da2:	2320      	movmi	r3, #32
 8006da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006da8:	0711      	lsls	r1, r2, #28
 8006daa:	bf44      	itt	mi
 8006dac:	232b      	movmi	r3, #43	@ 0x2b
 8006dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006db2:	f89a 3000 	ldrb.w	r3, [sl]
 8006db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db8:	d015      	beq.n	8006de6 <_svfiprintf_r+0xfa>
 8006dba:	9a07      	ldr	r2, [sp, #28]
 8006dbc:	4654      	mov	r4, sl
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f04f 0c0a 	mov.w	ip, #10
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dca:	3b30      	subs	r3, #48	@ 0x30
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	d94b      	bls.n	8006e68 <_svfiprintf_r+0x17c>
 8006dd0:	b1b0      	cbz	r0, 8006e00 <_svfiprintf_r+0x114>
 8006dd2:	9207      	str	r2, [sp, #28]
 8006dd4:	e014      	b.n	8006e00 <_svfiprintf_r+0x114>
 8006dd6:	eba0 0308 	sub.w	r3, r0, r8
 8006dda:	fa09 f303 	lsl.w	r3, r9, r3
 8006dde:	4313      	orrs	r3, r2
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	46a2      	mov	sl, r4
 8006de4:	e7d2      	b.n	8006d8c <_svfiprintf_r+0xa0>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	1d19      	adds	r1, r3, #4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	9103      	str	r1, [sp, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bfbb      	ittet	lt
 8006df2:	425b      	neglt	r3, r3
 8006df4:	f042 0202 	orrlt.w	r2, r2, #2
 8006df8:	9307      	strge	r3, [sp, #28]
 8006dfa:	9307      	strlt	r3, [sp, #28]
 8006dfc:	bfb8      	it	lt
 8006dfe:	9204      	strlt	r2, [sp, #16]
 8006e00:	7823      	ldrb	r3, [r4, #0]
 8006e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e04:	d10a      	bne.n	8006e1c <_svfiprintf_r+0x130>
 8006e06:	7863      	ldrb	r3, [r4, #1]
 8006e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e0a:	d132      	bne.n	8006e72 <_svfiprintf_r+0x186>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	1d1a      	adds	r2, r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	9203      	str	r2, [sp, #12]
 8006e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e18:	3402      	adds	r4, #2
 8006e1a:	9305      	str	r3, [sp, #20]
 8006e1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ee0 <_svfiprintf_r+0x1f4>
 8006e20:	7821      	ldrb	r1, [r4, #0]
 8006e22:	2203      	movs	r2, #3
 8006e24:	4650      	mov	r0, sl
 8006e26:	f7f9 f9d3 	bl	80001d0 <memchr>
 8006e2a:	b138      	cbz	r0, 8006e3c <_svfiprintf_r+0x150>
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	eba0 000a 	sub.w	r0, r0, sl
 8006e32:	2240      	movs	r2, #64	@ 0x40
 8006e34:	4082      	lsls	r2, r0
 8006e36:	4313      	orrs	r3, r2
 8006e38:	3401      	adds	r4, #1
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e40:	4824      	ldr	r0, [pc, #144]	@ (8006ed4 <_svfiprintf_r+0x1e8>)
 8006e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e46:	2206      	movs	r2, #6
 8006e48:	f7f9 f9c2 	bl	80001d0 <memchr>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d036      	beq.n	8006ebe <_svfiprintf_r+0x1d2>
 8006e50:	4b21      	ldr	r3, [pc, #132]	@ (8006ed8 <_svfiprintf_r+0x1ec>)
 8006e52:	bb1b      	cbnz	r3, 8006e9c <_svfiprintf_r+0x1b0>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	3307      	adds	r3, #7
 8006e58:	f023 0307 	bic.w	r3, r3, #7
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	9303      	str	r3, [sp, #12]
 8006e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e62:	4433      	add	r3, r6
 8006e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e66:	e76a      	b.n	8006d3e <_svfiprintf_r+0x52>
 8006e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	2001      	movs	r0, #1
 8006e70:	e7a8      	b.n	8006dc4 <_svfiprintf_r+0xd8>
 8006e72:	2300      	movs	r3, #0
 8006e74:	3401      	adds	r4, #1
 8006e76:	9305      	str	r3, [sp, #20]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f04f 0c0a 	mov.w	ip, #10
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e84:	3a30      	subs	r2, #48	@ 0x30
 8006e86:	2a09      	cmp	r2, #9
 8006e88:	d903      	bls.n	8006e92 <_svfiprintf_r+0x1a6>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0c6      	beq.n	8006e1c <_svfiprintf_r+0x130>
 8006e8e:	9105      	str	r1, [sp, #20]
 8006e90:	e7c4      	b.n	8006e1c <_svfiprintf_r+0x130>
 8006e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e96:	4604      	mov	r4, r0
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e7f0      	b.n	8006e7e <_svfiprintf_r+0x192>
 8006e9c:	ab03      	add	r3, sp, #12
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8006edc <_svfiprintf_r+0x1f0>)
 8006ea4:	a904      	add	r1, sp, #16
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	f3af 8000 	nop.w
 8006eac:	1c42      	adds	r2, r0, #1
 8006eae:	4606      	mov	r6, r0
 8006eb0:	d1d6      	bne.n	8006e60 <_svfiprintf_r+0x174>
 8006eb2:	89ab      	ldrh	r3, [r5, #12]
 8006eb4:	065b      	lsls	r3, r3, #25
 8006eb6:	f53f af2d 	bmi.w	8006d14 <_svfiprintf_r+0x28>
 8006eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ebc:	e72c      	b.n	8006d18 <_svfiprintf_r+0x2c>
 8006ebe:	ab03      	add	r3, sp, #12
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	462a      	mov	r2, r5
 8006ec4:	4b05      	ldr	r3, [pc, #20]	@ (8006edc <_svfiprintf_r+0x1f0>)
 8006ec6:	a904      	add	r1, sp, #16
 8006ec8:	4638      	mov	r0, r7
 8006eca:	f000 f879 	bl	8006fc0 <_printf_i>
 8006ece:	e7ed      	b.n	8006eac <_svfiprintf_r+0x1c0>
 8006ed0:	08007368 	.word	0x08007368
 8006ed4:	08007372 	.word	0x08007372
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	08006c35 	.word	0x08006c35
 8006ee0:	0800736e 	.word	0x0800736e

08006ee4 <_printf_common>:
 8006ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	4616      	mov	r6, r2
 8006eea:	4698      	mov	r8, r3
 8006eec:	688a      	ldr	r2, [r1, #8]
 8006eee:	690b      	ldr	r3, [r1, #16]
 8006ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	bfb8      	it	lt
 8006ef8:	4613      	movlt	r3, r2
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f00:	4607      	mov	r7, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	b10a      	cbz	r2, 8006f0a <_printf_common+0x26>
 8006f06:	3301      	adds	r3, #1
 8006f08:	6033      	str	r3, [r6, #0]
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	0699      	lsls	r1, r3, #26
 8006f0e:	bf42      	ittt	mi
 8006f10:	6833      	ldrmi	r3, [r6, #0]
 8006f12:	3302      	addmi	r3, #2
 8006f14:	6033      	strmi	r3, [r6, #0]
 8006f16:	6825      	ldr	r5, [r4, #0]
 8006f18:	f015 0506 	ands.w	r5, r5, #6
 8006f1c:	d106      	bne.n	8006f2c <_printf_common+0x48>
 8006f1e:	f104 0a19 	add.w	sl, r4, #25
 8006f22:	68e3      	ldr	r3, [r4, #12]
 8006f24:	6832      	ldr	r2, [r6, #0]
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	dc26      	bgt.n	8006f7a <_printf_common+0x96>
 8006f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f30:	6822      	ldr	r2, [r4, #0]
 8006f32:	3b00      	subs	r3, #0
 8006f34:	bf18      	it	ne
 8006f36:	2301      	movne	r3, #1
 8006f38:	0692      	lsls	r2, r2, #26
 8006f3a:	d42b      	bmi.n	8006f94 <_printf_common+0xb0>
 8006f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f40:	4641      	mov	r1, r8
 8006f42:	4638      	mov	r0, r7
 8006f44:	47c8      	blx	r9
 8006f46:	3001      	adds	r0, #1
 8006f48:	d01e      	beq.n	8006f88 <_printf_common+0xa4>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	f003 0306 	and.w	r3, r3, #6
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	bf02      	ittt	eq
 8006f56:	68e5      	ldreq	r5, [r4, #12]
 8006f58:	6833      	ldreq	r3, [r6, #0]
 8006f5a:	1aed      	subeq	r5, r5, r3
 8006f5c:	68a3      	ldr	r3, [r4, #8]
 8006f5e:	bf0c      	ite	eq
 8006f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f64:	2500      	movne	r5, #0
 8006f66:	4293      	cmp	r3, r2
 8006f68:	bfc4      	itt	gt
 8006f6a:	1a9b      	subgt	r3, r3, r2
 8006f6c:	18ed      	addgt	r5, r5, r3
 8006f6e:	2600      	movs	r6, #0
 8006f70:	341a      	adds	r4, #26
 8006f72:	42b5      	cmp	r5, r6
 8006f74:	d11a      	bne.n	8006fac <_printf_common+0xc8>
 8006f76:	2000      	movs	r0, #0
 8006f78:	e008      	b.n	8006f8c <_printf_common+0xa8>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4652      	mov	r2, sl
 8006f7e:	4641      	mov	r1, r8
 8006f80:	4638      	mov	r0, r7
 8006f82:	47c8      	blx	r9
 8006f84:	3001      	adds	r0, #1
 8006f86:	d103      	bne.n	8006f90 <_printf_common+0xac>
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f90:	3501      	adds	r5, #1
 8006f92:	e7c6      	b.n	8006f22 <_printf_common+0x3e>
 8006f94:	18e1      	adds	r1, r4, r3
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	2030      	movs	r0, #48	@ 0x30
 8006f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f9e:	4422      	add	r2, r4
 8006fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fa8:	3302      	adds	r3, #2
 8006faa:	e7c7      	b.n	8006f3c <_printf_common+0x58>
 8006fac:	2301      	movs	r3, #1
 8006fae:	4622      	mov	r2, r4
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c8      	blx	r9
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d0e6      	beq.n	8006f88 <_printf_common+0xa4>
 8006fba:	3601      	adds	r6, #1
 8006fbc:	e7d9      	b.n	8006f72 <_printf_common+0x8e>
	...

08006fc0 <_printf_i>:
 8006fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	7e0f      	ldrb	r7, [r1, #24]
 8006fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fc8:	2f78      	cmp	r7, #120	@ 0x78
 8006fca:	4691      	mov	r9, r2
 8006fcc:	4680      	mov	r8, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	469a      	mov	sl, r3
 8006fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fd6:	d807      	bhi.n	8006fe8 <_printf_i+0x28>
 8006fd8:	2f62      	cmp	r7, #98	@ 0x62
 8006fda:	d80a      	bhi.n	8006ff2 <_printf_i+0x32>
 8006fdc:	2f00      	cmp	r7, #0
 8006fde:	f000 80d2 	beq.w	8007186 <_printf_i+0x1c6>
 8006fe2:	2f58      	cmp	r7, #88	@ 0x58
 8006fe4:	f000 80b9 	beq.w	800715a <_printf_i+0x19a>
 8006fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ff0:	e03a      	b.n	8007068 <_printf_i+0xa8>
 8006ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ff6:	2b15      	cmp	r3, #21
 8006ff8:	d8f6      	bhi.n	8006fe8 <_printf_i+0x28>
 8006ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8007000 <_printf_i+0x40>)
 8006ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007000:	08007059 	.word	0x08007059
 8007004:	0800706d 	.word	0x0800706d
 8007008:	08006fe9 	.word	0x08006fe9
 800700c:	08006fe9 	.word	0x08006fe9
 8007010:	08006fe9 	.word	0x08006fe9
 8007014:	08006fe9 	.word	0x08006fe9
 8007018:	0800706d 	.word	0x0800706d
 800701c:	08006fe9 	.word	0x08006fe9
 8007020:	08006fe9 	.word	0x08006fe9
 8007024:	08006fe9 	.word	0x08006fe9
 8007028:	08006fe9 	.word	0x08006fe9
 800702c:	0800716d 	.word	0x0800716d
 8007030:	08007097 	.word	0x08007097
 8007034:	08007127 	.word	0x08007127
 8007038:	08006fe9 	.word	0x08006fe9
 800703c:	08006fe9 	.word	0x08006fe9
 8007040:	0800718f 	.word	0x0800718f
 8007044:	08006fe9 	.word	0x08006fe9
 8007048:	08007097 	.word	0x08007097
 800704c:	08006fe9 	.word	0x08006fe9
 8007050:	08006fe9 	.word	0x08006fe9
 8007054:	0800712f 	.word	0x0800712f
 8007058:	6833      	ldr	r3, [r6, #0]
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6032      	str	r2, [r6, #0]
 8007060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007068:	2301      	movs	r3, #1
 800706a:	e09d      	b.n	80071a8 <_printf_i+0x1e8>
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	6820      	ldr	r0, [r4, #0]
 8007070:	1d19      	adds	r1, r3, #4
 8007072:	6031      	str	r1, [r6, #0]
 8007074:	0606      	lsls	r6, r0, #24
 8007076:	d501      	bpl.n	800707c <_printf_i+0xbc>
 8007078:	681d      	ldr	r5, [r3, #0]
 800707a:	e003      	b.n	8007084 <_printf_i+0xc4>
 800707c:	0645      	lsls	r5, r0, #25
 800707e:	d5fb      	bpl.n	8007078 <_printf_i+0xb8>
 8007080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007084:	2d00      	cmp	r5, #0
 8007086:	da03      	bge.n	8007090 <_printf_i+0xd0>
 8007088:	232d      	movs	r3, #45	@ 0x2d
 800708a:	426d      	negs	r5, r5
 800708c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007090:	4859      	ldr	r0, [pc, #356]	@ (80071f8 <_printf_i+0x238>)
 8007092:	230a      	movs	r3, #10
 8007094:	e011      	b.n	80070ba <_printf_i+0xfa>
 8007096:	6821      	ldr	r1, [r4, #0]
 8007098:	6833      	ldr	r3, [r6, #0]
 800709a:	0608      	lsls	r0, r1, #24
 800709c:	f853 5b04 	ldr.w	r5, [r3], #4
 80070a0:	d402      	bmi.n	80070a8 <_printf_i+0xe8>
 80070a2:	0649      	lsls	r1, r1, #25
 80070a4:	bf48      	it	mi
 80070a6:	b2ad      	uxthmi	r5, r5
 80070a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80070aa:	4853      	ldr	r0, [pc, #332]	@ (80071f8 <_printf_i+0x238>)
 80070ac:	6033      	str	r3, [r6, #0]
 80070ae:	bf14      	ite	ne
 80070b0:	230a      	movne	r3, #10
 80070b2:	2308      	moveq	r3, #8
 80070b4:	2100      	movs	r1, #0
 80070b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070ba:	6866      	ldr	r6, [r4, #4]
 80070bc:	60a6      	str	r6, [r4, #8]
 80070be:	2e00      	cmp	r6, #0
 80070c0:	bfa2      	ittt	ge
 80070c2:	6821      	ldrge	r1, [r4, #0]
 80070c4:	f021 0104 	bicge.w	r1, r1, #4
 80070c8:	6021      	strge	r1, [r4, #0]
 80070ca:	b90d      	cbnz	r5, 80070d0 <_printf_i+0x110>
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	d04b      	beq.n	8007168 <_printf_i+0x1a8>
 80070d0:	4616      	mov	r6, r2
 80070d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80070d6:	fb03 5711 	mls	r7, r3, r1, r5
 80070da:	5dc7      	ldrb	r7, [r0, r7]
 80070dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070e0:	462f      	mov	r7, r5
 80070e2:	42bb      	cmp	r3, r7
 80070e4:	460d      	mov	r5, r1
 80070e6:	d9f4      	bls.n	80070d2 <_printf_i+0x112>
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d10b      	bne.n	8007104 <_printf_i+0x144>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	07df      	lsls	r7, r3, #31
 80070f0:	d508      	bpl.n	8007104 <_printf_i+0x144>
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	6861      	ldr	r1, [r4, #4]
 80070f6:	4299      	cmp	r1, r3
 80070f8:	bfde      	ittt	le
 80070fa:	2330      	movle	r3, #48	@ 0x30
 80070fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007100:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007104:	1b92      	subs	r2, r2, r6
 8007106:	6122      	str	r2, [r4, #16]
 8007108:	f8cd a000 	str.w	sl, [sp]
 800710c:	464b      	mov	r3, r9
 800710e:	aa03      	add	r2, sp, #12
 8007110:	4621      	mov	r1, r4
 8007112:	4640      	mov	r0, r8
 8007114:	f7ff fee6 	bl	8006ee4 <_printf_common>
 8007118:	3001      	adds	r0, #1
 800711a:	d14a      	bne.n	80071b2 <_printf_i+0x1f2>
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	b004      	add	sp, #16
 8007122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	f043 0320 	orr.w	r3, r3, #32
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	4833      	ldr	r0, [pc, #204]	@ (80071fc <_printf_i+0x23c>)
 8007130:	2778      	movs	r7, #120	@ 0x78
 8007132:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	6831      	ldr	r1, [r6, #0]
 800713a:	061f      	lsls	r7, r3, #24
 800713c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007140:	d402      	bmi.n	8007148 <_printf_i+0x188>
 8007142:	065f      	lsls	r7, r3, #25
 8007144:	bf48      	it	mi
 8007146:	b2ad      	uxthmi	r5, r5
 8007148:	6031      	str	r1, [r6, #0]
 800714a:	07d9      	lsls	r1, r3, #31
 800714c:	bf44      	itt	mi
 800714e:	f043 0320 	orrmi.w	r3, r3, #32
 8007152:	6023      	strmi	r3, [r4, #0]
 8007154:	b11d      	cbz	r5, 800715e <_printf_i+0x19e>
 8007156:	2310      	movs	r3, #16
 8007158:	e7ac      	b.n	80070b4 <_printf_i+0xf4>
 800715a:	4827      	ldr	r0, [pc, #156]	@ (80071f8 <_printf_i+0x238>)
 800715c:	e7e9      	b.n	8007132 <_printf_i+0x172>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	f023 0320 	bic.w	r3, r3, #32
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	e7f6      	b.n	8007156 <_printf_i+0x196>
 8007168:	4616      	mov	r6, r2
 800716a:	e7bd      	b.n	80070e8 <_printf_i+0x128>
 800716c:	6833      	ldr	r3, [r6, #0]
 800716e:	6825      	ldr	r5, [r4, #0]
 8007170:	6961      	ldr	r1, [r4, #20]
 8007172:	1d18      	adds	r0, r3, #4
 8007174:	6030      	str	r0, [r6, #0]
 8007176:	062e      	lsls	r6, r5, #24
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	d501      	bpl.n	8007180 <_printf_i+0x1c0>
 800717c:	6019      	str	r1, [r3, #0]
 800717e:	e002      	b.n	8007186 <_printf_i+0x1c6>
 8007180:	0668      	lsls	r0, r5, #25
 8007182:	d5fb      	bpl.n	800717c <_printf_i+0x1bc>
 8007184:	8019      	strh	r1, [r3, #0]
 8007186:	2300      	movs	r3, #0
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	4616      	mov	r6, r2
 800718c:	e7bc      	b.n	8007108 <_printf_i+0x148>
 800718e:	6833      	ldr	r3, [r6, #0]
 8007190:	1d1a      	adds	r2, r3, #4
 8007192:	6032      	str	r2, [r6, #0]
 8007194:	681e      	ldr	r6, [r3, #0]
 8007196:	6862      	ldr	r2, [r4, #4]
 8007198:	2100      	movs	r1, #0
 800719a:	4630      	mov	r0, r6
 800719c:	f7f9 f818 	bl	80001d0 <memchr>
 80071a0:	b108      	cbz	r0, 80071a6 <_printf_i+0x1e6>
 80071a2:	1b80      	subs	r0, r0, r6
 80071a4:	6060      	str	r0, [r4, #4]
 80071a6:	6863      	ldr	r3, [r4, #4]
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	2300      	movs	r3, #0
 80071ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b0:	e7aa      	b.n	8007108 <_printf_i+0x148>
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	4632      	mov	r2, r6
 80071b6:	4649      	mov	r1, r9
 80071b8:	4640      	mov	r0, r8
 80071ba:	47d0      	blx	sl
 80071bc:	3001      	adds	r0, #1
 80071be:	d0ad      	beq.n	800711c <_printf_i+0x15c>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	079b      	lsls	r3, r3, #30
 80071c4:	d413      	bmi.n	80071ee <_printf_i+0x22e>
 80071c6:	68e0      	ldr	r0, [r4, #12]
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	4298      	cmp	r0, r3
 80071cc:	bfb8      	it	lt
 80071ce:	4618      	movlt	r0, r3
 80071d0:	e7a6      	b.n	8007120 <_printf_i+0x160>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4632      	mov	r2, r6
 80071d6:	4649      	mov	r1, r9
 80071d8:	4640      	mov	r0, r8
 80071da:	47d0      	blx	sl
 80071dc:	3001      	adds	r0, #1
 80071de:	d09d      	beq.n	800711c <_printf_i+0x15c>
 80071e0:	3501      	adds	r5, #1
 80071e2:	68e3      	ldr	r3, [r4, #12]
 80071e4:	9903      	ldr	r1, [sp, #12]
 80071e6:	1a5b      	subs	r3, r3, r1
 80071e8:	42ab      	cmp	r3, r5
 80071ea:	dcf2      	bgt.n	80071d2 <_printf_i+0x212>
 80071ec:	e7eb      	b.n	80071c6 <_printf_i+0x206>
 80071ee:	2500      	movs	r5, #0
 80071f0:	f104 0619 	add.w	r6, r4, #25
 80071f4:	e7f5      	b.n	80071e2 <_printf_i+0x222>
 80071f6:	bf00      	nop
 80071f8:	08007379 	.word	0x08007379
 80071fc:	0800738a 	.word	0x0800738a

08007200 <memmove>:
 8007200:	4288      	cmp	r0, r1
 8007202:	b510      	push	{r4, lr}
 8007204:	eb01 0402 	add.w	r4, r1, r2
 8007208:	d902      	bls.n	8007210 <memmove+0x10>
 800720a:	4284      	cmp	r4, r0
 800720c:	4623      	mov	r3, r4
 800720e:	d807      	bhi.n	8007220 <memmove+0x20>
 8007210:	1e43      	subs	r3, r0, #1
 8007212:	42a1      	cmp	r1, r4
 8007214:	d008      	beq.n	8007228 <memmove+0x28>
 8007216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800721a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800721e:	e7f8      	b.n	8007212 <memmove+0x12>
 8007220:	4402      	add	r2, r0
 8007222:	4601      	mov	r1, r0
 8007224:	428a      	cmp	r2, r1
 8007226:	d100      	bne.n	800722a <memmove+0x2a>
 8007228:	bd10      	pop	{r4, pc}
 800722a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800722e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007232:	e7f7      	b.n	8007224 <memmove+0x24>

08007234 <_sbrk_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d06      	ldr	r5, [pc, #24]	@ (8007250 <_sbrk_r+0x1c>)
 8007238:	2300      	movs	r3, #0
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	602b      	str	r3, [r5, #0]
 8007240:	f7fb f8b2 	bl	80023a8 <_sbrk>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d102      	bne.n	800724e <_sbrk_r+0x1a>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b103      	cbz	r3, 800724e <_sbrk_r+0x1a>
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	2000079c 	.word	0x2000079c

08007254 <memcpy>:
 8007254:	440a      	add	r2, r1
 8007256:	4291      	cmp	r1, r2
 8007258:	f100 33ff 	add.w	r3, r0, #4294967295
 800725c:	d100      	bne.n	8007260 <memcpy+0xc>
 800725e:	4770      	bx	lr
 8007260:	b510      	push	{r4, lr}
 8007262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800726a:	4291      	cmp	r1, r2
 800726c:	d1f9      	bne.n	8007262 <memcpy+0xe>
 800726e:	bd10      	pop	{r4, pc}

08007270 <_realloc_r>:
 8007270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007274:	4680      	mov	r8, r0
 8007276:	4615      	mov	r5, r2
 8007278:	460c      	mov	r4, r1
 800727a:	b921      	cbnz	r1, 8007286 <_realloc_r+0x16>
 800727c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007280:	4611      	mov	r1, r2
 8007282:	f7ff bc4b 	b.w	8006b1c <_malloc_r>
 8007286:	b92a      	cbnz	r2, 8007294 <_realloc_r+0x24>
 8007288:	f7ff fbdc 	bl	8006a44 <_free_r>
 800728c:	2400      	movs	r4, #0
 800728e:	4620      	mov	r0, r4
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007294:	f000 f81a 	bl	80072cc <_malloc_usable_size_r>
 8007298:	4285      	cmp	r5, r0
 800729a:	4606      	mov	r6, r0
 800729c:	d802      	bhi.n	80072a4 <_realloc_r+0x34>
 800729e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072a2:	d8f4      	bhi.n	800728e <_realloc_r+0x1e>
 80072a4:	4629      	mov	r1, r5
 80072a6:	4640      	mov	r0, r8
 80072a8:	f7ff fc38 	bl	8006b1c <_malloc_r>
 80072ac:	4607      	mov	r7, r0
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d0ec      	beq.n	800728c <_realloc_r+0x1c>
 80072b2:	42b5      	cmp	r5, r6
 80072b4:	462a      	mov	r2, r5
 80072b6:	4621      	mov	r1, r4
 80072b8:	bf28      	it	cs
 80072ba:	4632      	movcs	r2, r6
 80072bc:	f7ff ffca 	bl	8007254 <memcpy>
 80072c0:	4621      	mov	r1, r4
 80072c2:	4640      	mov	r0, r8
 80072c4:	f7ff fbbe 	bl	8006a44 <_free_r>
 80072c8:	463c      	mov	r4, r7
 80072ca:	e7e0      	b.n	800728e <_realloc_r+0x1e>

080072cc <_malloc_usable_size_r>:
 80072cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d0:	1f18      	subs	r0, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bfbc      	itt	lt
 80072d6:	580b      	ldrlt	r3, [r1, r0]
 80072d8:	18c0      	addlt	r0, r0, r3
 80072da:	4770      	bx	lr

080072dc <_init>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr

080072e8 <_fini>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr
