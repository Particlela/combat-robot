
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800ba58  0800ba58  0000ca58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee8  0800bee8  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee8  0800bee8  0000cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef0  0800bef0  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0000cef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0000cef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bef8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000006d4  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a8  200008a8  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107f7  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000299b  00000000  00000000  0001d9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00020398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbf  00000000  00000000  000212d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002303e  00000000  00000000  00021e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136c5  00000000  00000000  00044ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce408  00000000  00000000  00058592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012699a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052bc  00000000  00000000  001269e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  0012bc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba3c 	.word	0x0800ba3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ba3c 	.word	0x0800ba3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ff4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	200c      	movs	r0, #12
 800100c:	f002 fbf7 	bl	80037fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001010:	200c      	movs	r0, #12
 8001012:	f002 fc10 	bl	8003836 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	200e      	movs	r0, #14
 800101c:	f002 fbef 	bl	80037fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f002 fc08 	bl	8003836 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2010      	movs	r0, #16
 800102c:	f002 fbe7 	bl	80037fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001030:	2010      	movs	r0, #16
 8001032:	f002 fc00 	bl	8003836 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2011      	movs	r0, #17
 800103c:	f002 fbdf 	bl	80037fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001040:	2011      	movs	r0, #17
 8001042:	f002 fbf8 	bl	8003836 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <Motor_Position>:
//舵机角度控制函数
//position:0 折叠； 1 收拢； 2 展开
//delay确保已转换完成

void Motor_Position(int position)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(position == 0)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <Motor_Position+0x16>
	{
		Motor_Control(250);
 8001062:	20fa      	movs	r0, #250	@ 0xfa
 8001064:	f001 f948 	bl	80022f8 <Motor_Control>
 8001068:	e00c      	b.n	8001084 <Motor_Position+0x30>
	}
	else if(position == 1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d103      	bne.n	8001078 <Motor_Position+0x24>
	{
		Motor_Control(195);
 8001070:	20c3      	movs	r0, #195	@ 0xc3
 8001072:	f001 f941 	bl	80022f8 <Motor_Control>
 8001076:	e005      	b.n	8001084 <Motor_Position+0x30>
	}
	else if(position == 2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d102      	bne.n	8001084 <Motor_Position+0x30>
	{
		Motor_Control(170);
 800107e:	20aa      	movs	r0, #170	@ 0xaa
 8001080:	f001 f93a 	bl	80022f8 <Motor_Control>
	}

	HAL_Delay(800);
 8001084:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001088:	f002 faba 	bl	8003600 <HAL_Delay>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Move_Turn>:
//控制电机直角转弯函数
//direction：1 前进； 2 后退
//Delay:560 空载90度左右；650 2物块90度左右

void Move_Turn(int direction)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	int Left_In = -67, Left_Out = 70;	//左初始速度
 800109c:	f06f 0342 	mvn.w	r3, #66	@ 0x42
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	2346      	movs	r3, #70	@ 0x46
 80010a4:	613b      	str	r3, [r7, #16]
	int Right_In = -67, Right_Out = 70;	//右初始速度
 80010a6:	f06f 0342 	mvn.w	r3, #66	@ 0x42
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	2346      	movs	r3, #70	@ 0x46
 80010ae:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;//实际转化参数
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]

    Move_Twin_Wheels(-70, -70);
 80010b8:	f06f 0145 	mvn.w	r1, #69	@ 0x45
 80010bc:	f06f 0045 	mvn.w	r0, #69	@ 0x45
 80010c0:	f001 f874 	bl	80021ac <Move_Twin_Wheels>
	HAL_Delay(70);//310
 80010c4:	2046      	movs	r0, #70	@ 0x46
 80010c6:	f002 fa9b 	bl	8003600 <HAL_Delay>
	Move_Twin_Wheels(0, 0);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f001 f86d 	bl	80021ac <Move_Twin_Wheels>
	HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	@ 0x64
 80010d4:	f002 fa94 	bl	8003600 <HAL_Delay>

	Motor_Position(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff ffbb 	bl	8001054 <Motor_Position>
    if(direction == 1 || direction == 2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d002      	beq.n	80010ea <Move_Turn+0x56>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d132      	bne.n	8001150 <Move_Turn+0xbc>
    {
	if(direction == 1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d104      	bne.n	80010fa <Move_Turn+0x66>
	{
		Left_Speed = Left_In;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_Out;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	e006      	b.n	8001108 <Move_Turn+0x74>
	}
	else if(direction == 2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d103      	bne.n	8001108 <Move_Turn+0x74>
	{
		Left_Speed = Left_Out;
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_In;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	61bb      	str	r3, [r7, #24]
	}

	if(Left_Speed > 100)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b64      	cmp	r3, #100	@ 0x64
 800110c:	dd02      	ble.n	8001114 <Move_Turn+0x80>
		Left_Speed = 100;
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e014      	b.n	800113e <Move_Turn+0xaa>
	else if (Left_Speed < -100)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800111a:	da03      	bge.n	8001124 <Move_Turn+0x90>
		Left_Speed = -100;
 800111c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e00c      	b.n	800113e <Move_Turn+0xaa>
	else if(Right_Speed > 100)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	dd02      	ble.n	8001130 <Move_Turn+0x9c>
		Right_Speed = 100;
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e006      	b.n	800113e <Move_Turn+0xaa>
	else if (Right_Speed < -100)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001136:	da02      	bge.n	800113e <Move_Turn+0xaa>
		Right_Speed = -100;
 8001138:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800113c:	61bb      	str	r3, [r7, #24]

	Move_Twin_Wheels(Left_Speed, Right_Speed);
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	69f8      	ldr	r0, [r7, #28]
 8001142:	f001 f833 	bl	80021ac <Move_Twin_Wheels>
	HAL_Delay(450);//22:32 400
 8001146:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800114a:	f002 fa59 	bl	8003600 <HAL_Delay>
 800114e:	e029      	b.n	80011a4 <Move_Turn+0x110>
    }
    else if(direction == 3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d126      	bne.n	80011a4 <Move_Turn+0x110>
    {
		Left_Speed = Left_In;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_Out;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	61bb      	str	r3, [r7, #24]

		if(Left_Speed > 100)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	2b64      	cmp	r3, #100	@ 0x64
 8001162:	dd02      	ble.n	800116a <Move_Turn+0xd6>
			Left_Speed = 100;
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	e014      	b.n	8001194 <Move_Turn+0x100>
		else if (Left_Speed < -100)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001170:	da03      	bge.n	800117a <Move_Turn+0xe6>
			Left_Speed = -100;
 8001172:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	e00c      	b.n	8001194 <Move_Turn+0x100>
		else if(Right_Speed > 100)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b64      	cmp	r3, #100	@ 0x64
 800117e:	dd02      	ble.n	8001186 <Move_Turn+0xf2>
			Right_Speed = 100;
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	e006      	b.n	8001194 <Move_Turn+0x100>
		else if (Right_Speed < -100)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800118c:	da02      	bge.n	8001194 <Move_Turn+0x100>
			Right_Speed = -100;
 800118e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001192:	61bb      	str	r3, [r7, #24]

		Move_Twin_Wheels(Left_Speed, Right_Speed);
 8001194:	69b9      	ldr	r1, [r7, #24]
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f001 f808 	bl	80021ac <Move_Twin_Wheels>
		HAL_Delay(2000);
 800119c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011a0:	f002 fa2e 	bl	8003600 <HAL_Delay>
    }
	Move_Twin_Wheels(0, 0);
 80011a4:	2100      	movs	r1, #0
 80011a6:	2000      	movs	r0, #0
 80011a8:	f001 f800 	bl	80021ac <Move_Twin_Wheels>
	HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	@ 0x64
 80011ae:	f002 fa27 	bl	8003600 <HAL_Delay>

}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <Position_Adj>:
//direction：1 左； 2 右； 3 掉头；
//基准速度设定60， 可带动3物块
//22:26 direction 1 2 300ms

void Position_Adj(int direction)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	int Adj_cnt = 0;		//计数值，确定调整时长
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int Left_Turn = 60;		//左基准初始速度
 80011c8:	233c      	movs	r3, #60	@ 0x3c
 80011ca:	617b      	str	r3, [r7, #20]
	int Right_Turn = 60;	//右基准初始速度
 80011cc:	233c      	movs	r3, #60	@ 0x3c
 80011ce:	613b      	str	r3, [r7, #16]
	int TurnLeft_adj = 1;	//左调整值
 80011d0:	2301      	movs	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
	int TurnRight_adj = 1;	//右调整值
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
	int turn = 0, error = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]

	if(direction == 1){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d105      	bne.n	80011fa <Position_Adj+0x3e>
		turn = -1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	623b      	str	r3, [r7, #32]
		Adj_cnt = 100;
 80011f4:	2364      	movs	r3, #100	@ 0x64
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011f8:	e00e      	b.n	8001218 <Position_Adj+0x5c>
	}else if(direction == 2){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d104      	bne.n	800120a <Position_Adj+0x4e>
		turn = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
		Adj_cnt = 100;
 8001204:	2364      	movs	r3, #100	@ 0x64
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001208:	e006      	b.n	8001218 <Position_Adj+0x5c>
	}else if(direction == 3){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d103      	bne.n	8001218 <Position_Adj+0x5c>
		turn = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
		Adj_cnt = 250;
 8001214:	23fa      	movs	r3, #250	@ 0xfa
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	for(int i = 0; i < Adj_cnt; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e0aa      	b.n	8001374 <Position_Adj+0x1b8>
	{
		if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == OUT)
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <Position_Adj+0x1d8>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10a      	bne.n	800123c <Position_Adj+0x80>
 8001226:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <Position_Adj+0x1d8>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d106      	bne.n	800123c <Position_Adj+0x80>
 800122e:	4b59      	ldr	r3, [pc, #356]	@ (8001394 <Position_Adj+0x1d8>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d102      	bne.n	800123c <Position_Adj+0x80>
		{
			error = 3;
 8001236:	2303      	movs	r3, #3
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e061      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT)
 800123c:	4b55      	ldr	r3, [pc, #340]	@ (8001394 <Position_Adj+0x1d8>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10d      	bne.n	8001260 <Position_Adj+0xa4>
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <Position_Adj+0x1d8>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d109      	bne.n	8001260 <Position_Adj+0xa4>
 800124c:	4b51      	ldr	r3, [pc, #324]	@ (8001394 <Position_Adj+0x1d8>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d105      	bne.n	8001260 <Position_Adj+0xa4>
		{
			error = 2;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
			turn = -1;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	623b      	str	r3, [r7, #32]
 800125e:	e04f      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 8001260:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <Position_Adj+0x1d8>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <Position_Adj+0xc8>
 8001268:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <Position_Adj+0x1d8>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <Position_Adj+0xc8>
 8001270:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <Position_Adj+0x1d8>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d105      	bne.n	8001284 <Position_Adj+0xc8>
		{
			error = 1;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
			turn = -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	e03d      	b.n	8001300 <Position_Adj+0x144>
		}
		else if((GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == OUT) || (GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN))
 8001284:	4b43      	ldr	r3, [pc, #268]	@ (8001394 <Position_Adj+0x1d8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d107      	bne.n	800129c <Position_Adj+0xe0>
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <Position_Adj+0x1d8>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <Position_Adj+0xe0>
 8001294:	4b3f      	ldr	r3, [pc, #252]	@ (8001394 <Position_Adj+0x1d8>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d00b      	beq.n	80012b4 <Position_Adj+0xf8>
 800129c:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <Position_Adj+0x1d8>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10c      	bne.n	80012be <Position_Adj+0x102>
 80012a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <Position_Adj+0x1d8>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d108      	bne.n	80012be <Position_Adj+0x102>
 80012ac:	4b39      	ldr	r3, [pc, #228]	@ (8001394 <Position_Adj+0x1d8>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d104      	bne.n	80012be <Position_Adj+0x102>
		{
			error = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
			turn = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	e020      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 80012be:	4b35      	ldr	r3, [pc, #212]	@ (8001394 <Position_Adj+0x1d8>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10c      	bne.n	80012e0 <Position_Adj+0x124>
 80012c6:	4b33      	ldr	r3, [pc, #204]	@ (8001394 <Position_Adj+0x1d8>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d108      	bne.n	80012e0 <Position_Adj+0x124>
 80012ce:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <Position_Adj+0x1d8>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <Position_Adj+0x124>
		{
			error = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
			turn = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	e00f      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN)
 80012e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <Position_Adj+0x1d8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d10b      	bne.n	8001300 <Position_Adj+0x144>
 80012e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <Position_Adj+0x1d8>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <Position_Adj+0x144>
 80012f0:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <Position_Adj+0x1d8>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d103      	bne.n	8001300 <Position_Adj+0x144>
		{
			error = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61fb      	str	r3, [r7, #28]
			turn = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
		}
		Left_Speed = turn * (Left_Turn + error * TurnLeft_adj);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	fb03 f202 	mul.w	r2, r3, r2
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	441a      	add	r2, r3
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
		Right_Speed = (-1) * turn * (Right_Turn + error * TurnRight_adj);
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	425b      	negs	r3, r3
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	fb02 f101 	mul.w	r1, r2, r1
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	440a      	add	r2, r1
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24

		if(Left_Speed > 100)
 800132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132c:	2b64      	cmp	r3, #100	@ 0x64
 800132e:	dd02      	ble.n	8001336 <Position_Adj+0x17a>
				Left_Speed = 100;
 8001330:	2364      	movs	r3, #100	@ 0x64
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001334:	e014      	b.n	8001360 <Position_Adj+0x1a4>
		else if (Left_Speed < -100)
 8001336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001338:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800133c:	da03      	bge.n	8001346 <Position_Adj+0x18a>
			Left_Speed = -100;
 800133e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001344:	e00c      	b.n	8001360 <Position_Adj+0x1a4>
		else if(Right_Speed > 100)
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	2b64      	cmp	r3, #100	@ 0x64
 800134a:	dd02      	ble.n	8001352 <Position_Adj+0x196>
			Right_Speed = 100;
 800134c:	2364      	movs	r3, #100	@ 0x64
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001350:	e006      	b.n	8001360 <Position_Adj+0x1a4>
		else if (Right_Speed < -100)
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001358:	da02      	bge.n	8001360 <Position_Adj+0x1a4>
			Right_Speed = -100;
 800135a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24

		Move_Twin_Wheels(Left_Speed, Right_Speed);
 8001360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001364:	f000 ff22 	bl	80021ac <Move_Twin_Wheels>
 		HAL_Delay(10); //是否延时由调试情况决定
 8001368:	200a      	movs	r0, #10
 800136a:	f002 f949 	bl	8003600 <HAL_Delay>
	for(int i = 0; i < Adj_cnt; i++)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	3301      	adds	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	f6ff af50 	blt.w	800121e <Position_Adj+0x62>
	}
	Move_Twin_Wheels(0, 0);
 800137e:	2100      	movs	r1, #0
 8001380:	2000      	movs	r0, #0
 8001382:	f000 ff13 	bl	80021ac <Move_Twin_Wheels>
	HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	@ 0x64
 8001388:	f002 f93a 	bl	8003600 <HAL_Delay>
}
 800138c:	bf00      	nop
 800138e:	3730      	adds	r7, #48	@ 0x30
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200002cc 	.word	0x200002cc

08001398 <Move_Straight>:

//电机直行控制函数
//direction：1 前进； 2 后退

void Move_Straight(int direction)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	@ 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	int Left_ori = 88;		//左初始值
 80013a0:	2358      	movs	r3, #88	@ 0x58
 80013a2:	617b      	str	r3, [r7, #20]
	int Right_ori = 88;		//右初始值
 80013a4:	2358      	movs	r3, #88	@ 0x58
 80013a6:	613b      	str	r3, [r7, #16]
	int GoLeft_adj = 1;		//左调整值
 80013a8:	2301      	movs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
	int GoRight_adj = 1;		//右调整值
 80013ac:	2301      	movs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	int Left_Times = 1, Right_Times = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80013bc:	2301      	movs	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
	int turn = 0, error = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]

	if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == OUT)
 80013c8:	4b60      	ldr	r3, [pc, #384]	@ (800154c <Move_Straight+0x1b4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10a      	bne.n	80013e6 <Move_Straight+0x4e>
 80013d0:	4b5e      	ldr	r3, [pc, #376]	@ (800154c <Move_Straight+0x1b4>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <Move_Straight+0x4e>
 80013d8:	4b5c      	ldr	r3, [pc, #368]	@ (800154c <Move_Straight+0x1b4>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <Move_Straight+0x4e>
	{
		error = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	e061      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT)
 80013e6:	4b59      	ldr	r3, [pc, #356]	@ (800154c <Move_Straight+0x1b4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <Move_Straight+0x72>
 80013ee:	4b57      	ldr	r3, [pc, #348]	@ (800154c <Move_Straight+0x1b4>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d109      	bne.n	800140a <Move_Straight+0x72>
 80013f6:	4b55      	ldr	r3, [pc, #340]	@ (800154c <Move_Straight+0x1b4>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <Move_Straight+0x72>
	{
		error = 2;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
		turn = -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e04f      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 800140a:	4b50      	ldr	r3, [pc, #320]	@ (800154c <Move_Straight+0x1b4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <Move_Straight+0x96>
 8001412:	4b4e      	ldr	r3, [pc, #312]	@ (800154c <Move_Straight+0x1b4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <Move_Straight+0x96>
 800141a:	4b4c      	ldr	r3, [pc, #304]	@ (800154c <Move_Straight+0x1b4>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <Move_Straight+0x96>
	{
		error = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
		turn = -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	e03d      	b.n	80014aa <Move_Straight+0x112>
	}
	else if((GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == OUT) || (GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN))
 800142e:	4b47      	ldr	r3, [pc, #284]	@ (800154c <Move_Straight+0x1b4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <Move_Straight+0xae>
 8001436:	4b45      	ldr	r3, [pc, #276]	@ (800154c <Move_Straight+0x1b4>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <Move_Straight+0xae>
 800143e:	4b43      	ldr	r3, [pc, #268]	@ (800154c <Move_Straight+0x1b4>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d00b      	beq.n	800145e <Move_Straight+0xc6>
 8001446:	4b41      	ldr	r3, [pc, #260]	@ (800154c <Move_Straight+0x1b4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <Move_Straight+0xd0>
 800144e:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <Move_Straight+0x1b4>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <Move_Straight+0xd0>
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <Move_Straight+0x1b4>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d104      	bne.n	8001468 <Move_Straight+0xd0>
	{
		error = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
		turn = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e020      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 8001468:	4b38      	ldr	r3, [pc, #224]	@ (800154c <Move_Straight+0x1b4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10c      	bne.n	800148a <Move_Straight+0xf2>
 8001470:	4b36      	ldr	r3, [pc, #216]	@ (800154c <Move_Straight+0x1b4>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d108      	bne.n	800148a <Move_Straight+0xf2>
 8001478:	4b34      	ldr	r3, [pc, #208]	@ (800154c <Move_Straight+0x1b4>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <Move_Straight+0xf2>
	{
		error = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
		turn = 1;
 8001484:	2301      	movs	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	e00f      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN)
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <Move_Straight+0x1b4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10b      	bne.n	80014aa <Move_Straight+0x112>
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <Move_Straight+0x1b4>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <Move_Straight+0x112>
 800149a:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <Move_Straight+0x1b4>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d103      	bne.n	80014aa <Move_Straight+0x112>
	{
		error = 2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
		turn = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
//	{
//		error = 2;
//		turn = 1;
//	}

	if(turn == -1){
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d104      	bne.n	80014bc <Move_Straight+0x124>
		Left_Times = 2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
		Right_Times = 3;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	e006      	b.n	80014ca <Move_Straight+0x132>
	}else if(turn == 1){
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d103      	bne.n	80014ca <Move_Straight+0x132>
		Left_Times = 3;
 80014c2:	2303      	movs	r3, #3
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
		Right_Times = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	623b      	str	r3, [r7, #32]
	}

	Left_Speed = Left_ori + Left_Times * turn * error * GoLeft_adj;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4413      	add	r3, r2
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Right_Speed = Right_ori - Right_Times * turn * error * GoRight_adj;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(Left_Speed > 100)
 80014fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001500:	2b64      	cmp	r3, #100	@ 0x64
 8001502:	dd02      	ble.n	800150a <Move_Straight+0x172>
		Left_Speed = 100;
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001508:	e014      	b.n	8001534 <Move_Straight+0x19c>
	else if (Left_Speed < -100)
 800150a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800150c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001510:	da03      	bge.n	800151a <Move_Straight+0x182>
		Left_Speed = -100;
 8001512:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001518:	e00c      	b.n	8001534 <Move_Straight+0x19c>
	else if(Right_Speed > 100)
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	2b64      	cmp	r3, #100	@ 0x64
 800151e:	dd02      	ble.n	8001526 <Move_Straight+0x18e>
		Right_Speed = 100;
 8001520:	2364      	movs	r3, #100	@ 0x64
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001524:	e006      	b.n	8001534 <Move_Straight+0x19c>
	else if (Right_Speed < -100)
 8001526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001528:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800152c:	da02      	bge.n	8001534 <Move_Straight+0x19c>
		Right_Speed = -100;
 800152e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28

	Move_Twin_Wheels(Left_Speed, Right_Speed);
 8001534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001538:	f000 fe38 	bl	80021ac <Move_Twin_Wheels>
	HAL_Delay(10); //是否延时由调试情况决定
 800153c:	200a      	movs	r0, #10
 800153e:	f002 f85f 	bl	8003600 <HAL_Delay>
}
 8001542:	bf00      	nop
 8001544:	3730      	adds	r7, #48	@ 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002cc 	.word	0x200002cc

08001550 <Judge_cross>:

//岔路口判断
//return：0 非；1 是

int Judge_cross(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	if(GrayData[0] == IN && GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN && GrayData[4] == IN)
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <Judge_cross+0x3c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <Judge_cross+0x30>
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <Judge_cross+0x3c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10d      	bne.n	8001580 <Judge_cross+0x30>
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <Judge_cross+0x3c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <Judge_cross+0x30>
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <Judge_cross+0x3c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <Judge_cross+0x30>
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <Judge_cross+0x3c>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <Judge_cross+0x30>
	{
		return 1;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <Judge_cross+0x32>
	}
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	200002cc 	.word	0x200002cc

08001590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4b57      	ldr	r3, [pc, #348]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a56      	ldr	r2, [pc, #344]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b54      	ldr	r3, [pc, #336]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a4f      	ldr	r2, [pc, #316]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b49      	ldr	r3, [pc, #292]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a48      	ldr	r2, [pc, #288]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b42      	ldr	r3, [pc, #264]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a41      	ldr	r2, [pc, #260]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <MX_GPIO_Init+0x178>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <MX_GPIO_Init+0x178>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a3a      	ldr	r2, [pc, #232]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a33      	ldr	r2, [pc, #204]	@ (8001708 <MX_GPIO_Init+0x178>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	210f      	movs	r1, #15
 8001652:	482e      	ldr	r0, [pc, #184]	@ (800170c <MX_GPIO_Init+0x17c>)
 8001654:	f002 fec0 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001658:	2308      	movs	r3, #8
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800165c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4828      	ldr	r0, [pc, #160]	@ (8001710 <MX_GPIO_Init+0x180>)
 800166e:	f002 fcff 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001672:	2310      	movs	r3, #16
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4822      	ldr	r0, [pc, #136]	@ (8001710 <MX_GPIO_Init+0x180>)
 8001686:	f002 fcf3 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Engine_Right_Yellow_Pin|Engine_Right_Green_Pin;
 800168a:	2303      	movs	r3, #3
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	481d      	ldr	r0, [pc, #116]	@ (8001714 <MX_GPIO_Init+0x184>)
 800169e:	f002 fce7 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = Gray_R2_Pin|Gray_R1_Pin|Gray_M_Pin|Gray_L1_Pin
 80016a2:	f44f 6378 	mov.w	r3, #3968	@ 0xf80
 80016a6:	61fb      	str	r3, [r7, #28]
                          |Gray_L2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4816      	ldr	r0, [pc, #88]	@ (8001710 <MX_GPIO_Init+0x180>)
 80016b8:	f002 fcda 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin;
 80016bc:	230f      	movs	r3, #15
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	480e      	ldr	r0, [pc, #56]	@ (800170c <MX_GPIO_Init+0x17c>)
 80016d4:	f002 fccc 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Engine_Left_Green_Pin|Engine_Left_Yellow_Pin;
 80016d8:	2328      	movs	r3, #40	@ 0x28
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	480b      	ldr	r0, [pc, #44]	@ (8001718 <MX_GPIO_Init+0x188>)
 80016ec:	f002 fcc0 	bl	8004070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 12, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	210c      	movs	r1, #12
 80016f4:	2009      	movs	r0, #9
 80016f6:	f002 f882 	bl	80037fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016fa:	2009      	movs	r0, #9
 80016fc:	f002 f89b 	bl	8003836 <HAL_NVIC_EnableIRQ>

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	@ 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40020800 	.word	0x40020800
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af04      	add	r7, sp, #16
 8001722:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim5.Instance) // 确认是正确的定时�????
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d123      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x5c>
    {
        MotorData = Motor_angel;
 8001730:	4b80      	ldr	r3, [pc, #512]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a80      	ldr	r2, [pc, #512]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001736:	6013      	str	r3, [r2, #0]

    	sprintf((char*)TransmitData, "灰度传感器：%d %d %d %d %d \n 已经经过%d个路口\n ", GrayData[0],GrayData[1],GrayData[2],GrayData[3],GrayData[4],cross_cnt);
 8001738:	4b80      	ldr	r3, [pc, #512]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800173a:	681c      	ldr	r4, [r3, #0]
 800173c:	4b7f      	ldr	r3, [pc, #508]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800173e:	685d      	ldr	r5, [r3, #4]
 8001740:	4b7e      	ldr	r3, [pc, #504]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a7d      	ldr	r2, [pc, #500]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001746:	68d2      	ldr	r2, [r2, #12]
 8001748:	497c      	ldr	r1, [pc, #496]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800174a:	6909      	ldr	r1, [r1, #16]
 800174c:	487c      	ldr	r0, [pc, #496]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800174e:	6800      	ldr	r0, [r0, #0]
 8001750:	9003      	str	r0, [sp, #12]
 8001752:	9102      	str	r1, [sp, #8]
 8001754:	9201      	str	r2, [sp, #4]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	462b      	mov	r3, r5
 800175a:	4622      	mov	r2, r4
 800175c:	4979      	ldr	r1, [pc, #484]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800175e:	487a      	ldr	r0, [pc, #488]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001760:	f006 fd32 	bl	80081c8 <siprintf>
    	HAL_UART_Transmit_DMA(&huart2, TransmitData, sizeof(TransmitData));//蓝牙
 8001764:	22c8      	movs	r2, #200	@ 0xc8
 8001766:	4978      	ldr	r1, [pc, #480]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001768:	4878      	ldr	r0, [pc, #480]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x230>)
 800176a:	f004 fdeb 	bl	8006344 <HAL_UART_Transmit_DMA>
    	HAL_UART_Transmit_DMA(&huart3, TransmitData, sizeof(TransmitData));//传输信息
 800176e:	22c8      	movs	r2, #200	@ 0xc8
 8001770:	4975      	ldr	r1, [pc, #468]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001772:	4877      	ldr	r0, [pc, #476]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001774:	f004 fde6 	bl	8006344 <HAL_UART_Transmit_DMA>
    }//此为TIM5触发的中�???? 1s�????�????

    if(htim->Instance == htim6.Instance)		              //10ms中断
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b75      	ldr	r3, [pc, #468]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8088 	bne.w	8001896 <HAL_TIM_PeriodElapsedCallback+0x17a>
    {
        EngineData[0] = Read_Rotational_Speed(0);         //0为左,转�?�单位为RPM
 8001786:	2000      	movs	r0, #0
 8001788:	f000 fd20 	bl	80021cc <Read_Rotational_Speed>
 800178c:	eef0 7a40 	vmov.f32	s15, s0
 8001790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001794:	ee17 2a90 	vmov	r2, s15
 8001798:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800179a:	601a      	str	r2, [r3, #0]
        EngineData[1] = Read_Rotational_Speed(1);         //1为右，转速单位为RPM
 800179c:	2001      	movs	r0, #1
 800179e:	f000 fd15 	bl	80021cc <Read_Rotational_Speed>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
 80017a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017aa:	ee17 2a90 	vmov	r2, s15
 80017ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017b0:	605a      	str	r2, [r3, #4]
        if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_SET)
 80017b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017b6:	4869      	ldr	r0, [pc, #420]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017b8:	f002 fdf6 	bl	80043a8 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d103      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0xae>
        {
        	GrayData[0] = 1;
 80017c2:	4b5e      	ldr	r3, [pc, #376]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e00a      	b.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0xc4>
        }
        else if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_RESET)
 80017ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ce:	4863      	ldr	r0, [pc, #396]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017d0:	f002 fdea 	bl	80043a8 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0xc4>
        {
        	GrayData[0] = 0;
 80017da:	4b58      	ldr	r3, [pc, #352]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_SET)
 80017e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017e4:	485d      	ldr	r0, [pc, #372]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017e6:	f002 fddf 	bl	80043a8 <HAL_GPIO_ReadPin>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d103      	bne.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0xdc>
        {
        	GrayData[1] = 1;
 80017f0:	4b52      	ldr	r3, [pc, #328]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	e00a      	b.n	800180e <HAL_TIM_PeriodElapsedCallback+0xf2>
        }
        else if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_RESET)
 80017f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017fc:	4857      	ldr	r0, [pc, #348]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017fe:	f002 fdd3 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <HAL_TIM_PeriodElapsedCallback+0xf2>
        {
        	GrayData[1] = 0;
 8001808:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
        }
        if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_SET)
 800180e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001812:	4852      	ldr	r0, [pc, #328]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001814:	f002 fdc8 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	d103      	bne.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x10a>
        {
        	GrayData[2] = 1;
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001820:	2201      	movs	r2, #1
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e00a      	b.n	800183c <HAL_TIM_PeriodElapsedCallback+0x120>
        }
        else if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_RESET)
 8001826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800182a:	484c      	ldr	r0, [pc, #304]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800182c:	f002 fdbc 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <HAL_TIM_PeriodElapsedCallback+0x120>
        {
        	GrayData[2] = 0;
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
        }
        if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_SET)
 800183c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001840:	4846      	ldr	r0, [pc, #280]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001842:	f002 fdb1 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d103      	bne.n	8001854 <HAL_TIM_PeriodElapsedCallback+0x138>
        {
        	GrayData[3] = 1;
 800184c:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800184e:	2201      	movs	r2, #1
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	e00a      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0x14e>
        }
        else if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_RESET)
 8001854:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001858:	4840      	ldr	r0, [pc, #256]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800185a:	f002 fda5 	bl	80043a8 <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <HAL_TIM_PeriodElapsedCallback+0x14e>
        {
        	GrayData[3] = 0;
 8001864:	4b35      	ldr	r3, [pc, #212]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
        }
        if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_SET)
 800186a:	2180      	movs	r1, #128	@ 0x80
 800186c:	483b      	ldr	r0, [pc, #236]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800186e:	f002 fd9b 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b01      	cmp	r3, #1
 8001876:	d103      	bne.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x164>
        {
        	GrayData[4] = 1;
 8001878:	4b30      	ldr	r3, [pc, #192]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800187a:	2201      	movs	r2, #1
 800187c:	611a      	str	r2, [r3, #16]
	{
		if(COUNTERNUMRIGHT < 10000)	EngineRight.loopNum++;         //向上计数超过10000，正溢出+1
		else if(COUNTERNUMRIGHT > 10000)	EngineRight.loopNum--;     //向下计数小于0，负溢出+1
		__HAL_TIM_SetCounter(&htim8, 10000);             //重新设定初始�????
	}
}
 800187e:	e053      	b.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
        else if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_RESET)
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	4836      	ldr	r0, [pc, #216]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001884:	f002 fd90 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d14c      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
        	GrayData[4] = 0;
 800188e:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
}
 8001894:	e048      	b.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
	else if(htim->Instance == htim1.Instance)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11e      	bne.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		if(COUNTERNUMLEFT < 10000)	EngineLeft.loopNum++;         //向上计数超过10000，正溢出+1
 80018a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d805      	bhi.n	80018bc <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018b8:	6093      	str	r3, [r2, #8]
 80018ba:	e00b      	b.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		else if(COUNTERNUMLEFT > 10000)	EngineLeft.loopNum--;     //向下计数小于0，负溢出+1
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d904      	bls.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80018ca:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	4a24      	ldr	r2, [pc, #144]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018d2:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SetCounter(&htim1, 10000);             //重新设定初始�????
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80018de:	e023      	b.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
	else if(htim->Instance == htim8.Instance)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d11d      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
		if(COUNTERNUMRIGHT < 10000)	EngineRight.loopNum++;         //向上计数超过10000，正溢出+1
 80018ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d805      	bhi.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001902:	6093      	str	r3, [r2, #8]
 8001904:	e00b      	b.n	800191e <HAL_TIM_PeriodElapsedCallback+0x202>
		else if(COUNTERNUMRIGHT > 10000)	EngineRight.loopNum--;     //向下计数小于0，负溢出+1
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001910:	4293      	cmp	r3, r2
 8001912:	d904      	bls.n	800191e <HAL_TIM_PeriodElapsedCallback+0x202>
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	4a14      	ldr	r2, [pc, #80]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800191c:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SetCounter(&htim8, 10000);             //重新设定初始�????
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bdb0      	pop	{r4, r5, r7, pc}
 8001930:	20000428 	.word	0x20000428
 8001934:	200002e0 	.word	0x200002e0
 8001938:	200002b8 	.word	0x200002b8
 800193c:	200002cc 	.word	0x200002cc
 8001940:	200002c4 	.word	0x200002c4
 8001944:	0800ba58 	.word	0x0800ba58
 8001948:	200001f0 	.word	0x200001f0
 800194c:	20000548 	.word	0x20000548
 8001950:	20000590 	.word	0x20000590
 8001954:	20000470 	.word	0x20000470
 8001958:	200002bc 	.word	0x200002bc
 800195c:	40021000 	.word	0x40021000
 8001960:	20000308 	.word	0x20000308
 8001964:	200002e4 	.word	0x200002e4
 8001968:	200004b8 	.word	0x200004b8
 800196c:	200002f4 	.word	0x200002f4

08001970 <HAL_GPIO_EXTI_Callback>:
//TIM5每秒溢出触发回调函数向计算机发�?�参�????

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET)
 800197a:	2108      	movs	r1, #8
 800197c:	4812      	ldr	r0, [pc, #72]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0x58>)
 800197e:	f002 fd13 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11a      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
	{
		HAL_Delay(50);
 8001988:	2032      	movs	r0, #50	@ 0x32
 800198a:	f001 fe39 	bl	8003600 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET)
 800198e:	2108      	movs	r1, #8
 8001990:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001992:	f002 fd09 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d110      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
		{
			if(path_selection <= 4)
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	dc05      	bgt.n	80019b0 <HAL_GPIO_EXTI_Callback+0x40>
			path_selection++;
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019ac:	6013      	str	r3, [r2, #0]
			else if(path_selection == 5)
			path_selection = 0;
		}
	}
}
 80019ae:	e006      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
			else if(path_selection == 5)
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d102      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
			path_selection = 0;
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	200002c8 	.word	0x200002c8

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	f5ad 7d36 	sub.w	sp, sp, #728	@ 0x2d8
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d8:	f001 fda0 	bl	800351c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019dc:	f000 fb16 	bl	800200c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f7ff fdd6 	bl	8001590 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e4:	f7ff fafe 	bl	8000fe4 <MX_DMA_Init>
  MX_TIM9_Init();
 80019e8:	f001 f988 	bl	8002cfc <MX_TIM9_Init>
  MX_TIM2_Init();
 80019ec:	f000 ff46 	bl	800287c <MX_TIM2_Init>
  MX_TIM3_Init();
 80019f0:	f000 ff90 	bl	8002914 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019f4:	f001 f81a 	bl	8002a2c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80019f8:	f001 fbba 	bl	8003170 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80019fc:	f001 f8a2 	bl	8002b44 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001a00:	f000 fee4 	bl	80027cc <MX_TIM1_Init>
  MX_TIM6_Init();
 8001a04:	f001 f8ec 	bl	8002be0 <MX_TIM6_Init>
  MX_TIM8_Init();
 8001a08:	f001 f920 	bl	8002c4c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001a0c:	f001 fbda 	bl	80031c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Engine_Init();
 8001a10:	f000 fcac 	bl	800236c <Engine_Init>
  Motor_Init();
 8001a14:	f000 fcf4 	bl	8002400 <Motor_Init>
  GraySensor_Init();
 8001a18:	f000 fd08 	bl	800242c <GraySensor_Init>
  HAL_TIM_Base_Start_IT(&htim5);//初始化TIM5，用于发送非阻塞信息
 8001a1c:	48f5      	ldr	r0, [pc, #980]	@ (8001df4 <main+0x424>)
 8001a1e:	f003 fa0d 	bl	8004e3c <HAL_TIM_Base_Start_IT>

  HAL_Delay(3000);
 8001a22:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001a26:	f001 fdeb 	bl	8003600 <HAL_Delay>
  Motor_Position(2);
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f7ff fb12 	bl	8001054 <Motor_Position>

  int path[6][30] = { {3,3,2,3,3,1,3,3,3,3,1,3,3,0}, {3,3,2,3,3,1,3,3,3,3,3,3,1,3,1,3,3,3,3,2,3,0}, {3,3,2,3,3,1,3,1,3,3,3,2,3,1,3,3,0}, {3,3,2,3,3,1,3,0}, {3,3,2,3,3,1,3,3,3,3,2,3,4,3,0}, {3,3,4,3,0}};
 8001a30:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a34:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2100      	movs	r1, #0
 8001a42:	f006 fc24 	bl	800828e <memset>
 8001a46:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a4a:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a4e:	2203      	movs	r2, #3
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a56:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a62:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a66:	2202      	movs	r2, #2
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a6e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a72:	2203      	movs	r2, #3
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a7a:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a7e:	2203      	movs	r2, #3
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a86:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a92:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001a96:	2203      	movs	r2, #3
 8001a98:	619a      	str	r2, [r3, #24]
 8001a9a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001a9e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	61da      	str	r2, [r3, #28]
 8001aa6:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001aaa:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001aae:	2203      	movs	r2, #3
 8001ab0:	621a      	str	r2, [r3, #32]
 8001ab2:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ab6:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001aba:	2203      	movs	r2, #3
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24
 8001abe:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ac2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aca:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ace:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ad6:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ada:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001ade:	2203      	movs	r2, #3
 8001ae0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae2:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ae6:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001aea:	2203      	movs	r2, #3
 8001aec:	679a      	str	r2, [r3, #120]	@ 0x78
 8001aee:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001af2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001af6:	2203      	movs	r2, #3
 8001af8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001afa:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001afe:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b02:	2202      	movs	r2, #2
 8001b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001b08:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b0c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b10:	2203      	movs	r2, #3
 8001b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001b16:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b1a:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b1e:	2203      	movs	r2, #3
 8001b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8001b24:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b28:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001b32:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b36:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001b40:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b44:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001b4e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b52:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b56:	2203      	movs	r2, #3
 8001b58:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001b5c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b60:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b64:	2203      	movs	r2, #3
 8001b66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001b6a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b6e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b72:	2203      	movs	r2, #3
 8001b74:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8001b78:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b7c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b80:	2203      	movs	r2, #3
 8001b82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8001b86:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b8a:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001b94:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001b98:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8001ba2:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ba6:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001baa:	2201      	movs	r2, #1
 8001bac:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001bb0:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001bb4:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001bb8:	2203      	movs	r2, #3
 8001bba:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8001bbe:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001bc2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001bcc:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001bd0:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 8001bda:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001bde:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001be2:	2203      	movs	r2, #3
 8001be4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8001be8:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001bec:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8001bf6:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001bfa:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001c04:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c08:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001c12:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c16:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001c20:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c24:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001c2e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c32:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c36:	2203      	movs	r2, #3
 8001c38:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8001c3c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c40:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c44:	2203      	movs	r2, #3
 8001c46:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001c4a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c4e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c52:	2201      	movs	r2, #1
 8001c54:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8001c58:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c5c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c60:	2203      	movs	r2, #3
 8001c62:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8001c66:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c6a:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8001c74:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c78:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8001c82:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c86:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8001c90:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001c94:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
 8001c9e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ca2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8001cac:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001cb0:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
 8001cba:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001cbe:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
 8001cc8:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ccc:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
 8001cd6:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001cda:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001cde:	2203      	movs	r2, #3
 8001ce0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 8001ce4:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ce8:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001cec:	2203      	movs	r2, #3
 8001cee:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8001cf2:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001cf6:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8001d00:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d04:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8001d0e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d12:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d16:	2203      	movs	r2, #3
 8001d18:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 8001d1c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d20:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d24:	2203      	movs	r2, #3
 8001d26:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 8001d2a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d2e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d32:	2201      	movs	r2, #1
 8001d34:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
 8001d38:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d3c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d40:	2203      	movs	r2, #3
 8001d42:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 8001d46:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d4a:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d4e:	2203      	movs	r2, #3
 8001d50:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8001d54:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d58:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
 8001d62:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d66:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
 8001d70:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d74:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
 8001d7e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d82:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d86:	2203      	movs	r2, #3
 8001d88:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
 8001d8c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d90:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001d94:	2201      	movs	r2, #1
 8001d96:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
 8001d9a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001d9e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001da2:	2203      	movs	r2, #3
 8001da4:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
 8001da8:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001dac:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001db0:	2203      	movs	r2, #3
 8001db2:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
 8001db6:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001dba:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001dc4:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001dc8:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001dcc:	2203      	movs	r2, #3
 8001dce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001dd2:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001dd6:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8001de0:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001de4:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001de8:	2203      	movs	r2, #3
 8001dea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001dee:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001df2:	e001      	b.n	8001df8 <main+0x428>
 8001df4:	20000428 	.word	0x20000428
 8001df8:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8001e02:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001e06:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001e10:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001e14:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001e18:	2203      	movs	r2, #3
 8001e1a:	f8c3 2258 	str.w	r2, [r3, #600]	@ 0x258
 8001e1e:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001e22:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001e26:	2203      	movs	r2, #3
 8001e28:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 8001e2c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001e30:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001e34:	2204      	movs	r2, #4
 8001e36:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
 8001e3a:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001e3e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8001e42:	2203      	movs	r2, #3
 8001e44:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(path[path_selection][cross_cnt] == 0){
 8001e48:	4b6d      	ldr	r3, [pc, #436]	@ (8002000 <main+0x630>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8002004 <main+0x634>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001e54:	f5a3 7136 	sub.w	r1, r3, #728	@ 0x2d8
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4403      	add	r3, r0
 8001e62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <main+0x4b4>
		  Move_Twin_Wheels(0, 0);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f99d 	bl	80021ac <Move_Twin_Wheels>
		  Motor_Control(50);
 8001e72:	2032      	movs	r0, #50	@ 0x32
 8001e74:	f000 fa40 	bl	80022f8 <Motor_Control>
	      HAL_Delay(310);
 8001e78:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001e7c:	f001 fbc0 	bl	8003600 <HAL_Delay>
		  while(1);
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <main+0x4b0>
	  }else if(path[path_selection][cross_cnt] == 1){
 8001e84:	4b5e      	ldr	r3, [pc, #376]	@ (8002000 <main+0x630>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <main+0x634>)
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001e90:	f5a3 7136 	sub.w	r1, r3, #728	@ 0x2d8
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4403      	add	r3, r0
 8001e9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d11e      	bne.n	8001ee4 <main+0x514>
		  Move_Turn(1);
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff f8f4 	bl	8001094 <Move_Turn>
		  Position_Adj(1);
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7ff f985 	bl	80011bc <Position_Adj>
		  Motor_Position(2);
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f7ff f8ce 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 8001eb8:	4b52      	ldr	r3, [pc, #328]	@ (8002004 <main+0x634>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a51      	ldr	r2, [pc, #324]	@ (8002004 <main+0x634>)
 8001ec0:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < 20; i++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001ec8:	e007      	b.n	8001eda <main+0x50a>
			  Move_Straight(1);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7ff fa64 	bl	8001398 <Move_Straight>
		  for(int i = 0; i < 20; i++){
 8001ed0:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001eda:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001ede:	2b13      	cmp	r3, #19
 8001ee0:	ddf3      	ble.n	8001eca <main+0x4fa>
 8001ee2:	e063      	b.n	8001fac <main+0x5dc>
		  }
	  }else if(path[path_selection][cross_cnt] == 2){
 8001ee4:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <main+0x630>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b46      	ldr	r3, [pc, #280]	@ (8002004 <main+0x634>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001ef0:	f5a3 7136 	sub.w	r1, r3, #728	@ 0x2d8
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4403      	add	r3, r0
 8001efe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d11e      	bne.n	8001f44 <main+0x574>
		  Move_Turn(2);
 8001f06:	2002      	movs	r0, #2
 8001f08:	f7ff f8c4 	bl	8001094 <Move_Turn>
		  Position_Adj(2);
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7ff f955 	bl	80011bc <Position_Adj>
		  Motor_Position(2);
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7ff f89e 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 8001f18:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <main+0x634>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a39      	ldr	r2, [pc, #228]	@ (8002004 <main+0x634>)
 8001f20:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < 20; i++){
 8001f22:	2300      	movs	r3, #0
 8001f24:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001f28:	e007      	b.n	8001f3a <main+0x56a>
			  Move_Straight(1);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7ff fa34 	bl	8001398 <Move_Straight>
		  for(int i = 0; i < 20; i++){
 8001f30:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8001f34:	3301      	adds	r3, #1
 8001f36:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001f3a:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8001f3e:	2b13      	cmp	r3, #19
 8001f40:	ddf3      	ble.n	8001f2a <main+0x55a>
 8001f42:	e033      	b.n	8001fac <main+0x5dc>
		  }
	  }else if(path[path_selection][cross_cnt] == 3){
 8001f44:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <main+0x630>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b2e      	ldr	r3, [pc, #184]	@ (8002004 <main+0x634>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001f50:	f5a3 7136 	sub.w	r1, r3, #728	@ 0x2d8
 8001f54:	4613      	mov	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4403      	add	r3, r0
 8001f5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d103      	bne.n	8001f6e <main+0x59e>
		  Move_Straight(1);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7ff fa16 	bl	8001398 <Move_Straight>
 8001f6c:	e01e      	b.n	8001fac <main+0x5dc>
	  }
	  else if(path[path_selection][cross_cnt] == 4){
 8001f6e:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <main+0x630>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <main+0x634>)
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8001f7a:	f5a3 7136 	sub.w	r1, r3, #728	@ 0x2d8
 8001f7e:	4613      	mov	r3, r2
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	1a9b      	subs	r3, r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4403      	add	r3, r0
 8001f88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d10d      	bne.n	8001fac <main+0x5dc>
		  Move_Turn(3);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f7ff f87f 	bl	8001094 <Move_Turn>
		  Position_Adj(3);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f7ff f910 	bl	80011bc <Position_Adj>
		  Motor_Position(1);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7ff f859 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <main+0x634>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a16      	ldr	r2, [pc, #88]	@ (8002004 <main+0x634>)
 8001faa:	6013      	str	r3, [r2, #0]
//		  for(int i = 0; i < 20; i++){
//			  Move_Straight(1);
//		  }
	  }

	  if(Judge_cross() == 1){
 8001fac:	f7ff fad0 	bl	8001550 <Judge_cross>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <main+0x5f6>
		  cross_cnt++;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <main+0x634>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <main+0x634>)
 8001fbe:	6013      	str	r3, [r2, #0]
          HAL_Delay(100);
 8001fc0:	2064      	movs	r0, #100	@ 0x64
 8001fc2:	f001 fb1d 	bl	8003600 <HAL_Delay>
	  }

	    if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // �????测到按键按下
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	480f      	ldr	r0, [pc, #60]	@ (8002008 <main+0x638>)
 8001fca:	f002 f9ed 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f47f af39 	bne.w	8001e48 <main+0x478>
	    {
	        HAL_Delay(50); // �????单延迟，以便于消�????
 8001fd6:	2032      	movs	r0, #50	@ 0x32
 8001fd8:	f001 fb12 	bl	8003600 <HAL_Delay>
	        if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // 再次确认按键确实被按�????
 8001fdc:	2110      	movs	r1, #16
 8001fde:	480a      	ldr	r0, [pc, #40]	@ (8002008 <main+0x638>)
 8001fe0:	f002 f9e2 	bl	80043a8 <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f47f af2e 	bne.w	8001e48 <main+0x478>
	        {
	      	  HAL_PWR_EnterSTANDBYMode();
 8001fec:	f002 fa26 	bl	800443c <HAL_PWR_EnterSTANDBYMode>
	      	  break;
 8001ff0:	bf00      	nop
 8001ff2:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f507 7736 	add.w	r7, r7, #728	@ 0x2d8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200002c8 	.word	0x200002c8
 8002004:	200002c4 	.word	0x200002c4
 8002008:	40021000 	.word	0x40021000

0800200c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b094      	sub	sp, #80	@ 0x50
 8002010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002012:	f107 0320 	add.w	r3, r7, #32
 8002016:	2230      	movs	r2, #48	@ 0x30
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f006 f937 	bl	800828e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <SystemClock_Config+0xcc>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	4a27      	ldr	r2, [pc, #156]	@ (80020d8 <SystemClock_Config+0xcc>)
 800203a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002040:	4b25      	ldr	r3, [pc, #148]	@ (80020d8 <SystemClock_Config+0xcc>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	4b22      	ldr	r3, [pc, #136]	@ (80020dc <SystemClock_Config+0xd0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a21      	ldr	r2, [pc, #132]	@ (80020dc <SystemClock_Config+0xd0>)
 8002056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <SystemClock_Config+0xd0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800206c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002072:	2302      	movs	r3, #2
 8002074:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002076:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800207c:	2308      	movs	r3, #8
 800207e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002080:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002084:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002086:	2302      	movs	r3, #2
 8002088:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800208a:	2304      	movs	r3, #4
 800208c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208e:	f107 0320 	add.w	r3, r7, #32
 8002092:	4618      	mov	r0, r3
 8002094:	f002 f9ea 	bl	800446c <HAL_RCC_OscConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800209e:	f000 f81f 	bl	80020e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a2:	230f      	movs	r3, #15
 80020a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a6:	2302      	movs	r3, #2
 80020a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	2105      	movs	r1, #5
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fc4b 	bl	800495c <HAL_RCC_ClockConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020cc:	f000 f808 	bl	80020e0 <Error_Handler>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3750      	adds	r7, #80	@ 0x50
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
}
 80020e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <Error_Handler+0x8>

080020ec <Move_Left>:
Engine EngineLeft;
Engine EngineRight;

//TIM3左轮 TIM4右轮
void Move_Left(int velocity)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db0e      	blt.n	8002118 <Move_Left+0x2c>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2108      	movs	r1, #8
 80020fe:	4811      	ldr	r0, [pc, #68]	@ (8002144 <Move_Left+0x58>)
 8002100:	f002 f96a 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2104      	movs	r1, #4
 8002108:	480e      	ldr	r0, [pc, #56]	@ (8002144 <Move_Left+0x58>)
 800210a:	f002 f965 	bl	80043d8 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, velocity);
 800210e:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <Move_Left+0x5c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
		}
}
 8002116:	e011      	b.n	800213c <Move_Left+0x50>
		else if(velocity < 0){
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da0e      	bge.n	800213c <Move_Left+0x50>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2108      	movs	r1, #8
 8002122:	4808      	ldr	r0, [pc, #32]	@ (8002144 <Move_Left+0x58>)
 8002124:	f002 f958 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
 8002128:	2201      	movs	r2, #1
 800212a:	2104      	movs	r1, #4
 800212c:	4805      	ldr	r0, [pc, #20]	@ (8002144 <Move_Left+0x58>)
 800212e:	f002 f953 	bl	80043d8 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	425a      	negs	r2, r3
 8002136:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <Move_Left+0x5c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020c00 	.word	0x40020c00
 8002148:	20000398 	.word	0x20000398

0800214c <Move_Right>:

void Move_Right(int velocity)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0e      	blt.n	8002178 <Move_Right+0x2c>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	2102      	movs	r1, #2
 800215e:	4811      	ldr	r0, [pc, #68]	@ (80021a4 <Move_Right+0x58>)
 8002160:	f002 f93a 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	2101      	movs	r1, #1
 8002168:	480e      	ldr	r0, [pc, #56]	@ (80021a4 <Move_Right+0x58>)
 800216a:	f002 f935 	bl	80043d8 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, velocity);
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <Move_Right+0x5c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
		}
}
 8002176:	e011      	b.n	800219c <Move_Right+0x50>
		else if(velocity < 0){
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	da0e      	bge.n	800219c <Move_Right+0x50>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	2102      	movs	r1, #2
 8002182:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <Move_Right+0x58>)
 8002184:	f002 f928 	bl	80043d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	2101      	movs	r1, #1
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <Move_Right+0x58>)
 800218e:	f002 f923 	bl	80043d8 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	425a      	negs	r2, r3
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <Move_Right+0x5c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	200003e0 	.word	0x200003e0

080021ac <Move_Twin_Wheels>:
//分别控制左右轮 velocity 范围 -100 - -50  50 - 100

void Move_Twin_Wheels(int velocity_1 ,int velocity_2)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
	Move_Left(velocity_2);
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f7ff ff98 	bl	80020ec <Move_Left>
	Move_Right(velocity_1);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ffc5 	bl	800214c <Move_Right>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <Read_Rotational_Speed>:
//velocity_1 是左轮， velocity_2 是右轮
//这里存在错误！Left Right 反了！但是上面那行注释正确
//65， 63几乎直行（偏右）

float Read_Rotational_Speed(int n)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	float rotational_speed = 0;
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
	if(n == 0)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d137      	bne.n	8002250 <Read_Rotational_Speed+0x84>
	{
		int16_t pluse = COUNTERNUMLEFT - RELOADVALUELEFT/2;
 80021e0:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <Read_Rotational_Speed+0x110>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	4b3c      	ldr	r3, [pc, #240]	@ (80022dc <Read_Rotational_Speed+0x110>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	813b      	strh	r3, [r7, #8]
        //从开始到现在当前10ms的总脉冲数
		EngineLeft.totalAngle = pluse + EngineLeft.loopNum * RELOADVALUELEFT/2;
 80021f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80021fc:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4619      	mov	r1, r3
 8002202:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <Read_Rotational_Speed+0x110>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 8002214:	605a      	str	r2, [r3, #4]
        //进行速度计算,4倍频,编码器11位,减速比56,再乘以6000即为每分钟输出轴多少转
        //motor.totalAngle - motor.lastAngle为当前10ms内的增量，即脉冲数
		EngineLeft.speed = (float)(EngineLeft.totalAngle - EngineLeft.lastAngle)/(4*11*RR)*6000;
 8002216:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002228:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80022e4 <Read_Rotational_Speed+0x118>
 800222c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002230:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80022e8 <Read_Rotational_Speed+0x11c>
 8002234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002238:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 800223a:	edc3 7a03 	vstr	s15, [r3, #12]
		rotational_speed = EngineLeft.speed;
 800223e:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	60fb      	str	r3, [r7, #12]
		EngineLeft.lastAngle = EngineLeft.totalAngle;              //更新转过的圈数
 8002244:	4b26      	ldr	r3, [pc, #152]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a25      	ldr	r2, [pc, #148]	@ (80022e0 <Read_Rotational_Speed+0x114>)
 800224a:	6013      	str	r3, [r2, #0]
		return rotational_speed;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	e03c      	b.n	80022ca <Read_Rotational_Speed+0xfe>
	}

    //如果是编码器更新中断,即10ms内,脉冲数超过了计数范围,需要进行处理
	else if(n == 1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d137      	bne.n	80022c6 <Read_Rotational_Speed+0xfa>
	{
		int16_t pluse = COUNTERNUMRIGHT - RELOADVALUERIGHT/2;
 8002256:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <Read_Rotational_Speed+0x120>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <Read_Rotational_Speed+0x120>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	b29b      	uxth	r3, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	817b      	strh	r3, [r7, #10]
        //从开始到现在当前10ms的总脉冲数
		EngineRight.totalAngle = pluse + EngineRight.loopNum * RELOADVALUERIGHT/2;
 800226e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002272:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4619      	mov	r1, r3
 8002278:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <Read_Rotational_Speed+0x120>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	461a      	mov	r2, r3
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 800228a:	605a      	str	r2, [r3, #4]
        //进行速度计算,4倍频,编码器11位,减速比56,再乘以6000即为每分钟输出轴多少转
        //motor.totalAngle - motor.lastAngle为当前10ms内的增量，即脉冲数
		EngineRight.speed = (float)(EngineRight.totalAngle - EngineRight.lastAngle)/(4*11*RR)*6000;
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80022e4 <Read_Rotational_Speed+0x118>
 80022a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80022e8 <Read_Rotational_Speed+0x11c>
 80022aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 80022b0:	edc3 7a03 	vstr	s15, [r3, #12]
		rotational_speed = EngineRight.speed;
 80022b4:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60fb      	str	r3, [r7, #12]
		EngineRight.lastAngle = EngineRight.totalAngle;              //更新转过的圈数
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <Read_Rotational_Speed+0x124>)
 80022c0:	6013      	str	r3, [r2, #0]
		return rotational_speed;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	e001      	b.n	80022ca <Read_Rotational_Speed+0xfe>
	}
	else
		return 0;
 80022c6:	f04f 0300 	mov.w	r3, #0
}
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb0 0a67 	vmov.f32	s0, s15
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	20000308 	.word	0x20000308
 80022e0:	200002e4 	.word	0x200002e4
 80022e4:	451a0000 	.word	0x451a0000
 80022e8:	45bb8000 	.word	0x45bb8000
 80022ec:	200004b8 	.word	0x200004b8
 80022f0:	200002f4 	.word	0x200002f4
 80022f4:	00000000 	.word	0x00000000

080022f8 <Motor_Control>:
//n=0读左轮转速，n=1读右轮转速


void Motor_Control(int duty_cycle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    // 舵机控制占空比范围2.5% ~ 12.5%
    // Counter Period设置的是2000，因此占空比设置范围是50 ~ 250
	Motor_angel = duty_cycle * 0.9 - 45;
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe f90f 	bl	8000524 <__aeabi_i2d>
 8002306:	a317      	add	r3, pc, #92	@ (adr r3, 8002364 <Motor_Control+0x6c>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	f7fe f974 	bl	80005f8 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <Motor_Control+0x60>)
 800231e:	f7fd ffb3 	bl	8000288 <__aeabi_dsub>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fc5d 	bl	8000be8 <__aeabi_d2f>
 800232e:	4603      	mov	r3, r0
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <Motor_Control+0x64>)
 8002332:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 50 + duty_cycle);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <Motor_Control+0x68>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 250 - duty_cycle);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1c3 02fa 	rsb	r2, r3, #250	@ 0xfa
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <Motor_Control+0x68>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	f3af 8000 	nop.w
 8002358:	40468000 	.word	0x40468000
 800235c:	200002e0 	.word	0x200002e0
 8002360:	20000500 	.word	0x20000500
 8002364:	cccccccd 	.word	0xcccccccd
 8002368:	3feccccc 	.word	0x3feccccc

0800236c <Engine_Init>:

//第二版
//195为推物块状态,250为完全收缩状态，170为让物块进来前的状态

void Engine_Init()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);      //开启编码器定时器
 8002370:	213c      	movs	r1, #60	@ 0x3c
 8002372:	481c      	ldr	r0, [pc, #112]	@ (80023e4 <Engine_Init+0x78>)
 8002374:	f002 ffe8 	bl	8005348 <HAL_TIM_Encoder_Start>
    __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);           //开启编码器定时器更新中断,防溢出处理
 8002378:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <Engine_Init+0x78>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <Engine_Init+0x78>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8002388:	213c      	movs	r1, #60	@ 0x3c
 800238a:	4817      	ldr	r0, [pc, #92]	@ (80023e8 <Engine_Init+0x7c>)
 800238c:	f002 ffdc 	bl	8005348 <HAL_TIM_Encoder_Start>
    __HAL_TIM_ENABLE_IT(&htim8,TIM_IT_UPDATE);
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <Engine_Init+0x7c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <Engine_Init+0x7c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);                       //开启10ms定时器中断
 80023a0:	4812      	ldr	r0, [pc, #72]	@ (80023ec <Engine_Init+0x80>)
 80023a2:	f002 fd4b 	bl	8004e3c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80023a6:	2100      	movs	r1, #0
 80023a8:	4811      	ldr	r0, [pc, #68]	@ (80023f0 <Engine_Init+0x84>)
 80023aa:	f002 fe11 	bl	8004fd0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 80023ae:	2100      	movs	r1, #0
 80023b0:	4810      	ldr	r0, [pc, #64]	@ (80023f4 <Engine_Init+0x88>)
 80023b2:	f002 fe0d 	bl	8004fd0 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 10000);
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <Engine_Init+0x78>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim8, 10000);
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <Engine_Init+0x7c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24
	EngineLeft.loopNum = 0;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <Engine_Init+0x8c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
	EngineRight.loopNum = 0;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <Engine_Init+0x90>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
	Move_Twin_Wheels(0, 0);
 80023d6:	2100      	movs	r1, #0
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff fee7 	bl	80021ac <Move_Twin_Wheels>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000308 	.word	0x20000308
 80023e8:	200004b8 	.word	0x200004b8
 80023ec:	20000470 	.word	0x20000470
 80023f0:	20000398 	.word	0x20000398
 80023f4:	200003e0 	.word	0x200003e0
 80023f8:	200002e4 	.word	0x200002e4
 80023fc:	200002f4 	.word	0x200002f4

08002400 <Motor_Init>:


void Motor_Init()
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
 8002404:	2100      	movs	r1, #0
 8002406:	4808      	ldr	r0, [pc, #32]	@ (8002428 <Motor_Init+0x28>)
 8002408:	f002 fde2 	bl	8004fd0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_2);
 800240c:	2104      	movs	r1, #4
 800240e:	4806      	ldr	r0, [pc, #24]	@ (8002428 <Motor_Init+0x28>)
 8002410:	f002 fdde 	bl	8004fd0 <HAL_TIM_PWM_Start_IT>
	Motor_Control(50);
 8002414:	2032      	movs	r0, #50	@ 0x32
 8002416:	f7ff ff6f 	bl	80022f8 <Motor_Control>
	HAL_Delay(1000);
 800241a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800241e:	f001 f8ef 	bl	8003600 <HAL_Delay>
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000500 	.word	0x20000500

0800242c <GraySensor_Init>:
//延时0.8s保证姿态调整正常

void GraySensor_Init()
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
	GrayData[0] = 0;
 8002430:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <GraySensor_Init+0x2c>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
	GrayData[1] = 0;
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <GraySensor_Init+0x2c>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
	GrayData[2] = 0;
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <GraySensor_Init+0x2c>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
	GrayData[3] = 0;
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <GraySensor_Init+0x2c>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
	GrayData[4] = 0;
 8002448:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <GraySensor_Init+0x2c>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	200002cc 	.word	0x200002cc

0800245c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_MspInit+0x4c>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002470:	6453      	str	r3, [r2, #68]	@ 0x44
 8002472:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <NMI_Handler+0x4>

080024b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <HardFault_Handler+0x4>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <MemManage_Handler+0x4>

080024c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002502:	f001 f85d 	bl	80035c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}

0800250a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800250e:	2008      	movs	r0, #8
 8002510:	f001 ff7c 	bl	800440c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <DMA1_Stream1_IRQHandler+0x10>)
 800251e:	f001 fb3d 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000698 	.word	0x20000698

0800252c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <DMA1_Stream3_IRQHandler+0x10>)
 8002532:	f001 fb33 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200006f8 	.word	0x200006f8

08002540 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <DMA1_Stream5_IRQHandler+0x10>)
 8002546:	f001 fb29 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200005d8 	.word	0x200005d8

08002554 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <DMA1_Stream6_IRQHandler+0x10>)
 800255a:	f001 fb1f 	bl	8003b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000638 	.word	0x20000638

08002568 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800256c:	4802      	ldr	r0, [pc, #8]	@ (8002578 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800256e:	f002 ff79 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000308 	.word	0x20000308

0800257c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <TIM2_IRQHandler+0x10>)
 8002582:	f002 ff6f 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000350 	.word	0x20000350

08002590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <TIM3_IRQHandler+0x10>)
 8002596:	f002 ff65 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000398 	.word	0x20000398

080025a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <TIM4_IRQHandler+0x10>)
 80025aa:	f002 ff5b 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200003e0 	.word	0x200003e0

080025b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <USART2_IRQHandler+0x10>)
 80025be:	f003 ff31 	bl	8006424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000548 	.word	0x20000548

080025cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <USART3_IRQHandler+0x10>)
 80025d2:	f003 ff27 	bl	8006424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000590 	.word	0x20000590

080025e0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80025e6:	f002 ff3d 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200004b8 	.word	0x200004b8

080025f4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <TIM5_IRQHandler+0x10>)
 80025fa:	f002 ff33 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000428 	.word	0x20000428

08002608 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800260c:	4802      	ldr	r0, [pc, #8]	@ (8002618 <TIM6_DAC_IRQHandler+0x10>)
 800260e:	f002 ff29 	bl	8005464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000470 	.word	0x20000470

0800261c <_getpid>:
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
 8002620:	2301      	movs	r3, #1
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <_kill>:
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	f005 fe7d 	bl	8008334 <__errno>
 800263a:	4603      	mov	r3, r0
 800263c:	2216      	movs	r2, #22
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_exit>:
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ffe7 	bl	800262c <_kill>
 800265e:	bf00      	nop
 8002660:	e7fd      	b.n	800265e <_exit+0x12>

08002662 <_read>:
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e00a      	b.n	800268a <_read+0x28>
 8002674:	f3af 8000 	nop.w
 8002678:	4601      	mov	r1, r0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	60ba      	str	r2, [r7, #8]
 8002680:	b2ca      	uxtb	r2, r1
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	dbf0      	blt.n	8002674 <_read+0x12>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <_write>:
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e009      	b.n	80026c2 <_write+0x26>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	60ba      	str	r2, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f3af 8000 	nop.w
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3301      	adds	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	dbf1      	blt.n	80026ae <_write+0x12>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_close>:
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <_fstat>:
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	2300      	movs	r3, #0
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_isatty>:
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	2301      	movs	r3, #1
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <_lseek>:
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	2300      	movs	r3, #0
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_sbrk>:
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <_sbrk+0x40>
 800276c:	f005 fde2 	bl	8008334 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	220c      	movs	r2, #12
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e009      	b.n	8002790 <_sbrk+0x54>
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	4a05      	ldr	r2, [pc, #20]	@ (80027a0 <_sbrk+0x64>)
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20020000 	.word	0x20020000
 800279c:	00000400 	.word	0x00000400
 80027a0:	20000304 	.word	0x20000304
 80027a4:	200008a8 	.word	0x200008a8

080027a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <SystemInit+0x20>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	4a05      	ldr	r2, [pc, #20]	@ (80027c8 <SystemInit+0x20>)
 80027b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	@ 0x30
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	2224      	movs	r2, #36	@ 0x24
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f005 fd57 	bl	800828e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027e8:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027ea:	4a23      	ldr	r2, [pc, #140]	@ (8002878 <MX_TIM1_Init+0xac>)
 80027ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ee:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <MX_TIM1_Init+0xa8>)
 80027fc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002800:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <MX_TIM1_Init+0xa8>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002808:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <MX_TIM1_Init+0xa8>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <MX_TIM1_Init+0xa8>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002814:	2301      	movs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800282c:	2301      	movs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	4619      	mov	r1, r3
 800283e:	480d      	ldr	r0, [pc, #52]	@ (8002874 <MX_TIM1_Init+0xa8>)
 8002840:	f002 fcdc 	bl	80051fc <HAL_TIM_Encoder_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800284a:	f7ff fc49 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	@ (8002874 <MX_TIM1_Init+0xa8>)
 800285c:	f003 fc92 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002866:	f7ff fc3b 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	3730      	adds	r7, #48	@ 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000308 	.word	0x20000308
 8002878:	40010000 	.word	0x40010000

0800287c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002882:	f107 0308 	add.w	r3, r7, #8
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002890:	463b      	mov	r3, r7
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002898:	4b1d      	ldr	r3, [pc, #116]	@ (8002910 <MX_TIM2_Init+0x94>)
 800289a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800289e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028a2:	2253      	movs	r2, #83	@ 0x53
 80028a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80028ac:	4b18      	ldr	r3, [pc, #96]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028ae:	2263      	movs	r2, #99	@ 0x63
 80028b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b2:	4b17      	ldr	r3, [pc, #92]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b8:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028be:	4814      	ldr	r0, [pc, #80]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028c0:	f002 fa6c 	bl	8004d9c <HAL_TIM_Base_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80028ca:	f7ff fc09 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	4619      	mov	r1, r3
 80028da:	480d      	ldr	r0, [pc, #52]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028dc:	f002 ff74 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80028e6:	f7ff fbfb 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f2:	463b      	mov	r3, r7
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	@ (8002910 <MX_TIM2_Init+0x94>)
 80028f8:	f003 fc44 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002902:	f7ff fbed 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000350 	.word	0x20000350

08002914 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b092      	sub	sp, #72	@ 0x48
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002942:	463b      	mov	r3, r7
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	615a      	str	r2, [r3, #20]
 8002952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002954:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <MX_TIM3_Init+0x110>)
 8002956:	4a34      	ldr	r2, [pc, #208]	@ (8002a28 <MX_TIM3_Init+0x114>)
 8002958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800295a:	4b32      	ldr	r3, [pc, #200]	@ (8002a24 <MX_TIM3_Init+0x110>)
 800295c:	2253      	movs	r2, #83	@ 0x53
 800295e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <MX_TIM3_Init+0x110>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002966:	4b2f      	ldr	r3, [pc, #188]	@ (8002a24 <MX_TIM3_Init+0x110>)
 8002968:	2263      	movs	r2, #99	@ 0x63
 800296a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <MX_TIM3_Init+0x110>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002972:	4b2c      	ldr	r3, [pc, #176]	@ (8002a24 <MX_TIM3_Init+0x110>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002978:	482a      	ldr	r0, [pc, #168]	@ (8002a24 <MX_TIM3_Init+0x110>)
 800297a:	f002 fa0f 	bl	8004d9c <HAL_TIM_Base_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002984:	f7ff fbac 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800298c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800298e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002992:	4619      	mov	r1, r3
 8002994:	4823      	ldr	r0, [pc, #140]	@ (8002a24 <MX_TIM3_Init+0x110>)
 8002996:	f002 ff17 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80029a0:	f7ff fb9e 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029a4:	481f      	ldr	r0, [pc, #124]	@ (8002a24 <MX_TIM3_Init+0x110>)
 80029a6:	f002 fab9 	bl	8004f1c <HAL_TIM_PWM_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80029b0:	f7ff fb96 	bl	80020e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80029b8:	2310      	movs	r3, #16
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80029bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029c0:	4619      	mov	r1, r3
 80029c2:	4818      	ldr	r0, [pc, #96]	@ (8002a24 <MX_TIM3_Init+0x110>)
 80029c4:	f002 ffc7 	bl	8005956 <HAL_TIM_SlaveConfigSynchro>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80029ce:	f7ff fb87 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029d2:	2320      	movs	r3, #32
 80029d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	4619      	mov	r1, r3
 80029e0:	4810      	ldr	r0, [pc, #64]	@ (8002a24 <MX_TIM3_Init+0x110>)
 80029e2:	f003 fbcf 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80029ec:	f7ff fb78 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f0:	2360      	movs	r3, #96	@ 0x60
 80029f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a00:	463b      	mov	r3, r7
 8002a02:	2200      	movs	r2, #0
 8002a04:	4619      	mov	r1, r3
 8002a06:	4807      	ldr	r0, [pc, #28]	@ (8002a24 <MX_TIM3_Init+0x110>)
 8002a08:	f002 fe1c 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002a12:	f7ff fb65 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <MX_TIM3_Init+0x110>)
 8002a18:	f000 fb20 	bl	800305c <HAL_TIM_MspPostInit>

}
 8002a1c:	bf00      	nop
 8002a1e:	3748      	adds	r7, #72	@ 0x48
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000398 	.word	0x20000398
 8002a28:	40000400 	.word	0x40000400

08002a2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b092      	sub	sp, #72	@ 0x48
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
 8002a68:	615a      	str	r2, [r3, #20]
 8002a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a6c:	4b33      	ldr	r3, [pc, #204]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002a6e:	4a34      	ldr	r2, [pc, #208]	@ (8002b40 <MX_TIM4_Init+0x114>)
 8002a70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8002a72:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002a74:	2253      	movs	r2, #83	@ 0x53
 8002a76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a78:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002a80:	2263      	movs	r2, #99	@ 0x63
 8002a82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a90:	482a      	ldr	r0, [pc, #168]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002a92:	f002 f983 	bl	8004d9c <HAL_TIM_Base_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002a9c:	f7ff fb20 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aa6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4823      	ldr	r0, [pc, #140]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002aae:	f002 fe8b 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002ab8:	f7ff fb12 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002abc:	481f      	ldr	r0, [pc, #124]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002abe:	f002 fa2d 	bl	8004f1c <HAL_TIM_PWM_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002ac8:	f7ff fb0a 	bl	80020e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4818      	ldr	r0, [pc, #96]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002adc:	f002 ff3b 	bl	8005956 <HAL_TIM_SlaveConfigSynchro>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8002ae6:	f7ff fafb 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	4619      	mov	r1, r3
 8002af8:	4810      	ldr	r0, [pc, #64]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002afa:	f003 fb43 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8002b04:	f7ff faec 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b08:	2360      	movs	r3, #96	@ 0x60
 8002b0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4807      	ldr	r0, [pc, #28]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002b20:	f002 fd90 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002b2a:	f7ff fad9 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b2e:	4803      	ldr	r0, [pc, #12]	@ (8002b3c <MX_TIM4_Init+0x110>)
 8002b30:	f000 fa94 	bl	800305c <HAL_TIM_MspPostInit>

}
 8002b34:	bf00      	nop
 8002b36:	3748      	adds	r7, #72	@ 0x48
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200003e0 	.word	0x200003e0
 8002b40:	40000800 	.word	0x40000800

08002b44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002b62:	4a1e      	ldr	r2, [pc, #120]	@ (8002bdc <MX_TIM5_Init+0x98>)
 8002b64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002b68:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002b6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002b76:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002b7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7c:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b88:	4813      	ldr	r0, [pc, #76]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002b8a:	f002 f907 	bl	8004d9c <HAL_TIM_Base_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002b94:	f7ff faa4 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480c      	ldr	r0, [pc, #48]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002ba6:	f002 fe0f 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002bb0:	f7ff fa96 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bbc:	463b      	mov	r3, r7
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4805      	ldr	r0, [pc, #20]	@ (8002bd8 <MX_TIM5_Init+0x94>)
 8002bc2:	f003 fadf 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002bcc:	f7ff fa88 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000428 	.word	0x20000428
 8002bdc:	40000c00 	.word	0x40000c00

08002be0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be6:	463b      	mov	r3, r7
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bee:	4b15      	ldr	r3, [pc, #84]	@ (8002c44 <MX_TIM6_Init+0x64>)
 8002bf0:	4a15      	ldr	r2, [pc, #84]	@ (8002c48 <MX_TIM6_Init+0x68>)
 8002bf2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <MX_TIM6_Init+0x64>)
 8002bf6:	2253      	movs	r2, #83	@ 0x53
 8002bf8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <MX_TIM6_Init+0x64>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002c00:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <MX_TIM6_Init+0x64>)
 8002c02:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002c06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <MX_TIM6_Init+0x64>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c0e:	480d      	ldr	r0, [pc, #52]	@ (8002c44 <MX_TIM6_Init+0x64>)
 8002c10:	f002 f8c4 	bl	8004d9c <HAL_TIM_Base_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002c1a:	f7ff fa61 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c26:	463b      	mov	r3, r7
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <MX_TIM6_Init+0x64>)
 8002c2c:	f003 faaa 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002c36:	f7ff fa53 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000470 	.word	0x20000470
 8002c48:	40001000 	.word	0x40001000

08002c4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08c      	sub	sp, #48	@ 0x30
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	2224      	movs	r2, #36	@ 0x24
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f005 fb17 	bl	800828e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c68:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002c6a:	4a23      	ldr	r2, [pc, #140]	@ (8002cf8 <MX_TIM8_Init+0xac>)
 8002c6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c74:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000;
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002c7c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002c80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c82:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c88:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8e:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002cac:	2301      	movs	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002cb8:	f107 030c 	add.w	r3, r7, #12
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	480d      	ldr	r0, [pc, #52]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002cc0:	f002 fa9c 	bl	80051fc <HAL_TIM_Encoder_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002cca:	f7ff fa09 	bl	80020e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4806      	ldr	r0, [pc, #24]	@ (8002cf4 <MX_TIM8_Init+0xa8>)
 8002cdc:	f003 fa52 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002ce6:	f7ff f9fb 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	3730      	adds	r7, #48	@ 0x30
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200004b8 	.word	0x200004b8
 8002cf8:	40010400 	.word	0x40010400

08002cfc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	@ 0x30
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d02:	f107 0320 	add.w	r3, r7, #32
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	611a      	str	r2, [r3, #16]
 8002d1e:	615a      	str	r2, [r3, #20]
 8002d20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002d22:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d24:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd4 <MX_TIM9_Init+0xd8>)
 8002d26:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1680-1;
 8002d28:	4b29      	ldr	r3, [pc, #164]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d2a:	f240 628f 	movw	r2, #1679	@ 0x68f
 8002d2e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 8002d36:	4b26      	ldr	r3, [pc, #152]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d38:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002d3c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3e:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d44:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002d4a:	4821      	ldr	r0, [pc, #132]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d4c:	f002 f826 	bl	8004d9c <HAL_TIM_Base_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8002d56:	f7ff f9c3 	bl	80020e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002d60:	f107 0320 	add.w	r3, r7, #32
 8002d64:	4619      	mov	r1, r3
 8002d66:	481a      	ldr	r0, [pc, #104]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d68:	f002 fd2e 	bl	80057c8 <HAL_TIM_ConfigClockSource>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8002d72:	f7ff f9b5 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002d76:	4816      	ldr	r0, [pc, #88]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d78:	f002 f8d0 	bl	8004f1c <HAL_TIM_PWM_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002d82:	f7ff f9ad 	bl	80020e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d86:	2360      	movs	r3, #96	@ 0x60
 8002d88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480c      	ldr	r0, [pc, #48]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002d9e:	f002 fc51 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002da8:	f7ff f99a 	bl	80020e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	2204      	movs	r2, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4807      	ldr	r0, [pc, #28]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002db4:	f002 fc46 	bl	8005644 <HAL_TIM_PWM_ConfigChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8002dbe:	f7ff f98f 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002dc2:	4803      	ldr	r0, [pc, #12]	@ (8002dd0 <MX_TIM9_Init+0xd4>)
 8002dc4:	f000 f94a 	bl	800305c <HAL_TIM_MspPostInit>

}
 8002dc8:	bf00      	nop
 8002dca:	3730      	adds	r7, #48	@ 0x30
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000500 	.word	0x20000500
 8002dd4:	40014000 	.word	0x40014000

08002dd8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	@ 0x30
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee0 <HAL_TIM_Encoder_MspInit+0x108>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d135      	bne.n	8002e66 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	4b39      	ldr	r3, [pc, #228]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	4a38      	ldr	r2, [pc, #224]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	4b32      	ldr	r3, [pc, #200]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	4a31      	ldr	r2, [pc, #196]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e26:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Engine_Leftcode1_Pin|Engine_Leftcode2_Pin;
 8002e32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e44:	2301      	movs	r3, #1
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4826      	ldr	r0, [pc, #152]	@ (8002ee8 <HAL_TIM_Encoder_MspInit+0x110>)
 8002e50:	f001 f90e 	bl	8004070 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 4, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2104      	movs	r1, #4
 8002e58:	2019      	movs	r0, #25
 8002e5a:	f000 fcd0 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e5e:	2019      	movs	r0, #25
 8002e60:	f000 fce9 	bl	8003836 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002e64:	e038      	b.n	8002ed8 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a20      	ldr	r2, [pc, #128]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x114>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d133      	bne.n	8002ed8 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e80:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	4b14      	ldr	r3, [pc, #80]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	4a13      	ldr	r2, [pc, #76]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Engine_Rightcode1_Pin|Engine_Rightcode2_Pin;
 8002ea8:	23c0      	movs	r3, #192	@ 0xc0
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	480b      	ldr	r0, [pc, #44]	@ (8002ef0 <HAL_TIM_Encoder_MspInit+0x118>)
 8002ec4:	f001 f8d4 	bl	8004070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 4, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2104      	movs	r1, #4
 8002ecc:	202c      	movs	r0, #44	@ 0x2c
 8002ece:	f000 fc96 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002ed2:	202c      	movs	r0, #44	@ 0x2c
 8002ed4:	f000 fcaf 	bl	8003836 <HAL_NVIC_EnableIRQ>
}
 8002ed8:	bf00      	nop
 8002eda:	3730      	adds	r7, #48	@ 0x30
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	40020800 	.word	0x40020800

08002ef4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f04:	d116      	bne.n	8002f34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	4a4d      	ldr	r2, [pc, #308]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f16:	4b4b      	ldr	r3, [pc, #300]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2101      	movs	r1, #1
 8002f26:	201c      	movs	r0, #28
 8002f28:	f000 fc69 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f2c:	201c      	movs	r0, #28
 8002f2e:	f000 fc82 	bl	8003836 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002f32:	e082      	b.n	800303a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a43      	ldr	r2, [pc, #268]	@ (8003048 <HAL_TIM_Base_MspInit+0x154>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d116      	bne.n	8002f6c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	4b40      	ldr	r3, [pc, #256]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a3f      	ldr	r2, [pc, #252]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2103      	movs	r1, #3
 8002f5e:	201d      	movs	r0, #29
 8002f60:	f000 fc4d 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f64:	201d      	movs	r0, #29
 8002f66:	f000 fc66 	bl	8003836 <HAL_NVIC_EnableIRQ>
}
 8002f6a:	e066      	b.n	800303a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM4)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a36      	ldr	r2, [pc, #216]	@ (800304c <HAL_TIM_Base_MspInit+0x158>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d116      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	4b32      	ldr	r3, [pc, #200]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	4a31      	ldr	r2, [pc, #196]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f86:	4b2f      	ldr	r3, [pc, #188]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2103      	movs	r1, #3
 8002f96:	201e      	movs	r0, #30
 8002f98:	f000 fc31 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f9c:	201e      	movs	r0, #30
 8002f9e:	f000 fc4a 	bl	8003836 <HAL_NVIC_EnableIRQ>
}
 8002fa2:	e04a      	b.n	800303a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a29      	ldr	r2, [pc, #164]	@ (8003050 <HAL_TIM_Base_MspInit+0x15c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d116      	bne.n	8002fdc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	4a23      	ldr	r2, [pc, #140]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fbe:	4b21      	ldr	r3, [pc, #132]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2105      	movs	r1, #5
 8002fce:	2032      	movs	r0, #50	@ 0x32
 8002fd0:	f000 fc15 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002fd4:	2032      	movs	r0, #50	@ 0x32
 8002fd6:	f000 fc2e 	bl	8003836 <HAL_NVIC_EnableIRQ>
}
 8002fda:	e02e      	b.n	800303a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM6)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8003054 <HAL_TIM_Base_MspInit+0x160>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d116      	bne.n	8003014 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	4b16      	ldr	r3, [pc, #88]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002ff0:	f043 0310 	orr.w	r3, r3, #16
 8002ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff6:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2107      	movs	r1, #7
 8003006:	2036      	movs	r0, #54	@ 0x36
 8003008:	f000 fbf9 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800300c:	2036      	movs	r0, #54	@ 0x36
 800300e:	f000 fc12 	bl	8003836 <HAL_NVIC_EnableIRQ>
}
 8003012:	e012      	b.n	800303a <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0f      	ldr	r2, [pc, #60]	@ (8003058 <HAL_TIM_Base_MspInit+0x164>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10d      	bne.n	800303a <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302c:	6453      	str	r3, [r2, #68]	@ 0x44
 800302e:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <HAL_TIM_Base_MspInit+0x150>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
}
 800303a:	bf00      	nop
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800
 8003050:	40000c00 	.word	0x40000c00
 8003054:	40001000 	.word	0x40001000
 8003058:	40014000 	.word	0x40014000

0800305c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a36      	ldr	r2, [pc, #216]	@ (8003154 <HAL_TIM_MspPostInit+0xf8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d11e      	bne.n	80030bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	4a34      	ldr	r2, [pc, #208]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6313      	str	r3, [r2, #48]	@ 0x30
 800308e:	4b32      	ldr	r3, [pc, #200]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Engine_PWM_Left_Pin;
 800309a:	2340      	movs	r3, #64	@ 0x40
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030aa:	2302      	movs	r3, #2
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Left_GPIO_Port, &GPIO_InitStruct);
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	4619      	mov	r1, r3
 80030b4:	4829      	ldr	r0, [pc, #164]	@ (800315c <HAL_TIM_MspPostInit+0x100>)
 80030b6:	f000 ffdb 	bl	8004070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80030ba:	e047      	b.n	800314c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a27      	ldr	r2, [pc, #156]	@ (8003160 <HAL_TIM_MspPostInit+0x104>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d11f      	bne.n	8003106 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d6:	4b20      	ldr	r3, [pc, #128]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Engine_PWM_Right_Pin;
 80030e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030f4:	2302      	movs	r3, #2
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Right_GPIO_Port, &GPIO_InitStruct);
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	4619      	mov	r1, r3
 80030fe:	4819      	ldr	r0, [pc, #100]	@ (8003164 <HAL_TIM_MspPostInit+0x108>)
 8003100:	f000 ffb6 	bl	8004070 <HAL_GPIO_Init>
}
 8003104:	e022      	b.n	800314c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM9)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <HAL_TIM_MspPostInit+0x10c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d11d      	bne.n	800314c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	4a0f      	ldr	r2, [pc, #60]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003120:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <HAL_TIM_MspPostInit+0xfc>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_PWM_TIM9_CH1_Pin|Motor_PWM_TIM9_CH2_Pin;
 800312c:	2360      	movs	r3, #96	@ 0x60
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003138:	2302      	movs	r3, #2
 800313a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800313c:	2303      	movs	r3, #3
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4619      	mov	r1, r3
 8003146:	4809      	ldr	r0, [pc, #36]	@ (800316c <HAL_TIM_MspPostInit+0x110>)
 8003148:	f000 ff92 	bl	8004070 <HAL_GPIO_Init>
}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	@ 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40000400 	.word	0x40000400
 8003158:	40023800 	.word	0x40023800
 800315c:	40020000 	.word	0x40020000
 8003160:	40000800 	.word	0x40000800
 8003164:	40020c00 	.word	0x40020c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40021000 	.word	0x40021000

08003170 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003174:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 8003176:	4a12      	ldr	r2, [pc, #72]	@ (80031c0 <MX_USART2_UART_Init+0x50>)
 8003178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 800317c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003182:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800318e:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003194:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 8003196:	220c      	movs	r2, #12
 8003198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800319a:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031a6:	4805      	ldr	r0, [pc, #20]	@ (80031bc <MX_USART2_UART_Init+0x4c>)
 80031a8:	f003 f87c 	bl	80062a4 <HAL_UART_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031b2:	f7fe ff95 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000548 	.word	0x20000548
 80031c0:	40004400 	.word	0x40004400

080031c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <MX_USART3_UART_Init+0x50>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031ce:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	@ (8003210 <MX_USART3_UART_Init+0x4c>)
 80031fc:	f003 f852 	bl	80062a4 <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003206:	f7fe ff6b 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000590 	.word	0x20000590
 8003214:	40004800 	.word	0x40004800

08003218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	@ 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a97      	ldr	r2, [pc, #604]	@ (8003494 <HAL_UART_MspInit+0x27c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	f040 8091 	bne.w	800335e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	4b95      	ldr	r3, [pc, #596]	@ (8003498 <HAL_UART_MspInit+0x280>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	4a94      	ldr	r2, [pc, #592]	@ (8003498 <HAL_UART_MspInit+0x280>)
 8003246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800324a:	6413      	str	r3, [r2, #64]	@ 0x40
 800324c:	4b92      	ldr	r3, [pc, #584]	@ (8003498 <HAL_UART_MspInit+0x280>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	4b8e      	ldr	r3, [pc, #568]	@ (8003498 <HAL_UART_MspInit+0x280>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	4a8d      	ldr	r2, [pc, #564]	@ (8003498 <HAL_UART_MspInit+0x280>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6313      	str	r3, [r2, #48]	@ 0x30
 8003268:	4b8b      	ldr	r3, [pc, #556]	@ (8003498 <HAL_UART_MspInit+0x280>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8003274:	230c      	movs	r3, #12
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003284:	2307      	movs	r3, #7
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	4619      	mov	r1, r3
 800328e:	4883      	ldr	r0, [pc, #524]	@ (800349c <HAL_UART_MspInit+0x284>)
 8003290:	f000 feee 	bl	8004070 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003294:	4b82      	ldr	r3, [pc, #520]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 8003296:	4a83      	ldr	r2, [pc, #524]	@ (80034a4 <HAL_UART_MspInit+0x28c>)
 8003298:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800329a:	4b81      	ldr	r3, [pc, #516]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 800329c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032a2:	4b7f      	ldr	r3, [pc, #508]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a8:	4b7d      	ldr	r3, [pc, #500]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032ae:	4b7c      	ldr	r3, [pc, #496]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b6:	4b7a      	ldr	r3, [pc, #488]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032bc:	4b78      	ldr	r3, [pc, #480]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80032c2:	4b77      	ldr	r3, [pc, #476]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032c8:	4b75      	ldr	r3, [pc, #468]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ce:	4b74      	ldr	r3, [pc, #464]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80032d4:	4872      	ldr	r0, [pc, #456]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032d6:	f000 fac9 	bl	800386c <HAL_DMA_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80032e0:	f7fe fefe 	bl	80020e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032ea:	4a6d      	ldr	r2, [pc, #436]	@ (80034a0 <HAL_UART_MspInit+0x288>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80032f0:	4b6d      	ldr	r3, [pc, #436]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 80032f2:	4a6e      	ldr	r2, [pc, #440]	@ (80034ac <HAL_UART_MspInit+0x294>)
 80032f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80032f6:	4b6c      	ldr	r3, [pc, #432]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 80032f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032fe:	4b6a      	ldr	r3, [pc, #424]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003300:	2240      	movs	r2, #64	@ 0x40
 8003302:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003304:	4b68      	ldr	r3, [pc, #416]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800330a:	4b67      	ldr	r3, [pc, #412]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 800330c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003310:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003312:	4b65      	ldr	r3, [pc, #404]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003314:	2200      	movs	r2, #0
 8003316:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003318:	4b63      	ldr	r3, [pc, #396]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 800331a:	2200      	movs	r2, #0
 800331c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800331e:	4b62      	ldr	r3, [pc, #392]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003320:	2200      	movs	r2, #0
 8003322:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003324:	4b60      	ldr	r3, [pc, #384]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003326:	2200      	movs	r2, #0
 8003328:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800332a:	4b5f      	ldr	r3, [pc, #380]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 800332c:	2200      	movs	r2, #0
 800332e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003330:	485d      	ldr	r0, [pc, #372]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003332:	f000 fa9b 	bl	800386c <HAL_DMA_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800333c:	f7fe fed0 	bl	80020e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a59      	ldr	r2, [pc, #356]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38
 8003346:	4a58      	ldr	r2, [pc, #352]	@ (80034a8 <HAL_UART_MspInit+0x290>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800334c:	2200      	movs	r2, #0
 800334e:	2106      	movs	r1, #6
 8003350:	2026      	movs	r0, #38	@ 0x26
 8003352:	f000 fa54 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003356:	2026      	movs	r0, #38	@ 0x26
 8003358:	f000 fa6d 	bl	8003836 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800335c:	e096      	b.n	800348c <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a53      	ldr	r2, [pc, #332]	@ (80034b0 <HAL_UART_MspInit+0x298>)
 8003364:	4293      	cmp	r3, r2
 8003366:	f040 8091 	bne.w	800348c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b4a      	ldr	r3, [pc, #296]	@ (8003498 <HAL_UART_MspInit+0x280>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	4a49      	ldr	r2, [pc, #292]	@ (8003498 <HAL_UART_MspInit+0x280>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003378:	6413      	str	r3, [r2, #64]	@ 0x40
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_UART_MspInit+0x280>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b43      	ldr	r3, [pc, #268]	@ (8003498 <HAL_UART_MspInit+0x280>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a42      	ldr	r2, [pc, #264]	@ (8003498 <HAL_UART_MspInit+0x280>)
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b40      	ldr	r3, [pc, #256]	@ (8003498 <HAL_UART_MspInit+0x280>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b0:	2303      	movs	r3, #3
 80033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033b4:	2307      	movs	r3, #7
 80033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b8:	f107 031c 	add.w	r3, r7, #28
 80033bc:	4619      	mov	r1, r3
 80033be:	483d      	ldr	r0, [pc, #244]	@ (80034b4 <HAL_UART_MspInit+0x29c>)
 80033c0:	f000 fe56 	bl	8004070 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80033c4:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033c6:	4a3d      	ldr	r2, [pc, #244]	@ (80034bc <HAL_UART_MspInit+0x2a4>)
 80033c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80033ca:	4b3b      	ldr	r3, [pc, #236]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80033d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033d2:	4b39      	ldr	r3, [pc, #228]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d8:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033de:	4b36      	ldr	r3, [pc, #216]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033e4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ec:	4b32      	ldr	r3, [pc, #200]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80033f2:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033f8:	4b2f      	ldr	r3, [pc, #188]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033fe:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 8003400:	2200      	movs	r2, #0
 8003402:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003404:	482c      	ldr	r0, [pc, #176]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 8003406:	f000 fa31 	bl	800386c <HAL_DMA_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8003410:	f7fe fe66 	bl	80020e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a28      	ldr	r2, [pc, #160]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 8003418:	63da      	str	r2, [r3, #60]	@ 0x3c
 800341a:	4a27      	ldr	r2, [pc, #156]	@ (80034b8 <HAL_UART_MspInit+0x2a0>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003420:	4b27      	ldr	r3, [pc, #156]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003422:	4a28      	ldr	r2, [pc, #160]	@ (80034c4 <HAL_UART_MspInit+0x2ac>)
 8003424:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003426:	4b26      	ldr	r3, [pc, #152]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003428:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800342c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800342e:	4b24      	ldr	r3, [pc, #144]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003430:	2240      	movs	r2, #64	@ 0x40
 8003432:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003434:	4b22      	ldr	r3, [pc, #136]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003436:	2200      	movs	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800343a:	4b21      	ldr	r3, [pc, #132]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 800343c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003440:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003442:	4b1f      	ldr	r3, [pc, #124]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003448:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 800344a:	2200      	movs	r2, #0
 800344c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800344e:	4b1c      	ldr	r3, [pc, #112]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003450:	2200      	movs	r2, #0
 8003452:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003456:	2200      	movs	r2, #0
 8003458:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800345a:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 800345c:	2200      	movs	r2, #0
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003460:	4817      	ldr	r0, [pc, #92]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003462:	f000 fa03 	bl	800386c <HAL_DMA_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800346c:	f7fe fe38 	bl	80020e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003474:	639a      	str	r2, [r3, #56]	@ 0x38
 8003476:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <HAL_UART_MspInit+0x2a8>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800347c:	2200      	movs	r2, #0
 800347e:	2100      	movs	r1, #0
 8003480:	2027      	movs	r0, #39	@ 0x27
 8003482:	f000 f9bc 	bl	80037fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003486:	2027      	movs	r0, #39	@ 0x27
 8003488:	f000 f9d5 	bl	8003836 <HAL_NVIC_EnableIRQ>
}
 800348c:	bf00      	nop
 800348e:	3730      	adds	r7, #48	@ 0x30
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40004400 	.word	0x40004400
 8003498:	40023800 	.word	0x40023800
 800349c:	40020000 	.word	0x40020000
 80034a0:	200005d8 	.word	0x200005d8
 80034a4:	40026088 	.word	0x40026088
 80034a8:	20000638 	.word	0x20000638
 80034ac:	400260a0 	.word	0x400260a0
 80034b0:	40004800 	.word	0x40004800
 80034b4:	40020400 	.word	0x40020400
 80034b8:	20000698 	.word	0x20000698
 80034bc:	40026028 	.word	0x40026028
 80034c0:	200006f8 	.word	0x200006f8
 80034c4:	40026058 	.word	0x40026058

080034c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003500 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80034cc:	f7ff f96c 	bl	80027a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034d0:	480c      	ldr	r0, [pc, #48]	@ (8003504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034d2:	490d      	ldr	r1, [pc, #52]	@ (8003508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034d4:	4a0d      	ldr	r2, [pc, #52]	@ (800350c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d8:	e002      	b.n	80034e0 <LoopCopyDataInit>

080034da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034de:	3304      	adds	r3, #4

080034e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e4:	d3f9      	bcc.n	80034da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ec:	e001      	b.n	80034f2 <LoopFillZerobss>

080034ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f0:	3204      	adds	r2, #4

080034f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f4:	d3fb      	bcc.n	80034ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034f6:	f004 ff23 	bl	8008340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034fa:	f7fe fa69 	bl	80019d0 <main>
  bx  lr    
 80034fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003508:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800350c:	0800bef8 	.word	0x0800bef8
  ldr r2, =_sbss
 8003510:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003514:	200008a8 	.word	0x200008a8

08003518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003518:	e7fe      	b.n	8003518 <ADC_IRQHandler>
	...

0800351c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003520:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <HAL_Init+0x40>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <HAL_Init+0x40>)
 8003526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800352a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800352c:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <HAL_Init+0x40>)
 8003532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a07      	ldr	r2, [pc, #28]	@ (800355c <HAL_Init+0x40>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003544:	2003      	movs	r0, #3
 8003546:	f000 f94f 	bl	80037e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800354a:	200a      	movs	r0, #10
 800354c:	f000 f808 	bl	8003560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003550:	f7fe ff84 	bl	800245c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00

08003560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <HAL_InitTick+0x54>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <HAL_InitTick+0x58>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003576:	fbb3 f3f1 	udiv	r3, r3, r1
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f967 	bl	8003852 <HAL_SYSTICK_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00e      	b.n	80035ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b0f      	cmp	r3, #15
 8003592:	d80a      	bhi.n	80035aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003594:	2200      	movs	r2, #0
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f000 f92f 	bl	80037fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035a0:	4a06      	ldr	r2, [pc, #24]	@ (80035bc <HAL_InitTick+0x5c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000008 	.word	0x20000008
 80035bc:	20000004 	.word	0x20000004

080035c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_IncTick+0x20>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_IncTick+0x24>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_IncTick+0x24>)
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000008 	.word	0x20000008
 80035e4:	20000758 	.word	0x20000758

080035e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return uwTick;
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <HAL_GetTick+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000758 	.word	0x20000758

08003600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003608:	f7ff ffee 	bl	80035e8 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d005      	beq.n	8003626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800361a:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <HAL_Delay+0x44>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003626:	bf00      	nop
 8003628:	f7ff ffde 	bl	80035e8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	429a      	cmp	r2, r3
 8003636:	d8f7      	bhi.n	8003628 <HAL_Delay+0x28>
  {
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000008 	.word	0x20000008

08003648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003658:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367a:	4a04      	ldr	r2, [pc, #16]	@ (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	60d3      	str	r3, [r2, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003694:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 0307 	and.w	r3, r3, #7
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db0b      	blt.n	80036d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 021f 	and.w	r2, r3, #31
 80036c4:	4907      	ldr	r1, [pc, #28]	@ (80036e4 <__NVIC_EnableIRQ+0x38>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2001      	movs	r0, #1
 80036ce:	fa00 f202 	lsl.w	r2, r0, r2
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000e100 	.word	0xe000e100

080036e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	6039      	str	r1, [r7, #0]
 80036f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	db0a      	blt.n	8003712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	490c      	ldr	r1, [pc, #48]	@ (8003734 <__NVIC_SetPriority+0x4c>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	440b      	add	r3, r1
 800370c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003710:	e00a      	b.n	8003728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	4908      	ldr	r1, [pc, #32]	@ (8003738 <__NVIC_SetPriority+0x50>)
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	3b04      	subs	r3, #4
 8003720:	0112      	lsls	r2, r2, #4
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	440b      	add	r3, r1
 8003726:	761a      	strb	r2, [r3, #24]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000e100 	.word	0xe000e100
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	@ 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f1c3 0307 	rsb	r3, r3, #7
 8003756:	2b04      	cmp	r3, #4
 8003758:	bf28      	it	cs
 800375a:	2304      	movcs	r3, #4
 800375c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3304      	adds	r3, #4
 8003762:	2b06      	cmp	r3, #6
 8003764:	d902      	bls.n	800376c <NVIC_EncodePriority+0x30>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3b03      	subs	r3, #3
 800376a:	e000      	b.n	800376e <NVIC_EncodePriority+0x32>
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003770:	f04f 32ff 	mov.w	r2, #4294967295
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	401a      	ands	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003784:	f04f 31ff 	mov.w	r1, #4294967295
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa01 f303 	lsl.w	r3, r1, r3
 800378e:	43d9      	mvns	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	4313      	orrs	r3, r2
         );
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	@ 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037b4:	d301      	bcc.n	80037ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b6:	2301      	movs	r3, #1
 80037b8:	e00f      	b.n	80037da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ba:	4a0a      	ldr	r2, [pc, #40]	@ (80037e4 <SysTick_Config+0x40>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037c2:	210f      	movs	r1, #15
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
 80037c8:	f7ff ff8e 	bl	80036e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037cc:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <SysTick_Config+0x40>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d2:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <SysTick_Config+0x40>)
 80037d4:	2207      	movs	r2, #7
 80037d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	e000e010 	.word	0xe000e010

080037e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff29 	bl	8003648 <__NVIC_SetPriorityGrouping>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	4603      	mov	r3, r0
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003810:	f7ff ff3e 	bl	8003690 <__NVIC_GetPriorityGrouping>
 8003814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	6978      	ldr	r0, [r7, #20]
 800381c:	f7ff ff8e 	bl	800373c <NVIC_EncodePriority>
 8003820:	4602      	mov	r2, r0
 8003822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff5d 	bl	80036e8 <__NVIC_SetPriority>
}
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff31 	bl	80036ac <__NVIC_EnableIRQ>
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ffa2 	bl	80037a4 <SysTick_Config>
 8003860:	4603      	mov	r3, r0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff feb6 	bl	80035e8 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e099      	b.n	80039bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a8:	e00f      	b.n	80038ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038aa:	f7ff fe9d 	bl	80035e8 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d908      	bls.n	80038ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2203      	movs	r2, #3
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e078      	b.n	80039bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e8      	bne.n	80038aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4b38      	ldr	r3, [pc, #224]	@ (80039c4 <HAL_DMA_Init+0x158>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	2b04      	cmp	r3, #4
 8003922:	d107      	bne.n	8003934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392c:	4313      	orrs	r3, r2
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f023 0307 	bic.w	r3, r3, #7
 800394a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	2b04      	cmp	r3, #4
 800395c:	d117      	bne.n	800398e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00e      	beq.n	800398e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fb01 	bl	8003f78 <DMA_CheckFifoParam>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2240      	movs	r2, #64	@ 0x40
 8003980:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800398a:	2301      	movs	r3, #1
 800398c:	e016      	b.n	80039bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fab8 	bl	8003f0c <DMA_CalcBaseAndBitshift>
 800399c:	4603      	mov	r3, r0
 800399e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	223f      	movs	r2, #63	@ 0x3f
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	f010803f 	.word	0xf010803f

080039c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_DMA_Start_IT+0x26>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e040      	b.n	8003a70 <HAL_DMA_Start_IT+0xa8>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d12f      	bne.n	8003a62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa4a 	bl	8003eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	223f      	movs	r2, #63	@ 0x3f
 8003a22:	409a      	lsls	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0216 	orr.w	r2, r2, #22
 8003a36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0208 	orr.w	r2, r2, #8
 8003a4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e005      	b.n	8003a6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a86:	f7ff fdaf 	bl	80035e8 <HAL_GetTick>
 8003a8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	@ 0x80
 8003a9c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e052      	b.n	8003b50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0216 	bic.w	r2, r2, #22
 8003ab8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ac8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <HAL_DMA_Abort+0x62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0208 	bic.w	r2, r2, #8
 8003ae8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afa:	e013      	b.n	8003b24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afc:	f7ff fd74 	bl	80035e8 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d90c      	bls.n	8003b24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2203      	movs	r2, #3
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e015      	b.n	8003b50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e4      	bne.n	8003afc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b36:	223f      	movs	r2, #63	@ 0x3f
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d004      	beq.n	8003b76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2280      	movs	r2, #128	@ 0x80
 8003b70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e00c      	b.n	8003b90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2205      	movs	r2, #5
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8003de4 <HAL_DMA_IRQHandler+0x248>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a8e      	ldr	r2, [pc, #568]	@ (8003de8 <HAL_DMA_IRQHandler+0x24c>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0a9b      	lsrs	r3, r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01a      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0204 	bic.w	r2, r2, #4
 8003bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c36:	f043 0202 	orr.w	r2, r3, #2
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c42:	2204      	movs	r2, #4
 8003c44:	409a      	lsls	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	2204      	movs	r2, #4
 8003c62:	409a      	lsls	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	2210      	movs	r2, #16
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d043      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d03c      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c96:	2210      	movs	r2, #16
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d024      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
 8003cca:	e01f      	b.n	8003d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
 8003cdc:	e016      	b.n	8003d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d107      	bne.n	8003cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0208 	bic.w	r2, r2, #8
 8003cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	2220      	movs	r2, #32
 8003d12:	409a      	lsls	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 808f 	beq.w	8003e3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8087 	beq.w	8003e3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	2220      	movs	r2, #32
 8003d34:	409a      	lsls	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d136      	bne.n	8003db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0216 	bic.w	r2, r2, #22
 8003d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <HAL_DMA_IRQHandler+0x1da>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0208 	bic.w	r2, r2, #8
 8003d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	223f      	movs	r2, #63	@ 0x3f
 8003d8c:	409a      	lsls	r2, r3
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d07e      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
        }
        return;
 8003db2:	e079      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01d      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d031      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
 8003de0:	e02c      	b.n	8003e3c <HAL_DMA_IRQHandler+0x2a0>
 8003de2:	bf00      	nop
 8003de4:	20000000 	.word	0x20000000
 8003de8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d023      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
 8003dfc:	e01e      	b.n	8003e3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0210 	bic.w	r2, r2, #16
 8003e1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d032      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d022      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2205      	movs	r2, #5
 8003e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d307      	bcc.n	8003e84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f2      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x2cc>
 8003e82:	e000      	b.n	8003e86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
 8003ea6:	e000      	b.n	8003eaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ea8:	bf00      	nop
    }
  }
}
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b40      	cmp	r3, #64	@ 0x40
 8003edc:	d108      	bne.n	8003ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003eee:	e007      	b.n	8003f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	3b10      	subs	r3, #16
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <DMA_CalcBaseAndBitshift+0x64>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f26:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <DMA_CalcBaseAndBitshift+0x68>)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d909      	bls.n	8003f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f4c:	e007      	b.n	8003f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	aaaaaaab 	.word	0xaaaaaaab
 8003f74:	0800bab0 	.word	0x0800bab0

08003f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11f      	bne.n	8003fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d856      	bhi.n	8004046 <DMA_CheckFifoParam+0xce>
 8003f98:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa0 <DMA_CheckFifoParam+0x28>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fb1 	.word	0x08003fb1
 8003fa4:	08003fc3 	.word	0x08003fc3
 8003fa8:	08003fb1 	.word	0x08003fb1
 8003fac:	08004047 	.word	0x08004047
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d046      	beq.n	800404a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc0:	e043      	b.n	800404a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fca:	d140      	bne.n	800404e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd0:	e03d      	b.n	800404e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fda:	d121      	bne.n	8004020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d837      	bhi.n	8004052 <DMA_CheckFifoParam+0xda>
 8003fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe8 <DMA_CheckFifoParam+0x70>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	08003fff 	.word	0x08003fff
 8003ff0:	08003ff9 	.word	0x08003ff9
 8003ff4:	08004011 	.word	0x08004011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffc:	e030      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d025      	beq.n	8004056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400e:	e022      	b.n	8004056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004018:	d11f      	bne.n	800405a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800401e:	e01c      	b.n	800405a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d903      	bls.n	800402e <DMA_CheckFifoParam+0xb6>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d003      	beq.n	8004034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800402c:	e018      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
      break;
 8004032:	e015      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	e00b      	b.n	800405e <DMA_CheckFifoParam+0xe6>
      break;
 8004046:	bf00      	nop
 8004048:	e00a      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      break;
 800404a:	bf00      	nop
 800404c:	e008      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      break;
 800404e:	bf00      	nop
 8004050:	e006      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      break;
 8004052:	bf00      	nop
 8004054:	e004      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      break;
 8004056:	bf00      	nop
 8004058:	e002      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      break;   
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <DMA_CheckFifoParam+0xe8>
      break;
 800405e:	bf00      	nop
    }
  } 
  
  return status; 
 8004060:	7bfb      	ldrb	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	@ 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	e16b      	b.n	8004364 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800408c:	2201      	movs	r2, #1
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4013      	ands	r3, r2
 800409e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	f040 815a 	bne.w	800435e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d005      	beq.n	80040c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d130      	bne.n	8004124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2203      	movs	r2, #3
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f8:	2201      	movs	r2, #1
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 0201 	and.w	r2, r3, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b03      	cmp	r3, #3
 800412e:	d017      	beq.n	8004160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	2203      	movs	r2, #3
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d123      	bne.n	80041b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	08da      	lsrs	r2, r3, #3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3208      	adds	r2, #8
 8004174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	220f      	movs	r2, #15
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	08da      	lsrs	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3208      	adds	r2, #8
 80041ae:	69b9      	ldr	r1, [r7, #24]
 80041b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	2203      	movs	r2, #3
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0203 	and.w	r2, r3, #3
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80b4 	beq.w	800435e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b60      	ldr	r3, [pc, #384]	@ (800437c <HAL_GPIO_Init+0x30c>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	4a5f      	ldr	r2, [pc, #380]	@ (800437c <HAL_GPIO_Init+0x30c>)
 8004200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004204:	6453      	str	r3, [r2, #68]	@ 0x44
 8004206:	4b5d      	ldr	r3, [pc, #372]	@ (800437c <HAL_GPIO_Init+0x30c>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004212:	4a5b      	ldr	r2, [pc, #364]	@ (8004380 <HAL_GPIO_Init+0x310>)
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	089b      	lsrs	r3, r3, #2
 8004218:	3302      	adds	r3, #2
 800421a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	220f      	movs	r2, #15
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a52      	ldr	r2, [pc, #328]	@ (8004384 <HAL_GPIO_Init+0x314>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02b      	beq.n	8004296 <HAL_GPIO_Init+0x226>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a51      	ldr	r2, [pc, #324]	@ (8004388 <HAL_GPIO_Init+0x318>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d025      	beq.n	8004292 <HAL_GPIO_Init+0x222>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a50      	ldr	r2, [pc, #320]	@ (800438c <HAL_GPIO_Init+0x31c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01f      	beq.n	800428e <HAL_GPIO_Init+0x21e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4f      	ldr	r2, [pc, #316]	@ (8004390 <HAL_GPIO_Init+0x320>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d019      	beq.n	800428a <HAL_GPIO_Init+0x21a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4e      	ldr	r2, [pc, #312]	@ (8004394 <HAL_GPIO_Init+0x324>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_GPIO_Init+0x216>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4d      	ldr	r2, [pc, #308]	@ (8004398 <HAL_GPIO_Init+0x328>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00d      	beq.n	8004282 <HAL_GPIO_Init+0x212>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4c      	ldr	r2, [pc, #304]	@ (800439c <HAL_GPIO_Init+0x32c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <HAL_GPIO_Init+0x20e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4b      	ldr	r2, [pc, #300]	@ (80043a0 <HAL_GPIO_Init+0x330>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_GPIO_Init+0x20a>
 8004276:	2307      	movs	r3, #7
 8004278:	e00e      	b.n	8004298 <HAL_GPIO_Init+0x228>
 800427a:	2308      	movs	r3, #8
 800427c:	e00c      	b.n	8004298 <HAL_GPIO_Init+0x228>
 800427e:	2306      	movs	r3, #6
 8004280:	e00a      	b.n	8004298 <HAL_GPIO_Init+0x228>
 8004282:	2305      	movs	r3, #5
 8004284:	e008      	b.n	8004298 <HAL_GPIO_Init+0x228>
 8004286:	2304      	movs	r3, #4
 8004288:	e006      	b.n	8004298 <HAL_GPIO_Init+0x228>
 800428a:	2303      	movs	r3, #3
 800428c:	e004      	b.n	8004298 <HAL_GPIO_Init+0x228>
 800428e:	2302      	movs	r3, #2
 8004290:	e002      	b.n	8004298 <HAL_GPIO_Init+0x228>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_GPIO_Init+0x228>
 8004296:	2300      	movs	r3, #0
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	f002 0203 	and.w	r2, r2, #3
 800429e:	0092      	lsls	r2, r2, #2
 80042a0:	4093      	lsls	r3, r2
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042a8:	4935      	ldr	r1, [pc, #212]	@ (8004380 <HAL_GPIO_Init+0x310>)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042b6:	4b3b      	ldr	r3, [pc, #236]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042da:	4a32      	ldr	r2, [pc, #200]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042e0:	4b30      	ldr	r3, [pc, #192]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004304:	4a27      	ldr	r2, [pc, #156]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800430a:	4b26      	ldr	r3, [pc, #152]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800432e:	4a1d      	ldr	r2, [pc, #116]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004334:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004358:	4a12      	ldr	r2, [pc, #72]	@ (80043a4 <HAL_GPIO_Init+0x334>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3301      	adds	r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b0f      	cmp	r3, #15
 8004368:	f67f ae90 	bls.w	800408c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	40013800 	.word	0x40013800
 8004384:	40020000 	.word	0x40020000
 8004388:	40020400 	.word	0x40020400
 800438c:	40020800 	.word	0x40020800
 8004390:	40020c00 	.word	0x40020c00
 8004394:	40021000 	.word	0x40021000
 8004398:	40021400 	.word	0x40021400
 800439c:	40021800 	.word	0x40021800
 80043a0:	40021c00 	.word	0x40021c00
 80043a4:	40013c00 	.word	0x40013c00

080043a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	887b      	ldrh	r3, [r7, #2]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e001      	b.n	80043ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	619a      	str	r2, [r3, #24]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004416:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d006      	beq.n	8004430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004422:	4a05      	ldr	r2, [pc, #20]	@ (8004438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd faa0 	bl	8001970 <HAL_GPIO_EXTI_Callback>
  }
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40013c00 	.word	0x40013c00

0800443c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a07      	ldr	r2, [pc, #28]	@ (8004464 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004446:	f043 0302 	orr.w	r3, r3, #2
 800444a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800444c:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	4a05      	ldr	r2, [pc, #20]	@ (8004468 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004452:	f043 0304 	orr.w	r3, r3, #4
 8004456:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004458:	bf30      	wfi
}
 800445a:	bf00      	nop
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40007000 	.word	0x40007000
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e267      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d075      	beq.n	8004576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800448a:	4b88      	ldr	r3, [pc, #544]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d00c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004496:	4b85      	ldr	r3, [pc, #532]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d112      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a2:	4b82      	ldr	r3, [pc, #520]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	4b7e      	ldr	r3, [pc, #504]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d05b      	beq.n	8004574 <HAL_RCC_OscConfig+0x108>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d157      	bne.n	8004574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e242      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d106      	bne.n	80044e0 <HAL_RCC_OscConfig+0x74>
 80044d2:	4b76      	ldr	r3, [pc, #472]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a75      	ldr	r2, [pc, #468]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b70      	ldr	r3, [pc, #448]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6f      	ldr	r2, [pc, #444]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b6d      	ldr	r3, [pc, #436]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6c      	ldr	r2, [pc, #432]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e00b      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 8004504:	4b69      	ldr	r3, [pc, #420]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a68      	ldr	r2, [pc, #416]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b66      	ldr	r3, [pc, #408]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a65      	ldr	r2, [pc, #404]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7ff f860 	bl	80035e8 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800452c:	f7ff f85c 	bl	80035e8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e207      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b5b      	ldr	r3, [pc, #364]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0xc0>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7ff f84c 	bl	80035e8 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004554:	f7ff f848 	bl	80035e8 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1f3      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	4b51      	ldr	r3, [pc, #324]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0xe8>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004582:	4b4a      	ldr	r3, [pc, #296]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458e:	4b47      	ldr	r3, [pc, #284]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d11c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459a:	4b44      	ldr	r3, [pc, #272]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	4b41      	ldr	r3, [pc, #260]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1c7      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4937      	ldr	r1, [pc, #220]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	e03a      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045dc:	4b34      	ldr	r3, [pc, #208]	@ (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7ff f801 	bl	80035e8 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fe fffd 	bl	80035e8 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1a8      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	4b2b      	ldr	r3, [pc, #172]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4925      	ldr	r1, [pc, #148]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461e:	4b24      	ldr	r3, [pc, #144]	@ (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fe ffe0 	bl	80035e8 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462c:	f7fe ffdc 	bl	80035e8 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e187      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d036      	beq.n	80046c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_RCC_OscConfig+0x248>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fe ffc0 	bl	80035e8 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466c:	f7fe ffbc 	bl	80035e8 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e167      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x200>
 800468a:	e01b      	b.n	80046c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468c:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <HAL_RCC_OscConfig+0x248>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fe ffa9 	bl	80035e8 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004698:	e00e      	b.n	80046b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469a:	f7fe ffa5 	bl	80035e8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d907      	bls.n	80046b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e150      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80046ac:	40023800 	.word	0x40023800
 80046b0:	42470000 	.word	0x42470000
 80046b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ea      	bne.n	800469a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8097 	beq.w	8004800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d6:	4b81      	ldr	r3, [pc, #516]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	4b7d      	ldr	r3, [pc, #500]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	4a7c      	ldr	r2, [pc, #496]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f2:	4b7a      	ldr	r3, [pc, #488]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b77      	ldr	r3, [pc, #476]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470e:	4b74      	ldr	r3, [pc, #464]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a73      	ldr	r2, [pc, #460]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471a:	f7fe ff65 	bl	80035e8 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fe ff61 	bl	80035e8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e10c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	4b6a      	ldr	r3, [pc, #424]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x2ea>
 8004748:	4b64      	ldr	r3, [pc, #400]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	4a63      	ldr	r2, [pc, #396]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	@ 0x70
 8004754:	e01c      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x30c>
 800475e:	4b5f      	ldr	r3, [pc, #380]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	4a5e      	ldr	r2, [pc, #376]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	6713      	str	r3, [r2, #112]	@ 0x70
 800476a:	4b5c      	ldr	r3, [pc, #368]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476e:	4a5b      	ldr	r2, [pc, #364]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6713      	str	r3, [r2, #112]	@ 0x70
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004778:	4b58      	ldr	r3, [pc, #352]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4a57      	ldr	r2, [pc, #348]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	@ 0x70
 8004784:	4b55      	ldr	r3, [pc, #340]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004788:	4a54      	ldr	r2, [pc, #336]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800478a:	f023 0304 	bic.w	r3, r3, #4
 800478e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fe ff26 	bl	80035e8 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7fe ff22 	bl	80035e8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0cb      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	4b49      	ldr	r3, [pc, #292]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ee      	beq.n	80047a0 <HAL_RCC_OscConfig+0x334>
 80047c2:	e014      	b.n	80047ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fe ff10 	bl	80035e8 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fe ff0c 	bl	80035e8 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0b5      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e2:	4b3e      	ldr	r3, [pc, #248]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1ee      	bne.n	80047cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f4:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	4a38      	ldr	r2, [pc, #224]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a1 	beq.w	800494c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800480a:	4b34      	ldr	r3, [pc, #208]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b08      	cmp	r3, #8
 8004814:	d05c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d141      	bne.n	80048a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b31      	ldr	r3, [pc, #196]	@ (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fe fee0 	bl	80035e8 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482c:	f7fe fedc 	bl	80035e8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e087      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	491b      	ldr	r1, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b1b      	ldr	r3, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fe feb5 	bl	80035e8 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fe feb1 	bl	80035e8 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e05c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x416>
 80048a0:	e054      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <HAL_RCC_OscConfig+0x478>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe fe9e 	bl	80035e8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fe fe9a 	bl	80035e8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e045      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
 80048ce:	e03d      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e038      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40007000 	.word	0x40007000
 80048e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x4ec>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d028      	beq.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d121      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d11a      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800491e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004920:	4293      	cmp	r3, r2
 8004922:	d111      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	3b01      	subs	r3, #1
 8004932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800

0800495c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0cc      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b68      	ldr	r3, [pc, #416]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d90c      	bls.n	8004998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b65      	ldr	r3, [pc, #404]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b63      	ldr	r3, [pc, #396]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0b8      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b0:	4b59      	ldr	r3, [pc, #356]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a58      	ldr	r2, [pc, #352]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c8:	4b53      	ldr	r3, [pc, #332]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a52      	ldr	r2, [pc, #328]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b50      	ldr	r3, [pc, #320]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	494d      	ldr	r1, [pc, #308]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d044      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b47      	ldr	r3, [pc, #284]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d119      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e067      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3a:	4b37      	ldr	r3, [pc, #220]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4934      	ldr	r1, [pc, #208]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a4c:	f7fe fdcc 	bl	80035e8 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fe fdc8 	bl	80035e8 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e04f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b25      	ldr	r3, [pc, #148]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d20c      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b22      	ldr	r3, [pc, #136]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e032      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b19      	ldr	r3, [pc, #100]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4916      	ldr	r1, [pc, #88]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ace:	4b12      	ldr	r3, [pc, #72]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	490e      	ldr	r1, [pc, #56]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ae2:	f000 f821 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	490a      	ldr	r1, [pc, #40]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fd2c 	bl	8003560 <HAL_InitTick>

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	0800ba98 	.word	0x0800ba98
 8004b20:	20000000 	.word	0x20000000
 8004b24:	20000004 	.word	0x20000004

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b094      	sub	sp, #80	@ 0x50
 8004b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b34:	2300      	movs	r3, #0
 8004b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b38:	2300      	movs	r3, #0
 8004b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b40:	4b79      	ldr	r3, [pc, #484]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d00d      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x40>
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	f200 80e1 	bhi.w	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b5a:	e0db      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b73      	ldr	r3, [pc, #460]	@ (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004b60:	e0db      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b62:	4b73      	ldr	r3, [pc, #460]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b66:	e0d8      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b68:	4b6f      	ldr	r3, [pc, #444]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b72:	4b6d      	ldr	r3, [pc, #436]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	2200      	movs	r2, #0
 8004b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b92:	2300      	movs	r3, #0
 8004b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	f04f 0000 	mov.w	r0, #0
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	0159      	lsls	r1, r3, #5
 8004ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bac:	0150      	lsls	r0, r2, #5
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	1a51      	subs	r1, r2, r1
 8004bb6:	6139      	str	r1, [r7, #16]
 8004bb8:	4629      	mov	r1, r5
 8004bba:	eb63 0301 	sbc.w	r3, r3, r1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bcc:	4659      	mov	r1, fp
 8004bce:	018b      	lsls	r3, r1, #6
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	018a      	lsls	r2, r1, #6
 8004bda:	4651      	mov	r1, sl
 8004bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8004be0:	4659      	mov	r1, fp
 8004be2:	eb63 0901 	sbc.w	r9, r3, r1
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	4699      	mov	r9, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	eb18 0303 	adds.w	r3, r8, r3
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	462b      	mov	r3, r5
 8004c08:	eb49 0303 	adc.w	r3, r9, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	024b      	lsls	r3, r1, #9
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c24:	4621      	mov	r1, r4
 8004c26:	024a      	lsls	r2, r1, #9
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c2e:	2200      	movs	r2, #0
 8004c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c38:	f7fc f826 	bl	8000c88 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c44:	e058      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b38      	ldr	r3, [pc, #224]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	4611      	mov	r1, r2
 8004c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	f04f 0100 	mov.w	r1, #0
 8004c6c:	0159      	lsls	r1, r3, #5
 8004c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c72:	0150      	lsls	r0, r2, #5
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4641      	mov	r1, r8
 8004c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c7e:	4649      	mov	r1, r9
 8004c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c98:	ebb2 040a 	subs.w	r4, r2, sl
 8004c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	00eb      	lsls	r3, r5, #3
 8004caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cae:	00e2      	lsls	r2, r4, #3
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	461d      	mov	r5, r3
 8004cb4:	4643      	mov	r3, r8
 8004cb6:	18e3      	adds	r3, r4, r3
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	464b      	mov	r3, r9
 8004cbc:	eb45 0303 	adc.w	r3, r5, r3
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cce:	4629      	mov	r1, r5
 8004cd0:	028b      	lsls	r3, r1, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd8:	4621      	mov	r1, r4
 8004cda:	028a      	lsls	r2, r1, #10
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	61fa      	str	r2, [r7, #28]
 8004ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cec:	f7fb ffcc 	bl	8000c88 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	3301      	adds	r3, #1
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d12:	e002      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3750      	adds	r7, #80	@ 0x50
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	007a1200 	.word	0x007a1200

08004d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d38:	4b03      	ldr	r3, [pc, #12]	@ (8004d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000000 	.word	0x20000000

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d50:	f7ff fff0 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	0a9b      	lsrs	r3, r3, #10
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4903      	ldr	r1, [pc, #12]	@ (8004d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	0800baa8 	.word	0x0800baa8

08004d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d78:	f7ff ffdc 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0b5b      	lsrs	r3, r3, #13
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4903      	ldr	r1, [pc, #12]	@ (8004d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	0800baa8 	.word	0x0800baa8

08004d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e041      	b.n	8004e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fe f896 	bl	8002ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 fe26 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d001      	beq.n	8004e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e04e      	b.n	8004ef2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a23      	ldr	r2, [pc, #140]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d022      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d01d      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d018      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1c      	ldr	r2, [pc, #112]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a19      	ldr	r2, [pc, #100]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0x80>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d111      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d010      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e007      	b.n	8004ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40001800 	.word	0x40001800

08004f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e041      	b.n	8004fb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f839 	bl	8004fba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 fd66 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <HAL_TIM_PWM_Start_IT+0x28>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e022      	b.n	800503e <HAL_TIM_PWM_Start_IT+0x6e>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d109      	bne.n	8005012 <HAL_TIM_PWM_Start_IT+0x42>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e015      	b.n	800503e <HAL_TIM_PWM_Start_IT+0x6e>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d109      	bne.n	800502c <HAL_TIM_PWM_Start_IT+0x5c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e008      	b.n	800503e <HAL_TIM_PWM_Start_IT+0x6e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0c7      	b.n	80051d6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start_IT+0x86>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005054:	e013      	b.n	800507e <HAL_TIM_PWM_Start_IT+0xae>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start_IT+0x96>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005064:	e00b      	b.n	800507e <HAL_TIM_PWM_Start_IT+0xae>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start_IT+0xa6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005074:	e003      	b.n	800507e <HAL_TIM_PWM_Start_IT+0xae>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b0c      	cmp	r3, #12
 8005082:	d841      	bhi.n	8005108 <HAL_TIM_PWM_Start_IT+0x138>
 8005084:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <HAL_TIM_PWM_Start_IT+0xbc>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050c1 	.word	0x080050c1
 8005090:	08005109 	.word	0x08005109
 8005094:	08005109 	.word	0x08005109
 8005098:	08005109 	.word	0x08005109
 800509c:	080050d3 	.word	0x080050d3
 80050a0:	08005109 	.word	0x08005109
 80050a4:	08005109 	.word	0x08005109
 80050a8:	08005109 	.word	0x08005109
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	08005109 	.word	0x08005109
 80050b4:	08005109 	.word	0x08005109
 80050b8:	08005109 	.word	0x08005109
 80050bc:	080050f7 	.word	0x080050f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0202 	orr.w	r2, r2, #2
 80050ce:	60da      	str	r2, [r3, #12]
      break;
 80050d0:	e01d      	b.n	800510e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0204 	orr.w	r2, r2, #4
 80050e0:	60da      	str	r2, [r3, #12]
      break;
 80050e2:	e014      	b.n	800510e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	60da      	str	r2, [r3, #12]
      break;
 80050f4:	e00b      	b.n	800510e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0210 	orr.w	r2, r2, #16
 8005104:	60da      	str	r2, [r3, #12]
      break;
 8005106:	e002      	b.n	800510e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	bf00      	nop
  }

  if (status == HAL_OK)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d15f      	bne.n	80051d4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2201      	movs	r2, #1
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f001 f80c 	bl	800613a <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a2e      	ldr	r2, [pc, #184]	@ (80051e0 <HAL_TIM_PWM_Start_IT+0x210>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIM_PWM_Start_IT+0x166>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2c      	ldr	r2, [pc, #176]	@ (80051e4 <HAL_TIM_PWM_Start_IT+0x214>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_TIM_PWM_Start_IT+0x16a>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_TIM_PWM_Start_IT+0x16c>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800514e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a22      	ldr	r2, [pc, #136]	@ (80051e0 <HAL_TIM_PWM_Start_IT+0x210>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005162:	d01d      	beq.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1f      	ldr	r2, [pc, #124]	@ (80051e8 <HAL_TIM_PWM_Start_IT+0x218>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1e      	ldr	r2, [pc, #120]	@ (80051ec <HAL_TIM_PWM_Start_IT+0x21c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1c      	ldr	r2, [pc, #112]	@ (80051f0 <HAL_TIM_PWM_Start_IT+0x220>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	@ (80051e4 <HAL_TIM_PWM_Start_IT+0x214>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	@ (80051f4 <HAL_TIM_PWM_Start_IT+0x224>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a17      	ldr	r2, [pc, #92]	@ (80051f8 <HAL_TIM_PWM_Start_IT+0x228>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d111      	bne.n	80051c4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b06      	cmp	r3, #6
 80051b0:	d010      	beq.n	80051d4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c2:	e007      	b.n	80051d4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40010400 	.word	0x40010400
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40001800 	.word	0x40001800

080051fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e097      	b.n	8005340 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fd fdd7 	bl	8002dd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005240:	f023 0307 	bic.w	r3, r3, #7
 8005244:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fbeb 	bl	8005a2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	4313      	orrs	r3, r2
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800529c:	f023 030c 	bic.w	r3, r3, #12
 80052a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	4313      	orrs	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	011a      	lsls	r2, r3, #4
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	031b      	lsls	r3, r3, #12
 80052cc:	4313      	orrs	r3, r2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	4313      	orrs	r3, r2
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005358:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005360:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005368:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005370:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d110      	bne.n	800539a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d102      	bne.n	8005384 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800537e:	7b7b      	ldrb	r3, [r7, #13]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d001      	beq.n	8005388 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e069      	b.n	800545c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005398:	e031      	b.n	80053fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d110      	bne.n	80053c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a0:	7bbb      	ldrb	r3, [r7, #14]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d102      	bne.n	80053ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053a6:	7b3b      	ldrb	r3, [r7, #12]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e055      	b.n	800545c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053c0:	e01d      	b.n	80053fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d108      	bne.n	80053da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d105      	bne.n	80053da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ce:	7b7b      	ldrb	r3, [r7, #13]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d102      	bne.n	80053da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053d4:	7b3b      	ldrb	r3, [r7, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e03e      	b.n	800545c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_TIM_Encoder_Start+0xc4>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b04      	cmp	r3, #4
 8005408:	d008      	beq.n	800541c <HAL_TIM_Encoder_Start+0xd4>
 800540a:	e00f      	b.n	800542c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2201      	movs	r2, #1
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fe90 	bl	800613a <TIM_CCxChannelCmd>
      break;
 800541a:	e016      	b.n	800544a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	2104      	movs	r1, #4
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fe88 	bl	800613a <TIM_CCxChannelCmd>
      break;
 800542a:	e00e      	b.n	800544a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2201      	movs	r2, #1
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fe80 	bl	800613a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	2104      	movs	r1, #4
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fe79 	bl	800613a <TIM_CCxChannelCmd>
      break;
 8005448:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d020      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0202 	mvn.w	r2, #2
 8005498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa9d 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa8f 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 faa0 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d020      	beq.n	8005514 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0204 	mvn.w	r2, #4
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa77 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa69 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa7a 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0208 	mvn.w	r2, #8
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2204      	movs	r2, #4
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa51 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa43 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa54 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0210 	mvn.w	r2, #16
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2208      	movs	r2, #8
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa2b 	bl	80059ee <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa1d 	bl	80059da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa2e 	bl	8005a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0201 	mvn.w	r2, #1
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc f8a6 	bl	800171c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fe4e 	bl	8006290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f9ff 	bl	8005a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00c      	beq.n	800563c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0220 	mvn.w	r2, #32
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fe20 	bl	800627c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800565e:	2302      	movs	r3, #2
 8005660:	e0ae      	b.n	80057c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b0c      	cmp	r3, #12
 800566e:	f200 809f 	bhi.w	80057b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005672:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	080056ad 	.word	0x080056ad
 800567c:	080057b1 	.word	0x080057b1
 8005680:	080057b1 	.word	0x080057b1
 8005684:	080057b1 	.word	0x080057b1
 8005688:	080056ed 	.word	0x080056ed
 800568c:	080057b1 	.word	0x080057b1
 8005690:	080057b1 	.word	0x080057b1
 8005694:	080057b1 	.word	0x080057b1
 8005698:	0800572f 	.word	0x0800572f
 800569c:	080057b1 	.word	0x080057b1
 80056a0:	080057b1 	.word	0x080057b1
 80056a4:	080057b1 	.word	0x080057b1
 80056a8:	0800576f 	.word	0x0800576f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fa66 	bl	8005b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
      break;
 80056ea:	e064      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fab6 	bl	8005c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	619a      	str	r2, [r3, #24]
      break;
 800572c:	e043      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fb0b 	bl	8005d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0208 	orr.w	r2, r2, #8
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0204 	bic.w	r2, r2, #4
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	61da      	str	r2, [r3, #28]
      break;
 800576c:	e023      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb5f 	bl	8005e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	021a      	lsls	r2, r3, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	61da      	str	r2, [r3, #28]
      break;
 80057ae:	e002      	b.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
      break;
 80057b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057be:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_TIM_ConfigClockSource+0x1c>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0b4      	b.n	800594e <HAL_TIM_ConfigClockSource+0x186>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800580a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581c:	d03e      	beq.n	800589c <HAL_TIM_ConfigClockSource+0xd4>
 800581e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005822:	f200 8087 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582a:	f000 8086 	beq.w	800593a <HAL_TIM_ConfigClockSource+0x172>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005832:	d87f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b70      	cmp	r3, #112	@ 0x70
 8005836:	d01a      	beq.n	800586e <HAL_TIM_ConfigClockSource+0xa6>
 8005838:	2b70      	cmp	r3, #112	@ 0x70
 800583a:	d87b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b60      	cmp	r3, #96	@ 0x60
 800583e:	d050      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005840:	2b60      	cmp	r3, #96	@ 0x60
 8005842:	d877      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b50      	cmp	r3, #80	@ 0x50
 8005846:	d03c      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005848:	2b50      	cmp	r3, #80	@ 0x50
 800584a:	d873      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d058      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x13a>
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d86f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d064      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d86b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d060      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d867      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05c      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d05a      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x15a>
 800586c:	e062      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	f000 fc3c 	bl	80060fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	609a      	str	r2, [r3, #8]
      break;
 800589a:	e04f      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	f000 fc25 	bl	80060fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058be:	609a      	str	r2, [r3, #8]
      break;
 80058c0:	e03c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 fb99 	bl	8006006 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2150      	movs	r1, #80	@ 0x50
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fbf2 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e02c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 fbb8 	bl	8006064 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2160      	movs	r1, #96	@ 0x60
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fbe2 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 8005900:	e01c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fb79 	bl	8006006 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2140      	movs	r1, #64	@ 0x40
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fbd2 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 8005920:	e00c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f000 fbc9 	bl	80060c4 <TIM_ITRx_SetConfig>
      break;
 8005932:	e003      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e000      	b.n	800593c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800593a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_TIM_SlaveConfigSynchro+0x18>
 800596a:	2302      	movs	r3, #2
 800596c:	e031      	b.n	80059d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 faaf 	bl	8005ee4 <TIM_SlaveTimer_SetConfig>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e018      	b.n	80059d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a46      	ldr	r2, [pc, #280]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4a:	d00f      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a43      	ldr	r2, [pc, #268]	@ (8005b5c <TIM_Base_SetConfig+0x130>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a42      	ldr	r2, [pc, #264]	@ (8005b60 <TIM_Base_SetConfig+0x134>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d007      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a41      	ldr	r2, [pc, #260]	@ (8005b64 <TIM_Base_SetConfig+0x138>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a40      	ldr	r2, [pc, #256]	@ (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a35      	ldr	r2, [pc, #212]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8c:	d027      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a32      	ldr	r2, [pc, #200]	@ (8005b5c <TIM_Base_SetConfig+0x130>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d023      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a31      	ldr	r2, [pc, #196]	@ (8005b60 <TIM_Base_SetConfig+0x134>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a30      	ldr	r2, [pc, #192]	@ (8005b64 <TIM_Base_SetConfig+0x138>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d01b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d017      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8005b6c <TIM_Base_SetConfig+0x140>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8005b70 <TIM_Base_SetConfig+0x144>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8005b74 <TIM_Base_SetConfig+0x148>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b78 <TIM_Base_SetConfig+0x14c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b7c <TIM_Base_SetConfig+0x150>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a29      	ldr	r2, [pc, #164]	@ (8005b80 <TIM_Base_SetConfig+0x154>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d108      	bne.n	8005af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a10      	ldr	r2, [pc, #64]	@ (8005b58 <TIM_Base_SetConfig+0x12c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_Base_SetConfig+0xf8>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <TIM_Base_SetConfig+0x13c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d103      	bne.n	8005b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f023 0201 	bic.w	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	611a      	str	r2, [r3, #16]
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40014400 	.word	0x40014400
 8005b74:	40014800 	.word	0x40014800
 8005b78:	40001800 	.word	0x40001800
 8005b7c:	40001c00 	.word	0x40001c00
 8005b80:	40002000 	.word	0x40002000

08005b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f023 0201 	bic.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a20      	ldr	r2, [pc, #128]	@ (8005c5c <TIM_OC1_SetConfig+0xd8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC1_SetConfig+0x64>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c60 <TIM_OC1_SetConfig+0xdc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10c      	bne.n	8005c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0308 	bic.w	r3, r3, #8
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a15      	ldr	r2, [pc, #84]	@ (8005c5c <TIM_OC1_SetConfig+0xd8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC1_SetConfig+0x8e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a14      	ldr	r2, [pc, #80]	@ (8005c60 <TIM_OC1_SetConfig+0xdc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d111      	bne.n	8005c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0210 	bic.w	r2, r3, #16
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0320 	bic.w	r3, r3, #32
 8005cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <TIM_OC2_SetConfig+0xe4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC2_SetConfig+0x68>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a21      	ldr	r2, [pc, #132]	@ (8005d4c <TIM_OC2_SetConfig+0xe8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d10d      	bne.n	8005ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a17      	ldr	r2, [pc, #92]	@ (8005d48 <TIM_OC2_SetConfig+0xe4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC2_SetConfig+0x94>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a16      	ldr	r2, [pc, #88]	@ (8005d4c <TIM_OC2_SetConfig+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d113      	bne.n	8005d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a21      	ldr	r2, [pc, #132]	@ (8005e30 <TIM_OC3_SetConfig+0xe0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_OC3_SetConfig+0x66>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a20      	ldr	r2, [pc, #128]	@ (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10d      	bne.n	8005dd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	@ (8005e30 <TIM_OC3_SetConfig+0xe0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC3_SetConfig+0x92>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	@ (8005e34 <TIM_OC3_SetConfig+0xe4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d113      	bne.n	8005e0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	621a      	str	r2, [r3, #32]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40010400 	.word	0x40010400

08005e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a12      	ldr	r2, [pc, #72]	@ (8005edc <TIM_OC4_SetConfig+0xa4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_OC4_SetConfig+0x68>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ee0 <TIM_OC4_SetConfig+0xa8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d109      	bne.n	8005eb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	019b      	lsls	r3, r3, #6
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	621a      	str	r2, [r3, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f00:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f023 0307 	bic.w	r3, r3, #7
 8005f12:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b70      	cmp	r3, #112	@ 0x70
 8005f2c:	d01a      	beq.n	8005f64 <TIM_SlaveTimer_SetConfig+0x80>
 8005f2e:	2b70      	cmp	r3, #112	@ 0x70
 8005f30:	d860      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f32:	2b60      	cmp	r3, #96	@ 0x60
 8005f34:	d054      	beq.n	8005fe0 <TIM_SlaveTimer_SetConfig+0xfc>
 8005f36:	2b60      	cmp	r3, #96	@ 0x60
 8005f38:	d85c      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f3a:	2b50      	cmp	r3, #80	@ 0x50
 8005f3c:	d046      	beq.n	8005fcc <TIM_SlaveTimer_SetConfig+0xe8>
 8005f3e:	2b50      	cmp	r3, #80	@ 0x50
 8005f40:	d858      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f42:	2b40      	cmp	r3, #64	@ 0x40
 8005f44:	d019      	beq.n	8005f7a <TIM_SlaveTimer_SetConfig+0x96>
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d854      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f4a:	2b30      	cmp	r3, #48	@ 0x30
 8005f4c:	d055      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f4e:	2b30      	cmp	r3, #48	@ 0x30
 8005f50:	d850      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d051      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d84c      	bhi.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d04d      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d04b      	beq.n	8005ffa <TIM_SlaveTimer_SetConfig+0x116>
 8005f62:	e047      	b.n	8005ff4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005f74:	f000 f8c1 	bl	80060fa <TIM_ETR_SetConfig>
      break;
 8005f78:	e040      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d101      	bne.n	8005f86 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e03b      	b.n	8005ffe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a1a      	ldr	r2, [r3, #32]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
      break;
 8005fca:	e017      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f000 f814 	bl	8006006 <TIM_TI1_ConfigInputStage>
      break;
 8005fde:	e00d      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fec:	461a      	mov	r2, r3
 8005fee:	f000 f839 	bl	8006064 <TIM_TI2_ConfigInputStage>
      break;
 8005ff2:	e003      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	e000      	b.n	8005ffc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005ffa:	bf00      	nop
  }

  return status;
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006006:	b480      	push	{r7}
 8006008:	b087      	sub	sp, #28
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f023 0201 	bic.w	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 030a 	bic.w	r3, r3, #10
 8006042:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	621a      	str	r2, [r3, #32]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0210 	bic.w	r2, r3, #16
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	031b      	lsls	r3, r3, #12
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	621a      	str	r2, [r3, #32]
}
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f043 0307 	orr.w	r3, r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	609a      	str	r2, [r3, #8]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b087      	sub	sp, #28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	021a      	lsls	r2, r3, #8
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	431a      	orrs	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4313      	orrs	r3, r2
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	609a      	str	r2, [r3, #8]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2201      	movs	r2, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	43db      	mvns	r3, r3
 800615c:	401a      	ands	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	431a      	orrs	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e05a      	b.n	8006252 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a21      	ldr	r2, [pc, #132]	@ (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d022      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e8:	d01d      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d018      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006268 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1a      	ldr	r2, [pc, #104]	@ (800626c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a18      	ldr	r2, [pc, #96]	@ (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a17      	ldr	r2, [pc, #92]	@ (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a15      	ldr	r2, [pc, #84]	@ (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d10c      	bne.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800622c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4313      	orrs	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40010000 	.word	0x40010000
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40010400 	.word	0x40010400
 8006274:	40014000 	.word	0x40014000
 8006278:	40001800 	.word	0x40001800

0800627c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e042      	b.n	800633c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fc ffa4 	bl	8003218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2224      	movs	r2, #36	@ 0x24
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fdcb 	bl	8006e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800630c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800631c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08c      	sub	sp, #48	@ 0x30
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b20      	cmp	r3, #32
 800635c:	d156      	bne.n	800640c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_UART_Transmit_DMA+0x26>
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e04f      	b.n	800640e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2221      	movs	r2, #33	@ 0x21
 800638a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006392:	4a21      	ldr	r2, [pc, #132]	@ (8006418 <HAL_UART_Transmit_DMA+0xd4>)
 8006394:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639a:	4a20      	ldr	r2, [pc, #128]	@ (800641c <HAL_UART_Transmit_DMA+0xd8>)
 800639c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006420 <HAL_UART_Transmit_DMA+0xdc>)
 80063a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063aa:	2200      	movs	r2, #0
 80063ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3304      	adds	r3, #4
 80063c2:	461a      	mov	r2, r3
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	f7fd faff 	bl	80039c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	617b      	str	r3, [r7, #20]
   return(result);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3314      	adds	r3, #20
 80063f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80063f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6a39      	ldr	r1, [r7, #32]
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	61fb      	str	r3, [r7, #28]
   return(result);
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e5      	bne.n	80063d4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e000      	b.n	800640e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	4618      	mov	r0, r3
 8006410:	3730      	adds	r7, #48	@ 0x30
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	080069b1 	.word	0x080069b1
 800641c:	08006a4b 	.word	0x08006a4b
 8006420:	08006a67 	.word	0x08006a67

08006424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b0ba      	sub	sp, #232	@ 0xe8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800644a:	2300      	movs	r3, #0
 800644c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006450:	2300      	movs	r3, #0
 8006452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10f      	bne.n	800648a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800646a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <HAL_UART_IRQHandler+0x66>
 8006476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647a:	f003 0320 	and.w	r3, r3, #32
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fc40 	bl	8006d08 <UART_Receive_IT>
      return;
 8006488:	e25b      	b.n	8006942 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800648a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80de 	beq.w	8006650 <HAL_UART_IRQHandler+0x22c>
 8006494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d106      	bne.n	80064ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80d1 	beq.w	8006650 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <HAL_UART_IRQHandler+0xae>
 80064ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	f043 0201 	orr.w	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <HAL_UART_IRQHandler+0xd2>
 80064de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	f043 0202 	orr.w	r2, r3, #2
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <HAL_UART_IRQHandler+0xf6>
 8006502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006512:	f043 0204 	orr.w	r2, r3, #4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d011      	beq.n	800654a <HAL_UART_IRQHandler+0x126>
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006542:	f043 0208 	orr.w	r2, r3, #8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 81f2 	beq.w	8006938 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b00      	cmp	r3, #0
 800655e:	d008      	beq.n	8006572 <HAL_UART_IRQHandler+0x14e>
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006564:	f003 0320 	and.w	r3, r3, #32
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fbcb 	bl	8006d08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <HAL_UART_IRQHandler+0x17a>
 8006596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d04f      	beq.n	800663e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fad3 	bl	8006b4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ae:	2b40      	cmp	r3, #64	@ 0x40
 80065b0:	d141      	bne.n	8006636 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3314      	adds	r3, #20
 80065b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3314      	adds	r3, #20
 80065da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1d9      	bne.n	80065b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d013      	beq.n	800662e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	4a7e      	ldr	r2, [pc, #504]	@ (8006804 <HAL_UART_IRQHandler+0x3e0>)
 800660c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006612:	4618      	mov	r0, r3
 8006614:	f7fd faa0 	bl	8003b58 <HAL_DMA_Abort_IT>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	e00e      	b.n	800664c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9a8 	bl	8006984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006634:	e00a      	b.n	800664c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f9a4 	bl	8006984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	e006      	b.n	800664c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9a0 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800664a:	e175      	b.n	8006938 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	bf00      	nop
    return;
 800664e:	e173      	b.n	8006938 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006654:	2b01      	cmp	r3, #1
 8006656:	f040 814f 	bne.w	80068f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 8148 	beq.w	80068f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8141 	beq.w	80068f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006696:	2b40      	cmp	r3, #64	@ 0x40
 8006698:	f040 80b6 	bne.w	8006808 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8145 	beq.w	800693c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f080 813e 	bcs.w	800693c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d2:	f000 8088 	beq.w	80067e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006702:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800670e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800671a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1d9      	bne.n	80066d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3314      	adds	r3, #20
 8006742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006746:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800674a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800674e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e1      	bne.n	8006722 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800676e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006774:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006782:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006784:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006788:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e3      	bne.n	800675e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067b6:	f023 0310 	bic.w	r3, r3, #16
 80067ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80067c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e3      	bne.n	80067a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fd f949 	bl	8003a78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8cb 	bl	8006998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006802:	e09b      	b.n	800693c <HAL_UART_IRQHandler+0x518>
 8006804:	08006c11 	.word	0x08006c11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006810:	b29b      	uxth	r3, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 808e 	beq.w	8006940 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8089 	beq.w	8006940 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800683e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006852:	647a      	str	r2, [r7, #68]	@ 0x44
 8006854:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e3      	bne.n	800682e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	623b      	str	r3, [r7, #32]
   return(result);
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800688a:	633a      	str	r2, [r7, #48]	@ 0x30
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e3      	bne.n	8006866 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0310 	bic.w	r3, r3, #16
 80068c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068d0:	61fa      	str	r2, [r7, #28]
 80068d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	617b      	str	r3, [r7, #20]
   return(result);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e3      	bne.n	80068ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f851 	bl	8006998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068f6:	e023      	b.n	8006940 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <HAL_UART_IRQHandler+0x4f4>
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f991 	bl	8006c38 <UART_Transmit_IT>
    return;
 8006916:	e014      	b.n	8006942 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <HAL_UART_IRQHandler+0x51e>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f9d1 	bl	8006cd8 <UART_EndTransmit_IT>
    return;
 8006936:	e004      	b.n	8006942 <HAL_UART_IRQHandler+0x51e>
    return;
 8006938:	bf00      	nop
 800693a:	e002      	b.n	8006942 <HAL_UART_IRQHandler+0x51e>
      return;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <HAL_UART_IRQHandler+0x51e>
      return;
 8006940:	bf00      	nop
  }
}
 8006942:	37e8      	adds	r7, #232	@ 0xe8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b090      	sub	sp, #64	@ 0x40
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d137      	bne.n	8006a3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80069cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ce:	2200      	movs	r2, #0
 80069d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	623b      	str	r3, [r7, #32]
   return(result);
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80069f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e5      	bne.n	80069d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	330c      	adds	r3, #12
 8006a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a26:	61fa      	str	r2, [r7, #28]
 8006a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	69b9      	ldr	r1, [r7, #24]
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	617b      	str	r3, [r7, #20]
   return(result);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e5      	bne.n	8006a06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a3a:	e002      	b.n	8006a42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a3e:	f7ff ff83 	bl	8006948 <HAL_UART_TxCpltCallback>
}
 8006a42:	bf00      	nop
 8006a44:	3740      	adds	r7, #64	@ 0x40
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff ff7f 	bl	800695c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a5e:	bf00      	nop
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a82:	2b80      	cmp	r3, #128	@ 0x80
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b21      	cmp	r3, #33	@ 0x21
 8006a98:	d108      	bne.n	8006aac <UART_DMAError+0x46>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006aa6:	68b8      	ldr	r0, [r7, #8]
 8006aa8:	f000 f827 	bl	8006afa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	bf0c      	ite	eq
 8006aba:	2301      	moveq	r3, #1
 8006abc:	2300      	movne	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b22      	cmp	r3, #34	@ 0x22
 8006acc:	d108      	bne.n	8006ae0 <UART_DMAError+0x7a>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f000 f835 	bl	8006b4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae4:	f043 0210 	orr.w	r2, r3, #16
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aec:	68b8      	ldr	r0, [r7, #8]
 8006aee:	f7ff ff49 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b089      	sub	sp, #36	@ 0x24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	61ba      	str	r2, [r7, #24]
 8006b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6979      	ldr	r1, [r7, #20]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006b3e:	bf00      	nop
 8006b40:	3724      	adds	r7, #36	@ 0x24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b095      	sub	sp, #84	@ 0x54
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	330c      	adds	r3, #12
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b72:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d119      	bne.n	8006bf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f023 0310 	bic.w	r3, r3, #16
 8006bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be2:	61ba      	str	r2, [r7, #24]
 8006be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6979      	ldr	r1, [r7, #20]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c04:	bf00      	nop
 8006c06:	3754      	adds	r7, #84	@ 0x54
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f7ff feaa 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b21      	cmp	r3, #33	@ 0x21
 8006c4a:	d13e      	bne.n	8006cca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c54:	d114      	bne.n	8006c80 <UART_Transmit_IT+0x48>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d110      	bne.n	8006c80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	1c9a      	adds	r2, r3, #2
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	621a      	str	r2, [r3, #32]
 8006c7e:	e008      	b.n	8006c92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	1c59      	adds	r1, r3, #1
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6211      	str	r1, [r2, #32]
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10f      	bne.n	8006cc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e000      	b.n	8006ccc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cca:	2302      	movs	r3, #2
  }
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fe25 	bl	8006948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08c      	sub	sp, #48	@ 0x30
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b22      	cmp	r3, #34	@ 0x22
 8006d1a:	f040 80ae 	bne.w	8006e7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d26:	d117      	bne.n	8006d58 <UART_Receive_IT+0x50>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	1c9a      	adds	r2, r3, #2
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d56:	e026      	b.n	8006da6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6a:	d007      	beq.n	8006d7c <UART_Receive_IT+0x74>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <UART_Receive_IT+0x82>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	e008      	b.n	8006d9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	4619      	mov	r1, r3
 8006db4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d15d      	bne.n	8006e76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0220 	bic.w	r2, r2, #32
 8006dc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d135      	bne.n	8006e6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	613b      	str	r3, [r7, #16]
   return(result);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f023 0310 	bic.w	r3, r3, #16
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e26:	623a      	str	r2, [r7, #32]
 8006e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	69f9      	ldr	r1, [r7, #28]
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e5      	bne.n	8006e06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d10a      	bne.n	8006e5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fd97 	bl	8006998 <HAL_UARTEx_RxEventCallback>
 8006e6a:	e002      	b.n	8006e72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fd7f 	bl	8006970 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e002      	b.n	8006e7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3730      	adds	r7, #48	@ 0x30
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e88:	b0c0      	sub	sp, #256	@ 0x100
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea0:	68d9      	ldr	r1, [r3, #12]
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	ea40 0301 	orr.w	r3, r0, r1
 8006eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006edc:	f021 010c 	bic.w	r1, r1, #12
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006eea:	430b      	orrs	r3, r1
 8006eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efe:	6999      	ldr	r1, [r3, #24]
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	ea40 0301 	orr.w	r3, r0, r1
 8006f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b8f      	ldr	r3, [pc, #572]	@ (8007150 <UART_SetConfig+0x2cc>)
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d005      	beq.n	8006f24 <UART_SetConfig+0xa0>
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007154 <UART_SetConfig+0x2d0>)
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d104      	bne.n	8006f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f24:	f7fd ff26 	bl	8004d74 <HAL_RCC_GetPCLK2Freq>
 8006f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f2c:	e003      	b.n	8006f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f2e:	f7fd ff0d 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8006f32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f40:	f040 810c 	bne.w	800715c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f56:	4622      	mov	r2, r4
 8006f58:	462b      	mov	r3, r5
 8006f5a:	1891      	adds	r1, r2, r2
 8006f5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f5e:	415b      	adcs	r3, r3
 8006f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f66:	4621      	mov	r1, r4
 8006f68:	eb12 0801 	adds.w	r8, r2, r1
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	eb43 0901 	adc.w	r9, r3, r1
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f86:	4690      	mov	r8, r2
 8006f88:	4699      	mov	r9, r3
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	eb18 0303 	adds.w	r3, r8, r3
 8006f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f94:	462b      	mov	r3, r5
 8006f96:	eb49 0303 	adc.w	r3, r9, r3
 8006f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	18db      	adds	r3, r3, r3
 8006fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fb8:	4613      	mov	r3, r2
 8006fba:	eb42 0303 	adc.w	r3, r2, r3
 8006fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006fc8:	f7f9 fe5e 	bl	8000c88 <__aeabi_uldivmod>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4b61      	ldr	r3, [pc, #388]	@ (8007158 <UART_SetConfig+0x2d4>)
 8006fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	011c      	lsls	r4, r3, #4
 8006fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	1891      	adds	r1, r2, r2
 8006ff2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ff4:	415b      	adcs	r3, r3
 8006ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8007002:	4649      	mov	r1, r9
 8007004:	eb43 0b01 	adc.w	fp, r3, r1
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800701c:	4692      	mov	sl, r2
 800701e:	469b      	mov	fp, r3
 8007020:	4643      	mov	r3, r8
 8007022:	eb1a 0303 	adds.w	r3, sl, r3
 8007026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800702a:	464b      	mov	r3, r9
 800702c:	eb4b 0303 	adc.w	r3, fp, r3
 8007030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007040:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007048:	460b      	mov	r3, r1
 800704a:	18db      	adds	r3, r3, r3
 800704c:	643b      	str	r3, [r7, #64]	@ 0x40
 800704e:	4613      	mov	r3, r2
 8007050:	eb42 0303 	adc.w	r3, r2, r3
 8007054:	647b      	str	r3, [r7, #68]	@ 0x44
 8007056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800705a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800705e:	f7f9 fe13 	bl	8000c88 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4611      	mov	r1, r2
 8007068:	4b3b      	ldr	r3, [pc, #236]	@ (8007158 <UART_SetConfig+0x2d4>)
 800706a:	fba3 2301 	umull	r2, r3, r3, r1
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	2264      	movs	r2, #100	@ 0x64
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	1acb      	subs	r3, r1, r3
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800707e:	4b36      	ldr	r3, [pc, #216]	@ (8007158 <UART_SetConfig+0x2d4>)
 8007080:	fba3 2302 	umull	r2, r3, r3, r2
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800708c:	441c      	add	r4, r3
 800708e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007098:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800709c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	1891      	adds	r1, r2, r2
 80070a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070a8:	415b      	adcs	r3, r3
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070b0:	4641      	mov	r1, r8
 80070b2:	1851      	adds	r1, r2, r1
 80070b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80070b6:	4649      	mov	r1, r9
 80070b8:	414b      	adcs	r3, r1
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80070c8:	4659      	mov	r1, fp
 80070ca:	00cb      	lsls	r3, r1, #3
 80070cc:	4651      	mov	r1, sl
 80070ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070d2:	4651      	mov	r1, sl
 80070d4:	00ca      	lsls	r2, r1, #3
 80070d6:	4610      	mov	r0, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	4603      	mov	r3, r0
 80070dc:	4642      	mov	r2, r8
 80070de:	189b      	adds	r3, r3, r2
 80070e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070e4:	464b      	mov	r3, r9
 80070e6:	460a      	mov	r2, r1
 80070e8:	eb42 0303 	adc.w	r3, r2, r3
 80070ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007104:	460b      	mov	r3, r1
 8007106:	18db      	adds	r3, r3, r3
 8007108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800710a:	4613      	mov	r3, r2
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800711a:	f7f9 fdb5 	bl	8000c88 <__aeabi_uldivmod>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <UART_SetConfig+0x2d4>)
 8007124:	fba3 1302 	umull	r1, r3, r3, r2
 8007128:	095b      	lsrs	r3, r3, #5
 800712a:	2164      	movs	r1, #100	@ 0x64
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	3332      	adds	r3, #50	@ 0x32
 8007136:	4a08      	ldr	r2, [pc, #32]	@ (8007158 <UART_SetConfig+0x2d4>)
 8007138:	fba2 2303 	umull	r2, r3, r2, r3
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	f003 0207 	and.w	r2, r3, #7
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4422      	add	r2, r4
 800714a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800714c:	e106      	b.n	800735c <UART_SetConfig+0x4d8>
 800714e:	bf00      	nop
 8007150:	40011000 	.word	0x40011000
 8007154:	40011400 	.word	0x40011400
 8007158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800715c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007160:	2200      	movs	r2, #0
 8007162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007166:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800716a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800716e:	4642      	mov	r2, r8
 8007170:	464b      	mov	r3, r9
 8007172:	1891      	adds	r1, r2, r2
 8007174:	6239      	str	r1, [r7, #32]
 8007176:	415b      	adcs	r3, r3
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
 800717a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800717e:	4641      	mov	r1, r8
 8007180:	1854      	adds	r4, r2, r1
 8007182:	4649      	mov	r1, r9
 8007184:	eb43 0501 	adc.w	r5, r3, r1
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	00eb      	lsls	r3, r5, #3
 8007192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007196:	00e2      	lsls	r2, r4, #3
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	4643      	mov	r3, r8
 800719e:	18e3      	adds	r3, r4, r3
 80071a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071a4:	464b      	mov	r3, r9
 80071a6:	eb45 0303 	adc.w	r3, r5, r3
 80071aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071be:	f04f 0200 	mov.w	r2, #0
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80071ca:	4629      	mov	r1, r5
 80071cc:	008b      	lsls	r3, r1, #2
 80071ce:	4621      	mov	r1, r4
 80071d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071d4:	4621      	mov	r1, r4
 80071d6:	008a      	lsls	r2, r1, #2
 80071d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80071dc:	f7f9 fd54 	bl	8000c88 <__aeabi_uldivmod>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4b60      	ldr	r3, [pc, #384]	@ (8007368 <UART_SetConfig+0x4e4>)
 80071e6:	fba3 2302 	umull	r2, r3, r3, r2
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	011c      	lsls	r4, r3, #4
 80071ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007200:	4642      	mov	r2, r8
 8007202:	464b      	mov	r3, r9
 8007204:	1891      	adds	r1, r2, r2
 8007206:	61b9      	str	r1, [r7, #24]
 8007208:	415b      	adcs	r3, r3
 800720a:	61fb      	str	r3, [r7, #28]
 800720c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007210:	4641      	mov	r1, r8
 8007212:	1851      	adds	r1, r2, r1
 8007214:	6139      	str	r1, [r7, #16]
 8007216:	4649      	mov	r1, r9
 8007218:	414b      	adcs	r3, r1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007228:	4659      	mov	r1, fp
 800722a:	00cb      	lsls	r3, r1, #3
 800722c:	4651      	mov	r1, sl
 800722e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007232:	4651      	mov	r1, sl
 8007234:	00ca      	lsls	r2, r1, #3
 8007236:	4610      	mov	r0, r2
 8007238:	4619      	mov	r1, r3
 800723a:	4603      	mov	r3, r0
 800723c:	4642      	mov	r2, r8
 800723e:	189b      	adds	r3, r3, r2
 8007240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007244:	464b      	mov	r3, r9
 8007246:	460a      	mov	r2, r1
 8007248:	eb42 0303 	adc.w	r3, r2, r3
 800724c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800725a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007268:	4649      	mov	r1, r9
 800726a:	008b      	lsls	r3, r1, #2
 800726c:	4641      	mov	r1, r8
 800726e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007272:	4641      	mov	r1, r8
 8007274:	008a      	lsls	r2, r1, #2
 8007276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800727a:	f7f9 fd05 	bl	8000c88 <__aeabi_uldivmod>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4611      	mov	r1, r2
 8007284:	4b38      	ldr	r3, [pc, #224]	@ (8007368 <UART_SetConfig+0x4e4>)
 8007286:	fba3 2301 	umull	r2, r3, r3, r1
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2264      	movs	r2, #100	@ 0x64
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	1acb      	subs	r3, r1, r3
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	3332      	adds	r3, #50	@ 0x32
 8007298:	4a33      	ldr	r2, [pc, #204]	@ (8007368 <UART_SetConfig+0x4e4>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072a4:	441c      	add	r4, r3
 80072a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072aa:	2200      	movs	r2, #0
 80072ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80072ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80072b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	1891      	adds	r1, r2, r2
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	415b      	adcs	r3, r3
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072c4:	4641      	mov	r1, r8
 80072c6:	1851      	adds	r1, r2, r1
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	4649      	mov	r1, r9
 80072cc:	414b      	adcs	r3, r1
 80072ce:	607b      	str	r3, [r7, #4]
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072dc:	4659      	mov	r1, fp
 80072de:	00cb      	lsls	r3, r1, #3
 80072e0:	4651      	mov	r1, sl
 80072e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072e6:	4651      	mov	r1, sl
 80072e8:	00ca      	lsls	r2, r1, #3
 80072ea:	4610      	mov	r0, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	4642      	mov	r2, r8
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072f6:	464b      	mov	r3, r9
 80072f8:	460a      	mov	r2, r1
 80072fa:	eb42 0303 	adc.w	r3, r2, r3
 80072fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	663b      	str	r3, [r7, #96]	@ 0x60
 800730a:	667a      	str	r2, [r7, #100]	@ 0x64
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007318:	4649      	mov	r1, r9
 800731a:	008b      	lsls	r3, r1, #2
 800731c:	4641      	mov	r1, r8
 800731e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007322:	4641      	mov	r1, r8
 8007324:	008a      	lsls	r2, r1, #2
 8007326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800732a:	f7f9 fcad 	bl	8000c88 <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <UART_SetConfig+0x4e4>)
 8007334:	fba3 1302 	umull	r1, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	2164      	movs	r1, #100	@ 0x64
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	3332      	adds	r3, #50	@ 0x32
 8007346:	4a08      	ldr	r2, [pc, #32]	@ (8007368 <UART_SetConfig+0x4e4>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f003 020f 	and.w	r2, r3, #15
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4422      	add	r2, r4
 800735a:	609a      	str	r2, [r3, #8]
}
 800735c:	bf00      	nop
 800735e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007362:	46bd      	mov	sp, r7
 8007364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007368:	51eb851f 	.word	0x51eb851f

0800736c <__cvt>:
 800736c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	ec57 6b10 	vmov	r6, r7, d0
 8007374:	2f00      	cmp	r7, #0
 8007376:	460c      	mov	r4, r1
 8007378:	4619      	mov	r1, r3
 800737a:	463b      	mov	r3, r7
 800737c:	bfbb      	ittet	lt
 800737e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007382:	461f      	movlt	r7, r3
 8007384:	2300      	movge	r3, #0
 8007386:	232d      	movlt	r3, #45	@ 0x2d
 8007388:	700b      	strb	r3, [r1, #0]
 800738a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800738c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007390:	4691      	mov	r9, r2
 8007392:	f023 0820 	bic.w	r8, r3, #32
 8007396:	bfbc      	itt	lt
 8007398:	4632      	movlt	r2, r6
 800739a:	4616      	movlt	r6, r2
 800739c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073a0:	d005      	beq.n	80073ae <__cvt+0x42>
 80073a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80073a6:	d100      	bne.n	80073aa <__cvt+0x3e>
 80073a8:	3401      	adds	r4, #1
 80073aa:	2102      	movs	r1, #2
 80073ac:	e000      	b.n	80073b0 <__cvt+0x44>
 80073ae:	2103      	movs	r1, #3
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	ab02      	add	r3, sp, #8
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	ec47 6b10 	vmov	d0, r6, r7
 80073bc:	4653      	mov	r3, sl
 80073be:	4622      	mov	r2, r4
 80073c0:	f001 f876 	bl	80084b0 <_dtoa_r>
 80073c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80073c8:	4605      	mov	r5, r0
 80073ca:	d119      	bne.n	8007400 <__cvt+0x94>
 80073cc:	f019 0f01 	tst.w	r9, #1
 80073d0:	d00e      	beq.n	80073f0 <__cvt+0x84>
 80073d2:	eb00 0904 	add.w	r9, r0, r4
 80073d6:	2200      	movs	r2, #0
 80073d8:	2300      	movs	r3, #0
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80073e2:	b108      	cbz	r0, 80073e8 <__cvt+0x7c>
 80073e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80073e8:	2230      	movs	r2, #48	@ 0x30
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	454b      	cmp	r3, r9
 80073ee:	d31e      	bcc.n	800742e <__cvt+0xc2>
 80073f0:	9b03      	ldr	r3, [sp, #12]
 80073f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073f4:	1b5b      	subs	r3, r3, r5
 80073f6:	4628      	mov	r0, r5
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	b004      	add	sp, #16
 80073fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007400:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007404:	eb00 0904 	add.w	r9, r0, r4
 8007408:	d1e5      	bne.n	80073d6 <__cvt+0x6a>
 800740a:	7803      	ldrb	r3, [r0, #0]
 800740c:	2b30      	cmp	r3, #48	@ 0x30
 800740e:	d10a      	bne.n	8007426 <__cvt+0xba>
 8007410:	2200      	movs	r2, #0
 8007412:	2300      	movs	r3, #0
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f7f9 fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800741c:	b918      	cbnz	r0, 8007426 <__cvt+0xba>
 800741e:	f1c4 0401 	rsb	r4, r4, #1
 8007422:	f8ca 4000 	str.w	r4, [sl]
 8007426:	f8da 3000 	ldr.w	r3, [sl]
 800742a:	4499      	add	r9, r3
 800742c:	e7d3      	b.n	80073d6 <__cvt+0x6a>
 800742e:	1c59      	adds	r1, r3, #1
 8007430:	9103      	str	r1, [sp, #12]
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	e7d9      	b.n	80073ea <__cvt+0x7e>

08007436 <__exponent>:
 8007436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007438:	2900      	cmp	r1, #0
 800743a:	bfba      	itte	lt
 800743c:	4249      	neglt	r1, r1
 800743e:	232d      	movlt	r3, #45	@ 0x2d
 8007440:	232b      	movge	r3, #43	@ 0x2b
 8007442:	2909      	cmp	r1, #9
 8007444:	7002      	strb	r2, [r0, #0]
 8007446:	7043      	strb	r3, [r0, #1]
 8007448:	dd29      	ble.n	800749e <__exponent+0x68>
 800744a:	f10d 0307 	add.w	r3, sp, #7
 800744e:	461d      	mov	r5, r3
 8007450:	270a      	movs	r7, #10
 8007452:	461a      	mov	r2, r3
 8007454:	fbb1 f6f7 	udiv	r6, r1, r7
 8007458:	fb07 1416 	mls	r4, r7, r6, r1
 800745c:	3430      	adds	r4, #48	@ 0x30
 800745e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007462:	460c      	mov	r4, r1
 8007464:	2c63      	cmp	r4, #99	@ 0x63
 8007466:	f103 33ff 	add.w	r3, r3, #4294967295
 800746a:	4631      	mov	r1, r6
 800746c:	dcf1      	bgt.n	8007452 <__exponent+0x1c>
 800746e:	3130      	adds	r1, #48	@ 0x30
 8007470:	1e94      	subs	r4, r2, #2
 8007472:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007476:	1c41      	adds	r1, r0, #1
 8007478:	4623      	mov	r3, r4
 800747a:	42ab      	cmp	r3, r5
 800747c:	d30a      	bcc.n	8007494 <__exponent+0x5e>
 800747e:	f10d 0309 	add.w	r3, sp, #9
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	42ac      	cmp	r4, r5
 8007486:	bf88      	it	hi
 8007488:	2300      	movhi	r3, #0
 800748a:	3302      	adds	r3, #2
 800748c:	4403      	add	r3, r0
 800748e:	1a18      	subs	r0, r3, r0
 8007490:	b003      	add	sp, #12
 8007492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007494:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007498:	f801 6f01 	strb.w	r6, [r1, #1]!
 800749c:	e7ed      	b.n	800747a <__exponent+0x44>
 800749e:	2330      	movs	r3, #48	@ 0x30
 80074a0:	3130      	adds	r1, #48	@ 0x30
 80074a2:	7083      	strb	r3, [r0, #2]
 80074a4:	70c1      	strb	r1, [r0, #3]
 80074a6:	1d03      	adds	r3, r0, #4
 80074a8:	e7f1      	b.n	800748e <__exponent+0x58>
	...

080074ac <_printf_float>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	b08d      	sub	sp, #52	@ 0x34
 80074b2:	460c      	mov	r4, r1
 80074b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80074b8:	4616      	mov	r6, r2
 80074ba:	461f      	mov	r7, r3
 80074bc:	4605      	mov	r5, r0
 80074be:	f000 feef 	bl	80082a0 <_localeconv_r>
 80074c2:	6803      	ldr	r3, [r0, #0]
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7f8 fed2 	bl	8000270 <strlen>
 80074cc:	2300      	movs	r3, #0
 80074ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d0:	f8d8 3000 	ldr.w	r3, [r8]
 80074d4:	9005      	str	r0, [sp, #20]
 80074d6:	3307      	adds	r3, #7
 80074d8:	f023 0307 	bic.w	r3, r3, #7
 80074dc:	f103 0208 	add.w	r2, r3, #8
 80074e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074e4:	f8d4 b000 	ldr.w	fp, [r4]
 80074e8:	f8c8 2000 	str.w	r2, [r8]
 80074ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80074f4:	9307      	str	r3, [sp, #28]
 80074f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80074fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80074fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007502:	4b9c      	ldr	r3, [pc, #624]	@ (8007774 <_printf_float+0x2c8>)
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	f7f9 fb10 	bl	8000b2c <__aeabi_dcmpun>
 800750c:	bb70      	cbnz	r0, 800756c <_printf_float+0xc0>
 800750e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007512:	4b98      	ldr	r3, [pc, #608]	@ (8007774 <_printf_float+0x2c8>)
 8007514:	f04f 32ff 	mov.w	r2, #4294967295
 8007518:	f7f9 faea 	bl	8000af0 <__aeabi_dcmple>
 800751c:	bb30      	cbnz	r0, 800756c <_printf_float+0xc0>
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f9 fad9 	bl	8000adc <__aeabi_dcmplt>
 800752a:	b110      	cbz	r0, 8007532 <_printf_float+0x86>
 800752c:	232d      	movs	r3, #45	@ 0x2d
 800752e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007532:	4a91      	ldr	r2, [pc, #580]	@ (8007778 <_printf_float+0x2cc>)
 8007534:	4b91      	ldr	r3, [pc, #580]	@ (800777c <_printf_float+0x2d0>)
 8007536:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800753a:	bf94      	ite	ls
 800753c:	4690      	movls	r8, r2
 800753e:	4698      	movhi	r8, r3
 8007540:	2303      	movs	r3, #3
 8007542:	6123      	str	r3, [r4, #16]
 8007544:	f02b 0304 	bic.w	r3, fp, #4
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	f04f 0900 	mov.w	r9, #0
 800754e:	9700      	str	r7, [sp, #0]
 8007550:	4633      	mov	r3, r6
 8007552:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007554:	4621      	mov	r1, r4
 8007556:	4628      	mov	r0, r5
 8007558:	f000 f9d2 	bl	8007900 <_printf_common>
 800755c:	3001      	adds	r0, #1
 800755e:	f040 808d 	bne.w	800767c <_printf_float+0x1d0>
 8007562:	f04f 30ff 	mov.w	r0, #4294967295
 8007566:	b00d      	add	sp, #52	@ 0x34
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	4640      	mov	r0, r8
 8007572:	4649      	mov	r1, r9
 8007574:	f7f9 fada 	bl	8000b2c <__aeabi_dcmpun>
 8007578:	b140      	cbz	r0, 800758c <_printf_float+0xe0>
 800757a:	464b      	mov	r3, r9
 800757c:	2b00      	cmp	r3, #0
 800757e:	bfbc      	itt	lt
 8007580:	232d      	movlt	r3, #45	@ 0x2d
 8007582:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007586:	4a7e      	ldr	r2, [pc, #504]	@ (8007780 <_printf_float+0x2d4>)
 8007588:	4b7e      	ldr	r3, [pc, #504]	@ (8007784 <_printf_float+0x2d8>)
 800758a:	e7d4      	b.n	8007536 <_printf_float+0x8a>
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007592:	9206      	str	r2, [sp, #24]
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	d13b      	bne.n	8007610 <_printf_float+0x164>
 8007598:	2306      	movs	r3, #6
 800759a:	6063      	str	r3, [r4, #4]
 800759c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075a0:	2300      	movs	r3, #0
 80075a2:	6022      	str	r2, [r4, #0]
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80075a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80075ac:	ab09      	add	r3, sp, #36	@ 0x24
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	6861      	ldr	r1, [r4, #4]
 80075b2:	ec49 8b10 	vmov	d0, r8, r9
 80075b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80075ba:	4628      	mov	r0, r5
 80075bc:	f7ff fed6 	bl	800736c <__cvt>
 80075c0:	9b06      	ldr	r3, [sp, #24]
 80075c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075c4:	2b47      	cmp	r3, #71	@ 0x47
 80075c6:	4680      	mov	r8, r0
 80075c8:	d129      	bne.n	800761e <_printf_float+0x172>
 80075ca:	1cc8      	adds	r0, r1, #3
 80075cc:	db02      	blt.n	80075d4 <_printf_float+0x128>
 80075ce:	6863      	ldr	r3, [r4, #4]
 80075d0:	4299      	cmp	r1, r3
 80075d2:	dd41      	ble.n	8007658 <_printf_float+0x1ac>
 80075d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80075d8:	fa5f fa8a 	uxtb.w	sl, sl
 80075dc:	3901      	subs	r1, #1
 80075de:	4652      	mov	r2, sl
 80075e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80075e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80075e6:	f7ff ff26 	bl	8007436 <__exponent>
 80075ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075ec:	1813      	adds	r3, r2, r0
 80075ee:	2a01      	cmp	r2, #1
 80075f0:	4681      	mov	r9, r0
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	dc02      	bgt.n	80075fc <_printf_float+0x150>
 80075f6:	6822      	ldr	r2, [r4, #0]
 80075f8:	07d2      	lsls	r2, r2, #31
 80075fa:	d501      	bpl.n	8007600 <_printf_float+0x154>
 80075fc:	3301      	adds	r3, #1
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0a2      	beq.n	800754e <_printf_float+0xa2>
 8007608:	232d      	movs	r3, #45	@ 0x2d
 800760a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800760e:	e79e      	b.n	800754e <_printf_float+0xa2>
 8007610:	9a06      	ldr	r2, [sp, #24]
 8007612:	2a47      	cmp	r2, #71	@ 0x47
 8007614:	d1c2      	bne.n	800759c <_printf_float+0xf0>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1c0      	bne.n	800759c <_printf_float+0xf0>
 800761a:	2301      	movs	r3, #1
 800761c:	e7bd      	b.n	800759a <_printf_float+0xee>
 800761e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007622:	d9db      	bls.n	80075dc <_printf_float+0x130>
 8007624:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007628:	d118      	bne.n	800765c <_printf_float+0x1b0>
 800762a:	2900      	cmp	r1, #0
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	dd0b      	ble.n	8007648 <_printf_float+0x19c>
 8007630:	6121      	str	r1, [r4, #16]
 8007632:	b913      	cbnz	r3, 800763a <_printf_float+0x18e>
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	07d0      	lsls	r0, r2, #31
 8007638:	d502      	bpl.n	8007640 <_printf_float+0x194>
 800763a:	3301      	adds	r3, #1
 800763c:	440b      	add	r3, r1
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007642:	f04f 0900 	mov.w	r9, #0
 8007646:	e7db      	b.n	8007600 <_printf_float+0x154>
 8007648:	b913      	cbnz	r3, 8007650 <_printf_float+0x1a4>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	07d2      	lsls	r2, r2, #31
 800764e:	d501      	bpl.n	8007654 <_printf_float+0x1a8>
 8007650:	3302      	adds	r3, #2
 8007652:	e7f4      	b.n	800763e <_printf_float+0x192>
 8007654:	2301      	movs	r3, #1
 8007656:	e7f2      	b.n	800763e <_printf_float+0x192>
 8007658:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800765c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800765e:	4299      	cmp	r1, r3
 8007660:	db05      	blt.n	800766e <_printf_float+0x1c2>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	6121      	str	r1, [r4, #16]
 8007666:	07d8      	lsls	r0, r3, #31
 8007668:	d5ea      	bpl.n	8007640 <_printf_float+0x194>
 800766a:	1c4b      	adds	r3, r1, #1
 800766c:	e7e7      	b.n	800763e <_printf_float+0x192>
 800766e:	2900      	cmp	r1, #0
 8007670:	bfd4      	ite	le
 8007672:	f1c1 0202 	rsble	r2, r1, #2
 8007676:	2201      	movgt	r2, #1
 8007678:	4413      	add	r3, r2
 800767a:	e7e0      	b.n	800763e <_printf_float+0x192>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	055a      	lsls	r2, r3, #21
 8007680:	d407      	bmi.n	8007692 <_printf_float+0x1e6>
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	4642      	mov	r2, r8
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	d12b      	bne.n	80076e8 <_printf_float+0x23c>
 8007690:	e767      	b.n	8007562 <_printf_float+0xb6>
 8007692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007696:	f240 80dd 	bls.w	8007854 <_printf_float+0x3a8>
 800769a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800769e:	2200      	movs	r2, #0
 80076a0:	2300      	movs	r3, #0
 80076a2:	f7f9 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d033      	beq.n	8007712 <_printf_float+0x266>
 80076aa:	4a37      	ldr	r2, [pc, #220]	@ (8007788 <_printf_float+0x2dc>)
 80076ac:	2301      	movs	r3, #1
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	f43f af54 	beq.w	8007562 <_printf_float+0xb6>
 80076ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80076be:	4543      	cmp	r3, r8
 80076c0:	db02      	blt.n	80076c8 <_printf_float+0x21c>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	07d8      	lsls	r0, r3, #31
 80076c6:	d50f      	bpl.n	80076e8 <_printf_float+0x23c>
 80076c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f af45 	beq.w	8007562 <_printf_float+0xb6>
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80076e0:	f104 0a1a 	add.w	sl, r4, #26
 80076e4:	45c8      	cmp	r8, r9
 80076e6:	dc09      	bgt.n	80076fc <_printf_float+0x250>
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	079b      	lsls	r3, r3, #30
 80076ec:	f100 8103 	bmi.w	80078f6 <_printf_float+0x44a>
 80076f0:	68e0      	ldr	r0, [r4, #12]
 80076f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076f4:	4298      	cmp	r0, r3
 80076f6:	bfb8      	it	lt
 80076f8:	4618      	movlt	r0, r3
 80076fa:	e734      	b.n	8007566 <_printf_float+0xba>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4652      	mov	r2, sl
 8007700:	4631      	mov	r1, r6
 8007702:	4628      	mov	r0, r5
 8007704:	47b8      	blx	r7
 8007706:	3001      	adds	r0, #1
 8007708:	f43f af2b 	beq.w	8007562 <_printf_float+0xb6>
 800770c:	f109 0901 	add.w	r9, r9, #1
 8007710:	e7e8      	b.n	80076e4 <_printf_float+0x238>
 8007712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	dc39      	bgt.n	800778c <_printf_float+0x2e0>
 8007718:	4a1b      	ldr	r2, [pc, #108]	@ (8007788 <_printf_float+0x2dc>)
 800771a:	2301      	movs	r3, #1
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f af1d 	beq.w	8007562 <_printf_float+0xb6>
 8007728:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800772c:	ea59 0303 	orrs.w	r3, r9, r3
 8007730:	d102      	bne.n	8007738 <_printf_float+0x28c>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	07d9      	lsls	r1, r3, #31
 8007736:	d5d7      	bpl.n	80076e8 <_printf_float+0x23c>
 8007738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f af0d 	beq.w	8007562 <_printf_float+0xb6>
 8007748:	f04f 0a00 	mov.w	sl, #0
 800774c:	f104 0b1a 	add.w	fp, r4, #26
 8007750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007752:	425b      	negs	r3, r3
 8007754:	4553      	cmp	r3, sl
 8007756:	dc01      	bgt.n	800775c <_printf_float+0x2b0>
 8007758:	464b      	mov	r3, r9
 800775a:	e793      	b.n	8007684 <_printf_float+0x1d8>
 800775c:	2301      	movs	r3, #1
 800775e:	465a      	mov	r2, fp
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f aefb 	beq.w	8007562 <_printf_float+0xb6>
 800776c:	f10a 0a01 	add.w	sl, sl, #1
 8007770:	e7ee      	b.n	8007750 <_printf_float+0x2a4>
 8007772:	bf00      	nop
 8007774:	7fefffff 	.word	0x7fefffff
 8007778:	0800bab8 	.word	0x0800bab8
 800777c:	0800babc 	.word	0x0800babc
 8007780:	0800bac0 	.word	0x0800bac0
 8007784:	0800bac4 	.word	0x0800bac4
 8007788:	0800bac8 	.word	0x0800bac8
 800778c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800778e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007792:	4553      	cmp	r3, sl
 8007794:	bfa8      	it	ge
 8007796:	4653      	movge	r3, sl
 8007798:	2b00      	cmp	r3, #0
 800779a:	4699      	mov	r9, r3
 800779c:	dc36      	bgt.n	800780c <_printf_float+0x360>
 800779e:	f04f 0b00 	mov.w	fp, #0
 80077a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077a6:	f104 021a 	add.w	r2, r4, #26
 80077aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077ac:	9306      	str	r3, [sp, #24]
 80077ae:	eba3 0309 	sub.w	r3, r3, r9
 80077b2:	455b      	cmp	r3, fp
 80077b4:	dc31      	bgt.n	800781a <_printf_float+0x36e>
 80077b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b8:	459a      	cmp	sl, r3
 80077ba:	dc3a      	bgt.n	8007832 <_printf_float+0x386>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	07da      	lsls	r2, r3, #31
 80077c0:	d437      	bmi.n	8007832 <_printf_float+0x386>
 80077c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c4:	ebaa 0903 	sub.w	r9, sl, r3
 80077c8:	9b06      	ldr	r3, [sp, #24]
 80077ca:	ebaa 0303 	sub.w	r3, sl, r3
 80077ce:	4599      	cmp	r9, r3
 80077d0:	bfa8      	it	ge
 80077d2:	4699      	movge	r9, r3
 80077d4:	f1b9 0f00 	cmp.w	r9, #0
 80077d8:	dc33      	bgt.n	8007842 <_printf_float+0x396>
 80077da:	f04f 0800 	mov.w	r8, #0
 80077de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077e2:	f104 0b1a 	add.w	fp, r4, #26
 80077e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e8:	ebaa 0303 	sub.w	r3, sl, r3
 80077ec:	eba3 0309 	sub.w	r3, r3, r9
 80077f0:	4543      	cmp	r3, r8
 80077f2:	f77f af79 	ble.w	80076e8 <_printf_float+0x23c>
 80077f6:	2301      	movs	r3, #1
 80077f8:	465a      	mov	r2, fp
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f aeae 	beq.w	8007562 <_printf_float+0xb6>
 8007806:	f108 0801 	add.w	r8, r8, #1
 800780a:	e7ec      	b.n	80077e6 <_printf_float+0x33a>
 800780c:	4642      	mov	r2, r8
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	d1c2      	bne.n	800779e <_printf_float+0x2f2>
 8007818:	e6a3      	b.n	8007562 <_printf_float+0xb6>
 800781a:	2301      	movs	r3, #1
 800781c:	4631      	mov	r1, r6
 800781e:	4628      	mov	r0, r5
 8007820:	9206      	str	r2, [sp, #24]
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	f43f ae9c 	beq.w	8007562 <_printf_float+0xb6>
 800782a:	9a06      	ldr	r2, [sp, #24]
 800782c:	f10b 0b01 	add.w	fp, fp, #1
 8007830:	e7bb      	b.n	80077aa <_printf_float+0x2fe>
 8007832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	d1c0      	bne.n	80077c2 <_printf_float+0x316>
 8007840:	e68f      	b.n	8007562 <_printf_float+0xb6>
 8007842:	9a06      	ldr	r2, [sp, #24]
 8007844:	464b      	mov	r3, r9
 8007846:	4442      	add	r2, r8
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	d1c3      	bne.n	80077da <_printf_float+0x32e>
 8007852:	e686      	b.n	8007562 <_printf_float+0xb6>
 8007854:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007858:	f1ba 0f01 	cmp.w	sl, #1
 800785c:	dc01      	bgt.n	8007862 <_printf_float+0x3b6>
 800785e:	07db      	lsls	r3, r3, #31
 8007860:	d536      	bpl.n	80078d0 <_printf_float+0x424>
 8007862:	2301      	movs	r3, #1
 8007864:	4642      	mov	r2, r8
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae78 	beq.w	8007562 <_printf_float+0xb6>
 8007872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	47b8      	blx	r7
 800787c:	3001      	adds	r0, #1
 800787e:	f43f ae70 	beq.w	8007562 <_printf_float+0xb6>
 8007882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007886:	2200      	movs	r2, #0
 8007888:	2300      	movs	r3, #0
 800788a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788e:	f7f9 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007892:	b9c0      	cbnz	r0, 80078c6 <_printf_float+0x41a>
 8007894:	4653      	mov	r3, sl
 8007896:	f108 0201 	add.w	r2, r8, #1
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	47b8      	blx	r7
 80078a0:	3001      	adds	r0, #1
 80078a2:	d10c      	bne.n	80078be <_printf_float+0x412>
 80078a4:	e65d      	b.n	8007562 <_printf_float+0xb6>
 80078a6:	2301      	movs	r3, #1
 80078a8:	465a      	mov	r2, fp
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	f43f ae56 	beq.w	8007562 <_printf_float+0xb6>
 80078b6:	f108 0801 	add.w	r8, r8, #1
 80078ba:	45d0      	cmp	r8, sl
 80078bc:	dbf3      	blt.n	80078a6 <_printf_float+0x3fa>
 80078be:	464b      	mov	r3, r9
 80078c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80078c4:	e6df      	b.n	8007686 <_printf_float+0x1da>
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	f104 0b1a 	add.w	fp, r4, #26
 80078ce:	e7f4      	b.n	80078ba <_printf_float+0x40e>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4642      	mov	r2, r8
 80078d4:	e7e1      	b.n	800789a <_printf_float+0x3ee>
 80078d6:	2301      	movs	r3, #1
 80078d8:	464a      	mov	r2, r9
 80078da:	4631      	mov	r1, r6
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	f43f ae3e 	beq.w	8007562 <_printf_float+0xb6>
 80078e6:	f108 0801 	add.w	r8, r8, #1
 80078ea:	68e3      	ldr	r3, [r4, #12]
 80078ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078ee:	1a5b      	subs	r3, r3, r1
 80078f0:	4543      	cmp	r3, r8
 80078f2:	dcf0      	bgt.n	80078d6 <_printf_float+0x42a>
 80078f4:	e6fc      	b.n	80076f0 <_printf_float+0x244>
 80078f6:	f04f 0800 	mov.w	r8, #0
 80078fa:	f104 0919 	add.w	r9, r4, #25
 80078fe:	e7f4      	b.n	80078ea <_printf_float+0x43e>

08007900 <_printf_common>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	4616      	mov	r6, r2
 8007906:	4698      	mov	r8, r3
 8007908:	688a      	ldr	r2, [r1, #8]
 800790a:	690b      	ldr	r3, [r1, #16]
 800790c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007910:	4293      	cmp	r3, r2
 8007912:	bfb8      	it	lt
 8007914:	4613      	movlt	r3, r2
 8007916:	6033      	str	r3, [r6, #0]
 8007918:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800791c:	4607      	mov	r7, r0
 800791e:	460c      	mov	r4, r1
 8007920:	b10a      	cbz	r2, 8007926 <_printf_common+0x26>
 8007922:	3301      	adds	r3, #1
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	0699      	lsls	r1, r3, #26
 800792a:	bf42      	ittt	mi
 800792c:	6833      	ldrmi	r3, [r6, #0]
 800792e:	3302      	addmi	r3, #2
 8007930:	6033      	strmi	r3, [r6, #0]
 8007932:	6825      	ldr	r5, [r4, #0]
 8007934:	f015 0506 	ands.w	r5, r5, #6
 8007938:	d106      	bne.n	8007948 <_printf_common+0x48>
 800793a:	f104 0a19 	add.w	sl, r4, #25
 800793e:	68e3      	ldr	r3, [r4, #12]
 8007940:	6832      	ldr	r2, [r6, #0]
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	42ab      	cmp	r3, r5
 8007946:	dc26      	bgt.n	8007996 <_printf_common+0x96>
 8007948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800794c:	6822      	ldr	r2, [r4, #0]
 800794e:	3b00      	subs	r3, #0
 8007950:	bf18      	it	ne
 8007952:	2301      	movne	r3, #1
 8007954:	0692      	lsls	r2, r2, #26
 8007956:	d42b      	bmi.n	80079b0 <_printf_common+0xb0>
 8007958:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800795c:	4641      	mov	r1, r8
 800795e:	4638      	mov	r0, r7
 8007960:	47c8      	blx	r9
 8007962:	3001      	adds	r0, #1
 8007964:	d01e      	beq.n	80079a4 <_printf_common+0xa4>
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	6922      	ldr	r2, [r4, #16]
 800796a:	f003 0306 	and.w	r3, r3, #6
 800796e:	2b04      	cmp	r3, #4
 8007970:	bf02      	ittt	eq
 8007972:	68e5      	ldreq	r5, [r4, #12]
 8007974:	6833      	ldreq	r3, [r6, #0]
 8007976:	1aed      	subeq	r5, r5, r3
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	bf0c      	ite	eq
 800797c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007980:	2500      	movne	r5, #0
 8007982:	4293      	cmp	r3, r2
 8007984:	bfc4      	itt	gt
 8007986:	1a9b      	subgt	r3, r3, r2
 8007988:	18ed      	addgt	r5, r5, r3
 800798a:	2600      	movs	r6, #0
 800798c:	341a      	adds	r4, #26
 800798e:	42b5      	cmp	r5, r6
 8007990:	d11a      	bne.n	80079c8 <_printf_common+0xc8>
 8007992:	2000      	movs	r0, #0
 8007994:	e008      	b.n	80079a8 <_printf_common+0xa8>
 8007996:	2301      	movs	r3, #1
 8007998:	4652      	mov	r2, sl
 800799a:	4641      	mov	r1, r8
 800799c:	4638      	mov	r0, r7
 800799e:	47c8      	blx	r9
 80079a0:	3001      	adds	r0, #1
 80079a2:	d103      	bne.n	80079ac <_printf_common+0xac>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	3501      	adds	r5, #1
 80079ae:	e7c6      	b.n	800793e <_printf_common+0x3e>
 80079b0:	18e1      	adds	r1, r4, r3
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	2030      	movs	r0, #48	@ 0x30
 80079b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079ba:	4422      	add	r2, r4
 80079bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079c4:	3302      	adds	r3, #2
 80079c6:	e7c7      	b.n	8007958 <_printf_common+0x58>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4622      	mov	r2, r4
 80079cc:	4641      	mov	r1, r8
 80079ce:	4638      	mov	r0, r7
 80079d0:	47c8      	blx	r9
 80079d2:	3001      	adds	r0, #1
 80079d4:	d0e6      	beq.n	80079a4 <_printf_common+0xa4>
 80079d6:	3601      	adds	r6, #1
 80079d8:	e7d9      	b.n	800798e <_printf_common+0x8e>
	...

080079dc <_printf_i>:
 80079dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	7e0f      	ldrb	r7, [r1, #24]
 80079e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079e4:	2f78      	cmp	r7, #120	@ 0x78
 80079e6:	4691      	mov	r9, r2
 80079e8:	4680      	mov	r8, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	469a      	mov	sl, r3
 80079ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079f2:	d807      	bhi.n	8007a04 <_printf_i+0x28>
 80079f4:	2f62      	cmp	r7, #98	@ 0x62
 80079f6:	d80a      	bhi.n	8007a0e <_printf_i+0x32>
 80079f8:	2f00      	cmp	r7, #0
 80079fa:	f000 80d2 	beq.w	8007ba2 <_printf_i+0x1c6>
 80079fe:	2f58      	cmp	r7, #88	@ 0x58
 8007a00:	f000 80b9 	beq.w	8007b76 <_printf_i+0x19a>
 8007a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a0c:	e03a      	b.n	8007a84 <_printf_i+0xa8>
 8007a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a12:	2b15      	cmp	r3, #21
 8007a14:	d8f6      	bhi.n	8007a04 <_printf_i+0x28>
 8007a16:	a101      	add	r1, pc, #4	@ (adr r1, 8007a1c <_printf_i+0x40>)
 8007a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a89 	.word	0x08007a89
 8007a24:	08007a05 	.word	0x08007a05
 8007a28:	08007a05 	.word	0x08007a05
 8007a2c:	08007a05 	.word	0x08007a05
 8007a30:	08007a05 	.word	0x08007a05
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	08007a05 	.word	0x08007a05
 8007a3c:	08007a05 	.word	0x08007a05
 8007a40:	08007a05 	.word	0x08007a05
 8007a44:	08007a05 	.word	0x08007a05
 8007a48:	08007b89 	.word	0x08007b89
 8007a4c:	08007ab3 	.word	0x08007ab3
 8007a50:	08007b43 	.word	0x08007b43
 8007a54:	08007a05 	.word	0x08007a05
 8007a58:	08007a05 	.word	0x08007a05
 8007a5c:	08007bab 	.word	0x08007bab
 8007a60:	08007a05 	.word	0x08007a05
 8007a64:	08007ab3 	.word	0x08007ab3
 8007a68:	08007a05 	.word	0x08007a05
 8007a6c:	08007a05 	.word	0x08007a05
 8007a70:	08007b4b 	.word	0x08007b4b
 8007a74:	6833      	ldr	r3, [r6, #0]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6032      	str	r2, [r6, #0]
 8007a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a84:	2301      	movs	r3, #1
 8007a86:	e09d      	b.n	8007bc4 <_printf_i+0x1e8>
 8007a88:	6833      	ldr	r3, [r6, #0]
 8007a8a:	6820      	ldr	r0, [r4, #0]
 8007a8c:	1d19      	adds	r1, r3, #4
 8007a8e:	6031      	str	r1, [r6, #0]
 8007a90:	0606      	lsls	r6, r0, #24
 8007a92:	d501      	bpl.n	8007a98 <_printf_i+0xbc>
 8007a94:	681d      	ldr	r5, [r3, #0]
 8007a96:	e003      	b.n	8007aa0 <_printf_i+0xc4>
 8007a98:	0645      	lsls	r5, r0, #25
 8007a9a:	d5fb      	bpl.n	8007a94 <_printf_i+0xb8>
 8007a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	da03      	bge.n	8007aac <_printf_i+0xd0>
 8007aa4:	232d      	movs	r3, #45	@ 0x2d
 8007aa6:	426d      	negs	r5, r5
 8007aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aac:	4859      	ldr	r0, [pc, #356]	@ (8007c14 <_printf_i+0x238>)
 8007aae:	230a      	movs	r3, #10
 8007ab0:	e011      	b.n	8007ad6 <_printf_i+0xfa>
 8007ab2:	6821      	ldr	r1, [r4, #0]
 8007ab4:	6833      	ldr	r3, [r6, #0]
 8007ab6:	0608      	lsls	r0, r1, #24
 8007ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007abc:	d402      	bmi.n	8007ac4 <_printf_i+0xe8>
 8007abe:	0649      	lsls	r1, r1, #25
 8007ac0:	bf48      	it	mi
 8007ac2:	b2ad      	uxthmi	r5, r5
 8007ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ac6:	4853      	ldr	r0, [pc, #332]	@ (8007c14 <_printf_i+0x238>)
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	bf14      	ite	ne
 8007acc:	230a      	movne	r3, #10
 8007ace:	2308      	moveq	r3, #8
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ad6:	6866      	ldr	r6, [r4, #4]
 8007ad8:	60a6      	str	r6, [r4, #8]
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	bfa2      	ittt	ge
 8007ade:	6821      	ldrge	r1, [r4, #0]
 8007ae0:	f021 0104 	bicge.w	r1, r1, #4
 8007ae4:	6021      	strge	r1, [r4, #0]
 8007ae6:	b90d      	cbnz	r5, 8007aec <_printf_i+0x110>
 8007ae8:	2e00      	cmp	r6, #0
 8007aea:	d04b      	beq.n	8007b84 <_printf_i+0x1a8>
 8007aec:	4616      	mov	r6, r2
 8007aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8007af2:	fb03 5711 	mls	r7, r3, r1, r5
 8007af6:	5dc7      	ldrb	r7, [r0, r7]
 8007af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007afc:	462f      	mov	r7, r5
 8007afe:	42bb      	cmp	r3, r7
 8007b00:	460d      	mov	r5, r1
 8007b02:	d9f4      	bls.n	8007aee <_printf_i+0x112>
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d10b      	bne.n	8007b20 <_printf_i+0x144>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07df      	lsls	r7, r3, #31
 8007b0c:	d508      	bpl.n	8007b20 <_printf_i+0x144>
 8007b0e:	6923      	ldr	r3, [r4, #16]
 8007b10:	6861      	ldr	r1, [r4, #4]
 8007b12:	4299      	cmp	r1, r3
 8007b14:	bfde      	ittt	le
 8007b16:	2330      	movle	r3, #48	@ 0x30
 8007b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b20:	1b92      	subs	r2, r2, r6
 8007b22:	6122      	str	r2, [r4, #16]
 8007b24:	f8cd a000 	str.w	sl, [sp]
 8007b28:	464b      	mov	r3, r9
 8007b2a:	aa03      	add	r2, sp, #12
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f7ff fee6 	bl	8007900 <_printf_common>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d14a      	bne.n	8007bce <_printf_i+0x1f2>
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	b004      	add	sp, #16
 8007b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	f043 0320 	orr.w	r3, r3, #32
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	4833      	ldr	r0, [pc, #204]	@ (8007c18 <_printf_i+0x23c>)
 8007b4c:	2778      	movs	r7, #120	@ 0x78
 8007b4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	6831      	ldr	r1, [r6, #0]
 8007b56:	061f      	lsls	r7, r3, #24
 8007b58:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b5c:	d402      	bmi.n	8007b64 <_printf_i+0x188>
 8007b5e:	065f      	lsls	r7, r3, #25
 8007b60:	bf48      	it	mi
 8007b62:	b2ad      	uxthmi	r5, r5
 8007b64:	6031      	str	r1, [r6, #0]
 8007b66:	07d9      	lsls	r1, r3, #31
 8007b68:	bf44      	itt	mi
 8007b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b6e:	6023      	strmi	r3, [r4, #0]
 8007b70:	b11d      	cbz	r5, 8007b7a <_printf_i+0x19e>
 8007b72:	2310      	movs	r3, #16
 8007b74:	e7ac      	b.n	8007ad0 <_printf_i+0xf4>
 8007b76:	4827      	ldr	r0, [pc, #156]	@ (8007c14 <_printf_i+0x238>)
 8007b78:	e7e9      	b.n	8007b4e <_printf_i+0x172>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	f023 0320 	bic.w	r3, r3, #32
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	e7f6      	b.n	8007b72 <_printf_i+0x196>
 8007b84:	4616      	mov	r6, r2
 8007b86:	e7bd      	b.n	8007b04 <_printf_i+0x128>
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	6825      	ldr	r5, [r4, #0]
 8007b8c:	6961      	ldr	r1, [r4, #20]
 8007b8e:	1d18      	adds	r0, r3, #4
 8007b90:	6030      	str	r0, [r6, #0]
 8007b92:	062e      	lsls	r6, r5, #24
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	d501      	bpl.n	8007b9c <_printf_i+0x1c0>
 8007b98:	6019      	str	r1, [r3, #0]
 8007b9a:	e002      	b.n	8007ba2 <_printf_i+0x1c6>
 8007b9c:	0668      	lsls	r0, r5, #25
 8007b9e:	d5fb      	bpl.n	8007b98 <_printf_i+0x1bc>
 8007ba0:	8019      	strh	r1, [r3, #0]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	4616      	mov	r6, r2
 8007ba8:	e7bc      	b.n	8007b24 <_printf_i+0x148>
 8007baa:	6833      	ldr	r3, [r6, #0]
 8007bac:	1d1a      	adds	r2, r3, #4
 8007bae:	6032      	str	r2, [r6, #0]
 8007bb0:	681e      	ldr	r6, [r3, #0]
 8007bb2:	6862      	ldr	r2, [r4, #4]
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7f8 fb0a 	bl	80001d0 <memchr>
 8007bbc:	b108      	cbz	r0, 8007bc2 <_printf_i+0x1e6>
 8007bbe:	1b80      	subs	r0, r0, r6
 8007bc0:	6060      	str	r0, [r4, #4]
 8007bc2:	6863      	ldr	r3, [r4, #4]
 8007bc4:	6123      	str	r3, [r4, #16]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bcc:	e7aa      	b.n	8007b24 <_printf_i+0x148>
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	4632      	mov	r2, r6
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	47d0      	blx	sl
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d0ad      	beq.n	8007b38 <_printf_i+0x15c>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	079b      	lsls	r3, r3, #30
 8007be0:	d413      	bmi.n	8007c0a <_printf_i+0x22e>
 8007be2:	68e0      	ldr	r0, [r4, #12]
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	4298      	cmp	r0, r3
 8007be8:	bfb8      	it	lt
 8007bea:	4618      	movlt	r0, r3
 8007bec:	e7a6      	b.n	8007b3c <_printf_i+0x160>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	47d0      	blx	sl
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d09d      	beq.n	8007b38 <_printf_i+0x15c>
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	9903      	ldr	r1, [sp, #12]
 8007c02:	1a5b      	subs	r3, r3, r1
 8007c04:	42ab      	cmp	r3, r5
 8007c06:	dcf2      	bgt.n	8007bee <_printf_i+0x212>
 8007c08:	e7eb      	b.n	8007be2 <_printf_i+0x206>
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	f104 0619 	add.w	r6, r4, #25
 8007c10:	e7f5      	b.n	8007bfe <_printf_i+0x222>
 8007c12:	bf00      	nop
 8007c14:	0800baca 	.word	0x0800baca
 8007c18:	0800badb 	.word	0x0800badb

08007c1c <_scanf_float>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	b087      	sub	sp, #28
 8007c22:	4617      	mov	r7, r2
 8007c24:	9303      	str	r3, [sp, #12]
 8007c26:	688b      	ldr	r3, [r1, #8]
 8007c28:	1e5a      	subs	r2, r3, #1
 8007c2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007c2e:	bf81      	itttt	hi
 8007c30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007c34:	eb03 0b05 	addhi.w	fp, r3, r5
 8007c38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007c3c:	608b      	strhi	r3, [r1, #8]
 8007c3e:	680b      	ldr	r3, [r1, #0]
 8007c40:	460a      	mov	r2, r1
 8007c42:	f04f 0500 	mov.w	r5, #0
 8007c46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007c4a:	f842 3b1c 	str.w	r3, [r2], #28
 8007c4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c52:	4680      	mov	r8, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	bf98      	it	ls
 8007c58:	f04f 0b00 	movls.w	fp, #0
 8007c5c:	9201      	str	r2, [sp, #4]
 8007c5e:	4616      	mov	r6, r2
 8007c60:	46aa      	mov	sl, r5
 8007c62:	46a9      	mov	r9, r5
 8007c64:	9502      	str	r5, [sp, #8]
 8007c66:	68a2      	ldr	r2, [r4, #8]
 8007c68:	b152      	cbz	r2, 8007c80 <_scanf_float+0x64>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007c70:	d864      	bhi.n	8007d3c <_scanf_float+0x120>
 8007c72:	2b40      	cmp	r3, #64	@ 0x40
 8007c74:	d83c      	bhi.n	8007cf0 <_scanf_float+0xd4>
 8007c76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007c7a:	b2c8      	uxtb	r0, r1
 8007c7c:	280e      	cmp	r0, #14
 8007c7e:	d93a      	bls.n	8007cf6 <_scanf_float+0xda>
 8007c80:	f1b9 0f00 	cmp.w	r9, #0
 8007c84:	d003      	beq.n	8007c8e <_scanf_float+0x72>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c92:	f1ba 0f01 	cmp.w	sl, #1
 8007c96:	f200 8117 	bhi.w	8007ec8 <_scanf_float+0x2ac>
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	429e      	cmp	r6, r3
 8007c9e:	f200 8108 	bhi.w	8007eb2 <_scanf_float+0x296>
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	b007      	add	sp, #28
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007cae:	2a0d      	cmp	r2, #13
 8007cb0:	d8e6      	bhi.n	8007c80 <_scanf_float+0x64>
 8007cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8007cb8 <_scanf_float+0x9c>)
 8007cb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007cb8:	08007dff 	.word	0x08007dff
 8007cbc:	08007c81 	.word	0x08007c81
 8007cc0:	08007c81 	.word	0x08007c81
 8007cc4:	08007c81 	.word	0x08007c81
 8007cc8:	08007e5f 	.word	0x08007e5f
 8007ccc:	08007e37 	.word	0x08007e37
 8007cd0:	08007c81 	.word	0x08007c81
 8007cd4:	08007c81 	.word	0x08007c81
 8007cd8:	08007e0d 	.word	0x08007e0d
 8007cdc:	08007c81 	.word	0x08007c81
 8007ce0:	08007c81 	.word	0x08007c81
 8007ce4:	08007c81 	.word	0x08007c81
 8007ce8:	08007c81 	.word	0x08007c81
 8007cec:	08007dc5 	.word	0x08007dc5
 8007cf0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007cf4:	e7db      	b.n	8007cae <_scanf_float+0x92>
 8007cf6:	290e      	cmp	r1, #14
 8007cf8:	d8c2      	bhi.n	8007c80 <_scanf_float+0x64>
 8007cfa:	a001      	add	r0, pc, #4	@ (adr r0, 8007d00 <_scanf_float+0xe4>)
 8007cfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d00:	08007db5 	.word	0x08007db5
 8007d04:	08007c81 	.word	0x08007c81
 8007d08:	08007db5 	.word	0x08007db5
 8007d0c:	08007e4b 	.word	0x08007e4b
 8007d10:	08007c81 	.word	0x08007c81
 8007d14:	08007d5d 	.word	0x08007d5d
 8007d18:	08007d9b 	.word	0x08007d9b
 8007d1c:	08007d9b 	.word	0x08007d9b
 8007d20:	08007d9b 	.word	0x08007d9b
 8007d24:	08007d9b 	.word	0x08007d9b
 8007d28:	08007d9b 	.word	0x08007d9b
 8007d2c:	08007d9b 	.word	0x08007d9b
 8007d30:	08007d9b 	.word	0x08007d9b
 8007d34:	08007d9b 	.word	0x08007d9b
 8007d38:	08007d9b 	.word	0x08007d9b
 8007d3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d3e:	d809      	bhi.n	8007d54 <_scanf_float+0x138>
 8007d40:	2b60      	cmp	r3, #96	@ 0x60
 8007d42:	d8b2      	bhi.n	8007caa <_scanf_float+0x8e>
 8007d44:	2b54      	cmp	r3, #84	@ 0x54
 8007d46:	d07b      	beq.n	8007e40 <_scanf_float+0x224>
 8007d48:	2b59      	cmp	r3, #89	@ 0x59
 8007d4a:	d199      	bne.n	8007c80 <_scanf_float+0x64>
 8007d4c:	2d07      	cmp	r5, #7
 8007d4e:	d197      	bne.n	8007c80 <_scanf_float+0x64>
 8007d50:	2508      	movs	r5, #8
 8007d52:	e02c      	b.n	8007dae <_scanf_float+0x192>
 8007d54:	2b74      	cmp	r3, #116	@ 0x74
 8007d56:	d073      	beq.n	8007e40 <_scanf_float+0x224>
 8007d58:	2b79      	cmp	r3, #121	@ 0x79
 8007d5a:	e7f6      	b.n	8007d4a <_scanf_float+0x12e>
 8007d5c:	6821      	ldr	r1, [r4, #0]
 8007d5e:	05c8      	lsls	r0, r1, #23
 8007d60:	d51b      	bpl.n	8007d9a <_scanf_float+0x17e>
 8007d62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007d66:	6021      	str	r1, [r4, #0]
 8007d68:	f109 0901 	add.w	r9, r9, #1
 8007d6c:	f1bb 0f00 	cmp.w	fp, #0
 8007d70:	d003      	beq.n	8007d7a <_scanf_float+0x15e>
 8007d72:	3201      	adds	r2, #1
 8007d74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d78:	60a2      	str	r2, [r4, #8]
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60a3      	str	r3, [r4, #8]
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	3301      	adds	r3, #1
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	f340 8087 	ble.w	8007ea0 <_scanf_float+0x284>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	e765      	b.n	8007c66 <_scanf_float+0x4a>
 8007d9a:	eb1a 0105 	adds.w	r1, sl, r5
 8007d9e:	f47f af6f 	bne.w	8007c80 <_scanf_float+0x64>
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007da8:	6022      	str	r2, [r4, #0]
 8007daa:	460d      	mov	r5, r1
 8007dac:	468a      	mov	sl, r1
 8007dae:	f806 3b01 	strb.w	r3, [r6], #1
 8007db2:	e7e2      	b.n	8007d7a <_scanf_float+0x15e>
 8007db4:	6822      	ldr	r2, [r4, #0]
 8007db6:	0610      	lsls	r0, r2, #24
 8007db8:	f57f af62 	bpl.w	8007c80 <_scanf_float+0x64>
 8007dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007dc0:	6022      	str	r2, [r4, #0]
 8007dc2:	e7f4      	b.n	8007dae <_scanf_float+0x192>
 8007dc4:	f1ba 0f00 	cmp.w	sl, #0
 8007dc8:	d10e      	bne.n	8007de8 <_scanf_float+0x1cc>
 8007dca:	f1b9 0f00 	cmp.w	r9, #0
 8007dce:	d10e      	bne.n	8007dee <_scanf_float+0x1d2>
 8007dd0:	6822      	ldr	r2, [r4, #0]
 8007dd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007dd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007dda:	d108      	bne.n	8007dee <_scanf_float+0x1d2>
 8007ddc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007de0:	6022      	str	r2, [r4, #0]
 8007de2:	f04f 0a01 	mov.w	sl, #1
 8007de6:	e7e2      	b.n	8007dae <_scanf_float+0x192>
 8007de8:	f1ba 0f02 	cmp.w	sl, #2
 8007dec:	d055      	beq.n	8007e9a <_scanf_float+0x27e>
 8007dee:	2d01      	cmp	r5, #1
 8007df0:	d002      	beq.n	8007df8 <_scanf_float+0x1dc>
 8007df2:	2d04      	cmp	r5, #4
 8007df4:	f47f af44 	bne.w	8007c80 <_scanf_float+0x64>
 8007df8:	3501      	adds	r5, #1
 8007dfa:	b2ed      	uxtb	r5, r5
 8007dfc:	e7d7      	b.n	8007dae <_scanf_float+0x192>
 8007dfe:	f1ba 0f01 	cmp.w	sl, #1
 8007e02:	f47f af3d 	bne.w	8007c80 <_scanf_float+0x64>
 8007e06:	f04f 0a02 	mov.w	sl, #2
 8007e0a:	e7d0      	b.n	8007dae <_scanf_float+0x192>
 8007e0c:	b97d      	cbnz	r5, 8007e2e <_scanf_float+0x212>
 8007e0e:	f1b9 0f00 	cmp.w	r9, #0
 8007e12:	f47f af38 	bne.w	8007c86 <_scanf_float+0x6a>
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e20:	f040 8108 	bne.w	8008034 <_scanf_float+0x418>
 8007e24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e28:	6022      	str	r2, [r4, #0]
 8007e2a:	2501      	movs	r5, #1
 8007e2c:	e7bf      	b.n	8007dae <_scanf_float+0x192>
 8007e2e:	2d03      	cmp	r5, #3
 8007e30:	d0e2      	beq.n	8007df8 <_scanf_float+0x1dc>
 8007e32:	2d05      	cmp	r5, #5
 8007e34:	e7de      	b.n	8007df4 <_scanf_float+0x1d8>
 8007e36:	2d02      	cmp	r5, #2
 8007e38:	f47f af22 	bne.w	8007c80 <_scanf_float+0x64>
 8007e3c:	2503      	movs	r5, #3
 8007e3e:	e7b6      	b.n	8007dae <_scanf_float+0x192>
 8007e40:	2d06      	cmp	r5, #6
 8007e42:	f47f af1d 	bne.w	8007c80 <_scanf_float+0x64>
 8007e46:	2507      	movs	r5, #7
 8007e48:	e7b1      	b.n	8007dae <_scanf_float+0x192>
 8007e4a:	6822      	ldr	r2, [r4, #0]
 8007e4c:	0591      	lsls	r1, r2, #22
 8007e4e:	f57f af17 	bpl.w	8007c80 <_scanf_float+0x64>
 8007e52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e5c:	e7a7      	b.n	8007dae <_scanf_float+0x192>
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007e64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007e68:	d006      	beq.n	8007e78 <_scanf_float+0x25c>
 8007e6a:	0550      	lsls	r0, r2, #21
 8007e6c:	f57f af08 	bpl.w	8007c80 <_scanf_float+0x64>
 8007e70:	f1b9 0f00 	cmp.w	r9, #0
 8007e74:	f000 80de 	beq.w	8008034 <_scanf_float+0x418>
 8007e78:	0591      	lsls	r1, r2, #22
 8007e7a:	bf58      	it	pl
 8007e7c:	9902      	ldrpl	r1, [sp, #8]
 8007e7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e82:	bf58      	it	pl
 8007e84:	eba9 0101 	subpl.w	r1, r9, r1
 8007e88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007e8c:	bf58      	it	pl
 8007e8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	f04f 0900 	mov.w	r9, #0
 8007e98:	e789      	b.n	8007dae <_scanf_float+0x192>
 8007e9a:	f04f 0a03 	mov.w	sl, #3
 8007e9e:	e786      	b.n	8007dae <_scanf_float+0x192>
 8007ea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	4798      	blx	r3
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f43f aedb 	beq.w	8007c66 <_scanf_float+0x4a>
 8007eb0:	e6e6      	b.n	8007c80 <_scanf_float+0x64>
 8007eb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007eb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007eba:	463a      	mov	r2, r7
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4798      	blx	r3
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	e6e8      	b.n	8007c9a <_scanf_float+0x7e>
 8007ec8:	1e6b      	subs	r3, r5, #1
 8007eca:	2b06      	cmp	r3, #6
 8007ecc:	d824      	bhi.n	8007f18 <_scanf_float+0x2fc>
 8007ece:	2d02      	cmp	r5, #2
 8007ed0:	d836      	bhi.n	8007f40 <_scanf_float+0x324>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	429e      	cmp	r6, r3
 8007ed6:	f67f aee4 	bls.w	8007ca2 <_scanf_float+0x86>
 8007eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ede:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ee2:	463a      	mov	r2, r7
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	4798      	blx	r3
 8007ee8:	6923      	ldr	r3, [r4, #16]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6123      	str	r3, [r4, #16]
 8007eee:	e7f0      	b.n	8007ed2 <_scanf_float+0x2b6>
 8007ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ef4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007ef8:	463a      	mov	r2, r7
 8007efa:	4640      	mov	r0, r8
 8007efc:	4798      	blx	r3
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	6123      	str	r3, [r4, #16]
 8007f04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f08:	fa5f fa8a 	uxtb.w	sl, sl
 8007f0c:	f1ba 0f02 	cmp.w	sl, #2
 8007f10:	d1ee      	bne.n	8007ef0 <_scanf_float+0x2d4>
 8007f12:	3d03      	subs	r5, #3
 8007f14:	b2ed      	uxtb	r5, r5
 8007f16:	1b76      	subs	r6, r6, r5
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	05da      	lsls	r2, r3, #23
 8007f1c:	d530      	bpl.n	8007f80 <_scanf_float+0x364>
 8007f1e:	055b      	lsls	r3, r3, #21
 8007f20:	d511      	bpl.n	8007f46 <_scanf_float+0x32a>
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	429e      	cmp	r6, r3
 8007f26:	f67f aebc 	bls.w	8007ca2 <_scanf_float+0x86>
 8007f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f32:	463a      	mov	r2, r7
 8007f34:	4640      	mov	r0, r8
 8007f36:	4798      	blx	r3
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	e7f0      	b.n	8007f22 <_scanf_float+0x306>
 8007f40:	46aa      	mov	sl, r5
 8007f42:	46b3      	mov	fp, r6
 8007f44:	e7de      	b.n	8007f04 <_scanf_float+0x2e8>
 8007f46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	2965      	cmp	r1, #101	@ 0x65
 8007f4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f52:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	d00c      	beq.n	8007f74 <_scanf_float+0x358>
 8007f5a:	2945      	cmp	r1, #69	@ 0x45
 8007f5c:	d00a      	beq.n	8007f74 <_scanf_float+0x358>
 8007f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f62:	463a      	mov	r2, r7
 8007f64:	4640      	mov	r0, r8
 8007f66:	4798      	blx	r3
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	1eb5      	subs	r5, r6, #2
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f78:	463a      	mov	r2, r7
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4798      	blx	r3
 8007f7e:	462e      	mov	r6, r5
 8007f80:	6822      	ldr	r2, [r4, #0]
 8007f82:	f012 0210 	ands.w	r2, r2, #16
 8007f86:	d001      	beq.n	8007f8c <_scanf_float+0x370>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e68b      	b.n	8007ca4 <_scanf_float+0x88>
 8007f8c:	7032      	strb	r2, [r6, #0]
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f98:	d11c      	bne.n	8007fd4 <_scanf_float+0x3b8>
 8007f9a:	9b02      	ldr	r3, [sp, #8]
 8007f9c:	454b      	cmp	r3, r9
 8007f9e:	eba3 0209 	sub.w	r2, r3, r9
 8007fa2:	d123      	bne.n	8007fec <_scanf_float+0x3d0>
 8007fa4:	9901      	ldr	r1, [sp, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	4640      	mov	r0, r8
 8007faa:	f002 fbf9 	bl	800a7a0 <_strtod_r>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	6821      	ldr	r1, [r4, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f011 0f02 	tst.w	r1, #2
 8007fb8:	ec57 6b10 	vmov	r6, r7, d0
 8007fbc:	f103 0204 	add.w	r2, r3, #4
 8007fc0:	d01f      	beq.n	8008002 <_scanf_float+0x3e6>
 8007fc2:	9903      	ldr	r1, [sp, #12]
 8007fc4:	600a      	str	r2, [r1, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	e9c3 6700 	strd	r6, r7, [r3]
 8007fcc:	68e3      	ldr	r3, [r4, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60e3      	str	r3, [r4, #12]
 8007fd2:	e7d9      	b.n	8007f88 <_scanf_float+0x36c>
 8007fd4:	9b04      	ldr	r3, [sp, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0e4      	beq.n	8007fa4 <_scanf_float+0x388>
 8007fda:	9905      	ldr	r1, [sp, #20]
 8007fdc:	230a      	movs	r3, #10
 8007fde:	3101      	adds	r1, #1
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	f002 fc5d 	bl	800a8a0 <_strtol_r>
 8007fe6:	9b04      	ldr	r3, [sp, #16]
 8007fe8:	9e05      	ldr	r6, [sp, #20]
 8007fea:	1ac2      	subs	r2, r0, r3
 8007fec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007ff0:	429e      	cmp	r6, r3
 8007ff2:	bf28      	it	cs
 8007ff4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007ff8:	4910      	ldr	r1, [pc, #64]	@ (800803c <_scanf_float+0x420>)
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f000 f8e4 	bl	80081c8 <siprintf>
 8008000:	e7d0      	b.n	8007fa4 <_scanf_float+0x388>
 8008002:	f011 0f04 	tst.w	r1, #4
 8008006:	9903      	ldr	r1, [sp, #12]
 8008008:	600a      	str	r2, [r1, #0]
 800800a:	d1dc      	bne.n	8007fc6 <_scanf_float+0x3aa>
 800800c:	681d      	ldr	r5, [r3, #0]
 800800e:	4632      	mov	r2, r6
 8008010:	463b      	mov	r3, r7
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 fd89 	bl	8000b2c <__aeabi_dcmpun>
 800801a:	b128      	cbz	r0, 8008028 <_scanf_float+0x40c>
 800801c:	4808      	ldr	r0, [pc, #32]	@ (8008040 <_scanf_float+0x424>)
 800801e:	f000 f9b7 	bl	8008390 <nanf>
 8008022:	ed85 0a00 	vstr	s0, [r5]
 8008026:	e7d1      	b.n	8007fcc <_scanf_float+0x3b0>
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 fddc 	bl	8000be8 <__aeabi_d2f>
 8008030:	6028      	str	r0, [r5, #0]
 8008032:	e7cb      	b.n	8007fcc <_scanf_float+0x3b0>
 8008034:	f04f 0900 	mov.w	r9, #0
 8008038:	e629      	b.n	8007c8e <_scanf_float+0x72>
 800803a:	bf00      	nop
 800803c:	0800baec 	.word	0x0800baec
 8008040:	0800be85 	.word	0x0800be85

08008044 <std>:
 8008044:	2300      	movs	r3, #0
 8008046:	b510      	push	{r4, lr}
 8008048:	4604      	mov	r4, r0
 800804a:	e9c0 3300 	strd	r3, r3, [r0]
 800804e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008052:	6083      	str	r3, [r0, #8]
 8008054:	8181      	strh	r1, [r0, #12]
 8008056:	6643      	str	r3, [r0, #100]	@ 0x64
 8008058:	81c2      	strh	r2, [r0, #14]
 800805a:	6183      	str	r3, [r0, #24]
 800805c:	4619      	mov	r1, r3
 800805e:	2208      	movs	r2, #8
 8008060:	305c      	adds	r0, #92	@ 0x5c
 8008062:	f000 f914 	bl	800828e <memset>
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <std+0x58>)
 8008068:	6263      	str	r3, [r4, #36]	@ 0x24
 800806a:	4b0d      	ldr	r3, [pc, #52]	@ (80080a0 <std+0x5c>)
 800806c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800806e:	4b0d      	ldr	r3, [pc, #52]	@ (80080a4 <std+0x60>)
 8008070:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008072:	4b0d      	ldr	r3, [pc, #52]	@ (80080a8 <std+0x64>)
 8008074:	6323      	str	r3, [r4, #48]	@ 0x30
 8008076:	4b0d      	ldr	r3, [pc, #52]	@ (80080ac <std+0x68>)
 8008078:	6224      	str	r4, [r4, #32]
 800807a:	429c      	cmp	r4, r3
 800807c:	d006      	beq.n	800808c <std+0x48>
 800807e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008082:	4294      	cmp	r4, r2
 8008084:	d002      	beq.n	800808c <std+0x48>
 8008086:	33d0      	adds	r3, #208	@ 0xd0
 8008088:	429c      	cmp	r4, r3
 800808a:	d105      	bne.n	8008098 <std+0x54>
 800808c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008094:	f000 b978 	b.w	8008388 <__retarget_lock_init_recursive>
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop
 800809c:	08008209 	.word	0x08008209
 80080a0:	0800822b 	.word	0x0800822b
 80080a4:	08008263 	.word	0x08008263
 80080a8:	08008287 	.word	0x08008287
 80080ac:	2000075c 	.word	0x2000075c

080080b0 <stdio_exit_handler>:
 80080b0:	4a02      	ldr	r2, [pc, #8]	@ (80080bc <stdio_exit_handler+0xc>)
 80080b2:	4903      	ldr	r1, [pc, #12]	@ (80080c0 <stdio_exit_handler+0x10>)
 80080b4:	4803      	ldr	r0, [pc, #12]	@ (80080c4 <stdio_exit_handler+0x14>)
 80080b6:	f000 b869 	b.w	800818c <_fwalk_sglue>
 80080ba:	bf00      	nop
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	0800ac5d 	.word	0x0800ac5d
 80080c4:	2000001c 	.word	0x2000001c

080080c8 <cleanup_stdio>:
 80080c8:	6841      	ldr	r1, [r0, #4]
 80080ca:	4b0c      	ldr	r3, [pc, #48]	@ (80080fc <cleanup_stdio+0x34>)
 80080cc:	4299      	cmp	r1, r3
 80080ce:	b510      	push	{r4, lr}
 80080d0:	4604      	mov	r4, r0
 80080d2:	d001      	beq.n	80080d8 <cleanup_stdio+0x10>
 80080d4:	f002 fdc2 	bl	800ac5c <_fflush_r>
 80080d8:	68a1      	ldr	r1, [r4, #8]
 80080da:	4b09      	ldr	r3, [pc, #36]	@ (8008100 <cleanup_stdio+0x38>)
 80080dc:	4299      	cmp	r1, r3
 80080de:	d002      	beq.n	80080e6 <cleanup_stdio+0x1e>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f002 fdbb 	bl	800ac5c <_fflush_r>
 80080e6:	68e1      	ldr	r1, [r4, #12]
 80080e8:	4b06      	ldr	r3, [pc, #24]	@ (8008104 <cleanup_stdio+0x3c>)
 80080ea:	4299      	cmp	r1, r3
 80080ec:	d004      	beq.n	80080f8 <cleanup_stdio+0x30>
 80080ee:	4620      	mov	r0, r4
 80080f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f4:	f002 bdb2 	b.w	800ac5c <_fflush_r>
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	bf00      	nop
 80080fc:	2000075c 	.word	0x2000075c
 8008100:	200007c4 	.word	0x200007c4
 8008104:	2000082c 	.word	0x2000082c

08008108 <global_stdio_init.part.0>:
 8008108:	b510      	push	{r4, lr}
 800810a:	4b0b      	ldr	r3, [pc, #44]	@ (8008138 <global_stdio_init.part.0+0x30>)
 800810c:	4c0b      	ldr	r4, [pc, #44]	@ (800813c <global_stdio_init.part.0+0x34>)
 800810e:	4a0c      	ldr	r2, [pc, #48]	@ (8008140 <global_stdio_init.part.0+0x38>)
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	4620      	mov	r0, r4
 8008114:	2200      	movs	r2, #0
 8008116:	2104      	movs	r1, #4
 8008118:	f7ff ff94 	bl	8008044 <std>
 800811c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008120:	2201      	movs	r2, #1
 8008122:	2109      	movs	r1, #9
 8008124:	f7ff ff8e 	bl	8008044 <std>
 8008128:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800812c:	2202      	movs	r2, #2
 800812e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008132:	2112      	movs	r1, #18
 8008134:	f7ff bf86 	b.w	8008044 <std>
 8008138:	20000894 	.word	0x20000894
 800813c:	2000075c 	.word	0x2000075c
 8008140:	080080b1 	.word	0x080080b1

08008144 <__sfp_lock_acquire>:
 8008144:	4801      	ldr	r0, [pc, #4]	@ (800814c <__sfp_lock_acquire+0x8>)
 8008146:	f000 b920 	b.w	800838a <__retarget_lock_acquire_recursive>
 800814a:	bf00      	nop
 800814c:	2000089d 	.word	0x2000089d

08008150 <__sfp_lock_release>:
 8008150:	4801      	ldr	r0, [pc, #4]	@ (8008158 <__sfp_lock_release+0x8>)
 8008152:	f000 b91b 	b.w	800838c <__retarget_lock_release_recursive>
 8008156:	bf00      	nop
 8008158:	2000089d 	.word	0x2000089d

0800815c <__sinit>:
 800815c:	b510      	push	{r4, lr}
 800815e:	4604      	mov	r4, r0
 8008160:	f7ff fff0 	bl	8008144 <__sfp_lock_acquire>
 8008164:	6a23      	ldr	r3, [r4, #32]
 8008166:	b11b      	cbz	r3, 8008170 <__sinit+0x14>
 8008168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800816c:	f7ff bff0 	b.w	8008150 <__sfp_lock_release>
 8008170:	4b04      	ldr	r3, [pc, #16]	@ (8008184 <__sinit+0x28>)
 8008172:	6223      	str	r3, [r4, #32]
 8008174:	4b04      	ldr	r3, [pc, #16]	@ (8008188 <__sinit+0x2c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1f5      	bne.n	8008168 <__sinit+0xc>
 800817c:	f7ff ffc4 	bl	8008108 <global_stdio_init.part.0>
 8008180:	e7f2      	b.n	8008168 <__sinit+0xc>
 8008182:	bf00      	nop
 8008184:	080080c9 	.word	0x080080c9
 8008188:	20000894 	.word	0x20000894

0800818c <_fwalk_sglue>:
 800818c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008190:	4607      	mov	r7, r0
 8008192:	4688      	mov	r8, r1
 8008194:	4614      	mov	r4, r2
 8008196:	2600      	movs	r6, #0
 8008198:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800819c:	f1b9 0901 	subs.w	r9, r9, #1
 80081a0:	d505      	bpl.n	80081ae <_fwalk_sglue+0x22>
 80081a2:	6824      	ldr	r4, [r4, #0]
 80081a4:	2c00      	cmp	r4, #0
 80081a6:	d1f7      	bne.n	8008198 <_fwalk_sglue+0xc>
 80081a8:	4630      	mov	r0, r6
 80081aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d907      	bls.n	80081c4 <_fwalk_sglue+0x38>
 80081b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081b8:	3301      	adds	r3, #1
 80081ba:	d003      	beq.n	80081c4 <_fwalk_sglue+0x38>
 80081bc:	4629      	mov	r1, r5
 80081be:	4638      	mov	r0, r7
 80081c0:	47c0      	blx	r8
 80081c2:	4306      	orrs	r6, r0
 80081c4:	3568      	adds	r5, #104	@ 0x68
 80081c6:	e7e9      	b.n	800819c <_fwalk_sglue+0x10>

080081c8 <siprintf>:
 80081c8:	b40e      	push	{r1, r2, r3}
 80081ca:	b500      	push	{lr}
 80081cc:	b09c      	sub	sp, #112	@ 0x70
 80081ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80081d0:	9002      	str	r0, [sp, #8]
 80081d2:	9006      	str	r0, [sp, #24]
 80081d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081d8:	4809      	ldr	r0, [pc, #36]	@ (8008200 <siprintf+0x38>)
 80081da:	9107      	str	r1, [sp, #28]
 80081dc:	9104      	str	r1, [sp, #16]
 80081de:	4909      	ldr	r1, [pc, #36]	@ (8008204 <siprintf+0x3c>)
 80081e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e4:	9105      	str	r1, [sp, #20]
 80081e6:	6800      	ldr	r0, [r0, #0]
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	a902      	add	r1, sp, #8
 80081ec:	f002 fbb6 	bl	800a95c <_svfiprintf_r>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	b01c      	add	sp, #112	@ 0x70
 80081f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fc:	b003      	add	sp, #12
 80081fe:	4770      	bx	lr
 8008200:	20000018 	.word	0x20000018
 8008204:	ffff0208 	.word	0xffff0208

08008208 <__sread>:
 8008208:	b510      	push	{r4, lr}
 800820a:	460c      	mov	r4, r1
 800820c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008210:	f000 f86c 	bl	80082ec <_read_r>
 8008214:	2800      	cmp	r0, #0
 8008216:	bfab      	itete	ge
 8008218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800821a:	89a3      	ldrhlt	r3, [r4, #12]
 800821c:	181b      	addge	r3, r3, r0
 800821e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008222:	bfac      	ite	ge
 8008224:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008226:	81a3      	strhlt	r3, [r4, #12]
 8008228:	bd10      	pop	{r4, pc}

0800822a <__swrite>:
 800822a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822e:	461f      	mov	r7, r3
 8008230:	898b      	ldrh	r3, [r1, #12]
 8008232:	05db      	lsls	r3, r3, #23
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	4616      	mov	r6, r2
 800823a:	d505      	bpl.n	8008248 <__swrite+0x1e>
 800823c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008240:	2302      	movs	r3, #2
 8008242:	2200      	movs	r2, #0
 8008244:	f000 f840 	bl	80082c8 <_lseek_r>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800824e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	4632      	mov	r2, r6
 8008256:	463b      	mov	r3, r7
 8008258:	4628      	mov	r0, r5
 800825a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800825e:	f000 b857 	b.w	8008310 <_write_r>

08008262 <__sseek>:
 8008262:	b510      	push	{r4, lr}
 8008264:	460c      	mov	r4, r1
 8008266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826a:	f000 f82d 	bl	80082c8 <_lseek_r>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	bf15      	itete	ne
 8008274:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800827a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800827e:	81a3      	strheq	r3, [r4, #12]
 8008280:	bf18      	it	ne
 8008282:	81a3      	strhne	r3, [r4, #12]
 8008284:	bd10      	pop	{r4, pc}

08008286 <__sclose>:
 8008286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828a:	f000 b80d 	b.w	80082a8 <_close_r>

0800828e <memset>:
 800828e:	4402      	add	r2, r0
 8008290:	4603      	mov	r3, r0
 8008292:	4293      	cmp	r3, r2
 8008294:	d100      	bne.n	8008298 <memset+0xa>
 8008296:	4770      	bx	lr
 8008298:	f803 1b01 	strb.w	r1, [r3], #1
 800829c:	e7f9      	b.n	8008292 <memset+0x4>
	...

080082a0 <_localeconv_r>:
 80082a0:	4800      	ldr	r0, [pc, #0]	@ (80082a4 <_localeconv_r+0x4>)
 80082a2:	4770      	bx	lr
 80082a4:	20000158 	.word	0x20000158

080082a8 <_close_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d06      	ldr	r5, [pc, #24]	@ (80082c4 <_close_r+0x1c>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7fa fa0e 	bl	80026d4 <_close>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_close_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_close_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	20000898 	.word	0x20000898

080082c8 <_lseek_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d07      	ldr	r5, [pc, #28]	@ (80082e8 <_lseek_r+0x20>)
 80082cc:	4604      	mov	r4, r0
 80082ce:	4608      	mov	r0, r1
 80082d0:	4611      	mov	r1, r2
 80082d2:	2200      	movs	r2, #0
 80082d4:	602a      	str	r2, [r5, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	f7fa fa23 	bl	8002722 <_lseek>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_lseek_r+0x1e>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_lseek_r+0x1e>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20000898 	.word	0x20000898

080082ec <_read_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	@ (800830c <_read_r+0x20>)
 80082f0:	4604      	mov	r4, r0
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	2200      	movs	r2, #0
 80082f8:	602a      	str	r2, [r5, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f7fa f9b1 	bl	8002662 <_read>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_read_r+0x1e>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_read_r+0x1e>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20000898 	.word	0x20000898

08008310 <_write_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	@ (8008330 <_write_r+0x20>)
 8008314:	4604      	mov	r4, r0
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	2200      	movs	r2, #0
 800831c:	602a      	str	r2, [r5, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	f7fa f9bc 	bl	800269c <_write>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_write_r+0x1e>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_write_r+0x1e>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000898 	.word	0x20000898

08008334 <__errno>:
 8008334:	4b01      	ldr	r3, [pc, #4]	@ (800833c <__errno+0x8>)
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000018 	.word	0x20000018

08008340 <__libc_init_array>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	4d0d      	ldr	r5, [pc, #52]	@ (8008378 <__libc_init_array+0x38>)
 8008344:	4c0d      	ldr	r4, [pc, #52]	@ (800837c <__libc_init_array+0x3c>)
 8008346:	1b64      	subs	r4, r4, r5
 8008348:	10a4      	asrs	r4, r4, #2
 800834a:	2600      	movs	r6, #0
 800834c:	42a6      	cmp	r6, r4
 800834e:	d109      	bne.n	8008364 <__libc_init_array+0x24>
 8008350:	4d0b      	ldr	r5, [pc, #44]	@ (8008380 <__libc_init_array+0x40>)
 8008352:	4c0c      	ldr	r4, [pc, #48]	@ (8008384 <__libc_init_array+0x44>)
 8008354:	f003 fb72 	bl	800ba3c <_init>
 8008358:	1b64      	subs	r4, r4, r5
 800835a:	10a4      	asrs	r4, r4, #2
 800835c:	2600      	movs	r6, #0
 800835e:	42a6      	cmp	r6, r4
 8008360:	d105      	bne.n	800836e <__libc_init_array+0x2e>
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	f855 3b04 	ldr.w	r3, [r5], #4
 8008368:	4798      	blx	r3
 800836a:	3601      	adds	r6, #1
 800836c:	e7ee      	b.n	800834c <__libc_init_array+0xc>
 800836e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008372:	4798      	blx	r3
 8008374:	3601      	adds	r6, #1
 8008376:	e7f2      	b.n	800835e <__libc_init_array+0x1e>
 8008378:	0800bef0 	.word	0x0800bef0
 800837c:	0800bef0 	.word	0x0800bef0
 8008380:	0800bef0 	.word	0x0800bef0
 8008384:	0800bef4 	.word	0x0800bef4

08008388 <__retarget_lock_init_recursive>:
 8008388:	4770      	bx	lr

0800838a <__retarget_lock_acquire_recursive>:
 800838a:	4770      	bx	lr

0800838c <__retarget_lock_release_recursive>:
 800838c:	4770      	bx	lr
	...

08008390 <nanf>:
 8008390:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008398 <nanf+0x8>
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	7fc00000 	.word	0x7fc00000

0800839c <quorem>:
 800839c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	6903      	ldr	r3, [r0, #16]
 80083a2:	690c      	ldr	r4, [r1, #16]
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	4607      	mov	r7, r0
 80083a8:	db7e      	blt.n	80084a8 <quorem+0x10c>
 80083aa:	3c01      	subs	r4, #1
 80083ac:	f101 0814 	add.w	r8, r1, #20
 80083b0:	00a3      	lsls	r3, r4, #2
 80083b2:	f100 0514 	add.w	r5, r0, #20
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c6:	3301      	adds	r3, #1
 80083c8:	429a      	cmp	r2, r3
 80083ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80083d2:	d32e      	bcc.n	8008432 <quorem+0x96>
 80083d4:	f04f 0a00 	mov.w	sl, #0
 80083d8:	46c4      	mov	ip, r8
 80083da:	46ae      	mov	lr, r5
 80083dc:	46d3      	mov	fp, sl
 80083de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083e2:	b298      	uxth	r0, r3
 80083e4:	fb06 a000 	mla	r0, r6, r0, sl
 80083e8:	0c02      	lsrs	r2, r0, #16
 80083ea:	0c1b      	lsrs	r3, r3, #16
 80083ec:	fb06 2303 	mla	r3, r6, r3, r2
 80083f0:	f8de 2000 	ldr.w	r2, [lr]
 80083f4:	b280      	uxth	r0, r0
 80083f6:	b292      	uxth	r2, r2
 80083f8:	1a12      	subs	r2, r2, r0
 80083fa:	445a      	add	r2, fp
 80083fc:	f8de 0000 	ldr.w	r0, [lr]
 8008400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008404:	b29b      	uxth	r3, r3
 8008406:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800840a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800840e:	b292      	uxth	r2, r2
 8008410:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008414:	45e1      	cmp	r9, ip
 8008416:	f84e 2b04 	str.w	r2, [lr], #4
 800841a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800841e:	d2de      	bcs.n	80083de <quorem+0x42>
 8008420:	9b00      	ldr	r3, [sp, #0]
 8008422:	58eb      	ldr	r3, [r5, r3]
 8008424:	b92b      	cbnz	r3, 8008432 <quorem+0x96>
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	3b04      	subs	r3, #4
 800842a:	429d      	cmp	r5, r3
 800842c:	461a      	mov	r2, r3
 800842e:	d32f      	bcc.n	8008490 <quorem+0xf4>
 8008430:	613c      	str	r4, [r7, #16]
 8008432:	4638      	mov	r0, r7
 8008434:	f001 f9c4 	bl	80097c0 <__mcmp>
 8008438:	2800      	cmp	r0, #0
 800843a:	db25      	blt.n	8008488 <quorem+0xec>
 800843c:	4629      	mov	r1, r5
 800843e:	2000      	movs	r0, #0
 8008440:	f858 2b04 	ldr.w	r2, [r8], #4
 8008444:	f8d1 c000 	ldr.w	ip, [r1]
 8008448:	fa1f fe82 	uxth.w	lr, r2
 800844c:	fa1f f38c 	uxth.w	r3, ip
 8008450:	eba3 030e 	sub.w	r3, r3, lr
 8008454:	4403      	add	r3, r0
 8008456:	0c12      	lsrs	r2, r2, #16
 8008458:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800845c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008460:	b29b      	uxth	r3, r3
 8008462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008466:	45c1      	cmp	r9, r8
 8008468:	f841 3b04 	str.w	r3, [r1], #4
 800846c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008470:	d2e6      	bcs.n	8008440 <quorem+0xa4>
 8008472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800847a:	b922      	cbnz	r2, 8008486 <quorem+0xea>
 800847c:	3b04      	subs	r3, #4
 800847e:	429d      	cmp	r5, r3
 8008480:	461a      	mov	r2, r3
 8008482:	d30b      	bcc.n	800849c <quorem+0x100>
 8008484:	613c      	str	r4, [r7, #16]
 8008486:	3601      	adds	r6, #1
 8008488:	4630      	mov	r0, r6
 800848a:	b003      	add	sp, #12
 800848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	3b04      	subs	r3, #4
 8008494:	2a00      	cmp	r2, #0
 8008496:	d1cb      	bne.n	8008430 <quorem+0x94>
 8008498:	3c01      	subs	r4, #1
 800849a:	e7c6      	b.n	800842a <quorem+0x8e>
 800849c:	6812      	ldr	r2, [r2, #0]
 800849e:	3b04      	subs	r3, #4
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	d1ef      	bne.n	8008484 <quorem+0xe8>
 80084a4:	3c01      	subs	r4, #1
 80084a6:	e7ea      	b.n	800847e <quorem+0xe2>
 80084a8:	2000      	movs	r0, #0
 80084aa:	e7ee      	b.n	800848a <quorem+0xee>
 80084ac:	0000      	movs	r0, r0
	...

080084b0 <_dtoa_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	69c7      	ldr	r7, [r0, #28]
 80084b6:	b099      	sub	sp, #100	@ 0x64
 80084b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80084bc:	ec55 4b10 	vmov	r4, r5, d0
 80084c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80084c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80084c4:	4683      	mov	fp, r0
 80084c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80084c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084ca:	b97f      	cbnz	r7, 80084ec <_dtoa_r+0x3c>
 80084cc:	2010      	movs	r0, #16
 80084ce:	f000 fdfd 	bl	80090cc <malloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80084d8:	b920      	cbnz	r0, 80084e4 <_dtoa_r+0x34>
 80084da:	4ba7      	ldr	r3, [pc, #668]	@ (8008778 <_dtoa_r+0x2c8>)
 80084dc:	21ef      	movs	r1, #239	@ 0xef
 80084de:	48a7      	ldr	r0, [pc, #668]	@ (800877c <_dtoa_r+0x2cc>)
 80084e0:	f002 fc36 	bl	800ad50 <__assert_func>
 80084e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084e8:	6007      	str	r7, [r0, #0]
 80084ea:	60c7      	str	r7, [r0, #12]
 80084ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	b159      	cbz	r1, 800850c <_dtoa_r+0x5c>
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	604a      	str	r2, [r1, #4]
 80084f8:	2301      	movs	r3, #1
 80084fa:	4093      	lsls	r3, r2
 80084fc:	608b      	str	r3, [r1, #8]
 80084fe:	4658      	mov	r0, fp
 8008500:	f000 feda 	bl	80092b8 <_Bfree>
 8008504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	1e2b      	subs	r3, r5, #0
 800850e:	bfb9      	ittee	lt
 8008510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008514:	9303      	strlt	r3, [sp, #12]
 8008516:	2300      	movge	r3, #0
 8008518:	6033      	strge	r3, [r6, #0]
 800851a:	9f03      	ldr	r7, [sp, #12]
 800851c:	4b98      	ldr	r3, [pc, #608]	@ (8008780 <_dtoa_r+0x2d0>)
 800851e:	bfbc      	itt	lt
 8008520:	2201      	movlt	r2, #1
 8008522:	6032      	strlt	r2, [r6, #0]
 8008524:	43bb      	bics	r3, r7
 8008526:	d112      	bne.n	800854e <_dtoa_r+0x9e>
 8008528:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800852a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008534:	4323      	orrs	r3, r4
 8008536:	f000 854d 	beq.w	8008fd4 <_dtoa_r+0xb24>
 800853a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800853c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008794 <_dtoa_r+0x2e4>
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 854f 	beq.w	8008fe4 <_dtoa_r+0xb34>
 8008546:	f10a 0303 	add.w	r3, sl, #3
 800854a:	f000 bd49 	b.w	8008fe0 <_dtoa_r+0xb30>
 800854e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	ec51 0b17 	vmov	r0, r1, d7
 8008558:	2300      	movs	r3, #0
 800855a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800855e:	f7f8 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008562:	4680      	mov	r8, r0
 8008564:	b158      	cbz	r0, 800857e <_dtoa_r+0xce>
 8008566:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008568:	2301      	movs	r3, #1
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800856e:	b113      	cbz	r3, 8008576 <_dtoa_r+0xc6>
 8008570:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008572:	4b84      	ldr	r3, [pc, #528]	@ (8008784 <_dtoa_r+0x2d4>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008798 <_dtoa_r+0x2e8>
 800857a:	f000 bd33 	b.w	8008fe4 <_dtoa_r+0xb34>
 800857e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008582:	aa16      	add	r2, sp, #88	@ 0x58
 8008584:	a917      	add	r1, sp, #92	@ 0x5c
 8008586:	4658      	mov	r0, fp
 8008588:	f001 fa3a 	bl	8009a00 <__d2b>
 800858c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008590:	4681      	mov	r9, r0
 8008592:	2e00      	cmp	r6, #0
 8008594:	d077      	beq.n	8008686 <_dtoa_r+0x1d6>
 8008596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008598:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800859c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085b0:	4619      	mov	r1, r3
 80085b2:	2200      	movs	r2, #0
 80085b4:	4b74      	ldr	r3, [pc, #464]	@ (8008788 <_dtoa_r+0x2d8>)
 80085b6:	f7f7 fe67 	bl	8000288 <__aeabi_dsub>
 80085ba:	a369      	add	r3, pc, #420	@ (adr r3, 8008760 <_dtoa_r+0x2b0>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f8 f81a 	bl	80005f8 <__aeabi_dmul>
 80085c4:	a368      	add	r3, pc, #416	@ (adr r3, 8008768 <_dtoa_r+0x2b8>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f7 fe5f 	bl	800028c <__adddf3>
 80085ce:	4604      	mov	r4, r0
 80085d0:	4630      	mov	r0, r6
 80085d2:	460d      	mov	r5, r1
 80085d4:	f7f7 ffa6 	bl	8000524 <__aeabi_i2d>
 80085d8:	a365      	add	r3, pc, #404	@ (adr r3, 8008770 <_dtoa_r+0x2c0>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f8 f80b 	bl	80005f8 <__aeabi_dmul>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4620      	mov	r0, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7f7 fe4f 	bl	800028c <__adddf3>
 80085ee:	4604      	mov	r4, r0
 80085f0:	460d      	mov	r5, r1
 80085f2:	f7f8 fab1 	bl	8000b58 <__aeabi_d2iz>
 80085f6:	2200      	movs	r2, #0
 80085f8:	4607      	mov	r7, r0
 80085fa:	2300      	movs	r3, #0
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f8 fa6c 	bl	8000adc <__aeabi_dcmplt>
 8008604:	b140      	cbz	r0, 8008618 <_dtoa_r+0x168>
 8008606:	4638      	mov	r0, r7
 8008608:	f7f7 ff8c 	bl	8000524 <__aeabi_i2d>
 800860c:	4622      	mov	r2, r4
 800860e:	462b      	mov	r3, r5
 8008610:	f7f8 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008614:	b900      	cbnz	r0, 8008618 <_dtoa_r+0x168>
 8008616:	3f01      	subs	r7, #1
 8008618:	2f16      	cmp	r7, #22
 800861a:	d851      	bhi.n	80086c0 <_dtoa_r+0x210>
 800861c:	4b5b      	ldr	r3, [pc, #364]	@ (800878c <_dtoa_r+0x2dc>)
 800861e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800862a:	f7f8 fa57 	bl	8000adc <__aeabi_dcmplt>
 800862e:	2800      	cmp	r0, #0
 8008630:	d048      	beq.n	80086c4 <_dtoa_r+0x214>
 8008632:	3f01      	subs	r7, #1
 8008634:	2300      	movs	r3, #0
 8008636:	9312      	str	r3, [sp, #72]	@ 0x48
 8008638:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800863a:	1b9b      	subs	r3, r3, r6
 800863c:	1e5a      	subs	r2, r3, #1
 800863e:	bf44      	itt	mi
 8008640:	f1c3 0801 	rsbmi	r8, r3, #1
 8008644:	2300      	movmi	r3, #0
 8008646:	9208      	str	r2, [sp, #32]
 8008648:	bf54      	ite	pl
 800864a:	f04f 0800 	movpl.w	r8, #0
 800864e:	9308      	strmi	r3, [sp, #32]
 8008650:	2f00      	cmp	r7, #0
 8008652:	db39      	blt.n	80086c8 <_dtoa_r+0x218>
 8008654:	9b08      	ldr	r3, [sp, #32]
 8008656:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008658:	443b      	add	r3, r7
 800865a:	9308      	str	r3, [sp, #32]
 800865c:	2300      	movs	r3, #0
 800865e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008662:	2b09      	cmp	r3, #9
 8008664:	d864      	bhi.n	8008730 <_dtoa_r+0x280>
 8008666:	2b05      	cmp	r3, #5
 8008668:	bfc4      	itt	gt
 800866a:	3b04      	subgt	r3, #4
 800866c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008670:	f1a3 0302 	sub.w	r3, r3, #2
 8008674:	bfcc      	ite	gt
 8008676:	2400      	movgt	r4, #0
 8008678:	2401      	movle	r4, #1
 800867a:	2b03      	cmp	r3, #3
 800867c:	d863      	bhi.n	8008746 <_dtoa_r+0x296>
 800867e:	e8df f003 	tbb	[pc, r3]
 8008682:	372a      	.short	0x372a
 8008684:	5535      	.short	0x5535
 8008686:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800868a:	441e      	add	r6, r3
 800868c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008690:	2b20      	cmp	r3, #32
 8008692:	bfc1      	itttt	gt
 8008694:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008698:	409f      	lslgt	r7, r3
 800869a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800869e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086a2:	bfd6      	itet	le
 80086a4:	f1c3 0320 	rsble	r3, r3, #32
 80086a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80086ac:	fa04 f003 	lslle.w	r0, r4, r3
 80086b0:	f7f7 ff28 	bl	8000504 <__aeabi_ui2d>
 80086b4:	2201      	movs	r2, #1
 80086b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086ba:	3e01      	subs	r6, #1
 80086bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80086be:	e777      	b.n	80085b0 <_dtoa_r+0x100>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e7b8      	b.n	8008636 <_dtoa_r+0x186>
 80086c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80086c6:	e7b7      	b.n	8008638 <_dtoa_r+0x188>
 80086c8:	427b      	negs	r3, r7
 80086ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80086cc:	2300      	movs	r3, #0
 80086ce:	eba8 0807 	sub.w	r8, r8, r7
 80086d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086d4:	e7c4      	b.n	8008660 <_dtoa_r+0x1b0>
 80086d6:	2300      	movs	r3, #0
 80086d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dc35      	bgt.n	800874c <_dtoa_r+0x29c>
 80086e0:	2301      	movs	r3, #1
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	9307      	str	r3, [sp, #28]
 80086e6:	461a      	mov	r2, r3
 80086e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80086ea:	e00b      	b.n	8008704 <_dtoa_r+0x254>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e7f3      	b.n	80086d8 <_dtoa_r+0x228>
 80086f0:	2300      	movs	r3, #0
 80086f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086f6:	18fb      	adds	r3, r7, r3
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	9307      	str	r3, [sp, #28]
 8008700:	bfb8      	it	lt
 8008702:	2301      	movlt	r3, #1
 8008704:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008708:	2100      	movs	r1, #0
 800870a:	2204      	movs	r2, #4
 800870c:	f102 0514 	add.w	r5, r2, #20
 8008710:	429d      	cmp	r5, r3
 8008712:	d91f      	bls.n	8008754 <_dtoa_r+0x2a4>
 8008714:	6041      	str	r1, [r0, #4]
 8008716:	4658      	mov	r0, fp
 8008718:	f000 fd8e 	bl	8009238 <_Balloc>
 800871c:	4682      	mov	sl, r0
 800871e:	2800      	cmp	r0, #0
 8008720:	d13c      	bne.n	800879c <_dtoa_r+0x2ec>
 8008722:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <_dtoa_r+0x2e0>)
 8008724:	4602      	mov	r2, r0
 8008726:	f240 11af 	movw	r1, #431	@ 0x1af
 800872a:	e6d8      	b.n	80084de <_dtoa_r+0x2e>
 800872c:	2301      	movs	r3, #1
 800872e:	e7e0      	b.n	80086f2 <_dtoa_r+0x242>
 8008730:	2401      	movs	r4, #1
 8008732:	2300      	movs	r3, #0
 8008734:	9309      	str	r3, [sp, #36]	@ 0x24
 8008736:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008738:	f04f 33ff 	mov.w	r3, #4294967295
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	2200      	movs	r2, #0
 8008742:	2312      	movs	r3, #18
 8008744:	e7d0      	b.n	80086e8 <_dtoa_r+0x238>
 8008746:	2301      	movs	r3, #1
 8008748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800874a:	e7f5      	b.n	8008738 <_dtoa_r+0x288>
 800874c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	9307      	str	r3, [sp, #28]
 8008752:	e7d7      	b.n	8008704 <_dtoa_r+0x254>
 8008754:	3101      	adds	r1, #1
 8008756:	0052      	lsls	r2, r2, #1
 8008758:	e7d8      	b.n	800870c <_dtoa_r+0x25c>
 800875a:	bf00      	nop
 800875c:	f3af 8000 	nop.w
 8008760:	636f4361 	.word	0x636f4361
 8008764:	3fd287a7 	.word	0x3fd287a7
 8008768:	8b60c8b3 	.word	0x8b60c8b3
 800876c:	3fc68a28 	.word	0x3fc68a28
 8008770:	509f79fb 	.word	0x509f79fb
 8008774:	3fd34413 	.word	0x3fd34413
 8008778:	0800bafe 	.word	0x0800bafe
 800877c:	0800bb15 	.word	0x0800bb15
 8008780:	7ff00000 	.word	0x7ff00000
 8008784:	0800bac9 	.word	0x0800bac9
 8008788:	3ff80000 	.word	0x3ff80000
 800878c:	0800bc10 	.word	0x0800bc10
 8008790:	0800bb6d 	.word	0x0800bb6d
 8008794:	0800bafa 	.word	0x0800bafa
 8008798:	0800bac8 	.word	0x0800bac8
 800879c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087a0:	6018      	str	r0, [r3, #0]
 80087a2:	9b07      	ldr	r3, [sp, #28]
 80087a4:	2b0e      	cmp	r3, #14
 80087a6:	f200 80a4 	bhi.w	80088f2 <_dtoa_r+0x442>
 80087aa:	2c00      	cmp	r4, #0
 80087ac:	f000 80a1 	beq.w	80088f2 <_dtoa_r+0x442>
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	dd33      	ble.n	800881c <_dtoa_r+0x36c>
 80087b4:	4bad      	ldr	r3, [pc, #692]	@ (8008a6c <_dtoa_r+0x5bc>)
 80087b6:	f007 020f 	and.w	r2, r7, #15
 80087ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087be:	ed93 7b00 	vldr	d7, [r3]
 80087c2:	05f8      	lsls	r0, r7, #23
 80087c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087cc:	d516      	bpl.n	80087fc <_dtoa_r+0x34c>
 80087ce:	4ba8      	ldr	r3, [pc, #672]	@ (8008a70 <_dtoa_r+0x5c0>)
 80087d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087d8:	f7f8 f838 	bl	800084c <__aeabi_ddiv>
 80087dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087e0:	f004 040f 	and.w	r4, r4, #15
 80087e4:	2603      	movs	r6, #3
 80087e6:	4da2      	ldr	r5, [pc, #648]	@ (8008a70 <_dtoa_r+0x5c0>)
 80087e8:	b954      	cbnz	r4, 8008800 <_dtoa_r+0x350>
 80087ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f2:	f7f8 f82b 	bl	800084c <__aeabi_ddiv>
 80087f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087fa:	e028      	b.n	800884e <_dtoa_r+0x39e>
 80087fc:	2602      	movs	r6, #2
 80087fe:	e7f2      	b.n	80087e6 <_dtoa_r+0x336>
 8008800:	07e1      	lsls	r1, r4, #31
 8008802:	d508      	bpl.n	8008816 <_dtoa_r+0x366>
 8008804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800880c:	f7f7 fef4 	bl	80005f8 <__aeabi_dmul>
 8008810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008814:	3601      	adds	r6, #1
 8008816:	1064      	asrs	r4, r4, #1
 8008818:	3508      	adds	r5, #8
 800881a:	e7e5      	b.n	80087e8 <_dtoa_r+0x338>
 800881c:	f000 80d2 	beq.w	80089c4 <_dtoa_r+0x514>
 8008820:	427c      	negs	r4, r7
 8008822:	4b92      	ldr	r3, [pc, #584]	@ (8008a6c <_dtoa_r+0x5bc>)
 8008824:	4d92      	ldr	r5, [pc, #584]	@ (8008a70 <_dtoa_r+0x5c0>)
 8008826:	f004 020f 	and.w	r2, r4, #15
 800882a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008836:	f7f7 fedf 	bl	80005f8 <__aeabi_dmul>
 800883a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800883e:	1124      	asrs	r4, r4, #4
 8008840:	2300      	movs	r3, #0
 8008842:	2602      	movs	r6, #2
 8008844:	2c00      	cmp	r4, #0
 8008846:	f040 80b2 	bne.w	80089ae <_dtoa_r+0x4fe>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1d3      	bne.n	80087f6 <_dtoa_r+0x346>
 800884e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008850:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 80b7 	beq.w	80089c8 <_dtoa_r+0x518>
 800885a:	4b86      	ldr	r3, [pc, #536]	@ (8008a74 <_dtoa_r+0x5c4>)
 800885c:	2200      	movs	r2, #0
 800885e:	4620      	mov	r0, r4
 8008860:	4629      	mov	r1, r5
 8008862:	f7f8 f93b 	bl	8000adc <__aeabi_dcmplt>
 8008866:	2800      	cmp	r0, #0
 8008868:	f000 80ae 	beq.w	80089c8 <_dtoa_r+0x518>
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80aa 	beq.w	80089c8 <_dtoa_r+0x518>
 8008874:	9b00      	ldr	r3, [sp, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	dd37      	ble.n	80088ea <_dtoa_r+0x43a>
 800887a:	1e7b      	subs	r3, r7, #1
 800887c:	9304      	str	r3, [sp, #16]
 800887e:	4620      	mov	r0, r4
 8008880:	4b7d      	ldr	r3, [pc, #500]	@ (8008a78 <_dtoa_r+0x5c8>)
 8008882:	2200      	movs	r2, #0
 8008884:	4629      	mov	r1, r5
 8008886:	f7f7 feb7 	bl	80005f8 <__aeabi_dmul>
 800888a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800888e:	9c00      	ldr	r4, [sp, #0]
 8008890:	3601      	adds	r6, #1
 8008892:	4630      	mov	r0, r6
 8008894:	f7f7 fe46 	bl	8000524 <__aeabi_i2d>
 8008898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800889c:	f7f7 feac 	bl	80005f8 <__aeabi_dmul>
 80088a0:	4b76      	ldr	r3, [pc, #472]	@ (8008a7c <_dtoa_r+0x5cc>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	f7f7 fcf2 	bl	800028c <__adddf3>
 80088a8:	4605      	mov	r5, r0
 80088aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088ae:	2c00      	cmp	r4, #0
 80088b0:	f040 808d 	bne.w	80089ce <_dtoa_r+0x51e>
 80088b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b8:	4b71      	ldr	r3, [pc, #452]	@ (8008a80 <_dtoa_r+0x5d0>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	f7f7 fce4 	bl	8000288 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088c8:	462a      	mov	r2, r5
 80088ca:	4633      	mov	r3, r6
 80088cc:	f7f8 f924 	bl	8000b18 <__aeabi_dcmpgt>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f040 828b 	bne.w	8008dec <_dtoa_r+0x93c>
 80088d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088da:	462a      	mov	r2, r5
 80088dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088e0:	f7f8 f8fc 	bl	8000adc <__aeabi_dcmplt>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f040 8128 	bne.w	8008b3a <_dtoa_r+0x68a>
 80088ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80088ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80088f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f2c0 815a 	blt.w	8008bae <_dtoa_r+0x6fe>
 80088fa:	2f0e      	cmp	r7, #14
 80088fc:	f300 8157 	bgt.w	8008bae <_dtoa_r+0x6fe>
 8008900:	4b5a      	ldr	r3, [pc, #360]	@ (8008a6c <_dtoa_r+0x5bc>)
 8008902:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008906:	ed93 7b00 	vldr	d7, [r3]
 800890a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	ed8d 7b00 	vstr	d7, [sp]
 8008912:	da03      	bge.n	800891c <_dtoa_r+0x46c>
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f340 8101 	ble.w	8008b1e <_dtoa_r+0x66e>
 800891c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008920:	4656      	mov	r6, sl
 8008922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008926:	4620      	mov	r0, r4
 8008928:	4629      	mov	r1, r5
 800892a:	f7f7 ff8f 	bl	800084c <__aeabi_ddiv>
 800892e:	f7f8 f913 	bl	8000b58 <__aeabi_d2iz>
 8008932:	4680      	mov	r8, r0
 8008934:	f7f7 fdf6 	bl	8000524 <__aeabi_i2d>
 8008938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800893c:	f7f7 fe5c 	bl	80005f8 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4620      	mov	r0, r4
 8008946:	4629      	mov	r1, r5
 8008948:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800894c:	f7f7 fc9c 	bl	8000288 <__aeabi_dsub>
 8008950:	f806 4b01 	strb.w	r4, [r6], #1
 8008954:	9d07      	ldr	r5, [sp, #28]
 8008956:	eba6 040a 	sub.w	r4, r6, sl
 800895a:	42a5      	cmp	r5, r4
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	f040 8117 	bne.w	8008b92 <_dtoa_r+0x6e2>
 8008964:	f7f7 fc92 	bl	800028c <__adddf3>
 8008968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800896c:	4604      	mov	r4, r0
 800896e:	460d      	mov	r5, r1
 8008970:	f7f8 f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f040 80f9 	bne.w	8008b6c <_dtoa_r+0x6bc>
 800897a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f8 f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008986:	b118      	cbz	r0, 8008990 <_dtoa_r+0x4e0>
 8008988:	f018 0f01 	tst.w	r8, #1
 800898c:	f040 80ee 	bne.w	8008b6c <_dtoa_r+0x6bc>
 8008990:	4649      	mov	r1, r9
 8008992:	4658      	mov	r0, fp
 8008994:	f000 fc90 	bl	80092b8 <_Bfree>
 8008998:	2300      	movs	r3, #0
 800899a:	7033      	strb	r3, [r6, #0]
 800899c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800899e:	3701      	adds	r7, #1
 80089a0:	601f      	str	r7, [r3, #0]
 80089a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 831d 	beq.w	8008fe4 <_dtoa_r+0xb34>
 80089aa:	601e      	str	r6, [r3, #0]
 80089ac:	e31a      	b.n	8008fe4 <_dtoa_r+0xb34>
 80089ae:	07e2      	lsls	r2, r4, #31
 80089b0:	d505      	bpl.n	80089be <_dtoa_r+0x50e>
 80089b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089b6:	f7f7 fe1f 	bl	80005f8 <__aeabi_dmul>
 80089ba:	3601      	adds	r6, #1
 80089bc:	2301      	movs	r3, #1
 80089be:	1064      	asrs	r4, r4, #1
 80089c0:	3508      	adds	r5, #8
 80089c2:	e73f      	b.n	8008844 <_dtoa_r+0x394>
 80089c4:	2602      	movs	r6, #2
 80089c6:	e742      	b.n	800884e <_dtoa_r+0x39e>
 80089c8:	9c07      	ldr	r4, [sp, #28]
 80089ca:	9704      	str	r7, [sp, #16]
 80089cc:	e761      	b.n	8008892 <_dtoa_r+0x3e2>
 80089ce:	4b27      	ldr	r3, [pc, #156]	@ (8008a6c <_dtoa_r+0x5bc>)
 80089d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80089d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089da:	4454      	add	r4, sl
 80089dc:	2900      	cmp	r1, #0
 80089de:	d053      	beq.n	8008a88 <_dtoa_r+0x5d8>
 80089e0:	4928      	ldr	r1, [pc, #160]	@ (8008a84 <_dtoa_r+0x5d4>)
 80089e2:	2000      	movs	r0, #0
 80089e4:	f7f7 ff32 	bl	800084c <__aeabi_ddiv>
 80089e8:	4633      	mov	r3, r6
 80089ea:	462a      	mov	r2, r5
 80089ec:	f7f7 fc4c 	bl	8000288 <__aeabi_dsub>
 80089f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089f4:	4656      	mov	r6, sl
 80089f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089fa:	f7f8 f8ad 	bl	8000b58 <__aeabi_d2iz>
 80089fe:	4605      	mov	r5, r0
 8008a00:	f7f7 fd90 	bl	8000524 <__aeabi_i2d>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a0c:	f7f7 fc3c 	bl	8000288 <__aeabi_dsub>
 8008a10:	3530      	adds	r5, #48	@ 0x30
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a1a:	f806 5b01 	strb.w	r5, [r6], #1
 8008a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a22:	f7f8 f85b 	bl	8000adc <__aeabi_dcmplt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d171      	bne.n	8008b0e <_dtoa_r+0x65e>
 8008a2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a2e:	4911      	ldr	r1, [pc, #68]	@ (8008a74 <_dtoa_r+0x5c4>)
 8008a30:	2000      	movs	r0, #0
 8008a32:	f7f7 fc29 	bl	8000288 <__aeabi_dsub>
 8008a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a3a:	f7f8 f84f 	bl	8000adc <__aeabi_dcmplt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f040 8095 	bne.w	8008b6e <_dtoa_r+0x6be>
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	f43f af50 	beq.w	80088ea <_dtoa_r+0x43a>
 8008a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a78 <_dtoa_r+0x5c8>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	f7f7 fdd1 	bl	80005f8 <__aeabi_dmul>
 8008a56:	4b08      	ldr	r3, [pc, #32]	@ (8008a78 <_dtoa_r+0x5c8>)
 8008a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a62:	f7f7 fdc9 	bl	80005f8 <__aeabi_dmul>
 8008a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a6a:	e7c4      	b.n	80089f6 <_dtoa_r+0x546>
 8008a6c:	0800bc10 	.word	0x0800bc10
 8008a70:	0800bbe8 	.word	0x0800bbe8
 8008a74:	3ff00000 	.word	0x3ff00000
 8008a78:	40240000 	.word	0x40240000
 8008a7c:	401c0000 	.word	0x401c0000
 8008a80:	40140000 	.word	0x40140000
 8008a84:	3fe00000 	.word	0x3fe00000
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7f7 fdb4 	bl	80005f8 <__aeabi_dmul>
 8008a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a94:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a96:	4656      	mov	r6, sl
 8008a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a9c:	f7f8 f85c 	bl	8000b58 <__aeabi_d2iz>
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	f7f7 fd3f 	bl	8000524 <__aeabi_i2d>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aae:	f7f7 fbeb 	bl	8000288 <__aeabi_dsub>
 8008ab2:	3530      	adds	r5, #48	@ 0x30
 8008ab4:	f806 5b01 	strb.w	r5, [r6], #1
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ac2:	f04f 0200 	mov.w	r2, #0
 8008ac6:	d124      	bne.n	8008b12 <_dtoa_r+0x662>
 8008ac8:	4bac      	ldr	r3, [pc, #688]	@ (8008d7c <_dtoa_r+0x8cc>)
 8008aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ace:	f7f7 fbdd 	bl	800028c <__adddf3>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ada:	f7f8 f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d145      	bne.n	8008b6e <_dtoa_r+0x6be>
 8008ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ae6:	49a5      	ldr	r1, [pc, #660]	@ (8008d7c <_dtoa_r+0x8cc>)
 8008ae8:	2000      	movs	r0, #0
 8008aea:	f7f7 fbcd 	bl	8000288 <__aeabi_dsub>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008af6:	f7f7 fff1 	bl	8000adc <__aeabi_dcmplt>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f43f aef5 	beq.w	80088ea <_dtoa_r+0x43a>
 8008b00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008b02:	1e73      	subs	r3, r6, #1
 8008b04:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b0a:	2b30      	cmp	r3, #48	@ 0x30
 8008b0c:	d0f8      	beq.n	8008b00 <_dtoa_r+0x650>
 8008b0e:	9f04      	ldr	r7, [sp, #16]
 8008b10:	e73e      	b.n	8008990 <_dtoa_r+0x4e0>
 8008b12:	4b9b      	ldr	r3, [pc, #620]	@ (8008d80 <_dtoa_r+0x8d0>)
 8008b14:	f7f7 fd70 	bl	80005f8 <__aeabi_dmul>
 8008b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b1c:	e7bc      	b.n	8008a98 <_dtoa_r+0x5e8>
 8008b1e:	d10c      	bne.n	8008b3a <_dtoa_r+0x68a>
 8008b20:	4b98      	ldr	r3, [pc, #608]	@ (8008d84 <_dtoa_r+0x8d4>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b28:	f7f7 fd66 	bl	80005f8 <__aeabi_dmul>
 8008b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b30:	f7f7 ffe8 	bl	8000b04 <__aeabi_dcmpge>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f000 8157 	beq.w	8008de8 <_dtoa_r+0x938>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	4625      	mov	r5, r4
 8008b3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b40:	43db      	mvns	r3, r3
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	4656      	mov	r6, sl
 8008b46:	2700      	movs	r7, #0
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	f000 fbb4 	bl	80092b8 <_Bfree>
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	d0dc      	beq.n	8008b0e <_dtoa_r+0x65e>
 8008b54:	b12f      	cbz	r7, 8008b62 <_dtoa_r+0x6b2>
 8008b56:	42af      	cmp	r7, r5
 8008b58:	d003      	beq.n	8008b62 <_dtoa_r+0x6b2>
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	4658      	mov	r0, fp
 8008b5e:	f000 fbab 	bl	80092b8 <_Bfree>
 8008b62:	4629      	mov	r1, r5
 8008b64:	4658      	mov	r0, fp
 8008b66:	f000 fba7 	bl	80092b8 <_Bfree>
 8008b6a:	e7d0      	b.n	8008b0e <_dtoa_r+0x65e>
 8008b6c:	9704      	str	r7, [sp, #16]
 8008b6e:	4633      	mov	r3, r6
 8008b70:	461e      	mov	r6, r3
 8008b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b76:	2a39      	cmp	r2, #57	@ 0x39
 8008b78:	d107      	bne.n	8008b8a <_dtoa_r+0x6da>
 8008b7a:	459a      	cmp	sl, r3
 8008b7c:	d1f8      	bne.n	8008b70 <_dtoa_r+0x6c0>
 8008b7e:	9a04      	ldr	r2, [sp, #16]
 8008b80:	3201      	adds	r2, #1
 8008b82:	9204      	str	r2, [sp, #16]
 8008b84:	2230      	movs	r2, #48	@ 0x30
 8008b86:	f88a 2000 	strb.w	r2, [sl]
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	3201      	adds	r2, #1
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e7bd      	b.n	8008b0e <_dtoa_r+0x65e>
 8008b92:	4b7b      	ldr	r3, [pc, #492]	@ (8008d80 <_dtoa_r+0x8d0>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	f7f7 fd2f 	bl	80005f8 <__aeabi_dmul>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	f7f7 ff91 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f aebb 	beq.w	8008922 <_dtoa_r+0x472>
 8008bac:	e6f0      	b.n	8008990 <_dtoa_r+0x4e0>
 8008bae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008bb0:	2a00      	cmp	r2, #0
 8008bb2:	f000 80db 	beq.w	8008d6c <_dtoa_r+0x8bc>
 8008bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bb8:	2a01      	cmp	r2, #1
 8008bba:	f300 80bf 	bgt.w	8008d3c <_dtoa_r+0x88c>
 8008bbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	f000 80b7 	beq.w	8008d34 <_dtoa_r+0x884>
 8008bc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bcc:	4646      	mov	r6, r8
 8008bce:	9a08      	ldr	r2, [sp, #32]
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	441a      	add	r2, r3
 8008bd4:	4658      	mov	r0, fp
 8008bd6:	4498      	add	r8, r3
 8008bd8:	9208      	str	r2, [sp, #32]
 8008bda:	f000 fc6b 	bl	80094b4 <__i2b>
 8008bde:	4605      	mov	r5, r0
 8008be0:	b15e      	cbz	r6, 8008bfa <_dtoa_r+0x74a>
 8008be2:	9b08      	ldr	r3, [sp, #32]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd08      	ble.n	8008bfa <_dtoa_r+0x74a>
 8008be8:	42b3      	cmp	r3, r6
 8008bea:	9a08      	ldr	r2, [sp, #32]
 8008bec:	bfa8      	it	ge
 8008bee:	4633      	movge	r3, r6
 8008bf0:	eba8 0803 	sub.w	r8, r8, r3
 8008bf4:	1af6      	subs	r6, r6, r3
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	9308      	str	r3, [sp, #32]
 8008bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bfc:	b1f3      	cbz	r3, 8008c3c <_dtoa_r+0x78c>
 8008bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80b7 	beq.w	8008d74 <_dtoa_r+0x8c4>
 8008c06:	b18c      	cbz	r4, 8008c2c <_dtoa_r+0x77c>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	f000 fd11 	bl	8009634 <__pow5mult>
 8008c12:	464a      	mov	r2, r9
 8008c14:	4601      	mov	r1, r0
 8008c16:	4605      	mov	r5, r0
 8008c18:	4658      	mov	r0, fp
 8008c1a:	f000 fc61 	bl	80094e0 <__multiply>
 8008c1e:	4649      	mov	r1, r9
 8008c20:	9004      	str	r0, [sp, #16]
 8008c22:	4658      	mov	r0, fp
 8008c24:	f000 fb48 	bl	80092b8 <_Bfree>
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	4699      	mov	r9, r3
 8008c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c2e:	1b1a      	subs	r2, r3, r4
 8008c30:	d004      	beq.n	8008c3c <_dtoa_r+0x78c>
 8008c32:	4649      	mov	r1, r9
 8008c34:	4658      	mov	r0, fp
 8008c36:	f000 fcfd 	bl	8009634 <__pow5mult>
 8008c3a:	4681      	mov	r9, r0
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4658      	mov	r0, fp
 8008c40:	f000 fc38 	bl	80094b4 <__i2b>
 8008c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c46:	4604      	mov	r4, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 81cf 	beq.w	8008fec <_dtoa_r+0xb3c>
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4601      	mov	r1, r0
 8008c52:	4658      	mov	r0, fp
 8008c54:	f000 fcee 	bl	8009634 <__pow5mult>
 8008c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	f300 8095 	bgt.w	8008d8c <_dtoa_r+0x8dc>
 8008c62:	9b02      	ldr	r3, [sp, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 8087 	bne.w	8008d78 <_dtoa_r+0x8c8>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f040 8089 	bne.w	8008d88 <_dtoa_r+0x8d8>
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c7c:	0d1b      	lsrs	r3, r3, #20
 8008c7e:	051b      	lsls	r3, r3, #20
 8008c80:	b12b      	cbz	r3, 8008c8e <_dtoa_r+0x7de>
 8008c82:	9b08      	ldr	r3, [sp, #32]
 8008c84:	3301      	adds	r3, #1
 8008c86:	9308      	str	r3, [sp, #32]
 8008c88:	f108 0801 	add.w	r8, r8, #1
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 81b0 	beq.w	8008ff8 <_dtoa_r+0xb48>
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c9e:	6918      	ldr	r0, [r3, #16]
 8008ca0:	f000 fbbc 	bl	800941c <__hi0bits>
 8008ca4:	f1c0 0020 	rsb	r0, r0, #32
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	4418      	add	r0, r3
 8008cac:	f010 001f 	ands.w	r0, r0, #31
 8008cb0:	d077      	beq.n	8008da2 <_dtoa_r+0x8f2>
 8008cb2:	f1c0 0320 	rsb	r3, r0, #32
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	dd6b      	ble.n	8008d92 <_dtoa_r+0x8e2>
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	f1c0 001c 	rsb	r0, r0, #28
 8008cc0:	4403      	add	r3, r0
 8008cc2:	4480      	add	r8, r0
 8008cc4:	4406      	add	r6, r0
 8008cc6:	9308      	str	r3, [sp, #32]
 8008cc8:	f1b8 0f00 	cmp.w	r8, #0
 8008ccc:	dd05      	ble.n	8008cda <_dtoa_r+0x82a>
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	4658      	mov	r0, fp
 8008cd4:	f000 fd08 	bl	80096e8 <__lshift>
 8008cd8:	4681      	mov	r9, r0
 8008cda:	9b08      	ldr	r3, [sp, #32]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd05      	ble.n	8008cec <_dtoa_r+0x83c>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f000 fcff 	bl	80096e8 <__lshift>
 8008cea:	4604      	mov	r4, r0
 8008cec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d059      	beq.n	8008da6 <_dtoa_r+0x8f6>
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fd63 	bl	80097c0 <__mcmp>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	da53      	bge.n	8008da6 <_dtoa_r+0x8f6>
 8008cfe:	1e7b      	subs	r3, r7, #1
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	4649      	mov	r1, r9
 8008d04:	2300      	movs	r3, #0
 8008d06:	220a      	movs	r2, #10
 8008d08:	4658      	mov	r0, fp
 8008d0a:	f000 faf7 	bl	80092fc <__multadd>
 8008d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d10:	4681      	mov	r9, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 8172 	beq.w	8008ffc <_dtoa_r+0xb4c>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	220a      	movs	r2, #10
 8008d1e:	4658      	mov	r0, fp
 8008d20:	f000 faec 	bl	80092fc <__multadd>
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	4605      	mov	r5, r0
 8008d2a:	dc67      	bgt.n	8008dfc <_dtoa_r+0x94c>
 8008d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	dc41      	bgt.n	8008db6 <_dtoa_r+0x906>
 8008d32:	e063      	b.n	8008dfc <_dtoa_r+0x94c>
 8008d34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d3a:	e746      	b.n	8008bca <_dtoa_r+0x71a>
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	1e5c      	subs	r4, r3, #1
 8008d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	bfbf      	itttt	lt
 8008d46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008d48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008d4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008d4c:	1ae3      	sublt	r3, r4, r3
 8008d4e:	bfb4      	ite	lt
 8008d50:	18d2      	addlt	r2, r2, r3
 8008d52:	1b1c      	subge	r4, r3, r4
 8008d54:	9b07      	ldr	r3, [sp, #28]
 8008d56:	bfbc      	itt	lt
 8008d58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008d5a:	2400      	movlt	r4, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfb5      	itete	lt
 8008d60:	eba8 0603 	sublt.w	r6, r8, r3
 8008d64:	9b07      	ldrge	r3, [sp, #28]
 8008d66:	2300      	movlt	r3, #0
 8008d68:	4646      	movge	r6, r8
 8008d6a:	e730      	b.n	8008bce <_dtoa_r+0x71e>
 8008d6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d70:	4646      	mov	r6, r8
 8008d72:	e735      	b.n	8008be0 <_dtoa_r+0x730>
 8008d74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d76:	e75c      	b.n	8008c32 <_dtoa_r+0x782>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e788      	b.n	8008c8e <_dtoa_r+0x7de>
 8008d7c:	3fe00000 	.word	0x3fe00000
 8008d80:	40240000 	.word	0x40240000
 8008d84:	40140000 	.word	0x40140000
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	e780      	b.n	8008c8e <_dtoa_r+0x7de>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d90:	e782      	b.n	8008c98 <_dtoa_r+0x7e8>
 8008d92:	d099      	beq.n	8008cc8 <_dtoa_r+0x818>
 8008d94:	9a08      	ldr	r2, [sp, #32]
 8008d96:	331c      	adds	r3, #28
 8008d98:	441a      	add	r2, r3
 8008d9a:	4498      	add	r8, r3
 8008d9c:	441e      	add	r6, r3
 8008d9e:	9208      	str	r2, [sp, #32]
 8008da0:	e792      	b.n	8008cc8 <_dtoa_r+0x818>
 8008da2:	4603      	mov	r3, r0
 8008da4:	e7f6      	b.n	8008d94 <_dtoa_r+0x8e4>
 8008da6:	9b07      	ldr	r3, [sp, #28]
 8008da8:	9704      	str	r7, [sp, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dc20      	bgt.n	8008df0 <_dtoa_r+0x940>
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	dd1e      	ble.n	8008df4 <_dtoa_r+0x944>
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f47f aec0 	bne.w	8008b3e <_dtoa_r+0x68e>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	2205      	movs	r2, #5
 8008dc2:	4658      	mov	r0, fp
 8008dc4:	f000 fa9a 	bl	80092fc <__multadd>
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4648      	mov	r0, r9
 8008dce:	f000 fcf7 	bl	80097c0 <__mcmp>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f77f aeb3 	ble.w	8008b3e <_dtoa_r+0x68e>
 8008dd8:	4656      	mov	r6, sl
 8008dda:	2331      	movs	r3, #49	@ 0x31
 8008ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	3301      	adds	r3, #1
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	e6ae      	b.n	8008b46 <_dtoa_r+0x696>
 8008de8:	9c07      	ldr	r4, [sp, #28]
 8008dea:	9704      	str	r7, [sp, #16]
 8008dec:	4625      	mov	r5, r4
 8008dee:	e7f3      	b.n	8008dd8 <_dtoa_r+0x928>
 8008df0:	9b07      	ldr	r3, [sp, #28]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 8104 	beq.w	8009004 <_dtoa_r+0xb54>
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	dd05      	ble.n	8008e0c <_dtoa_r+0x95c>
 8008e00:	4629      	mov	r1, r5
 8008e02:	4632      	mov	r2, r6
 8008e04:	4658      	mov	r0, fp
 8008e06:	f000 fc6f 	bl	80096e8 <__lshift>
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d05a      	beq.n	8008ec8 <_dtoa_r+0xa18>
 8008e12:	6869      	ldr	r1, [r5, #4]
 8008e14:	4658      	mov	r0, fp
 8008e16:	f000 fa0f 	bl	8009238 <_Balloc>
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	b928      	cbnz	r0, 8008e2a <_dtoa_r+0x97a>
 8008e1e:	4b84      	ldr	r3, [pc, #528]	@ (8009030 <_dtoa_r+0xb80>)
 8008e20:	4602      	mov	r2, r0
 8008e22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e26:	f7ff bb5a 	b.w	80084de <_dtoa_r+0x2e>
 8008e2a:	692a      	ldr	r2, [r5, #16]
 8008e2c:	3202      	adds	r2, #2
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	f105 010c 	add.w	r1, r5, #12
 8008e34:	300c      	adds	r0, #12
 8008e36:	f001 ff75 	bl	800ad24 <memcpy>
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4658      	mov	r0, fp
 8008e40:	f000 fc52 	bl	80096e8 <__lshift>
 8008e44:	f10a 0301 	add.w	r3, sl, #1
 8008e48:	9307      	str	r3, [sp, #28]
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	4453      	add	r3, sl
 8008e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	462f      	mov	r7, r5
 8008e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	4621      	mov	r1, r4
 8008e60:	3b01      	subs	r3, #1
 8008e62:	4648      	mov	r0, r9
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	f7ff fa99 	bl	800839c <quorem>
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	9002      	str	r0, [sp, #8]
 8008e6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e72:	4648      	mov	r0, r9
 8008e74:	f000 fca4 	bl	80097c0 <__mcmp>
 8008e78:	462a      	mov	r2, r5
 8008e7a:	9008      	str	r0, [sp, #32]
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4658      	mov	r0, fp
 8008e80:	f000 fcba 	bl	80097f8 <__mdiff>
 8008e84:	68c2      	ldr	r2, [r0, #12]
 8008e86:	4606      	mov	r6, r0
 8008e88:	bb02      	cbnz	r2, 8008ecc <_dtoa_r+0xa1c>
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	4648      	mov	r0, r9
 8008e8e:	f000 fc97 	bl	80097c0 <__mcmp>
 8008e92:	4602      	mov	r2, r0
 8008e94:	4631      	mov	r1, r6
 8008e96:	4658      	mov	r0, fp
 8008e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e9a:	f000 fa0d 	bl	80092b8 <_Bfree>
 8008e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ea2:	9e07      	ldr	r6, [sp, #28]
 8008ea4:	ea43 0102 	orr.w	r1, r3, r2
 8008ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eaa:	4319      	orrs	r1, r3
 8008eac:	d110      	bne.n	8008ed0 <_dtoa_r+0xa20>
 8008eae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008eb2:	d029      	beq.n	8008f08 <_dtoa_r+0xa58>
 8008eb4:	9b08      	ldr	r3, [sp, #32]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	dd02      	ble.n	8008ec0 <_dtoa_r+0xa10>
 8008eba:	9b02      	ldr	r3, [sp, #8]
 8008ebc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ec0:	9b00      	ldr	r3, [sp, #0]
 8008ec2:	f883 8000 	strb.w	r8, [r3]
 8008ec6:	e63f      	b.n	8008b48 <_dtoa_r+0x698>
 8008ec8:	4628      	mov	r0, r5
 8008eca:	e7bb      	b.n	8008e44 <_dtoa_r+0x994>
 8008ecc:	2201      	movs	r2, #1
 8008ece:	e7e1      	b.n	8008e94 <_dtoa_r+0x9e4>
 8008ed0:	9b08      	ldr	r3, [sp, #32]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	db04      	blt.n	8008ee0 <_dtoa_r+0xa30>
 8008ed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008edc:	430b      	orrs	r3, r1
 8008ede:	d120      	bne.n	8008f22 <_dtoa_r+0xa72>
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	dded      	ble.n	8008ec0 <_dtoa_r+0xa10>
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	4658      	mov	r0, fp
 8008eea:	f000 fbfd 	bl	80096e8 <__lshift>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	f000 fc65 	bl	80097c0 <__mcmp>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	dc03      	bgt.n	8008f02 <_dtoa_r+0xa52>
 8008efa:	d1e1      	bne.n	8008ec0 <_dtoa_r+0xa10>
 8008efc:	f018 0f01 	tst.w	r8, #1
 8008f00:	d0de      	beq.n	8008ec0 <_dtoa_r+0xa10>
 8008f02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f06:	d1d8      	bne.n	8008eba <_dtoa_r+0xa0a>
 8008f08:	9a00      	ldr	r2, [sp, #0]
 8008f0a:	2339      	movs	r3, #57	@ 0x39
 8008f0c:	7013      	strb	r3, [r2, #0]
 8008f0e:	4633      	mov	r3, r6
 8008f10:	461e      	mov	r6, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f18:	2a39      	cmp	r2, #57	@ 0x39
 8008f1a:	d052      	beq.n	8008fc2 <_dtoa_r+0xb12>
 8008f1c:	3201      	adds	r2, #1
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	e612      	b.n	8008b48 <_dtoa_r+0x698>
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	dd07      	ble.n	8008f36 <_dtoa_r+0xa86>
 8008f26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f2a:	d0ed      	beq.n	8008f08 <_dtoa_r+0xa58>
 8008f2c:	9a00      	ldr	r2, [sp, #0]
 8008f2e:	f108 0301 	add.w	r3, r8, #1
 8008f32:	7013      	strb	r3, [r2, #0]
 8008f34:	e608      	b.n	8008b48 <_dtoa_r+0x698>
 8008f36:	9b07      	ldr	r3, [sp, #28]
 8008f38:	9a07      	ldr	r2, [sp, #28]
 8008f3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d028      	beq.n	8008f96 <_dtoa_r+0xae6>
 8008f44:	4649      	mov	r1, r9
 8008f46:	2300      	movs	r3, #0
 8008f48:	220a      	movs	r2, #10
 8008f4a:	4658      	mov	r0, fp
 8008f4c:	f000 f9d6 	bl	80092fc <__multadd>
 8008f50:	42af      	cmp	r7, r5
 8008f52:	4681      	mov	r9, r0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	f04f 020a 	mov.w	r2, #10
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4658      	mov	r0, fp
 8008f60:	d107      	bne.n	8008f72 <_dtoa_r+0xac2>
 8008f62:	f000 f9cb 	bl	80092fc <__multadd>
 8008f66:	4607      	mov	r7, r0
 8008f68:	4605      	mov	r5, r0
 8008f6a:	9b07      	ldr	r3, [sp, #28]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	e774      	b.n	8008e5c <_dtoa_r+0x9ac>
 8008f72:	f000 f9c3 	bl	80092fc <__multadd>
 8008f76:	4629      	mov	r1, r5
 8008f78:	4607      	mov	r7, r0
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	220a      	movs	r2, #10
 8008f7e:	4658      	mov	r0, fp
 8008f80:	f000 f9bc 	bl	80092fc <__multadd>
 8008f84:	4605      	mov	r5, r0
 8008f86:	e7f0      	b.n	8008f6a <_dtoa_r+0xaba>
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bfcc      	ite	gt
 8008f8e:	461e      	movgt	r6, r3
 8008f90:	2601      	movle	r6, #1
 8008f92:	4456      	add	r6, sl
 8008f94:	2700      	movs	r7, #0
 8008f96:	4649      	mov	r1, r9
 8008f98:	2201      	movs	r2, #1
 8008f9a:	4658      	mov	r0, fp
 8008f9c:	f000 fba4 	bl	80096e8 <__lshift>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4681      	mov	r9, r0
 8008fa4:	f000 fc0c 	bl	80097c0 <__mcmp>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	dcb0      	bgt.n	8008f0e <_dtoa_r+0xa5e>
 8008fac:	d102      	bne.n	8008fb4 <_dtoa_r+0xb04>
 8008fae:	f018 0f01 	tst.w	r8, #1
 8008fb2:	d1ac      	bne.n	8008f0e <_dtoa_r+0xa5e>
 8008fb4:	4633      	mov	r3, r6
 8008fb6:	461e      	mov	r6, r3
 8008fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fbc:	2a30      	cmp	r2, #48	@ 0x30
 8008fbe:	d0fa      	beq.n	8008fb6 <_dtoa_r+0xb06>
 8008fc0:	e5c2      	b.n	8008b48 <_dtoa_r+0x698>
 8008fc2:	459a      	cmp	sl, r3
 8008fc4:	d1a4      	bne.n	8008f10 <_dtoa_r+0xa60>
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	2331      	movs	r3, #49	@ 0x31
 8008fce:	f88a 3000 	strb.w	r3, [sl]
 8008fd2:	e5b9      	b.n	8008b48 <_dtoa_r+0x698>
 8008fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009034 <_dtoa_r+0xb84>
 8008fda:	b11b      	cbz	r3, 8008fe4 <_dtoa_r+0xb34>
 8008fdc:	f10a 0308 	add.w	r3, sl, #8
 8008fe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	4650      	mov	r0, sl
 8008fe6:	b019      	add	sp, #100	@ 0x64
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	f77f ae37 	ble.w	8008c62 <_dtoa_r+0x7b2>
 8008ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	e655      	b.n	8008ca8 <_dtoa_r+0x7f8>
 8008ffc:	9b00      	ldr	r3, [sp, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f77f aed6 	ble.w	8008db0 <_dtoa_r+0x900>
 8009004:	4656      	mov	r6, sl
 8009006:	4621      	mov	r1, r4
 8009008:	4648      	mov	r0, r9
 800900a:	f7ff f9c7 	bl	800839c <quorem>
 800900e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009012:	f806 8b01 	strb.w	r8, [r6], #1
 8009016:	9b00      	ldr	r3, [sp, #0]
 8009018:	eba6 020a 	sub.w	r2, r6, sl
 800901c:	4293      	cmp	r3, r2
 800901e:	ddb3      	ble.n	8008f88 <_dtoa_r+0xad8>
 8009020:	4649      	mov	r1, r9
 8009022:	2300      	movs	r3, #0
 8009024:	220a      	movs	r2, #10
 8009026:	4658      	mov	r0, fp
 8009028:	f000 f968 	bl	80092fc <__multadd>
 800902c:	4681      	mov	r9, r0
 800902e:	e7ea      	b.n	8009006 <_dtoa_r+0xb56>
 8009030:	0800bb6d 	.word	0x0800bb6d
 8009034:	0800baf1 	.word	0x0800baf1

08009038 <_free_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4605      	mov	r5, r0
 800903c:	2900      	cmp	r1, #0
 800903e:	d041      	beq.n	80090c4 <_free_r+0x8c>
 8009040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009044:	1f0c      	subs	r4, r1, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfb8      	it	lt
 800904a:	18e4      	addlt	r4, r4, r3
 800904c:	f000 f8e8 	bl	8009220 <__malloc_lock>
 8009050:	4a1d      	ldr	r2, [pc, #116]	@ (80090c8 <_free_r+0x90>)
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	b933      	cbnz	r3, 8009064 <_free_r+0x2c>
 8009056:	6063      	str	r3, [r4, #4]
 8009058:	6014      	str	r4, [r2, #0]
 800905a:	4628      	mov	r0, r5
 800905c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009060:	f000 b8e4 	b.w	800922c <__malloc_unlock>
 8009064:	42a3      	cmp	r3, r4
 8009066:	d908      	bls.n	800907a <_free_r+0x42>
 8009068:	6820      	ldr	r0, [r4, #0]
 800906a:	1821      	adds	r1, r4, r0
 800906c:	428b      	cmp	r3, r1
 800906e:	bf01      	itttt	eq
 8009070:	6819      	ldreq	r1, [r3, #0]
 8009072:	685b      	ldreq	r3, [r3, #4]
 8009074:	1809      	addeq	r1, r1, r0
 8009076:	6021      	streq	r1, [r4, #0]
 8009078:	e7ed      	b.n	8009056 <_free_r+0x1e>
 800907a:	461a      	mov	r2, r3
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	b10b      	cbz	r3, 8009084 <_free_r+0x4c>
 8009080:	42a3      	cmp	r3, r4
 8009082:	d9fa      	bls.n	800907a <_free_r+0x42>
 8009084:	6811      	ldr	r1, [r2, #0]
 8009086:	1850      	adds	r0, r2, r1
 8009088:	42a0      	cmp	r0, r4
 800908a:	d10b      	bne.n	80090a4 <_free_r+0x6c>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	4401      	add	r1, r0
 8009090:	1850      	adds	r0, r2, r1
 8009092:	4283      	cmp	r3, r0
 8009094:	6011      	str	r1, [r2, #0]
 8009096:	d1e0      	bne.n	800905a <_free_r+0x22>
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	6053      	str	r3, [r2, #4]
 800909e:	4408      	add	r0, r1
 80090a0:	6010      	str	r0, [r2, #0]
 80090a2:	e7da      	b.n	800905a <_free_r+0x22>
 80090a4:	d902      	bls.n	80090ac <_free_r+0x74>
 80090a6:	230c      	movs	r3, #12
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	e7d6      	b.n	800905a <_free_r+0x22>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	1821      	adds	r1, r4, r0
 80090b0:	428b      	cmp	r3, r1
 80090b2:	bf04      	itt	eq
 80090b4:	6819      	ldreq	r1, [r3, #0]
 80090b6:	685b      	ldreq	r3, [r3, #4]
 80090b8:	6063      	str	r3, [r4, #4]
 80090ba:	bf04      	itt	eq
 80090bc:	1809      	addeq	r1, r1, r0
 80090be:	6021      	streq	r1, [r4, #0]
 80090c0:	6054      	str	r4, [r2, #4]
 80090c2:	e7ca      	b.n	800905a <_free_r+0x22>
 80090c4:	bd38      	pop	{r3, r4, r5, pc}
 80090c6:	bf00      	nop
 80090c8:	200008a4 	.word	0x200008a4

080090cc <malloc>:
 80090cc:	4b02      	ldr	r3, [pc, #8]	@ (80090d8 <malloc+0xc>)
 80090ce:	4601      	mov	r1, r0
 80090d0:	6818      	ldr	r0, [r3, #0]
 80090d2:	f000 b825 	b.w	8009120 <_malloc_r>
 80090d6:	bf00      	nop
 80090d8:	20000018 	.word	0x20000018

080090dc <sbrk_aligned>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4e0f      	ldr	r6, [pc, #60]	@ (800911c <sbrk_aligned+0x40>)
 80090e0:	460c      	mov	r4, r1
 80090e2:	6831      	ldr	r1, [r6, #0]
 80090e4:	4605      	mov	r5, r0
 80090e6:	b911      	cbnz	r1, 80090ee <sbrk_aligned+0x12>
 80090e8:	f001 fe0c 	bl	800ad04 <_sbrk_r>
 80090ec:	6030      	str	r0, [r6, #0]
 80090ee:	4621      	mov	r1, r4
 80090f0:	4628      	mov	r0, r5
 80090f2:	f001 fe07 	bl	800ad04 <_sbrk_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d103      	bne.n	8009102 <sbrk_aligned+0x26>
 80090fa:	f04f 34ff 	mov.w	r4, #4294967295
 80090fe:	4620      	mov	r0, r4
 8009100:	bd70      	pop	{r4, r5, r6, pc}
 8009102:	1cc4      	adds	r4, r0, #3
 8009104:	f024 0403 	bic.w	r4, r4, #3
 8009108:	42a0      	cmp	r0, r4
 800910a:	d0f8      	beq.n	80090fe <sbrk_aligned+0x22>
 800910c:	1a21      	subs	r1, r4, r0
 800910e:	4628      	mov	r0, r5
 8009110:	f001 fdf8 	bl	800ad04 <_sbrk_r>
 8009114:	3001      	adds	r0, #1
 8009116:	d1f2      	bne.n	80090fe <sbrk_aligned+0x22>
 8009118:	e7ef      	b.n	80090fa <sbrk_aligned+0x1e>
 800911a:	bf00      	nop
 800911c:	200008a0 	.word	0x200008a0

08009120 <_malloc_r>:
 8009120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009124:	1ccd      	adds	r5, r1, #3
 8009126:	f025 0503 	bic.w	r5, r5, #3
 800912a:	3508      	adds	r5, #8
 800912c:	2d0c      	cmp	r5, #12
 800912e:	bf38      	it	cc
 8009130:	250c      	movcc	r5, #12
 8009132:	2d00      	cmp	r5, #0
 8009134:	4606      	mov	r6, r0
 8009136:	db01      	blt.n	800913c <_malloc_r+0x1c>
 8009138:	42a9      	cmp	r1, r5
 800913a:	d904      	bls.n	8009146 <_malloc_r+0x26>
 800913c:	230c      	movs	r3, #12
 800913e:	6033      	str	r3, [r6, #0]
 8009140:	2000      	movs	r0, #0
 8009142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800921c <_malloc_r+0xfc>
 800914a:	f000 f869 	bl	8009220 <__malloc_lock>
 800914e:	f8d8 3000 	ldr.w	r3, [r8]
 8009152:	461c      	mov	r4, r3
 8009154:	bb44      	cbnz	r4, 80091a8 <_malloc_r+0x88>
 8009156:	4629      	mov	r1, r5
 8009158:	4630      	mov	r0, r6
 800915a:	f7ff ffbf 	bl	80090dc <sbrk_aligned>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	4604      	mov	r4, r0
 8009162:	d158      	bne.n	8009216 <_malloc_r+0xf6>
 8009164:	f8d8 4000 	ldr.w	r4, [r8]
 8009168:	4627      	mov	r7, r4
 800916a:	2f00      	cmp	r7, #0
 800916c:	d143      	bne.n	80091f6 <_malloc_r+0xd6>
 800916e:	2c00      	cmp	r4, #0
 8009170:	d04b      	beq.n	800920a <_malloc_r+0xea>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	4639      	mov	r1, r7
 8009176:	4630      	mov	r0, r6
 8009178:	eb04 0903 	add.w	r9, r4, r3
 800917c:	f001 fdc2 	bl	800ad04 <_sbrk_r>
 8009180:	4581      	cmp	r9, r0
 8009182:	d142      	bne.n	800920a <_malloc_r+0xea>
 8009184:	6821      	ldr	r1, [r4, #0]
 8009186:	1a6d      	subs	r5, r5, r1
 8009188:	4629      	mov	r1, r5
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff ffa6 	bl	80090dc <sbrk_aligned>
 8009190:	3001      	adds	r0, #1
 8009192:	d03a      	beq.n	800920a <_malloc_r+0xea>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	442b      	add	r3, r5
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	f8d8 3000 	ldr.w	r3, [r8]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	bb62      	cbnz	r2, 80091fc <_malloc_r+0xdc>
 80091a2:	f8c8 7000 	str.w	r7, [r8]
 80091a6:	e00f      	b.n	80091c8 <_malloc_r+0xa8>
 80091a8:	6822      	ldr	r2, [r4, #0]
 80091aa:	1b52      	subs	r2, r2, r5
 80091ac:	d420      	bmi.n	80091f0 <_malloc_r+0xd0>
 80091ae:	2a0b      	cmp	r2, #11
 80091b0:	d917      	bls.n	80091e2 <_malloc_r+0xc2>
 80091b2:	1961      	adds	r1, r4, r5
 80091b4:	42a3      	cmp	r3, r4
 80091b6:	6025      	str	r5, [r4, #0]
 80091b8:	bf18      	it	ne
 80091ba:	6059      	strne	r1, [r3, #4]
 80091bc:	6863      	ldr	r3, [r4, #4]
 80091be:	bf08      	it	eq
 80091c0:	f8c8 1000 	streq.w	r1, [r8]
 80091c4:	5162      	str	r2, [r4, r5]
 80091c6:	604b      	str	r3, [r1, #4]
 80091c8:	4630      	mov	r0, r6
 80091ca:	f000 f82f 	bl	800922c <__malloc_unlock>
 80091ce:	f104 000b 	add.w	r0, r4, #11
 80091d2:	1d23      	adds	r3, r4, #4
 80091d4:	f020 0007 	bic.w	r0, r0, #7
 80091d8:	1ac2      	subs	r2, r0, r3
 80091da:	bf1c      	itt	ne
 80091dc:	1a1b      	subne	r3, r3, r0
 80091de:	50a3      	strne	r3, [r4, r2]
 80091e0:	e7af      	b.n	8009142 <_malloc_r+0x22>
 80091e2:	6862      	ldr	r2, [r4, #4]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	bf0c      	ite	eq
 80091e8:	f8c8 2000 	streq.w	r2, [r8]
 80091ec:	605a      	strne	r2, [r3, #4]
 80091ee:	e7eb      	b.n	80091c8 <_malloc_r+0xa8>
 80091f0:	4623      	mov	r3, r4
 80091f2:	6864      	ldr	r4, [r4, #4]
 80091f4:	e7ae      	b.n	8009154 <_malloc_r+0x34>
 80091f6:	463c      	mov	r4, r7
 80091f8:	687f      	ldr	r7, [r7, #4]
 80091fa:	e7b6      	b.n	800916a <_malloc_r+0x4a>
 80091fc:	461a      	mov	r2, r3
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	42a3      	cmp	r3, r4
 8009202:	d1fb      	bne.n	80091fc <_malloc_r+0xdc>
 8009204:	2300      	movs	r3, #0
 8009206:	6053      	str	r3, [r2, #4]
 8009208:	e7de      	b.n	80091c8 <_malloc_r+0xa8>
 800920a:	230c      	movs	r3, #12
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	4630      	mov	r0, r6
 8009210:	f000 f80c 	bl	800922c <__malloc_unlock>
 8009214:	e794      	b.n	8009140 <_malloc_r+0x20>
 8009216:	6005      	str	r5, [r0, #0]
 8009218:	e7d6      	b.n	80091c8 <_malloc_r+0xa8>
 800921a:	bf00      	nop
 800921c:	200008a4 	.word	0x200008a4

08009220 <__malloc_lock>:
 8009220:	4801      	ldr	r0, [pc, #4]	@ (8009228 <__malloc_lock+0x8>)
 8009222:	f7ff b8b2 	b.w	800838a <__retarget_lock_acquire_recursive>
 8009226:	bf00      	nop
 8009228:	2000089c 	.word	0x2000089c

0800922c <__malloc_unlock>:
 800922c:	4801      	ldr	r0, [pc, #4]	@ (8009234 <__malloc_unlock+0x8>)
 800922e:	f7ff b8ad 	b.w	800838c <__retarget_lock_release_recursive>
 8009232:	bf00      	nop
 8009234:	2000089c 	.word	0x2000089c

08009238 <_Balloc>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	69c6      	ldr	r6, [r0, #28]
 800923c:	4604      	mov	r4, r0
 800923e:	460d      	mov	r5, r1
 8009240:	b976      	cbnz	r6, 8009260 <_Balloc+0x28>
 8009242:	2010      	movs	r0, #16
 8009244:	f7ff ff42 	bl	80090cc <malloc>
 8009248:	4602      	mov	r2, r0
 800924a:	61e0      	str	r0, [r4, #28]
 800924c:	b920      	cbnz	r0, 8009258 <_Balloc+0x20>
 800924e:	4b18      	ldr	r3, [pc, #96]	@ (80092b0 <_Balloc+0x78>)
 8009250:	4818      	ldr	r0, [pc, #96]	@ (80092b4 <_Balloc+0x7c>)
 8009252:	216b      	movs	r1, #107	@ 0x6b
 8009254:	f001 fd7c 	bl	800ad50 <__assert_func>
 8009258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800925c:	6006      	str	r6, [r0, #0]
 800925e:	60c6      	str	r6, [r0, #12]
 8009260:	69e6      	ldr	r6, [r4, #28]
 8009262:	68f3      	ldr	r3, [r6, #12]
 8009264:	b183      	cbz	r3, 8009288 <_Balloc+0x50>
 8009266:	69e3      	ldr	r3, [r4, #28]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800926e:	b9b8      	cbnz	r0, 80092a0 <_Balloc+0x68>
 8009270:	2101      	movs	r1, #1
 8009272:	fa01 f605 	lsl.w	r6, r1, r5
 8009276:	1d72      	adds	r2, r6, #5
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	4620      	mov	r0, r4
 800927c:	f001 fd86 	bl	800ad8c <_calloc_r>
 8009280:	b160      	cbz	r0, 800929c <_Balloc+0x64>
 8009282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009286:	e00e      	b.n	80092a6 <_Balloc+0x6e>
 8009288:	2221      	movs	r2, #33	@ 0x21
 800928a:	2104      	movs	r1, #4
 800928c:	4620      	mov	r0, r4
 800928e:	f001 fd7d 	bl	800ad8c <_calloc_r>
 8009292:	69e3      	ldr	r3, [r4, #28]
 8009294:	60f0      	str	r0, [r6, #12]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e4      	bne.n	8009266 <_Balloc+0x2e>
 800929c:	2000      	movs	r0, #0
 800929e:	bd70      	pop	{r4, r5, r6, pc}
 80092a0:	6802      	ldr	r2, [r0, #0]
 80092a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092a6:	2300      	movs	r3, #0
 80092a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092ac:	e7f7      	b.n	800929e <_Balloc+0x66>
 80092ae:	bf00      	nop
 80092b0:	0800bafe 	.word	0x0800bafe
 80092b4:	0800bb7e 	.word	0x0800bb7e

080092b8 <_Bfree>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	69c6      	ldr	r6, [r0, #28]
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	b976      	cbnz	r6, 80092e0 <_Bfree+0x28>
 80092c2:	2010      	movs	r0, #16
 80092c4:	f7ff ff02 	bl	80090cc <malloc>
 80092c8:	4602      	mov	r2, r0
 80092ca:	61e8      	str	r0, [r5, #28]
 80092cc:	b920      	cbnz	r0, 80092d8 <_Bfree+0x20>
 80092ce:	4b09      	ldr	r3, [pc, #36]	@ (80092f4 <_Bfree+0x3c>)
 80092d0:	4809      	ldr	r0, [pc, #36]	@ (80092f8 <_Bfree+0x40>)
 80092d2:	218f      	movs	r1, #143	@ 0x8f
 80092d4:	f001 fd3c 	bl	800ad50 <__assert_func>
 80092d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092dc:	6006      	str	r6, [r0, #0]
 80092de:	60c6      	str	r6, [r0, #12]
 80092e0:	b13c      	cbz	r4, 80092f2 <_Bfree+0x3a>
 80092e2:	69eb      	ldr	r3, [r5, #28]
 80092e4:	6862      	ldr	r2, [r4, #4]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092ec:	6021      	str	r1, [r4, #0]
 80092ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	0800bafe 	.word	0x0800bafe
 80092f8:	0800bb7e 	.word	0x0800bb7e

080092fc <__multadd>:
 80092fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	690d      	ldr	r5, [r1, #16]
 8009302:	4607      	mov	r7, r0
 8009304:	460c      	mov	r4, r1
 8009306:	461e      	mov	r6, r3
 8009308:	f101 0c14 	add.w	ip, r1, #20
 800930c:	2000      	movs	r0, #0
 800930e:	f8dc 3000 	ldr.w	r3, [ip]
 8009312:	b299      	uxth	r1, r3
 8009314:	fb02 6101 	mla	r1, r2, r1, r6
 8009318:	0c1e      	lsrs	r6, r3, #16
 800931a:	0c0b      	lsrs	r3, r1, #16
 800931c:	fb02 3306 	mla	r3, r2, r6, r3
 8009320:	b289      	uxth	r1, r1
 8009322:	3001      	adds	r0, #1
 8009324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009328:	4285      	cmp	r5, r0
 800932a:	f84c 1b04 	str.w	r1, [ip], #4
 800932e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009332:	dcec      	bgt.n	800930e <__multadd+0x12>
 8009334:	b30e      	cbz	r6, 800937a <__multadd+0x7e>
 8009336:	68a3      	ldr	r3, [r4, #8]
 8009338:	42ab      	cmp	r3, r5
 800933a:	dc19      	bgt.n	8009370 <__multadd+0x74>
 800933c:	6861      	ldr	r1, [r4, #4]
 800933e:	4638      	mov	r0, r7
 8009340:	3101      	adds	r1, #1
 8009342:	f7ff ff79 	bl	8009238 <_Balloc>
 8009346:	4680      	mov	r8, r0
 8009348:	b928      	cbnz	r0, 8009356 <__multadd+0x5a>
 800934a:	4602      	mov	r2, r0
 800934c:	4b0c      	ldr	r3, [pc, #48]	@ (8009380 <__multadd+0x84>)
 800934e:	480d      	ldr	r0, [pc, #52]	@ (8009384 <__multadd+0x88>)
 8009350:	21ba      	movs	r1, #186	@ 0xba
 8009352:	f001 fcfd 	bl	800ad50 <__assert_func>
 8009356:	6922      	ldr	r2, [r4, #16]
 8009358:	3202      	adds	r2, #2
 800935a:	f104 010c 	add.w	r1, r4, #12
 800935e:	0092      	lsls	r2, r2, #2
 8009360:	300c      	adds	r0, #12
 8009362:	f001 fcdf 	bl	800ad24 <memcpy>
 8009366:	4621      	mov	r1, r4
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff ffa5 	bl	80092b8 <_Bfree>
 800936e:	4644      	mov	r4, r8
 8009370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009374:	3501      	adds	r5, #1
 8009376:	615e      	str	r6, [r3, #20]
 8009378:	6125      	str	r5, [r4, #16]
 800937a:	4620      	mov	r0, r4
 800937c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009380:	0800bb6d 	.word	0x0800bb6d
 8009384:	0800bb7e 	.word	0x0800bb7e

08009388 <__s2b>:
 8009388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800938c:	460c      	mov	r4, r1
 800938e:	4615      	mov	r5, r2
 8009390:	461f      	mov	r7, r3
 8009392:	2209      	movs	r2, #9
 8009394:	3308      	adds	r3, #8
 8009396:	4606      	mov	r6, r0
 8009398:	fb93 f3f2 	sdiv	r3, r3, r2
 800939c:	2100      	movs	r1, #0
 800939e:	2201      	movs	r2, #1
 80093a0:	429a      	cmp	r2, r3
 80093a2:	db09      	blt.n	80093b8 <__s2b+0x30>
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff ff47 	bl	8009238 <_Balloc>
 80093aa:	b940      	cbnz	r0, 80093be <__s2b+0x36>
 80093ac:	4602      	mov	r2, r0
 80093ae:	4b19      	ldr	r3, [pc, #100]	@ (8009414 <__s2b+0x8c>)
 80093b0:	4819      	ldr	r0, [pc, #100]	@ (8009418 <__s2b+0x90>)
 80093b2:	21d3      	movs	r1, #211	@ 0xd3
 80093b4:	f001 fccc 	bl	800ad50 <__assert_func>
 80093b8:	0052      	lsls	r2, r2, #1
 80093ba:	3101      	adds	r1, #1
 80093bc:	e7f0      	b.n	80093a0 <__s2b+0x18>
 80093be:	9b08      	ldr	r3, [sp, #32]
 80093c0:	6143      	str	r3, [r0, #20]
 80093c2:	2d09      	cmp	r5, #9
 80093c4:	f04f 0301 	mov.w	r3, #1
 80093c8:	6103      	str	r3, [r0, #16]
 80093ca:	dd16      	ble.n	80093fa <__s2b+0x72>
 80093cc:	f104 0909 	add.w	r9, r4, #9
 80093d0:	46c8      	mov	r8, r9
 80093d2:	442c      	add	r4, r5
 80093d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093d8:	4601      	mov	r1, r0
 80093da:	3b30      	subs	r3, #48	@ 0x30
 80093dc:	220a      	movs	r2, #10
 80093de:	4630      	mov	r0, r6
 80093e0:	f7ff ff8c 	bl	80092fc <__multadd>
 80093e4:	45a0      	cmp	r8, r4
 80093e6:	d1f5      	bne.n	80093d4 <__s2b+0x4c>
 80093e8:	f1a5 0408 	sub.w	r4, r5, #8
 80093ec:	444c      	add	r4, r9
 80093ee:	1b2d      	subs	r5, r5, r4
 80093f0:	1963      	adds	r3, r4, r5
 80093f2:	42bb      	cmp	r3, r7
 80093f4:	db04      	blt.n	8009400 <__s2b+0x78>
 80093f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fa:	340a      	adds	r4, #10
 80093fc:	2509      	movs	r5, #9
 80093fe:	e7f6      	b.n	80093ee <__s2b+0x66>
 8009400:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009404:	4601      	mov	r1, r0
 8009406:	3b30      	subs	r3, #48	@ 0x30
 8009408:	220a      	movs	r2, #10
 800940a:	4630      	mov	r0, r6
 800940c:	f7ff ff76 	bl	80092fc <__multadd>
 8009410:	e7ee      	b.n	80093f0 <__s2b+0x68>
 8009412:	bf00      	nop
 8009414:	0800bb6d 	.word	0x0800bb6d
 8009418:	0800bb7e 	.word	0x0800bb7e

0800941c <__hi0bits>:
 800941c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009420:	4603      	mov	r3, r0
 8009422:	bf36      	itet	cc
 8009424:	0403      	lslcc	r3, r0, #16
 8009426:	2000      	movcs	r0, #0
 8009428:	2010      	movcc	r0, #16
 800942a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800942e:	bf3c      	itt	cc
 8009430:	021b      	lslcc	r3, r3, #8
 8009432:	3008      	addcc	r0, #8
 8009434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009438:	bf3c      	itt	cc
 800943a:	011b      	lslcc	r3, r3, #4
 800943c:	3004      	addcc	r0, #4
 800943e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009442:	bf3c      	itt	cc
 8009444:	009b      	lslcc	r3, r3, #2
 8009446:	3002      	addcc	r0, #2
 8009448:	2b00      	cmp	r3, #0
 800944a:	db05      	blt.n	8009458 <__hi0bits+0x3c>
 800944c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009450:	f100 0001 	add.w	r0, r0, #1
 8009454:	bf08      	it	eq
 8009456:	2020      	moveq	r0, #32
 8009458:	4770      	bx	lr

0800945a <__lo0bits>:
 800945a:	6803      	ldr	r3, [r0, #0]
 800945c:	4602      	mov	r2, r0
 800945e:	f013 0007 	ands.w	r0, r3, #7
 8009462:	d00b      	beq.n	800947c <__lo0bits+0x22>
 8009464:	07d9      	lsls	r1, r3, #31
 8009466:	d421      	bmi.n	80094ac <__lo0bits+0x52>
 8009468:	0798      	lsls	r0, r3, #30
 800946a:	bf49      	itett	mi
 800946c:	085b      	lsrmi	r3, r3, #1
 800946e:	089b      	lsrpl	r3, r3, #2
 8009470:	2001      	movmi	r0, #1
 8009472:	6013      	strmi	r3, [r2, #0]
 8009474:	bf5c      	itt	pl
 8009476:	6013      	strpl	r3, [r2, #0]
 8009478:	2002      	movpl	r0, #2
 800947a:	4770      	bx	lr
 800947c:	b299      	uxth	r1, r3
 800947e:	b909      	cbnz	r1, 8009484 <__lo0bits+0x2a>
 8009480:	0c1b      	lsrs	r3, r3, #16
 8009482:	2010      	movs	r0, #16
 8009484:	b2d9      	uxtb	r1, r3
 8009486:	b909      	cbnz	r1, 800948c <__lo0bits+0x32>
 8009488:	3008      	adds	r0, #8
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	0719      	lsls	r1, r3, #28
 800948e:	bf04      	itt	eq
 8009490:	091b      	lsreq	r3, r3, #4
 8009492:	3004      	addeq	r0, #4
 8009494:	0799      	lsls	r1, r3, #30
 8009496:	bf04      	itt	eq
 8009498:	089b      	lsreq	r3, r3, #2
 800949a:	3002      	addeq	r0, #2
 800949c:	07d9      	lsls	r1, r3, #31
 800949e:	d403      	bmi.n	80094a8 <__lo0bits+0x4e>
 80094a0:	085b      	lsrs	r3, r3, #1
 80094a2:	f100 0001 	add.w	r0, r0, #1
 80094a6:	d003      	beq.n	80094b0 <__lo0bits+0x56>
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	4770      	bx	lr
 80094ac:	2000      	movs	r0, #0
 80094ae:	4770      	bx	lr
 80094b0:	2020      	movs	r0, #32
 80094b2:	4770      	bx	lr

080094b4 <__i2b>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	460c      	mov	r4, r1
 80094b8:	2101      	movs	r1, #1
 80094ba:	f7ff febd 	bl	8009238 <_Balloc>
 80094be:	4602      	mov	r2, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__i2b+0x1a>
 80094c2:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <__i2b+0x24>)
 80094c4:	4805      	ldr	r0, [pc, #20]	@ (80094dc <__i2b+0x28>)
 80094c6:	f240 1145 	movw	r1, #325	@ 0x145
 80094ca:	f001 fc41 	bl	800ad50 <__assert_func>
 80094ce:	2301      	movs	r3, #1
 80094d0:	6144      	str	r4, [r0, #20]
 80094d2:	6103      	str	r3, [r0, #16]
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	0800bb6d 	.word	0x0800bb6d
 80094dc:	0800bb7e 	.word	0x0800bb7e

080094e0 <__multiply>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	4614      	mov	r4, r2
 80094e6:	690a      	ldr	r2, [r1, #16]
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	bfa8      	it	ge
 80094ee:	4623      	movge	r3, r4
 80094f0:	460f      	mov	r7, r1
 80094f2:	bfa4      	itt	ge
 80094f4:	460c      	movge	r4, r1
 80094f6:	461f      	movge	r7, r3
 80094f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80094fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	6861      	ldr	r1, [r4, #4]
 8009504:	eb0a 0609 	add.w	r6, sl, r9
 8009508:	42b3      	cmp	r3, r6
 800950a:	b085      	sub	sp, #20
 800950c:	bfb8      	it	lt
 800950e:	3101      	addlt	r1, #1
 8009510:	f7ff fe92 	bl	8009238 <_Balloc>
 8009514:	b930      	cbnz	r0, 8009524 <__multiply+0x44>
 8009516:	4602      	mov	r2, r0
 8009518:	4b44      	ldr	r3, [pc, #272]	@ (800962c <__multiply+0x14c>)
 800951a:	4845      	ldr	r0, [pc, #276]	@ (8009630 <__multiply+0x150>)
 800951c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009520:	f001 fc16 	bl	800ad50 <__assert_func>
 8009524:	f100 0514 	add.w	r5, r0, #20
 8009528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800952c:	462b      	mov	r3, r5
 800952e:	2200      	movs	r2, #0
 8009530:	4543      	cmp	r3, r8
 8009532:	d321      	bcc.n	8009578 <__multiply+0x98>
 8009534:	f107 0114 	add.w	r1, r7, #20
 8009538:	f104 0214 	add.w	r2, r4, #20
 800953c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009540:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009544:	9302      	str	r3, [sp, #8]
 8009546:	1b13      	subs	r3, r2, r4
 8009548:	3b15      	subs	r3, #21
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	3304      	adds	r3, #4
 8009550:	f104 0715 	add.w	r7, r4, #21
 8009554:	42ba      	cmp	r2, r7
 8009556:	bf38      	it	cc
 8009558:	2304      	movcc	r3, #4
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	9b02      	ldr	r3, [sp, #8]
 800955e:	9103      	str	r1, [sp, #12]
 8009560:	428b      	cmp	r3, r1
 8009562:	d80c      	bhi.n	800957e <__multiply+0x9e>
 8009564:	2e00      	cmp	r6, #0
 8009566:	dd03      	ble.n	8009570 <__multiply+0x90>
 8009568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800956c:	2b00      	cmp	r3, #0
 800956e:	d05b      	beq.n	8009628 <__multiply+0x148>
 8009570:	6106      	str	r6, [r0, #16]
 8009572:	b005      	add	sp, #20
 8009574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009578:	f843 2b04 	str.w	r2, [r3], #4
 800957c:	e7d8      	b.n	8009530 <__multiply+0x50>
 800957e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009582:	f1ba 0f00 	cmp.w	sl, #0
 8009586:	d024      	beq.n	80095d2 <__multiply+0xf2>
 8009588:	f104 0e14 	add.w	lr, r4, #20
 800958c:	46a9      	mov	r9, r5
 800958e:	f04f 0c00 	mov.w	ip, #0
 8009592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009596:	f8d9 3000 	ldr.w	r3, [r9]
 800959a:	fa1f fb87 	uxth.w	fp, r7
 800959e:	b29b      	uxth	r3, r3
 80095a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80095a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80095a8:	f8d9 7000 	ldr.w	r7, [r9]
 80095ac:	4463      	add	r3, ip
 80095ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80095b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095c0:	4572      	cmp	r2, lr
 80095c2:	f849 3b04 	str.w	r3, [r9], #4
 80095c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095ca:	d8e2      	bhi.n	8009592 <__multiply+0xb2>
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	f845 c003 	str.w	ip, [r5, r3]
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095d8:	3104      	adds	r1, #4
 80095da:	f1b9 0f00 	cmp.w	r9, #0
 80095de:	d021      	beq.n	8009624 <__multiply+0x144>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	f104 0c14 	add.w	ip, r4, #20
 80095e6:	46ae      	mov	lr, r5
 80095e8:	f04f 0a00 	mov.w	sl, #0
 80095ec:	f8bc b000 	ldrh.w	fp, [ip]
 80095f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80095f4:	fb09 770b 	mla	r7, r9, fp, r7
 80095f8:	4457      	add	r7, sl
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009600:	f84e 3b04 	str.w	r3, [lr], #4
 8009604:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009608:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800960c:	f8be 3000 	ldrh.w	r3, [lr]
 8009610:	fb09 330a 	mla	r3, r9, sl, r3
 8009614:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009618:	4562      	cmp	r2, ip
 800961a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800961e:	d8e5      	bhi.n	80095ec <__multiply+0x10c>
 8009620:	9f01      	ldr	r7, [sp, #4]
 8009622:	51eb      	str	r3, [r5, r7]
 8009624:	3504      	adds	r5, #4
 8009626:	e799      	b.n	800955c <__multiply+0x7c>
 8009628:	3e01      	subs	r6, #1
 800962a:	e79b      	b.n	8009564 <__multiply+0x84>
 800962c:	0800bb6d 	.word	0x0800bb6d
 8009630:	0800bb7e 	.word	0x0800bb7e

08009634 <__pow5mult>:
 8009634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009638:	4615      	mov	r5, r2
 800963a:	f012 0203 	ands.w	r2, r2, #3
 800963e:	4607      	mov	r7, r0
 8009640:	460e      	mov	r6, r1
 8009642:	d007      	beq.n	8009654 <__pow5mult+0x20>
 8009644:	4c25      	ldr	r4, [pc, #148]	@ (80096dc <__pow5mult+0xa8>)
 8009646:	3a01      	subs	r2, #1
 8009648:	2300      	movs	r3, #0
 800964a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800964e:	f7ff fe55 	bl	80092fc <__multadd>
 8009652:	4606      	mov	r6, r0
 8009654:	10ad      	asrs	r5, r5, #2
 8009656:	d03d      	beq.n	80096d4 <__pow5mult+0xa0>
 8009658:	69fc      	ldr	r4, [r7, #28]
 800965a:	b97c      	cbnz	r4, 800967c <__pow5mult+0x48>
 800965c:	2010      	movs	r0, #16
 800965e:	f7ff fd35 	bl	80090cc <malloc>
 8009662:	4602      	mov	r2, r0
 8009664:	61f8      	str	r0, [r7, #28]
 8009666:	b928      	cbnz	r0, 8009674 <__pow5mult+0x40>
 8009668:	4b1d      	ldr	r3, [pc, #116]	@ (80096e0 <__pow5mult+0xac>)
 800966a:	481e      	ldr	r0, [pc, #120]	@ (80096e4 <__pow5mult+0xb0>)
 800966c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009670:	f001 fb6e 	bl	800ad50 <__assert_func>
 8009674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009678:	6004      	str	r4, [r0, #0]
 800967a:	60c4      	str	r4, [r0, #12]
 800967c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009684:	b94c      	cbnz	r4, 800969a <__pow5mult+0x66>
 8009686:	f240 2171 	movw	r1, #625	@ 0x271
 800968a:	4638      	mov	r0, r7
 800968c:	f7ff ff12 	bl	80094b4 <__i2b>
 8009690:	2300      	movs	r3, #0
 8009692:	f8c8 0008 	str.w	r0, [r8, #8]
 8009696:	4604      	mov	r4, r0
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	07eb      	lsls	r3, r5, #31
 80096a0:	d50a      	bpl.n	80096b8 <__pow5mult+0x84>
 80096a2:	4631      	mov	r1, r6
 80096a4:	4622      	mov	r2, r4
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7ff ff1a 	bl	80094e0 <__multiply>
 80096ac:	4631      	mov	r1, r6
 80096ae:	4680      	mov	r8, r0
 80096b0:	4638      	mov	r0, r7
 80096b2:	f7ff fe01 	bl	80092b8 <_Bfree>
 80096b6:	4646      	mov	r6, r8
 80096b8:	106d      	asrs	r5, r5, #1
 80096ba:	d00b      	beq.n	80096d4 <__pow5mult+0xa0>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	b938      	cbnz	r0, 80096d0 <__pow5mult+0x9c>
 80096c0:	4622      	mov	r2, r4
 80096c2:	4621      	mov	r1, r4
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff ff0b 	bl	80094e0 <__multiply>
 80096ca:	6020      	str	r0, [r4, #0]
 80096cc:	f8c0 9000 	str.w	r9, [r0]
 80096d0:	4604      	mov	r4, r0
 80096d2:	e7e4      	b.n	800969e <__pow5mult+0x6a>
 80096d4:	4630      	mov	r0, r6
 80096d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096da:	bf00      	nop
 80096dc:	0800bbd8 	.word	0x0800bbd8
 80096e0:	0800bafe 	.word	0x0800bafe
 80096e4:	0800bb7e 	.word	0x0800bb7e

080096e8 <__lshift>:
 80096e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	460c      	mov	r4, r1
 80096ee:	6849      	ldr	r1, [r1, #4]
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	4607      	mov	r7, r0
 80096fa:	4691      	mov	r9, r2
 80096fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009700:	f108 0601 	add.w	r6, r8, #1
 8009704:	42b3      	cmp	r3, r6
 8009706:	db0b      	blt.n	8009720 <__lshift+0x38>
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff fd95 	bl	8009238 <_Balloc>
 800970e:	4605      	mov	r5, r0
 8009710:	b948      	cbnz	r0, 8009726 <__lshift+0x3e>
 8009712:	4602      	mov	r2, r0
 8009714:	4b28      	ldr	r3, [pc, #160]	@ (80097b8 <__lshift+0xd0>)
 8009716:	4829      	ldr	r0, [pc, #164]	@ (80097bc <__lshift+0xd4>)
 8009718:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800971c:	f001 fb18 	bl	800ad50 <__assert_func>
 8009720:	3101      	adds	r1, #1
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	e7ee      	b.n	8009704 <__lshift+0x1c>
 8009726:	2300      	movs	r3, #0
 8009728:	f100 0114 	add.w	r1, r0, #20
 800972c:	f100 0210 	add.w	r2, r0, #16
 8009730:	4618      	mov	r0, r3
 8009732:	4553      	cmp	r3, sl
 8009734:	db33      	blt.n	800979e <__lshift+0xb6>
 8009736:	6920      	ldr	r0, [r4, #16]
 8009738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800973c:	f104 0314 	add.w	r3, r4, #20
 8009740:	f019 091f 	ands.w	r9, r9, #31
 8009744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009748:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800974c:	d02b      	beq.n	80097a6 <__lshift+0xbe>
 800974e:	f1c9 0e20 	rsb	lr, r9, #32
 8009752:	468a      	mov	sl, r1
 8009754:	2200      	movs	r2, #0
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	fa00 f009 	lsl.w	r0, r0, r9
 800975c:	4310      	orrs	r0, r2
 800975e:	f84a 0b04 	str.w	r0, [sl], #4
 8009762:	f853 2b04 	ldr.w	r2, [r3], #4
 8009766:	459c      	cmp	ip, r3
 8009768:	fa22 f20e 	lsr.w	r2, r2, lr
 800976c:	d8f3      	bhi.n	8009756 <__lshift+0x6e>
 800976e:	ebac 0304 	sub.w	r3, ip, r4
 8009772:	3b15      	subs	r3, #21
 8009774:	f023 0303 	bic.w	r3, r3, #3
 8009778:	3304      	adds	r3, #4
 800977a:	f104 0015 	add.w	r0, r4, #21
 800977e:	4584      	cmp	ip, r0
 8009780:	bf38      	it	cc
 8009782:	2304      	movcc	r3, #4
 8009784:	50ca      	str	r2, [r1, r3]
 8009786:	b10a      	cbz	r2, 800978c <__lshift+0xa4>
 8009788:	f108 0602 	add.w	r6, r8, #2
 800978c:	3e01      	subs	r6, #1
 800978e:	4638      	mov	r0, r7
 8009790:	612e      	str	r6, [r5, #16]
 8009792:	4621      	mov	r1, r4
 8009794:	f7ff fd90 	bl	80092b8 <_Bfree>
 8009798:	4628      	mov	r0, r5
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979e:	f842 0f04 	str.w	r0, [r2, #4]!
 80097a2:	3301      	adds	r3, #1
 80097a4:	e7c5      	b.n	8009732 <__lshift+0x4a>
 80097a6:	3904      	subs	r1, #4
 80097a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80097b0:	459c      	cmp	ip, r3
 80097b2:	d8f9      	bhi.n	80097a8 <__lshift+0xc0>
 80097b4:	e7ea      	b.n	800978c <__lshift+0xa4>
 80097b6:	bf00      	nop
 80097b8:	0800bb6d 	.word	0x0800bb6d
 80097bc:	0800bb7e 	.word	0x0800bb7e

080097c0 <__mcmp>:
 80097c0:	690a      	ldr	r2, [r1, #16]
 80097c2:	4603      	mov	r3, r0
 80097c4:	6900      	ldr	r0, [r0, #16]
 80097c6:	1a80      	subs	r0, r0, r2
 80097c8:	b530      	push	{r4, r5, lr}
 80097ca:	d10e      	bne.n	80097ea <__mcmp+0x2a>
 80097cc:	3314      	adds	r3, #20
 80097ce:	3114      	adds	r1, #20
 80097d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097e0:	4295      	cmp	r5, r2
 80097e2:	d003      	beq.n	80097ec <__mcmp+0x2c>
 80097e4:	d205      	bcs.n	80097f2 <__mcmp+0x32>
 80097e6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ea:	bd30      	pop	{r4, r5, pc}
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	d3f3      	bcc.n	80097d8 <__mcmp+0x18>
 80097f0:	e7fb      	b.n	80097ea <__mcmp+0x2a>
 80097f2:	2001      	movs	r0, #1
 80097f4:	e7f9      	b.n	80097ea <__mcmp+0x2a>
	...

080097f8 <__mdiff>:
 80097f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	4689      	mov	r9, r1
 80097fe:	4606      	mov	r6, r0
 8009800:	4611      	mov	r1, r2
 8009802:	4648      	mov	r0, r9
 8009804:	4614      	mov	r4, r2
 8009806:	f7ff ffdb 	bl	80097c0 <__mcmp>
 800980a:	1e05      	subs	r5, r0, #0
 800980c:	d112      	bne.n	8009834 <__mdiff+0x3c>
 800980e:	4629      	mov	r1, r5
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff fd11 	bl	8009238 <_Balloc>
 8009816:	4602      	mov	r2, r0
 8009818:	b928      	cbnz	r0, 8009826 <__mdiff+0x2e>
 800981a:	4b3f      	ldr	r3, [pc, #252]	@ (8009918 <__mdiff+0x120>)
 800981c:	f240 2137 	movw	r1, #567	@ 0x237
 8009820:	483e      	ldr	r0, [pc, #248]	@ (800991c <__mdiff+0x124>)
 8009822:	f001 fa95 	bl	800ad50 <__assert_func>
 8009826:	2301      	movs	r3, #1
 8009828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800982c:	4610      	mov	r0, r2
 800982e:	b003      	add	sp, #12
 8009830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009834:	bfbc      	itt	lt
 8009836:	464b      	movlt	r3, r9
 8009838:	46a1      	movlt	r9, r4
 800983a:	4630      	mov	r0, r6
 800983c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009840:	bfba      	itte	lt
 8009842:	461c      	movlt	r4, r3
 8009844:	2501      	movlt	r5, #1
 8009846:	2500      	movge	r5, #0
 8009848:	f7ff fcf6 	bl	8009238 <_Balloc>
 800984c:	4602      	mov	r2, r0
 800984e:	b918      	cbnz	r0, 8009858 <__mdiff+0x60>
 8009850:	4b31      	ldr	r3, [pc, #196]	@ (8009918 <__mdiff+0x120>)
 8009852:	f240 2145 	movw	r1, #581	@ 0x245
 8009856:	e7e3      	b.n	8009820 <__mdiff+0x28>
 8009858:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800985c:	6926      	ldr	r6, [r4, #16]
 800985e:	60c5      	str	r5, [r0, #12]
 8009860:	f109 0310 	add.w	r3, r9, #16
 8009864:	f109 0514 	add.w	r5, r9, #20
 8009868:	f104 0e14 	add.w	lr, r4, #20
 800986c:	f100 0b14 	add.w	fp, r0, #20
 8009870:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009874:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	46d9      	mov	r9, fp
 800987c:	f04f 0c00 	mov.w	ip, #0
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009886:	f853 af04 	ldr.w	sl, [r3, #4]!
 800988a:	9301      	str	r3, [sp, #4]
 800988c:	fa1f f38a 	uxth.w	r3, sl
 8009890:	4619      	mov	r1, r3
 8009892:	b283      	uxth	r3, r0
 8009894:	1acb      	subs	r3, r1, r3
 8009896:	0c00      	lsrs	r0, r0, #16
 8009898:	4463      	add	r3, ip
 800989a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800989e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098a8:	4576      	cmp	r6, lr
 80098aa:	f849 3b04 	str.w	r3, [r9], #4
 80098ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098b2:	d8e5      	bhi.n	8009880 <__mdiff+0x88>
 80098b4:	1b33      	subs	r3, r6, r4
 80098b6:	3b15      	subs	r3, #21
 80098b8:	f023 0303 	bic.w	r3, r3, #3
 80098bc:	3415      	adds	r4, #21
 80098be:	3304      	adds	r3, #4
 80098c0:	42a6      	cmp	r6, r4
 80098c2:	bf38      	it	cc
 80098c4:	2304      	movcc	r3, #4
 80098c6:	441d      	add	r5, r3
 80098c8:	445b      	add	r3, fp
 80098ca:	461e      	mov	r6, r3
 80098cc:	462c      	mov	r4, r5
 80098ce:	4544      	cmp	r4, r8
 80098d0:	d30e      	bcc.n	80098f0 <__mdiff+0xf8>
 80098d2:	f108 0103 	add.w	r1, r8, #3
 80098d6:	1b49      	subs	r1, r1, r5
 80098d8:	f021 0103 	bic.w	r1, r1, #3
 80098dc:	3d03      	subs	r5, #3
 80098de:	45a8      	cmp	r8, r5
 80098e0:	bf38      	it	cc
 80098e2:	2100      	movcc	r1, #0
 80098e4:	440b      	add	r3, r1
 80098e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098ea:	b191      	cbz	r1, 8009912 <__mdiff+0x11a>
 80098ec:	6117      	str	r7, [r2, #16]
 80098ee:	e79d      	b.n	800982c <__mdiff+0x34>
 80098f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80098f4:	46e6      	mov	lr, ip
 80098f6:	0c08      	lsrs	r0, r1, #16
 80098f8:	fa1c fc81 	uxtah	ip, ip, r1
 80098fc:	4471      	add	r1, lr
 80098fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009902:	b289      	uxth	r1, r1
 8009904:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009908:	f846 1b04 	str.w	r1, [r6], #4
 800990c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009910:	e7dd      	b.n	80098ce <__mdiff+0xd6>
 8009912:	3f01      	subs	r7, #1
 8009914:	e7e7      	b.n	80098e6 <__mdiff+0xee>
 8009916:	bf00      	nop
 8009918:	0800bb6d 	.word	0x0800bb6d
 800991c:	0800bb7e 	.word	0x0800bb7e

08009920 <__ulp>:
 8009920:	b082      	sub	sp, #8
 8009922:	ed8d 0b00 	vstr	d0, [sp]
 8009926:	9a01      	ldr	r2, [sp, #4]
 8009928:	4b0f      	ldr	r3, [pc, #60]	@ (8009968 <__ulp+0x48>)
 800992a:	4013      	ands	r3, r2
 800992c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009930:	2b00      	cmp	r3, #0
 8009932:	dc08      	bgt.n	8009946 <__ulp+0x26>
 8009934:	425b      	negs	r3, r3
 8009936:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800993a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800993e:	da04      	bge.n	800994a <__ulp+0x2a>
 8009940:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009944:	4113      	asrs	r3, r2
 8009946:	2200      	movs	r2, #0
 8009948:	e008      	b.n	800995c <__ulp+0x3c>
 800994a:	f1a2 0314 	sub.w	r3, r2, #20
 800994e:	2b1e      	cmp	r3, #30
 8009950:	bfda      	itte	le
 8009952:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009956:	40da      	lsrle	r2, r3
 8009958:	2201      	movgt	r2, #1
 800995a:	2300      	movs	r3, #0
 800995c:	4619      	mov	r1, r3
 800995e:	4610      	mov	r0, r2
 8009960:	ec41 0b10 	vmov	d0, r0, r1
 8009964:	b002      	add	sp, #8
 8009966:	4770      	bx	lr
 8009968:	7ff00000 	.word	0x7ff00000

0800996c <__b2d>:
 800996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	6906      	ldr	r6, [r0, #16]
 8009972:	f100 0814 	add.w	r8, r0, #20
 8009976:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800997a:	1f37      	subs	r7, r6, #4
 800997c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009980:	4610      	mov	r0, r2
 8009982:	f7ff fd4b 	bl	800941c <__hi0bits>
 8009986:	f1c0 0320 	rsb	r3, r0, #32
 800998a:	280a      	cmp	r0, #10
 800998c:	600b      	str	r3, [r1, #0]
 800998e:	491b      	ldr	r1, [pc, #108]	@ (80099fc <__b2d+0x90>)
 8009990:	dc15      	bgt.n	80099be <__b2d+0x52>
 8009992:	f1c0 0c0b 	rsb	ip, r0, #11
 8009996:	fa22 f30c 	lsr.w	r3, r2, ip
 800999a:	45b8      	cmp	r8, r7
 800999c:	ea43 0501 	orr.w	r5, r3, r1
 80099a0:	bf34      	ite	cc
 80099a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099a6:	2300      	movcs	r3, #0
 80099a8:	3015      	adds	r0, #21
 80099aa:	fa02 f000 	lsl.w	r0, r2, r0
 80099ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80099b2:	4303      	orrs	r3, r0
 80099b4:	461c      	mov	r4, r3
 80099b6:	ec45 4b10 	vmov	d0, r4, r5
 80099ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099be:	45b8      	cmp	r8, r7
 80099c0:	bf3a      	itte	cc
 80099c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80099ca:	2300      	movcs	r3, #0
 80099cc:	380b      	subs	r0, #11
 80099ce:	d012      	beq.n	80099f6 <__b2d+0x8a>
 80099d0:	f1c0 0120 	rsb	r1, r0, #32
 80099d4:	fa23 f401 	lsr.w	r4, r3, r1
 80099d8:	4082      	lsls	r2, r0
 80099da:	4322      	orrs	r2, r4
 80099dc:	4547      	cmp	r7, r8
 80099de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80099e2:	bf8c      	ite	hi
 80099e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80099e8:	2200      	movls	r2, #0
 80099ea:	4083      	lsls	r3, r0
 80099ec:	40ca      	lsrs	r2, r1
 80099ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80099f2:	4313      	orrs	r3, r2
 80099f4:	e7de      	b.n	80099b4 <__b2d+0x48>
 80099f6:	ea42 0501 	orr.w	r5, r2, r1
 80099fa:	e7db      	b.n	80099b4 <__b2d+0x48>
 80099fc:	3ff00000 	.word	0x3ff00000

08009a00 <__d2b>:
 8009a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a04:	460f      	mov	r7, r1
 8009a06:	2101      	movs	r1, #1
 8009a08:	ec59 8b10 	vmov	r8, r9, d0
 8009a0c:	4616      	mov	r6, r2
 8009a0e:	f7ff fc13 	bl	8009238 <_Balloc>
 8009a12:	4604      	mov	r4, r0
 8009a14:	b930      	cbnz	r0, 8009a24 <__d2b+0x24>
 8009a16:	4602      	mov	r2, r0
 8009a18:	4b23      	ldr	r3, [pc, #140]	@ (8009aa8 <__d2b+0xa8>)
 8009a1a:	4824      	ldr	r0, [pc, #144]	@ (8009aac <__d2b+0xac>)
 8009a1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a20:	f001 f996 	bl	800ad50 <__assert_func>
 8009a24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a2c:	b10d      	cbz	r5, 8009a32 <__d2b+0x32>
 8009a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a32:	9301      	str	r3, [sp, #4]
 8009a34:	f1b8 0300 	subs.w	r3, r8, #0
 8009a38:	d023      	beq.n	8009a82 <__d2b+0x82>
 8009a3a:	4668      	mov	r0, sp
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	f7ff fd0c 	bl	800945a <__lo0bits>
 8009a42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a46:	b1d0      	cbz	r0, 8009a7e <__d2b+0x7e>
 8009a48:	f1c0 0320 	rsb	r3, r0, #32
 8009a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a50:	430b      	orrs	r3, r1
 8009a52:	40c2      	lsrs	r2, r0
 8009a54:	6163      	str	r3, [r4, #20]
 8009a56:	9201      	str	r2, [sp, #4]
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	61a3      	str	r3, [r4, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bf0c      	ite	eq
 8009a60:	2201      	moveq	r2, #1
 8009a62:	2202      	movne	r2, #2
 8009a64:	6122      	str	r2, [r4, #16]
 8009a66:	b1a5      	cbz	r5, 8009a92 <__d2b+0x92>
 8009a68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a6c:	4405      	add	r5, r0
 8009a6e:	603d      	str	r5, [r7, #0]
 8009a70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a74:	6030      	str	r0, [r6, #0]
 8009a76:	4620      	mov	r0, r4
 8009a78:	b003      	add	sp, #12
 8009a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a7e:	6161      	str	r1, [r4, #20]
 8009a80:	e7ea      	b.n	8009a58 <__d2b+0x58>
 8009a82:	a801      	add	r0, sp, #4
 8009a84:	f7ff fce9 	bl	800945a <__lo0bits>
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	6163      	str	r3, [r4, #20]
 8009a8c:	3020      	adds	r0, #32
 8009a8e:	2201      	movs	r2, #1
 8009a90:	e7e8      	b.n	8009a64 <__d2b+0x64>
 8009a92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a9a:	6038      	str	r0, [r7, #0]
 8009a9c:	6918      	ldr	r0, [r3, #16]
 8009a9e:	f7ff fcbd 	bl	800941c <__hi0bits>
 8009aa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009aa6:	e7e5      	b.n	8009a74 <__d2b+0x74>
 8009aa8:	0800bb6d 	.word	0x0800bb6d
 8009aac:	0800bb7e 	.word	0x0800bb7e

08009ab0 <__ratio>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	b085      	sub	sp, #20
 8009ab6:	e9cd 1000 	strd	r1, r0, [sp]
 8009aba:	a902      	add	r1, sp, #8
 8009abc:	f7ff ff56 	bl	800996c <__b2d>
 8009ac0:	9800      	ldr	r0, [sp, #0]
 8009ac2:	a903      	add	r1, sp, #12
 8009ac4:	ec55 4b10 	vmov	r4, r5, d0
 8009ac8:	f7ff ff50 	bl	800996c <__b2d>
 8009acc:	9b01      	ldr	r3, [sp, #4]
 8009ace:	6919      	ldr	r1, [r3, #16]
 8009ad0:	9b00      	ldr	r3, [sp, #0]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	1ac9      	subs	r1, r1, r3
 8009ad6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	ec5b ab10 	vmov	sl, fp, d0
 8009ae0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bfce      	itee	gt
 8009ae8:	462a      	movgt	r2, r5
 8009aea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009aee:	465a      	movle	r2, fp
 8009af0:	462f      	mov	r7, r5
 8009af2:	46d9      	mov	r9, fp
 8009af4:	bfcc      	ite	gt
 8009af6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009afa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009afe:	464b      	mov	r3, r9
 8009b00:	4652      	mov	r2, sl
 8009b02:	4620      	mov	r0, r4
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f6 fea1 	bl	800084c <__aeabi_ddiv>
 8009b0a:	ec41 0b10 	vmov	d0, r0, r1
 8009b0e:	b005      	add	sp, #20
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b14 <__copybits>:
 8009b14:	3901      	subs	r1, #1
 8009b16:	b570      	push	{r4, r5, r6, lr}
 8009b18:	1149      	asrs	r1, r1, #5
 8009b1a:	6914      	ldr	r4, [r2, #16]
 8009b1c:	3101      	adds	r1, #1
 8009b1e:	f102 0314 	add.w	r3, r2, #20
 8009b22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b2a:	1f05      	subs	r5, r0, #4
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	d30c      	bcc.n	8009b4a <__copybits+0x36>
 8009b30:	1aa3      	subs	r3, r4, r2
 8009b32:	3b11      	subs	r3, #17
 8009b34:	f023 0303 	bic.w	r3, r3, #3
 8009b38:	3211      	adds	r2, #17
 8009b3a:	42a2      	cmp	r2, r4
 8009b3c:	bf88      	it	hi
 8009b3e:	2300      	movhi	r3, #0
 8009b40:	4418      	add	r0, r3
 8009b42:	2300      	movs	r3, #0
 8009b44:	4288      	cmp	r0, r1
 8009b46:	d305      	bcc.n	8009b54 <__copybits+0x40>
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b52:	e7eb      	b.n	8009b2c <__copybits+0x18>
 8009b54:	f840 3b04 	str.w	r3, [r0], #4
 8009b58:	e7f4      	b.n	8009b44 <__copybits+0x30>

08009b5a <__any_on>:
 8009b5a:	f100 0214 	add.w	r2, r0, #20
 8009b5e:	6900      	ldr	r0, [r0, #16]
 8009b60:	114b      	asrs	r3, r1, #5
 8009b62:	4298      	cmp	r0, r3
 8009b64:	b510      	push	{r4, lr}
 8009b66:	db11      	blt.n	8009b8c <__any_on+0x32>
 8009b68:	dd0a      	ble.n	8009b80 <__any_on+0x26>
 8009b6a:	f011 011f 	ands.w	r1, r1, #31
 8009b6e:	d007      	beq.n	8009b80 <__any_on+0x26>
 8009b70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b74:	fa24 f001 	lsr.w	r0, r4, r1
 8009b78:	fa00 f101 	lsl.w	r1, r0, r1
 8009b7c:	428c      	cmp	r4, r1
 8009b7e:	d10b      	bne.n	8009b98 <__any_on+0x3e>
 8009b80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d803      	bhi.n	8009b90 <__any_on+0x36>
 8009b88:	2000      	movs	r0, #0
 8009b8a:	bd10      	pop	{r4, pc}
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	e7f7      	b.n	8009b80 <__any_on+0x26>
 8009b90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b94:	2900      	cmp	r1, #0
 8009b96:	d0f5      	beq.n	8009b84 <__any_on+0x2a>
 8009b98:	2001      	movs	r0, #1
 8009b9a:	e7f6      	b.n	8009b8a <__any_on+0x30>

08009b9c <sulp>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	ec45 4b10 	vmov	d0, r4, r5
 8009ba6:	4616      	mov	r6, r2
 8009ba8:	f7ff feba 	bl	8009920 <__ulp>
 8009bac:	ec51 0b10 	vmov	r0, r1, d0
 8009bb0:	b17e      	cbz	r6, 8009bd2 <sulp+0x36>
 8009bb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009bb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dd09      	ble.n	8009bd2 <sulp+0x36>
 8009bbe:	051b      	lsls	r3, r3, #20
 8009bc0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009bc4:	2400      	movs	r4, #0
 8009bc6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009bca:	4622      	mov	r2, r4
 8009bcc:	462b      	mov	r3, r5
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	ec41 0b10 	vmov	d0, r0, r1
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}

08009bd8 <_strtod_l>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	b09f      	sub	sp, #124	@ 0x7c
 8009bde:	460c      	mov	r4, r1
 8009be0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009be2:	2200      	movs	r2, #0
 8009be4:	921a      	str	r2, [sp, #104]	@ 0x68
 8009be6:	9005      	str	r0, [sp, #20]
 8009be8:	f04f 0a00 	mov.w	sl, #0
 8009bec:	f04f 0b00 	mov.w	fp, #0
 8009bf0:	460a      	mov	r2, r1
 8009bf2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bf4:	7811      	ldrb	r1, [r2, #0]
 8009bf6:	292b      	cmp	r1, #43	@ 0x2b
 8009bf8:	d04a      	beq.n	8009c90 <_strtod_l+0xb8>
 8009bfa:	d838      	bhi.n	8009c6e <_strtod_l+0x96>
 8009bfc:	290d      	cmp	r1, #13
 8009bfe:	d832      	bhi.n	8009c66 <_strtod_l+0x8e>
 8009c00:	2908      	cmp	r1, #8
 8009c02:	d832      	bhi.n	8009c6a <_strtod_l+0x92>
 8009c04:	2900      	cmp	r1, #0
 8009c06:	d03b      	beq.n	8009c80 <_strtod_l+0xa8>
 8009c08:	2200      	movs	r2, #0
 8009c0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009c0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009c0e:	782a      	ldrb	r2, [r5, #0]
 8009c10:	2a30      	cmp	r2, #48	@ 0x30
 8009c12:	f040 80b3 	bne.w	8009d7c <_strtod_l+0x1a4>
 8009c16:	786a      	ldrb	r2, [r5, #1]
 8009c18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c1c:	2a58      	cmp	r2, #88	@ 0x58
 8009c1e:	d16e      	bne.n	8009cfe <_strtod_l+0x126>
 8009c20:	9302      	str	r3, [sp, #8]
 8009c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	ab1a      	add	r3, sp, #104	@ 0x68
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	4a8e      	ldr	r2, [pc, #568]	@ (8009e64 <_strtod_l+0x28c>)
 8009c2c:	9805      	ldr	r0, [sp, #20]
 8009c2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009c30:	a919      	add	r1, sp, #100	@ 0x64
 8009c32:	f001 f927 	bl	800ae84 <__gethex>
 8009c36:	f010 060f 	ands.w	r6, r0, #15
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	d005      	beq.n	8009c4a <_strtod_l+0x72>
 8009c3e:	2e06      	cmp	r6, #6
 8009c40:	d128      	bne.n	8009c94 <_strtod_l+0xbc>
 8009c42:	3501      	adds	r5, #1
 8009c44:	2300      	movs	r3, #0
 8009c46:	9519      	str	r5, [sp, #100]	@ 0x64
 8009c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f040 858e 	bne.w	800a76e <_strtod_l+0xb96>
 8009c52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c54:	b1cb      	cbz	r3, 8009c8a <_strtod_l+0xb2>
 8009c56:	4652      	mov	r2, sl
 8009c58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009c5c:	ec43 2b10 	vmov	d0, r2, r3
 8009c60:	b01f      	add	sp, #124	@ 0x7c
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c66:	2920      	cmp	r1, #32
 8009c68:	d1ce      	bne.n	8009c08 <_strtod_l+0x30>
 8009c6a:	3201      	adds	r2, #1
 8009c6c:	e7c1      	b.n	8009bf2 <_strtod_l+0x1a>
 8009c6e:	292d      	cmp	r1, #45	@ 0x2d
 8009c70:	d1ca      	bne.n	8009c08 <_strtod_l+0x30>
 8009c72:	2101      	movs	r1, #1
 8009c74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009c76:	1c51      	adds	r1, r2, #1
 8009c78:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c7a:	7852      	ldrb	r2, [r2, #1]
 8009c7c:	2a00      	cmp	r2, #0
 8009c7e:	d1c5      	bne.n	8009c0c <_strtod_l+0x34>
 8009c80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c82:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f040 8570 	bne.w	800a76a <_strtod_l+0xb92>
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	e7e5      	b.n	8009c5c <_strtod_l+0x84>
 8009c90:	2100      	movs	r1, #0
 8009c92:	e7ef      	b.n	8009c74 <_strtod_l+0x9c>
 8009c94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c96:	b13a      	cbz	r2, 8009ca8 <_strtod_l+0xd0>
 8009c98:	2135      	movs	r1, #53	@ 0x35
 8009c9a:	a81c      	add	r0, sp, #112	@ 0x70
 8009c9c:	f7ff ff3a 	bl	8009b14 <__copybits>
 8009ca0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ca2:	9805      	ldr	r0, [sp, #20]
 8009ca4:	f7ff fb08 	bl	80092b8 <_Bfree>
 8009ca8:	3e01      	subs	r6, #1
 8009caa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009cac:	2e04      	cmp	r6, #4
 8009cae:	d806      	bhi.n	8009cbe <_strtod_l+0xe6>
 8009cb0:	e8df f006 	tbb	[pc, r6]
 8009cb4:	201d0314 	.word	0x201d0314
 8009cb8:	14          	.byte	0x14
 8009cb9:	00          	.byte	0x00
 8009cba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009cbe:	05e1      	lsls	r1, r4, #23
 8009cc0:	bf48      	it	mi
 8009cc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009cc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009cca:	0d1b      	lsrs	r3, r3, #20
 8009ccc:	051b      	lsls	r3, r3, #20
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1bb      	bne.n	8009c4a <_strtod_l+0x72>
 8009cd2:	f7fe fb2f 	bl	8008334 <__errno>
 8009cd6:	2322      	movs	r3, #34	@ 0x22
 8009cd8:	6003      	str	r3, [r0, #0]
 8009cda:	e7b6      	b.n	8009c4a <_strtod_l+0x72>
 8009cdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ce0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009ce4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ce8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009cec:	e7e7      	b.n	8009cbe <_strtod_l+0xe6>
 8009cee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009e6c <_strtod_l+0x294>
 8009cf2:	e7e4      	b.n	8009cbe <_strtod_l+0xe6>
 8009cf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009cf8:	f04f 3aff 	mov.w	sl, #4294967295
 8009cfc:	e7df      	b.n	8009cbe <_strtod_l+0xe6>
 8009cfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d04:	785b      	ldrb	r3, [r3, #1]
 8009d06:	2b30      	cmp	r3, #48	@ 0x30
 8009d08:	d0f9      	beq.n	8009cfe <_strtod_l+0x126>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d09d      	beq.n	8009c4a <_strtod_l+0x72>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d14:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d16:	2300      	movs	r3, #0
 8009d18:	9308      	str	r3, [sp, #32]
 8009d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d1c:	461f      	mov	r7, r3
 8009d1e:	220a      	movs	r2, #10
 8009d20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009d22:	7805      	ldrb	r5, [r0, #0]
 8009d24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009d28:	b2d9      	uxtb	r1, r3
 8009d2a:	2909      	cmp	r1, #9
 8009d2c:	d928      	bls.n	8009d80 <_strtod_l+0x1a8>
 8009d2e:	494e      	ldr	r1, [pc, #312]	@ (8009e68 <_strtod_l+0x290>)
 8009d30:	2201      	movs	r2, #1
 8009d32:	f000 ffd5 	bl	800ace0 <strncmp>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d032      	beq.n	8009da0 <_strtod_l+0x1c8>
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	462a      	mov	r2, r5
 8009d3e:	4681      	mov	r9, r0
 8009d40:	463d      	mov	r5, r7
 8009d42:	4603      	mov	r3, r0
 8009d44:	2a65      	cmp	r2, #101	@ 0x65
 8009d46:	d001      	beq.n	8009d4c <_strtod_l+0x174>
 8009d48:	2a45      	cmp	r2, #69	@ 0x45
 8009d4a:	d114      	bne.n	8009d76 <_strtod_l+0x19e>
 8009d4c:	b91d      	cbnz	r5, 8009d56 <_strtod_l+0x17e>
 8009d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d50:	4302      	orrs	r2, r0
 8009d52:	d095      	beq.n	8009c80 <_strtod_l+0xa8>
 8009d54:	2500      	movs	r5, #0
 8009d56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009d58:	1c62      	adds	r2, r4, #1
 8009d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d5c:	7862      	ldrb	r2, [r4, #1]
 8009d5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009d60:	d077      	beq.n	8009e52 <_strtod_l+0x27a>
 8009d62:	2a2d      	cmp	r2, #45	@ 0x2d
 8009d64:	d07b      	beq.n	8009e5e <_strtod_l+0x286>
 8009d66:	f04f 0c00 	mov.w	ip, #0
 8009d6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009d6e:	2909      	cmp	r1, #9
 8009d70:	f240 8082 	bls.w	8009e78 <_strtod_l+0x2a0>
 8009d74:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	e0a2      	b.n	8009ec2 <_strtod_l+0x2ea>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e7c7      	b.n	8009d10 <_strtod_l+0x138>
 8009d80:	2f08      	cmp	r7, #8
 8009d82:	bfd5      	itete	le
 8009d84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009d86:	9908      	ldrgt	r1, [sp, #32]
 8009d88:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009d90:	f100 0001 	add.w	r0, r0, #1
 8009d94:	bfd4      	ite	le
 8009d96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009d98:	9308      	strgt	r3, [sp, #32]
 8009d9a:	3701      	adds	r7, #1
 8009d9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009d9e:	e7bf      	b.n	8009d20 <_strtod_l+0x148>
 8009da0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009da6:	785a      	ldrb	r2, [r3, #1]
 8009da8:	b37f      	cbz	r7, 8009e0a <_strtod_l+0x232>
 8009daa:	4681      	mov	r9, r0
 8009dac:	463d      	mov	r5, r7
 8009dae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009db2:	2b09      	cmp	r3, #9
 8009db4:	d912      	bls.n	8009ddc <_strtod_l+0x204>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e7c4      	b.n	8009d44 <_strtod_l+0x16c>
 8009dba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dc0:	785a      	ldrb	r2, [r3, #1]
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	2a30      	cmp	r2, #48	@ 0x30
 8009dc6:	d0f8      	beq.n	8009dba <_strtod_l+0x1e2>
 8009dc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	f200 84d3 	bhi.w	800a778 <_strtod_l+0xba0>
 8009dd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009dd6:	4681      	mov	r9, r0
 8009dd8:	2000      	movs	r0, #0
 8009dda:	4605      	mov	r5, r0
 8009ddc:	3a30      	subs	r2, #48	@ 0x30
 8009dde:	f100 0301 	add.w	r3, r0, #1
 8009de2:	d02a      	beq.n	8009e3a <_strtod_l+0x262>
 8009de4:	4499      	add	r9, r3
 8009de6:	eb00 0c05 	add.w	ip, r0, r5
 8009dea:	462b      	mov	r3, r5
 8009dec:	210a      	movs	r1, #10
 8009dee:	4563      	cmp	r3, ip
 8009df0:	d10d      	bne.n	8009e0e <_strtod_l+0x236>
 8009df2:	1c69      	adds	r1, r5, #1
 8009df4:	4401      	add	r1, r0
 8009df6:	4428      	add	r0, r5
 8009df8:	2808      	cmp	r0, #8
 8009dfa:	dc16      	bgt.n	8009e2a <_strtod_l+0x252>
 8009dfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009dfe:	230a      	movs	r3, #10
 8009e00:	fb03 2300 	mla	r3, r3, r0, r2
 8009e04:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e06:	2300      	movs	r3, #0
 8009e08:	e018      	b.n	8009e3c <_strtod_l+0x264>
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	e7da      	b.n	8009dc4 <_strtod_l+0x1ec>
 8009e0e:	2b08      	cmp	r3, #8
 8009e10:	f103 0301 	add.w	r3, r3, #1
 8009e14:	dc03      	bgt.n	8009e1e <_strtod_l+0x246>
 8009e16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009e18:	434e      	muls	r6, r1
 8009e1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009e1c:	e7e7      	b.n	8009dee <_strtod_l+0x216>
 8009e1e:	2b10      	cmp	r3, #16
 8009e20:	bfde      	ittt	le
 8009e22:	9e08      	ldrle	r6, [sp, #32]
 8009e24:	434e      	mulle	r6, r1
 8009e26:	9608      	strle	r6, [sp, #32]
 8009e28:	e7e1      	b.n	8009dee <_strtod_l+0x216>
 8009e2a:	280f      	cmp	r0, #15
 8009e2c:	dceb      	bgt.n	8009e06 <_strtod_l+0x22e>
 8009e2e:	9808      	ldr	r0, [sp, #32]
 8009e30:	230a      	movs	r3, #10
 8009e32:	fb03 2300 	mla	r3, r3, r0, r2
 8009e36:	9308      	str	r3, [sp, #32]
 8009e38:	e7e5      	b.n	8009e06 <_strtod_l+0x22e>
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e3e:	1c50      	adds	r0, r2, #1
 8009e40:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e42:	7852      	ldrb	r2, [r2, #1]
 8009e44:	4618      	mov	r0, r3
 8009e46:	460d      	mov	r5, r1
 8009e48:	e7b1      	b.n	8009dae <_strtod_l+0x1d6>
 8009e4a:	f04f 0900 	mov.w	r9, #0
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e77d      	b.n	8009d4e <_strtod_l+0x176>
 8009e52:	f04f 0c00 	mov.w	ip, #0
 8009e56:	1ca2      	adds	r2, r4, #2
 8009e58:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e5a:	78a2      	ldrb	r2, [r4, #2]
 8009e5c:	e785      	b.n	8009d6a <_strtod_l+0x192>
 8009e5e:	f04f 0c01 	mov.w	ip, #1
 8009e62:	e7f8      	b.n	8009e56 <_strtod_l+0x27e>
 8009e64:	0800bcf0 	.word	0x0800bcf0
 8009e68:	0800bcd8 	.word	0x0800bcd8
 8009e6c:	7ff00000 	.word	0x7ff00000
 8009e70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e72:	1c51      	adds	r1, r2, #1
 8009e74:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e76:	7852      	ldrb	r2, [r2, #1]
 8009e78:	2a30      	cmp	r2, #48	@ 0x30
 8009e7a:	d0f9      	beq.n	8009e70 <_strtod_l+0x298>
 8009e7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009e80:	2908      	cmp	r1, #8
 8009e82:	f63f af78 	bhi.w	8009d76 <_strtod_l+0x19e>
 8009e86:	3a30      	subs	r2, #48	@ 0x30
 8009e88:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009e8e:	f04f 080a 	mov.w	r8, #10
 8009e92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e94:	1c56      	adds	r6, r2, #1
 8009e96:	9619      	str	r6, [sp, #100]	@ 0x64
 8009e98:	7852      	ldrb	r2, [r2, #1]
 8009e9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009e9e:	f1be 0f09 	cmp.w	lr, #9
 8009ea2:	d939      	bls.n	8009f18 <_strtod_l+0x340>
 8009ea4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ea6:	1a76      	subs	r6, r6, r1
 8009ea8:	2e08      	cmp	r6, #8
 8009eaa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009eae:	dc03      	bgt.n	8009eb8 <_strtod_l+0x2e0>
 8009eb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009eb2:	4588      	cmp	r8, r1
 8009eb4:	bfa8      	it	ge
 8009eb6:	4688      	movge	r8, r1
 8009eb8:	f1bc 0f00 	cmp.w	ip, #0
 8009ebc:	d001      	beq.n	8009ec2 <_strtod_l+0x2ea>
 8009ebe:	f1c8 0800 	rsb	r8, r8, #0
 8009ec2:	2d00      	cmp	r5, #0
 8009ec4:	d14e      	bne.n	8009f64 <_strtod_l+0x38c>
 8009ec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ec8:	4308      	orrs	r0, r1
 8009eca:	f47f aebe 	bne.w	8009c4a <_strtod_l+0x72>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f47f aed6 	bne.w	8009c80 <_strtod_l+0xa8>
 8009ed4:	2a69      	cmp	r2, #105	@ 0x69
 8009ed6:	d028      	beq.n	8009f2a <_strtod_l+0x352>
 8009ed8:	dc25      	bgt.n	8009f26 <_strtod_l+0x34e>
 8009eda:	2a49      	cmp	r2, #73	@ 0x49
 8009edc:	d025      	beq.n	8009f2a <_strtod_l+0x352>
 8009ede:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ee0:	f47f aece 	bne.w	8009c80 <_strtod_l+0xa8>
 8009ee4:	499b      	ldr	r1, [pc, #620]	@ (800a154 <_strtod_l+0x57c>)
 8009ee6:	a819      	add	r0, sp, #100	@ 0x64
 8009ee8:	f001 f9ee 	bl	800b2c8 <__match>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f43f aec7 	beq.w	8009c80 <_strtod_l+0xa8>
 8009ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b28      	cmp	r3, #40	@ 0x28
 8009ef8:	d12e      	bne.n	8009f58 <_strtod_l+0x380>
 8009efa:	4997      	ldr	r1, [pc, #604]	@ (800a158 <_strtod_l+0x580>)
 8009efc:	aa1c      	add	r2, sp, #112	@ 0x70
 8009efe:	a819      	add	r0, sp, #100	@ 0x64
 8009f00:	f001 f9f6 	bl	800b2f0 <__hexnan>
 8009f04:	2805      	cmp	r0, #5
 8009f06:	d127      	bne.n	8009f58 <_strtod_l+0x380>
 8009f08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009f0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009f12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009f16:	e698      	b.n	8009c4a <_strtod_l+0x72>
 8009f18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009f1a:	fb08 2101 	mla	r1, r8, r1, r2
 8009f1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009f22:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f24:	e7b5      	b.n	8009e92 <_strtod_l+0x2ba>
 8009f26:	2a6e      	cmp	r2, #110	@ 0x6e
 8009f28:	e7da      	b.n	8009ee0 <_strtod_l+0x308>
 8009f2a:	498c      	ldr	r1, [pc, #560]	@ (800a15c <_strtod_l+0x584>)
 8009f2c:	a819      	add	r0, sp, #100	@ 0x64
 8009f2e:	f001 f9cb 	bl	800b2c8 <__match>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	f43f aea4 	beq.w	8009c80 <_strtod_l+0xa8>
 8009f38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f3a:	4989      	ldr	r1, [pc, #548]	@ (800a160 <_strtod_l+0x588>)
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	a819      	add	r0, sp, #100	@ 0x64
 8009f40:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f42:	f001 f9c1 	bl	800b2c8 <__match>
 8009f46:	b910      	cbnz	r0, 8009f4e <_strtod_l+0x376>
 8009f48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a170 <_strtod_l+0x598>
 8009f52:	f04f 0a00 	mov.w	sl, #0
 8009f56:	e678      	b.n	8009c4a <_strtod_l+0x72>
 8009f58:	4882      	ldr	r0, [pc, #520]	@ (800a164 <_strtod_l+0x58c>)
 8009f5a:	f000 fef1 	bl	800ad40 <nan>
 8009f5e:	ec5b ab10 	vmov	sl, fp, d0
 8009f62:	e672      	b.n	8009c4a <_strtod_l+0x72>
 8009f64:	eba8 0309 	sub.w	r3, r8, r9
 8009f68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6c:	2f00      	cmp	r7, #0
 8009f6e:	bf08      	it	eq
 8009f70:	462f      	moveq	r7, r5
 8009f72:	2d10      	cmp	r5, #16
 8009f74:	462c      	mov	r4, r5
 8009f76:	bfa8      	it	ge
 8009f78:	2410      	movge	r4, #16
 8009f7a:	f7f6 fac3 	bl	8000504 <__aeabi_ui2d>
 8009f7e:	2d09      	cmp	r5, #9
 8009f80:	4682      	mov	sl, r0
 8009f82:	468b      	mov	fp, r1
 8009f84:	dc13      	bgt.n	8009fae <_strtod_l+0x3d6>
 8009f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f43f ae5e 	beq.w	8009c4a <_strtod_l+0x72>
 8009f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f90:	dd78      	ble.n	800a084 <_strtod_l+0x4ac>
 8009f92:	2b16      	cmp	r3, #22
 8009f94:	dc5f      	bgt.n	800a056 <_strtod_l+0x47e>
 8009f96:	4974      	ldr	r1, [pc, #464]	@ (800a168 <_strtod_l+0x590>)
 8009f98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	465b      	mov	r3, fp
 8009fa4:	f7f6 fb28 	bl	80005f8 <__aeabi_dmul>
 8009fa8:	4682      	mov	sl, r0
 8009faa:	468b      	mov	fp, r1
 8009fac:	e64d      	b.n	8009c4a <_strtod_l+0x72>
 8009fae:	4b6e      	ldr	r3, [pc, #440]	@ (800a168 <_strtod_l+0x590>)
 8009fb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009fb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009fb8:	f7f6 fb1e 	bl	80005f8 <__aeabi_dmul>
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	9808      	ldr	r0, [sp, #32]
 8009fc0:	468b      	mov	fp, r1
 8009fc2:	f7f6 fa9f 	bl	8000504 <__aeabi_ui2d>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4650      	mov	r0, sl
 8009fcc:	4659      	mov	r1, fp
 8009fce:	f7f6 f95d 	bl	800028c <__adddf3>
 8009fd2:	2d0f      	cmp	r5, #15
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	468b      	mov	fp, r1
 8009fd8:	ddd5      	ble.n	8009f86 <_strtod_l+0x3ae>
 8009fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fdc:	1b2c      	subs	r4, r5, r4
 8009fde:	441c      	add	r4, r3
 8009fe0:	2c00      	cmp	r4, #0
 8009fe2:	f340 8096 	ble.w	800a112 <_strtod_l+0x53a>
 8009fe6:	f014 030f 	ands.w	r3, r4, #15
 8009fea:	d00a      	beq.n	800a002 <_strtod_l+0x42a>
 8009fec:	495e      	ldr	r1, [pc, #376]	@ (800a168 <_strtod_l+0x590>)
 8009fee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ff2:	4652      	mov	r2, sl
 8009ff4:	465b      	mov	r3, fp
 8009ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ffa:	f7f6 fafd 	bl	80005f8 <__aeabi_dmul>
 8009ffe:	4682      	mov	sl, r0
 800a000:	468b      	mov	fp, r1
 800a002:	f034 040f 	bics.w	r4, r4, #15
 800a006:	d073      	beq.n	800a0f0 <_strtod_l+0x518>
 800a008:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a00c:	dd48      	ble.n	800a0a0 <_strtod_l+0x4c8>
 800a00e:	2400      	movs	r4, #0
 800a010:	46a0      	mov	r8, r4
 800a012:	940a      	str	r4, [sp, #40]	@ 0x28
 800a014:	46a1      	mov	r9, r4
 800a016:	9a05      	ldr	r2, [sp, #20]
 800a018:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a170 <_strtod_l+0x598>
 800a01c:	2322      	movs	r3, #34	@ 0x22
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	f04f 0a00 	mov.w	sl, #0
 800a024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a026:	2b00      	cmp	r3, #0
 800a028:	f43f ae0f 	beq.w	8009c4a <_strtod_l+0x72>
 800a02c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a02e:	9805      	ldr	r0, [sp, #20]
 800a030:	f7ff f942 	bl	80092b8 <_Bfree>
 800a034:	9805      	ldr	r0, [sp, #20]
 800a036:	4649      	mov	r1, r9
 800a038:	f7ff f93e 	bl	80092b8 <_Bfree>
 800a03c:	9805      	ldr	r0, [sp, #20]
 800a03e:	4641      	mov	r1, r8
 800a040:	f7ff f93a 	bl	80092b8 <_Bfree>
 800a044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a046:	9805      	ldr	r0, [sp, #20]
 800a048:	f7ff f936 	bl	80092b8 <_Bfree>
 800a04c:	9805      	ldr	r0, [sp, #20]
 800a04e:	4621      	mov	r1, r4
 800a050:	f7ff f932 	bl	80092b8 <_Bfree>
 800a054:	e5f9      	b.n	8009c4a <_strtod_l+0x72>
 800a056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a058:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a05c:	4293      	cmp	r3, r2
 800a05e:	dbbc      	blt.n	8009fda <_strtod_l+0x402>
 800a060:	4c41      	ldr	r4, [pc, #260]	@ (800a168 <_strtod_l+0x590>)
 800a062:	f1c5 050f 	rsb	r5, r5, #15
 800a066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a06a:	4652      	mov	r2, sl
 800a06c:	465b      	mov	r3, fp
 800a06e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a072:	f7f6 fac1 	bl	80005f8 <__aeabi_dmul>
 800a076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a078:	1b5d      	subs	r5, r3, r5
 800a07a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a07e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a082:	e78f      	b.n	8009fa4 <_strtod_l+0x3cc>
 800a084:	3316      	adds	r3, #22
 800a086:	dba8      	blt.n	8009fda <_strtod_l+0x402>
 800a088:	4b37      	ldr	r3, [pc, #220]	@ (800a168 <_strtod_l+0x590>)
 800a08a:	eba9 0808 	sub.w	r8, r9, r8
 800a08e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a092:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a096:	4650      	mov	r0, sl
 800a098:	4659      	mov	r1, fp
 800a09a:	f7f6 fbd7 	bl	800084c <__aeabi_ddiv>
 800a09e:	e783      	b.n	8009fa8 <_strtod_l+0x3d0>
 800a0a0:	4b32      	ldr	r3, [pc, #200]	@ (800a16c <_strtod_l+0x594>)
 800a0a2:	9308      	str	r3, [sp, #32]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	1124      	asrs	r4, r4, #4
 800a0a8:	4650      	mov	r0, sl
 800a0aa:	4659      	mov	r1, fp
 800a0ac:	461e      	mov	r6, r3
 800a0ae:	2c01      	cmp	r4, #1
 800a0b0:	dc21      	bgt.n	800a0f6 <_strtod_l+0x51e>
 800a0b2:	b10b      	cbz	r3, 800a0b8 <_strtod_l+0x4e0>
 800a0b4:	4682      	mov	sl, r0
 800a0b6:	468b      	mov	fp, r1
 800a0b8:	492c      	ldr	r1, [pc, #176]	@ (800a16c <_strtod_l+0x594>)
 800a0ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a0be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a0c2:	4652      	mov	r2, sl
 800a0c4:	465b      	mov	r3, fp
 800a0c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ca:	f7f6 fa95 	bl	80005f8 <__aeabi_dmul>
 800a0ce:	4b28      	ldr	r3, [pc, #160]	@ (800a170 <_strtod_l+0x598>)
 800a0d0:	460a      	mov	r2, r1
 800a0d2:	400b      	ands	r3, r1
 800a0d4:	4927      	ldr	r1, [pc, #156]	@ (800a174 <_strtod_l+0x59c>)
 800a0d6:	428b      	cmp	r3, r1
 800a0d8:	4682      	mov	sl, r0
 800a0da:	d898      	bhi.n	800a00e <_strtod_l+0x436>
 800a0dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a0e0:	428b      	cmp	r3, r1
 800a0e2:	bf86      	itte	hi
 800a0e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a178 <_strtod_l+0x5a0>
 800a0e8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a0ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9308      	str	r3, [sp, #32]
 800a0f4:	e07a      	b.n	800a1ec <_strtod_l+0x614>
 800a0f6:	07e2      	lsls	r2, r4, #31
 800a0f8:	d505      	bpl.n	800a106 <_strtod_l+0x52e>
 800a0fa:	9b08      	ldr	r3, [sp, #32]
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f7f6 fa7a 	bl	80005f8 <__aeabi_dmul>
 800a104:	2301      	movs	r3, #1
 800a106:	9a08      	ldr	r2, [sp, #32]
 800a108:	3208      	adds	r2, #8
 800a10a:	3601      	adds	r6, #1
 800a10c:	1064      	asrs	r4, r4, #1
 800a10e:	9208      	str	r2, [sp, #32]
 800a110:	e7cd      	b.n	800a0ae <_strtod_l+0x4d6>
 800a112:	d0ed      	beq.n	800a0f0 <_strtod_l+0x518>
 800a114:	4264      	negs	r4, r4
 800a116:	f014 020f 	ands.w	r2, r4, #15
 800a11a:	d00a      	beq.n	800a132 <_strtod_l+0x55a>
 800a11c:	4b12      	ldr	r3, [pc, #72]	@ (800a168 <_strtod_l+0x590>)
 800a11e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a122:	4650      	mov	r0, sl
 800a124:	4659      	mov	r1, fp
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	f7f6 fb8f 	bl	800084c <__aeabi_ddiv>
 800a12e:	4682      	mov	sl, r0
 800a130:	468b      	mov	fp, r1
 800a132:	1124      	asrs	r4, r4, #4
 800a134:	d0dc      	beq.n	800a0f0 <_strtod_l+0x518>
 800a136:	2c1f      	cmp	r4, #31
 800a138:	dd20      	ble.n	800a17c <_strtod_l+0x5a4>
 800a13a:	2400      	movs	r4, #0
 800a13c:	46a0      	mov	r8, r4
 800a13e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a140:	46a1      	mov	r9, r4
 800a142:	9a05      	ldr	r2, [sp, #20]
 800a144:	2322      	movs	r3, #34	@ 0x22
 800a146:	f04f 0a00 	mov.w	sl, #0
 800a14a:	f04f 0b00 	mov.w	fp, #0
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e768      	b.n	800a024 <_strtod_l+0x44c>
 800a152:	bf00      	nop
 800a154:	0800bac5 	.word	0x0800bac5
 800a158:	0800bcdc 	.word	0x0800bcdc
 800a15c:	0800babd 	.word	0x0800babd
 800a160:	0800baf4 	.word	0x0800baf4
 800a164:	0800be85 	.word	0x0800be85
 800a168:	0800bc10 	.word	0x0800bc10
 800a16c:	0800bbe8 	.word	0x0800bbe8
 800a170:	7ff00000 	.word	0x7ff00000
 800a174:	7ca00000 	.word	0x7ca00000
 800a178:	7fefffff 	.word	0x7fefffff
 800a17c:	f014 0310 	ands.w	r3, r4, #16
 800a180:	bf18      	it	ne
 800a182:	236a      	movne	r3, #106	@ 0x6a
 800a184:	4ea9      	ldr	r6, [pc, #676]	@ (800a42c <_strtod_l+0x854>)
 800a186:	9308      	str	r3, [sp, #32]
 800a188:	4650      	mov	r0, sl
 800a18a:	4659      	mov	r1, fp
 800a18c:	2300      	movs	r3, #0
 800a18e:	07e2      	lsls	r2, r4, #31
 800a190:	d504      	bpl.n	800a19c <_strtod_l+0x5c4>
 800a192:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	2301      	movs	r3, #1
 800a19c:	1064      	asrs	r4, r4, #1
 800a19e:	f106 0608 	add.w	r6, r6, #8
 800a1a2:	d1f4      	bne.n	800a18e <_strtod_l+0x5b6>
 800a1a4:	b10b      	cbz	r3, 800a1aa <_strtod_l+0x5d2>
 800a1a6:	4682      	mov	sl, r0
 800a1a8:	468b      	mov	fp, r1
 800a1aa:	9b08      	ldr	r3, [sp, #32]
 800a1ac:	b1b3      	cbz	r3, 800a1dc <_strtod_l+0x604>
 800a1ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a1b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	4659      	mov	r1, fp
 800a1ba:	dd0f      	ble.n	800a1dc <_strtod_l+0x604>
 800a1bc:	2b1f      	cmp	r3, #31
 800a1be:	dd55      	ble.n	800a26c <_strtod_l+0x694>
 800a1c0:	2b34      	cmp	r3, #52	@ 0x34
 800a1c2:	bfde      	ittt	le
 800a1c4:	f04f 33ff 	movle.w	r3, #4294967295
 800a1c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a1cc:	4093      	lslle	r3, r2
 800a1ce:	f04f 0a00 	mov.w	sl, #0
 800a1d2:	bfcc      	ite	gt
 800a1d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a1d8:	ea03 0b01 	andle.w	fp, r3, r1
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4650      	mov	r0, sl
 800a1e2:	4659      	mov	r1, fp
 800a1e4:	f7f6 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d1a6      	bne.n	800a13a <_strtod_l+0x562>
 800a1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a1f2:	9805      	ldr	r0, [sp, #20]
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	463a      	mov	r2, r7
 800a1f8:	f7ff f8c6 	bl	8009388 <__s2b>
 800a1fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f af05 	beq.w	800a00e <_strtod_l+0x436>
 800a204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a206:	2a00      	cmp	r2, #0
 800a208:	eba9 0308 	sub.w	r3, r9, r8
 800a20c:	bfa8      	it	ge
 800a20e:	2300      	movge	r3, #0
 800a210:	9312      	str	r3, [sp, #72]	@ 0x48
 800a212:	2400      	movs	r4, #0
 800a214:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a218:	9316      	str	r3, [sp, #88]	@ 0x58
 800a21a:	46a0      	mov	r8, r4
 800a21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a21e:	9805      	ldr	r0, [sp, #20]
 800a220:	6859      	ldr	r1, [r3, #4]
 800a222:	f7ff f809 	bl	8009238 <_Balloc>
 800a226:	4681      	mov	r9, r0
 800a228:	2800      	cmp	r0, #0
 800a22a:	f43f aef4 	beq.w	800a016 <_strtod_l+0x43e>
 800a22e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	3202      	adds	r2, #2
 800a234:	f103 010c 	add.w	r1, r3, #12
 800a238:	0092      	lsls	r2, r2, #2
 800a23a:	300c      	adds	r0, #12
 800a23c:	f000 fd72 	bl	800ad24 <memcpy>
 800a240:	ec4b ab10 	vmov	d0, sl, fp
 800a244:	9805      	ldr	r0, [sp, #20]
 800a246:	aa1c      	add	r2, sp, #112	@ 0x70
 800a248:	a91b      	add	r1, sp, #108	@ 0x6c
 800a24a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a24e:	f7ff fbd7 	bl	8009a00 <__d2b>
 800a252:	901a      	str	r0, [sp, #104]	@ 0x68
 800a254:	2800      	cmp	r0, #0
 800a256:	f43f aede 	beq.w	800a016 <_strtod_l+0x43e>
 800a25a:	9805      	ldr	r0, [sp, #20]
 800a25c:	2101      	movs	r1, #1
 800a25e:	f7ff f929 	bl	80094b4 <__i2b>
 800a262:	4680      	mov	r8, r0
 800a264:	b948      	cbnz	r0, 800a27a <_strtod_l+0x6a2>
 800a266:	f04f 0800 	mov.w	r8, #0
 800a26a:	e6d4      	b.n	800a016 <_strtod_l+0x43e>
 800a26c:	f04f 32ff 	mov.w	r2, #4294967295
 800a270:	fa02 f303 	lsl.w	r3, r2, r3
 800a274:	ea03 0a0a 	and.w	sl, r3, sl
 800a278:	e7b0      	b.n	800a1dc <_strtod_l+0x604>
 800a27a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a27c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a27e:	2d00      	cmp	r5, #0
 800a280:	bfab      	itete	ge
 800a282:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a284:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a286:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a288:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a28a:	bfac      	ite	ge
 800a28c:	18ef      	addge	r7, r5, r3
 800a28e:	1b5e      	sublt	r6, r3, r5
 800a290:	9b08      	ldr	r3, [sp, #32]
 800a292:	1aed      	subs	r5, r5, r3
 800a294:	4415      	add	r5, r2
 800a296:	4b66      	ldr	r3, [pc, #408]	@ (800a430 <_strtod_l+0x858>)
 800a298:	3d01      	subs	r5, #1
 800a29a:	429d      	cmp	r5, r3
 800a29c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a2a0:	da50      	bge.n	800a344 <_strtod_l+0x76c>
 800a2a2:	1b5b      	subs	r3, r3, r5
 800a2a4:	2b1f      	cmp	r3, #31
 800a2a6:	eba2 0203 	sub.w	r2, r2, r3
 800a2aa:	f04f 0101 	mov.w	r1, #1
 800a2ae:	dc3d      	bgt.n	800a32c <_strtod_l+0x754>
 800a2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2ba:	18bd      	adds	r5, r7, r2
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	42af      	cmp	r7, r5
 800a2c0:	4416      	add	r6, r2
 800a2c2:	441e      	add	r6, r3
 800a2c4:	463b      	mov	r3, r7
 800a2c6:	bfa8      	it	ge
 800a2c8:	462b      	movge	r3, r5
 800a2ca:	42b3      	cmp	r3, r6
 800a2cc:	bfa8      	it	ge
 800a2ce:	4633      	movge	r3, r6
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bfc2      	ittt	gt
 800a2d4:	1aed      	subgt	r5, r5, r3
 800a2d6:	1af6      	subgt	r6, r6, r3
 800a2d8:	1aff      	subgt	r7, r7, r3
 800a2da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dd16      	ble.n	800a30e <_strtod_l+0x736>
 800a2e0:	4641      	mov	r1, r8
 800a2e2:	9805      	ldr	r0, [sp, #20]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f7ff f9a5 	bl	8009634 <__pow5mult>
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d0ba      	beq.n	800a266 <_strtod_l+0x68e>
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a2f4:	9805      	ldr	r0, [sp, #20]
 800a2f6:	f7ff f8f3 	bl	80094e0 <__multiply>
 800a2fa:	900e      	str	r0, [sp, #56]	@ 0x38
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	f43f ae8a 	beq.w	800a016 <_strtod_l+0x43e>
 800a302:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a304:	9805      	ldr	r0, [sp, #20]
 800a306:	f7fe ffd7 	bl	80092b8 <_Bfree>
 800a30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a30c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a30e:	2d00      	cmp	r5, #0
 800a310:	dc1d      	bgt.n	800a34e <_strtod_l+0x776>
 800a312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	dd23      	ble.n	800a360 <_strtod_l+0x788>
 800a318:	4649      	mov	r1, r9
 800a31a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a31c:	9805      	ldr	r0, [sp, #20]
 800a31e:	f7ff f989 	bl	8009634 <__pow5mult>
 800a322:	4681      	mov	r9, r0
 800a324:	b9e0      	cbnz	r0, 800a360 <_strtod_l+0x788>
 800a326:	f04f 0900 	mov.w	r9, #0
 800a32a:	e674      	b.n	800a016 <_strtod_l+0x43e>
 800a32c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a330:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a334:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a338:	35e2      	adds	r5, #226	@ 0xe2
 800a33a:	fa01 f305 	lsl.w	r3, r1, r5
 800a33e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a340:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a342:	e7ba      	b.n	800a2ba <_strtod_l+0x6e2>
 800a344:	2300      	movs	r3, #0
 800a346:	9310      	str	r3, [sp, #64]	@ 0x40
 800a348:	2301      	movs	r3, #1
 800a34a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a34c:	e7b5      	b.n	800a2ba <_strtod_l+0x6e2>
 800a34e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a350:	9805      	ldr	r0, [sp, #20]
 800a352:	462a      	mov	r2, r5
 800a354:	f7ff f9c8 	bl	80096e8 <__lshift>
 800a358:	901a      	str	r0, [sp, #104]	@ 0x68
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d1d9      	bne.n	800a312 <_strtod_l+0x73a>
 800a35e:	e65a      	b.n	800a016 <_strtod_l+0x43e>
 800a360:	2e00      	cmp	r6, #0
 800a362:	dd07      	ble.n	800a374 <_strtod_l+0x79c>
 800a364:	4649      	mov	r1, r9
 800a366:	9805      	ldr	r0, [sp, #20]
 800a368:	4632      	mov	r2, r6
 800a36a:	f7ff f9bd 	bl	80096e8 <__lshift>
 800a36e:	4681      	mov	r9, r0
 800a370:	2800      	cmp	r0, #0
 800a372:	d0d8      	beq.n	800a326 <_strtod_l+0x74e>
 800a374:	2f00      	cmp	r7, #0
 800a376:	dd08      	ble.n	800a38a <_strtod_l+0x7b2>
 800a378:	4641      	mov	r1, r8
 800a37a:	9805      	ldr	r0, [sp, #20]
 800a37c:	463a      	mov	r2, r7
 800a37e:	f7ff f9b3 	bl	80096e8 <__lshift>
 800a382:	4680      	mov	r8, r0
 800a384:	2800      	cmp	r0, #0
 800a386:	f43f ae46 	beq.w	800a016 <_strtod_l+0x43e>
 800a38a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a38c:	9805      	ldr	r0, [sp, #20]
 800a38e:	464a      	mov	r2, r9
 800a390:	f7ff fa32 	bl	80097f8 <__mdiff>
 800a394:	4604      	mov	r4, r0
 800a396:	2800      	cmp	r0, #0
 800a398:	f43f ae3d 	beq.w	800a016 <_strtod_l+0x43e>
 800a39c:	68c3      	ldr	r3, [r0, #12]
 800a39e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60c3      	str	r3, [r0, #12]
 800a3a4:	4641      	mov	r1, r8
 800a3a6:	f7ff fa0b 	bl	80097c0 <__mcmp>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	da46      	bge.n	800a43c <_strtod_l+0x864>
 800a3ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3b0:	ea53 030a 	orrs.w	r3, r3, sl
 800a3b4:	d16c      	bne.n	800a490 <_strtod_l+0x8b8>
 800a3b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d168      	bne.n	800a490 <_strtod_l+0x8b8>
 800a3be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3c2:	0d1b      	lsrs	r3, r3, #20
 800a3c4:	051b      	lsls	r3, r3, #20
 800a3c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a3ca:	d961      	bls.n	800a490 <_strtod_l+0x8b8>
 800a3cc:	6963      	ldr	r3, [r4, #20]
 800a3ce:	b913      	cbnz	r3, 800a3d6 <_strtod_l+0x7fe>
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	dd5c      	ble.n	800a490 <_strtod_l+0x8b8>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	2201      	movs	r2, #1
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	f7ff f984 	bl	80096e8 <__lshift>
 800a3e0:	4641      	mov	r1, r8
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	f7ff f9ec 	bl	80097c0 <__mcmp>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	dd51      	ble.n	800a490 <_strtod_l+0x8b8>
 800a3ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3f0:	9a08      	ldr	r2, [sp, #32]
 800a3f2:	0d1b      	lsrs	r3, r3, #20
 800a3f4:	051b      	lsls	r3, r3, #20
 800a3f6:	2a00      	cmp	r2, #0
 800a3f8:	d06b      	beq.n	800a4d2 <_strtod_l+0x8fa>
 800a3fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a3fe:	d868      	bhi.n	800a4d2 <_strtod_l+0x8fa>
 800a400:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a404:	f67f ae9d 	bls.w	800a142 <_strtod_l+0x56a>
 800a408:	4b0a      	ldr	r3, [pc, #40]	@ (800a434 <_strtod_l+0x85c>)
 800a40a:	4650      	mov	r0, sl
 800a40c:	4659      	mov	r1, fp
 800a40e:	2200      	movs	r2, #0
 800a410:	f7f6 f8f2 	bl	80005f8 <__aeabi_dmul>
 800a414:	4b08      	ldr	r3, [pc, #32]	@ (800a438 <_strtod_l+0x860>)
 800a416:	400b      	ands	r3, r1
 800a418:	4682      	mov	sl, r0
 800a41a:	468b      	mov	fp, r1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f47f ae05 	bne.w	800a02c <_strtod_l+0x454>
 800a422:	9a05      	ldr	r2, [sp, #20]
 800a424:	2322      	movs	r3, #34	@ 0x22
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	e600      	b.n	800a02c <_strtod_l+0x454>
 800a42a:	bf00      	nop
 800a42c:	0800bd08 	.word	0x0800bd08
 800a430:	fffffc02 	.word	0xfffffc02
 800a434:	39500000 	.word	0x39500000
 800a438:	7ff00000 	.word	0x7ff00000
 800a43c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a440:	d165      	bne.n	800a50e <_strtod_l+0x936>
 800a442:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a448:	b35a      	cbz	r2, 800a4a2 <_strtod_l+0x8ca>
 800a44a:	4a9f      	ldr	r2, [pc, #636]	@ (800a6c8 <_strtod_l+0xaf0>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d12b      	bne.n	800a4a8 <_strtod_l+0x8d0>
 800a450:	9b08      	ldr	r3, [sp, #32]
 800a452:	4651      	mov	r1, sl
 800a454:	b303      	cbz	r3, 800a498 <_strtod_l+0x8c0>
 800a456:	4b9d      	ldr	r3, [pc, #628]	@ (800a6cc <_strtod_l+0xaf4>)
 800a458:	465a      	mov	r2, fp
 800a45a:	4013      	ands	r3, r2
 800a45c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a460:	f04f 32ff 	mov.w	r2, #4294967295
 800a464:	d81b      	bhi.n	800a49e <_strtod_l+0x8c6>
 800a466:	0d1b      	lsrs	r3, r3, #20
 800a468:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a46c:	fa02 f303 	lsl.w	r3, r2, r3
 800a470:	4299      	cmp	r1, r3
 800a472:	d119      	bne.n	800a4a8 <_strtod_l+0x8d0>
 800a474:	4b96      	ldr	r3, [pc, #600]	@ (800a6d0 <_strtod_l+0xaf8>)
 800a476:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a478:	429a      	cmp	r2, r3
 800a47a:	d102      	bne.n	800a482 <_strtod_l+0x8aa>
 800a47c:	3101      	adds	r1, #1
 800a47e:	f43f adca 	beq.w	800a016 <_strtod_l+0x43e>
 800a482:	4b92      	ldr	r3, [pc, #584]	@ (800a6cc <_strtod_l+0xaf4>)
 800a484:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a486:	401a      	ands	r2, r3
 800a488:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a48c:	f04f 0a00 	mov.w	sl, #0
 800a490:	9b08      	ldr	r3, [sp, #32]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1b8      	bne.n	800a408 <_strtod_l+0x830>
 800a496:	e5c9      	b.n	800a02c <_strtod_l+0x454>
 800a498:	f04f 33ff 	mov.w	r3, #4294967295
 800a49c:	e7e8      	b.n	800a470 <_strtod_l+0x898>
 800a49e:	4613      	mov	r3, r2
 800a4a0:	e7e6      	b.n	800a470 <_strtod_l+0x898>
 800a4a2:	ea53 030a 	orrs.w	r3, r3, sl
 800a4a6:	d0a1      	beq.n	800a3ec <_strtod_l+0x814>
 800a4a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4aa:	b1db      	cbz	r3, 800a4e4 <_strtod_l+0x90c>
 800a4ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4ae:	4213      	tst	r3, r2
 800a4b0:	d0ee      	beq.n	800a490 <_strtod_l+0x8b8>
 800a4b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4b4:	9a08      	ldr	r2, [sp, #32]
 800a4b6:	4650      	mov	r0, sl
 800a4b8:	4659      	mov	r1, fp
 800a4ba:	b1bb      	cbz	r3, 800a4ec <_strtod_l+0x914>
 800a4bc:	f7ff fb6e 	bl	8009b9c <sulp>
 800a4c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4c4:	ec53 2b10 	vmov	r2, r3, d0
 800a4c8:	f7f5 fee0 	bl	800028c <__adddf3>
 800a4cc:	4682      	mov	sl, r0
 800a4ce:	468b      	mov	fp, r1
 800a4d0:	e7de      	b.n	800a490 <_strtod_l+0x8b8>
 800a4d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a4d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a4da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a4de:	f04f 3aff 	mov.w	sl, #4294967295
 800a4e2:	e7d5      	b.n	800a490 <_strtod_l+0x8b8>
 800a4e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4e6:	ea13 0f0a 	tst.w	r3, sl
 800a4ea:	e7e1      	b.n	800a4b0 <_strtod_l+0x8d8>
 800a4ec:	f7ff fb56 	bl	8009b9c <sulp>
 800a4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4f4:	ec53 2b10 	vmov	r2, r3, d0
 800a4f8:	f7f5 fec6 	bl	8000288 <__aeabi_dsub>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2300      	movs	r3, #0
 800a500:	4682      	mov	sl, r0
 800a502:	468b      	mov	fp, r1
 800a504:	f7f6 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a508:	2800      	cmp	r0, #0
 800a50a:	d0c1      	beq.n	800a490 <_strtod_l+0x8b8>
 800a50c:	e619      	b.n	800a142 <_strtod_l+0x56a>
 800a50e:	4641      	mov	r1, r8
 800a510:	4620      	mov	r0, r4
 800a512:	f7ff facd 	bl	8009ab0 <__ratio>
 800a516:	ec57 6b10 	vmov	r6, r7, d0
 800a51a:	2200      	movs	r2, #0
 800a51c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a520:	4630      	mov	r0, r6
 800a522:	4639      	mov	r1, r7
 800a524:	f7f6 fae4 	bl	8000af0 <__aeabi_dcmple>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d06f      	beq.n	800a60c <_strtod_l+0xa34>
 800a52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d17a      	bne.n	800a628 <_strtod_l+0xa50>
 800a532:	f1ba 0f00 	cmp.w	sl, #0
 800a536:	d158      	bne.n	800a5ea <_strtod_l+0xa12>
 800a538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a53a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d15a      	bne.n	800a5f8 <_strtod_l+0xa20>
 800a542:	4b64      	ldr	r3, [pc, #400]	@ (800a6d4 <_strtod_l+0xafc>)
 800a544:	2200      	movs	r2, #0
 800a546:	4630      	mov	r0, r6
 800a548:	4639      	mov	r1, r7
 800a54a:	f7f6 fac7 	bl	8000adc <__aeabi_dcmplt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d159      	bne.n	800a606 <_strtod_l+0xa2e>
 800a552:	4630      	mov	r0, r6
 800a554:	4639      	mov	r1, r7
 800a556:	4b60      	ldr	r3, [pc, #384]	@ (800a6d8 <_strtod_l+0xb00>)
 800a558:	2200      	movs	r2, #0
 800a55a:	f7f6 f84d 	bl	80005f8 <__aeabi_dmul>
 800a55e:	4606      	mov	r6, r0
 800a560:	460f      	mov	r7, r1
 800a562:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a566:	9606      	str	r6, [sp, #24]
 800a568:	9307      	str	r3, [sp, #28]
 800a56a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a56e:	4d57      	ldr	r5, [pc, #348]	@ (800a6cc <_strtod_l+0xaf4>)
 800a570:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a576:	401d      	ands	r5, r3
 800a578:	4b58      	ldr	r3, [pc, #352]	@ (800a6dc <_strtod_l+0xb04>)
 800a57a:	429d      	cmp	r5, r3
 800a57c:	f040 80b2 	bne.w	800a6e4 <_strtod_l+0xb0c>
 800a580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a582:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a586:	ec4b ab10 	vmov	d0, sl, fp
 800a58a:	f7ff f9c9 	bl	8009920 <__ulp>
 800a58e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a592:	ec51 0b10 	vmov	r0, r1, d0
 800a596:	f7f6 f82f 	bl	80005f8 <__aeabi_dmul>
 800a59a:	4652      	mov	r2, sl
 800a59c:	465b      	mov	r3, fp
 800a59e:	f7f5 fe75 	bl	800028c <__adddf3>
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4949      	ldr	r1, [pc, #292]	@ (800a6cc <_strtod_l+0xaf4>)
 800a5a6:	4a4e      	ldr	r2, [pc, #312]	@ (800a6e0 <_strtod_l+0xb08>)
 800a5a8:	4019      	ands	r1, r3
 800a5aa:	4291      	cmp	r1, r2
 800a5ac:	4682      	mov	sl, r0
 800a5ae:	d942      	bls.n	800a636 <_strtod_l+0xa5e>
 800a5b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5b2:	4b47      	ldr	r3, [pc, #284]	@ (800a6d0 <_strtod_l+0xaf8>)
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d103      	bne.n	800a5c0 <_strtod_l+0x9e8>
 800a5b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	f43f ad2b 	beq.w	800a016 <_strtod_l+0x43e>
 800a5c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a6d0 <_strtod_l+0xaf8>
 800a5c4:	f04f 3aff 	mov.w	sl, #4294967295
 800a5c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ca:	9805      	ldr	r0, [sp, #20]
 800a5cc:	f7fe fe74 	bl	80092b8 <_Bfree>
 800a5d0:	9805      	ldr	r0, [sp, #20]
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	f7fe fe70 	bl	80092b8 <_Bfree>
 800a5d8:	9805      	ldr	r0, [sp, #20]
 800a5da:	4641      	mov	r1, r8
 800a5dc:	f7fe fe6c 	bl	80092b8 <_Bfree>
 800a5e0:	9805      	ldr	r0, [sp, #20]
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	f7fe fe68 	bl	80092b8 <_Bfree>
 800a5e8:	e618      	b.n	800a21c <_strtod_l+0x644>
 800a5ea:	f1ba 0f01 	cmp.w	sl, #1
 800a5ee:	d103      	bne.n	800a5f8 <_strtod_l+0xa20>
 800a5f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f43f ada5 	beq.w	800a142 <_strtod_l+0x56a>
 800a5f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a6a8 <_strtod_l+0xad0>
 800a5fc:	4f35      	ldr	r7, [pc, #212]	@ (800a6d4 <_strtod_l+0xafc>)
 800a5fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a602:	2600      	movs	r6, #0
 800a604:	e7b1      	b.n	800a56a <_strtod_l+0x992>
 800a606:	4f34      	ldr	r7, [pc, #208]	@ (800a6d8 <_strtod_l+0xb00>)
 800a608:	2600      	movs	r6, #0
 800a60a:	e7aa      	b.n	800a562 <_strtod_l+0x98a>
 800a60c:	4b32      	ldr	r3, [pc, #200]	@ (800a6d8 <_strtod_l+0xb00>)
 800a60e:	4630      	mov	r0, r6
 800a610:	4639      	mov	r1, r7
 800a612:	2200      	movs	r2, #0
 800a614:	f7f5 fff0 	bl	80005f8 <__aeabi_dmul>
 800a618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a61a:	4606      	mov	r6, r0
 800a61c:	460f      	mov	r7, r1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d09f      	beq.n	800a562 <_strtod_l+0x98a>
 800a622:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a626:	e7a0      	b.n	800a56a <_strtod_l+0x992>
 800a628:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a6b0 <_strtod_l+0xad8>
 800a62c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a630:	ec57 6b17 	vmov	r6, r7, d7
 800a634:	e799      	b.n	800a56a <_strtod_l+0x992>
 800a636:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1c1      	bne.n	800a5c8 <_strtod_l+0x9f0>
 800a644:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a648:	0d1b      	lsrs	r3, r3, #20
 800a64a:	051b      	lsls	r3, r3, #20
 800a64c:	429d      	cmp	r5, r3
 800a64e:	d1bb      	bne.n	800a5c8 <_strtod_l+0x9f0>
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 fb30 	bl	8000cb8 <__aeabi_d2lz>
 800a658:	f7f5 ffa0 	bl	800059c <__aeabi_l2d>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4630      	mov	r0, r6
 800a662:	4639      	mov	r1, r7
 800a664:	f7f5 fe10 	bl	8000288 <__aeabi_dsub>
 800a668:	460b      	mov	r3, r1
 800a66a:	4602      	mov	r2, r0
 800a66c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a670:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a676:	ea46 060a 	orr.w	r6, r6, sl
 800a67a:	431e      	orrs	r6, r3
 800a67c:	d06f      	beq.n	800a75e <_strtod_l+0xb86>
 800a67e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6b8 <_strtod_l+0xae0>)
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	f7f6 fa2a 	bl	8000adc <__aeabi_dcmplt>
 800a688:	2800      	cmp	r0, #0
 800a68a:	f47f accf 	bne.w	800a02c <_strtod_l+0x454>
 800a68e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a6c0 <_strtod_l+0xae8>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a698:	f7f6 fa3e 	bl	8000b18 <__aeabi_dcmpgt>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d093      	beq.n	800a5c8 <_strtod_l+0x9f0>
 800a6a0:	e4c4      	b.n	800a02c <_strtod_l+0x454>
 800a6a2:	bf00      	nop
 800a6a4:	f3af 8000 	nop.w
 800a6a8:	00000000 	.word	0x00000000
 800a6ac:	bff00000 	.word	0xbff00000
 800a6b0:	00000000 	.word	0x00000000
 800a6b4:	3ff00000 	.word	0x3ff00000
 800a6b8:	94a03595 	.word	0x94a03595
 800a6bc:	3fdfffff 	.word	0x3fdfffff
 800a6c0:	35afe535 	.word	0x35afe535
 800a6c4:	3fe00000 	.word	0x3fe00000
 800a6c8:	000fffff 	.word	0x000fffff
 800a6cc:	7ff00000 	.word	0x7ff00000
 800a6d0:	7fefffff 	.word	0x7fefffff
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	3fe00000 	.word	0x3fe00000
 800a6dc:	7fe00000 	.word	0x7fe00000
 800a6e0:	7c9fffff 	.word	0x7c9fffff
 800a6e4:	9b08      	ldr	r3, [sp, #32]
 800a6e6:	b323      	cbz	r3, 800a732 <_strtod_l+0xb5a>
 800a6e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a6ec:	d821      	bhi.n	800a732 <_strtod_l+0xb5a>
 800a6ee:	a328      	add	r3, pc, #160	@ (adr r3, 800a790 <_strtod_l+0xbb8>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	f7f6 f9fa 	bl	8000af0 <__aeabi_dcmple>
 800a6fc:	b1a0      	cbz	r0, 800a728 <_strtod_l+0xb50>
 800a6fe:	4639      	mov	r1, r7
 800a700:	4630      	mov	r0, r6
 800a702:	f7f6 fa51 	bl	8000ba8 <__aeabi_d2uiz>
 800a706:	2801      	cmp	r0, #1
 800a708:	bf38      	it	cc
 800a70a:	2001      	movcc	r0, #1
 800a70c:	f7f5 fefa 	bl	8000504 <__aeabi_ui2d>
 800a710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a712:	4606      	mov	r6, r0
 800a714:	460f      	mov	r7, r1
 800a716:	b9fb      	cbnz	r3, 800a758 <_strtod_l+0xb80>
 800a718:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a71c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a71e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a720:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a724:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a728:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a72a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a72e:	1b5b      	subs	r3, r3, r5
 800a730:	9311      	str	r3, [sp, #68]	@ 0x44
 800a732:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a736:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a73a:	f7ff f8f1 	bl	8009920 <__ulp>
 800a73e:	4650      	mov	r0, sl
 800a740:	ec53 2b10 	vmov	r2, r3, d0
 800a744:	4659      	mov	r1, fp
 800a746:	f7f5 ff57 	bl	80005f8 <__aeabi_dmul>
 800a74a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a74e:	f7f5 fd9d 	bl	800028c <__adddf3>
 800a752:	4682      	mov	sl, r0
 800a754:	468b      	mov	fp, r1
 800a756:	e770      	b.n	800a63a <_strtod_l+0xa62>
 800a758:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a75c:	e7e0      	b.n	800a720 <_strtod_l+0xb48>
 800a75e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a798 <_strtod_l+0xbc0>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f7f6 f9ba 	bl	8000adc <__aeabi_dcmplt>
 800a768:	e798      	b.n	800a69c <_strtod_l+0xac4>
 800a76a:	2300      	movs	r3, #0
 800a76c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a76e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	f7ff ba6d 	b.w	8009c52 <_strtod_l+0x7a>
 800a778:	2a65      	cmp	r2, #101	@ 0x65
 800a77a:	f43f ab66 	beq.w	8009e4a <_strtod_l+0x272>
 800a77e:	2a45      	cmp	r2, #69	@ 0x45
 800a780:	f43f ab63 	beq.w	8009e4a <_strtod_l+0x272>
 800a784:	2301      	movs	r3, #1
 800a786:	f7ff bb9e 	b.w	8009ec6 <_strtod_l+0x2ee>
 800a78a:	bf00      	nop
 800a78c:	f3af 8000 	nop.w
 800a790:	ffc00000 	.word	0xffc00000
 800a794:	41dfffff 	.word	0x41dfffff
 800a798:	94a03595 	.word	0x94a03595
 800a79c:	3fcfffff 	.word	0x3fcfffff

0800a7a0 <_strtod_r>:
 800a7a0:	4b01      	ldr	r3, [pc, #4]	@ (800a7a8 <_strtod_r+0x8>)
 800a7a2:	f7ff ba19 	b.w	8009bd8 <_strtod_l>
 800a7a6:	bf00      	nop
 800a7a8:	20000068 	.word	0x20000068

0800a7ac <_strtol_l.constprop.0>:
 800a7ac:	2b24      	cmp	r3, #36	@ 0x24
 800a7ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b2:	4686      	mov	lr, r0
 800a7b4:	4690      	mov	r8, r2
 800a7b6:	d801      	bhi.n	800a7bc <_strtol_l.constprop.0+0x10>
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d106      	bne.n	800a7ca <_strtol_l.constprop.0+0x1e>
 800a7bc:	f7fd fdba 	bl	8008334 <__errno>
 800a7c0:	2316      	movs	r3, #22
 800a7c2:	6003      	str	r3, [r0, #0]
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ca:	4834      	ldr	r0, [pc, #208]	@ (800a89c <_strtol_l.constprop.0+0xf0>)
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	462a      	mov	r2, r5
 800a7d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d4:	5d06      	ldrb	r6, [r0, r4]
 800a7d6:	f016 0608 	ands.w	r6, r6, #8
 800a7da:	d1f8      	bne.n	800a7ce <_strtol_l.constprop.0+0x22>
 800a7dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a7de:	d12d      	bne.n	800a83c <_strtol_l.constprop.0+0x90>
 800a7e0:	782c      	ldrb	r4, [r5, #0]
 800a7e2:	2601      	movs	r6, #1
 800a7e4:	1c95      	adds	r5, r2, #2
 800a7e6:	f033 0210 	bics.w	r2, r3, #16
 800a7ea:	d109      	bne.n	800a800 <_strtol_l.constprop.0+0x54>
 800a7ec:	2c30      	cmp	r4, #48	@ 0x30
 800a7ee:	d12a      	bne.n	800a846 <_strtol_l.constprop.0+0x9a>
 800a7f0:	782a      	ldrb	r2, [r5, #0]
 800a7f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a7f6:	2a58      	cmp	r2, #88	@ 0x58
 800a7f8:	d125      	bne.n	800a846 <_strtol_l.constprop.0+0x9a>
 800a7fa:	786c      	ldrb	r4, [r5, #1]
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	3502      	adds	r5, #2
 800a800:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a804:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a808:	2200      	movs	r2, #0
 800a80a:	fbbc f9f3 	udiv	r9, ip, r3
 800a80e:	4610      	mov	r0, r2
 800a810:	fb03 ca19 	mls	sl, r3, r9, ip
 800a814:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a818:	2f09      	cmp	r7, #9
 800a81a:	d81b      	bhi.n	800a854 <_strtol_l.constprop.0+0xa8>
 800a81c:	463c      	mov	r4, r7
 800a81e:	42a3      	cmp	r3, r4
 800a820:	dd27      	ble.n	800a872 <_strtol_l.constprop.0+0xc6>
 800a822:	1c57      	adds	r7, r2, #1
 800a824:	d007      	beq.n	800a836 <_strtol_l.constprop.0+0x8a>
 800a826:	4581      	cmp	r9, r0
 800a828:	d320      	bcc.n	800a86c <_strtol_l.constprop.0+0xc0>
 800a82a:	d101      	bne.n	800a830 <_strtol_l.constprop.0+0x84>
 800a82c:	45a2      	cmp	sl, r4
 800a82e:	db1d      	blt.n	800a86c <_strtol_l.constprop.0+0xc0>
 800a830:	fb00 4003 	mla	r0, r0, r3, r4
 800a834:	2201      	movs	r2, #1
 800a836:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a83a:	e7eb      	b.n	800a814 <_strtol_l.constprop.0+0x68>
 800a83c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a83e:	bf04      	itt	eq
 800a840:	782c      	ldrbeq	r4, [r5, #0]
 800a842:	1c95      	addeq	r5, r2, #2
 800a844:	e7cf      	b.n	800a7e6 <_strtol_l.constprop.0+0x3a>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1da      	bne.n	800a800 <_strtol_l.constprop.0+0x54>
 800a84a:	2c30      	cmp	r4, #48	@ 0x30
 800a84c:	bf0c      	ite	eq
 800a84e:	2308      	moveq	r3, #8
 800a850:	230a      	movne	r3, #10
 800a852:	e7d5      	b.n	800a800 <_strtol_l.constprop.0+0x54>
 800a854:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a858:	2f19      	cmp	r7, #25
 800a85a:	d801      	bhi.n	800a860 <_strtol_l.constprop.0+0xb4>
 800a85c:	3c37      	subs	r4, #55	@ 0x37
 800a85e:	e7de      	b.n	800a81e <_strtol_l.constprop.0+0x72>
 800a860:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a864:	2f19      	cmp	r7, #25
 800a866:	d804      	bhi.n	800a872 <_strtol_l.constprop.0+0xc6>
 800a868:	3c57      	subs	r4, #87	@ 0x57
 800a86a:	e7d8      	b.n	800a81e <_strtol_l.constprop.0+0x72>
 800a86c:	f04f 32ff 	mov.w	r2, #4294967295
 800a870:	e7e1      	b.n	800a836 <_strtol_l.constprop.0+0x8a>
 800a872:	1c53      	adds	r3, r2, #1
 800a874:	d108      	bne.n	800a888 <_strtol_l.constprop.0+0xdc>
 800a876:	2322      	movs	r3, #34	@ 0x22
 800a878:	f8ce 3000 	str.w	r3, [lr]
 800a87c:	4660      	mov	r0, ip
 800a87e:	f1b8 0f00 	cmp.w	r8, #0
 800a882:	d0a0      	beq.n	800a7c6 <_strtol_l.constprop.0+0x1a>
 800a884:	1e69      	subs	r1, r5, #1
 800a886:	e006      	b.n	800a896 <_strtol_l.constprop.0+0xea>
 800a888:	b106      	cbz	r6, 800a88c <_strtol_l.constprop.0+0xe0>
 800a88a:	4240      	negs	r0, r0
 800a88c:	f1b8 0f00 	cmp.w	r8, #0
 800a890:	d099      	beq.n	800a7c6 <_strtol_l.constprop.0+0x1a>
 800a892:	2a00      	cmp	r2, #0
 800a894:	d1f6      	bne.n	800a884 <_strtol_l.constprop.0+0xd8>
 800a896:	f8c8 1000 	str.w	r1, [r8]
 800a89a:	e794      	b.n	800a7c6 <_strtol_l.constprop.0+0x1a>
 800a89c:	0800bd31 	.word	0x0800bd31

0800a8a0 <_strtol_r>:
 800a8a0:	f7ff bf84 	b.w	800a7ac <_strtol_l.constprop.0>

0800a8a4 <__ssputs_r>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	688e      	ldr	r6, [r1, #8]
 800a8aa:	461f      	mov	r7, r3
 800a8ac:	42be      	cmp	r6, r7
 800a8ae:	680b      	ldr	r3, [r1, #0]
 800a8b0:	4682      	mov	sl, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	4690      	mov	r8, r2
 800a8b6:	d82d      	bhi.n	800a914 <__ssputs_r+0x70>
 800a8b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8c0:	d026      	beq.n	800a910 <__ssputs_r+0x6c>
 800a8c2:	6965      	ldr	r5, [r4, #20]
 800a8c4:	6909      	ldr	r1, [r1, #16]
 800a8c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8ca:	eba3 0901 	sub.w	r9, r3, r1
 800a8ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8d2:	1c7b      	adds	r3, r7, #1
 800a8d4:	444b      	add	r3, r9
 800a8d6:	106d      	asrs	r5, r5, #1
 800a8d8:	429d      	cmp	r5, r3
 800a8da:	bf38      	it	cc
 800a8dc:	461d      	movcc	r5, r3
 800a8de:	0553      	lsls	r3, r2, #21
 800a8e0:	d527      	bpl.n	800a932 <__ssputs_r+0x8e>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f7fe fc1c 	bl	8009120 <_malloc_r>
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	b360      	cbz	r0, 800a946 <__ssputs_r+0xa2>
 800a8ec:	6921      	ldr	r1, [r4, #16]
 800a8ee:	464a      	mov	r2, r9
 800a8f0:	f000 fa18 	bl	800ad24 <memcpy>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	6126      	str	r6, [r4, #16]
 800a902:	6165      	str	r5, [r4, #20]
 800a904:	444e      	add	r6, r9
 800a906:	eba5 0509 	sub.w	r5, r5, r9
 800a90a:	6026      	str	r6, [r4, #0]
 800a90c:	60a5      	str	r5, [r4, #8]
 800a90e:	463e      	mov	r6, r7
 800a910:	42be      	cmp	r6, r7
 800a912:	d900      	bls.n	800a916 <__ssputs_r+0x72>
 800a914:	463e      	mov	r6, r7
 800a916:	6820      	ldr	r0, [r4, #0]
 800a918:	4632      	mov	r2, r6
 800a91a:	4641      	mov	r1, r8
 800a91c:	f000 f9c6 	bl	800acac <memmove>
 800a920:	68a3      	ldr	r3, [r4, #8]
 800a922:	1b9b      	subs	r3, r3, r6
 800a924:	60a3      	str	r3, [r4, #8]
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	4433      	add	r3, r6
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	2000      	movs	r0, #0
 800a92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a932:	462a      	mov	r2, r5
 800a934:	f000 fd89 	bl	800b44a <_realloc_r>
 800a938:	4606      	mov	r6, r0
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d1e0      	bne.n	800a900 <__ssputs_r+0x5c>
 800a93e:	6921      	ldr	r1, [r4, #16]
 800a940:	4650      	mov	r0, sl
 800a942:	f7fe fb79 	bl	8009038 <_free_r>
 800a946:	230c      	movs	r3, #12
 800a948:	f8ca 3000 	str.w	r3, [sl]
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	f04f 30ff 	mov.w	r0, #4294967295
 800a958:	e7e9      	b.n	800a92e <__ssputs_r+0x8a>
	...

0800a95c <_svfiprintf_r>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	4698      	mov	r8, r3
 800a962:	898b      	ldrh	r3, [r1, #12]
 800a964:	061b      	lsls	r3, r3, #24
 800a966:	b09d      	sub	sp, #116	@ 0x74
 800a968:	4607      	mov	r7, r0
 800a96a:	460d      	mov	r5, r1
 800a96c:	4614      	mov	r4, r2
 800a96e:	d510      	bpl.n	800a992 <_svfiprintf_r+0x36>
 800a970:	690b      	ldr	r3, [r1, #16]
 800a972:	b973      	cbnz	r3, 800a992 <_svfiprintf_r+0x36>
 800a974:	2140      	movs	r1, #64	@ 0x40
 800a976:	f7fe fbd3 	bl	8009120 <_malloc_r>
 800a97a:	6028      	str	r0, [r5, #0]
 800a97c:	6128      	str	r0, [r5, #16]
 800a97e:	b930      	cbnz	r0, 800a98e <_svfiprintf_r+0x32>
 800a980:	230c      	movs	r3, #12
 800a982:	603b      	str	r3, [r7, #0]
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	b01d      	add	sp, #116	@ 0x74
 800a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98e:	2340      	movs	r3, #64	@ 0x40
 800a990:	616b      	str	r3, [r5, #20]
 800a992:	2300      	movs	r3, #0
 800a994:	9309      	str	r3, [sp, #36]	@ 0x24
 800a996:	2320      	movs	r3, #32
 800a998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a99c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9a0:	2330      	movs	r3, #48	@ 0x30
 800a9a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab40 <_svfiprintf_r+0x1e4>
 800a9a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9aa:	f04f 0901 	mov.w	r9, #1
 800a9ae:	4623      	mov	r3, r4
 800a9b0:	469a      	mov	sl, r3
 800a9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b6:	b10a      	cbz	r2, 800a9bc <_svfiprintf_r+0x60>
 800a9b8:	2a25      	cmp	r2, #37	@ 0x25
 800a9ba:	d1f9      	bne.n	800a9b0 <_svfiprintf_r+0x54>
 800a9bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9c0:	d00b      	beq.n	800a9da <_svfiprintf_r+0x7e>
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7ff ff6b 	bl	800a8a4 <__ssputs_r>
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	f000 80a7 	beq.w	800ab22 <_svfiprintf_r+0x1c6>
 800a9d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d6:	445a      	add	r2, fp
 800a9d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9da:	f89a 3000 	ldrb.w	r3, [sl]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 809f 	beq.w	800ab22 <_svfiprintf_r+0x1c6>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ee:	f10a 0a01 	add.w	sl, sl, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	9307      	str	r3, [sp, #28]
 800a9f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9fc:	4654      	mov	r4, sl
 800a9fe:	2205      	movs	r2, #5
 800aa00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa04:	484e      	ldr	r0, [pc, #312]	@ (800ab40 <_svfiprintf_r+0x1e4>)
 800aa06:	f7f5 fbe3 	bl	80001d0 <memchr>
 800aa0a:	9a04      	ldr	r2, [sp, #16]
 800aa0c:	b9d8      	cbnz	r0, 800aa46 <_svfiprintf_r+0xea>
 800aa0e:	06d0      	lsls	r0, r2, #27
 800aa10:	bf44      	itt	mi
 800aa12:	2320      	movmi	r3, #32
 800aa14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa18:	0711      	lsls	r1, r2, #28
 800aa1a:	bf44      	itt	mi
 800aa1c:	232b      	movmi	r3, #43	@ 0x2b
 800aa1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa22:	f89a 3000 	ldrb.w	r3, [sl]
 800aa26:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa28:	d015      	beq.n	800aa56 <_svfiprintf_r+0xfa>
 800aa2a:	9a07      	ldr	r2, [sp, #28]
 800aa2c:	4654      	mov	r4, sl
 800aa2e:	2000      	movs	r0, #0
 800aa30:	f04f 0c0a 	mov.w	ip, #10
 800aa34:	4621      	mov	r1, r4
 800aa36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa3a:	3b30      	subs	r3, #48	@ 0x30
 800aa3c:	2b09      	cmp	r3, #9
 800aa3e:	d94b      	bls.n	800aad8 <_svfiprintf_r+0x17c>
 800aa40:	b1b0      	cbz	r0, 800aa70 <_svfiprintf_r+0x114>
 800aa42:	9207      	str	r2, [sp, #28]
 800aa44:	e014      	b.n	800aa70 <_svfiprintf_r+0x114>
 800aa46:	eba0 0308 	sub.w	r3, r0, r8
 800aa4a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	46a2      	mov	sl, r4
 800aa54:	e7d2      	b.n	800a9fc <_svfiprintf_r+0xa0>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	1d19      	adds	r1, r3, #4
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	9103      	str	r1, [sp, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfbb      	ittet	lt
 800aa62:	425b      	neglt	r3, r3
 800aa64:	f042 0202 	orrlt.w	r2, r2, #2
 800aa68:	9307      	strge	r3, [sp, #28]
 800aa6a:	9307      	strlt	r3, [sp, #28]
 800aa6c:	bfb8      	it	lt
 800aa6e:	9204      	strlt	r2, [sp, #16]
 800aa70:	7823      	ldrb	r3, [r4, #0]
 800aa72:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa74:	d10a      	bne.n	800aa8c <_svfiprintf_r+0x130>
 800aa76:	7863      	ldrb	r3, [r4, #1]
 800aa78:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa7a:	d132      	bne.n	800aae2 <_svfiprintf_r+0x186>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	1d1a      	adds	r2, r3, #4
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	9203      	str	r2, [sp, #12]
 800aa84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa88:	3402      	adds	r4, #2
 800aa8a:	9305      	str	r3, [sp, #20]
 800aa8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab50 <_svfiprintf_r+0x1f4>
 800aa90:	7821      	ldrb	r1, [r4, #0]
 800aa92:	2203      	movs	r2, #3
 800aa94:	4650      	mov	r0, sl
 800aa96:	f7f5 fb9b 	bl	80001d0 <memchr>
 800aa9a:	b138      	cbz	r0, 800aaac <_svfiprintf_r+0x150>
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	eba0 000a 	sub.w	r0, r0, sl
 800aaa2:	2240      	movs	r2, #64	@ 0x40
 800aaa4:	4082      	lsls	r2, r0
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	3401      	adds	r4, #1
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab0:	4824      	ldr	r0, [pc, #144]	@ (800ab44 <_svfiprintf_r+0x1e8>)
 800aab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aab6:	2206      	movs	r2, #6
 800aab8:	f7f5 fb8a 	bl	80001d0 <memchr>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d036      	beq.n	800ab2e <_svfiprintf_r+0x1d2>
 800aac0:	4b21      	ldr	r3, [pc, #132]	@ (800ab48 <_svfiprintf_r+0x1ec>)
 800aac2:	bb1b      	cbnz	r3, 800ab0c <_svfiprintf_r+0x1b0>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	3307      	adds	r3, #7
 800aac8:	f023 0307 	bic.w	r3, r3, #7
 800aacc:	3308      	adds	r3, #8
 800aace:	9303      	str	r3, [sp, #12]
 800aad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad2:	4433      	add	r3, r6
 800aad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad6:	e76a      	b.n	800a9ae <_svfiprintf_r+0x52>
 800aad8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aadc:	460c      	mov	r4, r1
 800aade:	2001      	movs	r0, #1
 800aae0:	e7a8      	b.n	800aa34 <_svfiprintf_r+0xd8>
 800aae2:	2300      	movs	r3, #0
 800aae4:	3401      	adds	r4, #1
 800aae6:	9305      	str	r3, [sp, #20]
 800aae8:	4619      	mov	r1, r3
 800aaea:	f04f 0c0a 	mov.w	ip, #10
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf4:	3a30      	subs	r2, #48	@ 0x30
 800aaf6:	2a09      	cmp	r2, #9
 800aaf8:	d903      	bls.n	800ab02 <_svfiprintf_r+0x1a6>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0c6      	beq.n	800aa8c <_svfiprintf_r+0x130>
 800aafe:	9105      	str	r1, [sp, #20]
 800ab00:	e7c4      	b.n	800aa8c <_svfiprintf_r+0x130>
 800ab02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab06:	4604      	mov	r4, r0
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e7f0      	b.n	800aaee <_svfiprintf_r+0x192>
 800ab0c:	ab03      	add	r3, sp, #12
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	462a      	mov	r2, r5
 800ab12:	4b0e      	ldr	r3, [pc, #56]	@ (800ab4c <_svfiprintf_r+0x1f0>)
 800ab14:	a904      	add	r1, sp, #16
 800ab16:	4638      	mov	r0, r7
 800ab18:	f7fc fcc8 	bl	80074ac <_printf_float>
 800ab1c:	1c42      	adds	r2, r0, #1
 800ab1e:	4606      	mov	r6, r0
 800ab20:	d1d6      	bne.n	800aad0 <_svfiprintf_r+0x174>
 800ab22:	89ab      	ldrh	r3, [r5, #12]
 800ab24:	065b      	lsls	r3, r3, #25
 800ab26:	f53f af2d 	bmi.w	800a984 <_svfiprintf_r+0x28>
 800ab2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab2c:	e72c      	b.n	800a988 <_svfiprintf_r+0x2c>
 800ab2e:	ab03      	add	r3, sp, #12
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	462a      	mov	r2, r5
 800ab34:	4b05      	ldr	r3, [pc, #20]	@ (800ab4c <_svfiprintf_r+0x1f0>)
 800ab36:	a904      	add	r1, sp, #16
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f7fc ff4f 	bl	80079dc <_printf_i>
 800ab3e:	e7ed      	b.n	800ab1c <_svfiprintf_r+0x1c0>
 800ab40:	0800be31 	.word	0x0800be31
 800ab44:	0800be3b 	.word	0x0800be3b
 800ab48:	080074ad 	.word	0x080074ad
 800ab4c:	0800a8a5 	.word	0x0800a8a5
 800ab50:	0800be37 	.word	0x0800be37

0800ab54 <__sflush_r>:
 800ab54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5c:	0716      	lsls	r6, r2, #28
 800ab5e:	4605      	mov	r5, r0
 800ab60:	460c      	mov	r4, r1
 800ab62:	d454      	bmi.n	800ac0e <__sflush_r+0xba>
 800ab64:	684b      	ldr	r3, [r1, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dc02      	bgt.n	800ab70 <__sflush_r+0x1c>
 800ab6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dd48      	ble.n	800ac02 <__sflush_r+0xae>
 800ab70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab72:	2e00      	cmp	r6, #0
 800ab74:	d045      	beq.n	800ac02 <__sflush_r+0xae>
 800ab76:	2300      	movs	r3, #0
 800ab78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab7c:	682f      	ldr	r7, [r5, #0]
 800ab7e:	6a21      	ldr	r1, [r4, #32]
 800ab80:	602b      	str	r3, [r5, #0]
 800ab82:	d030      	beq.n	800abe6 <__sflush_r+0x92>
 800ab84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	0759      	lsls	r1, r3, #29
 800ab8a:	d505      	bpl.n	800ab98 <__sflush_r+0x44>
 800ab8c:	6863      	ldr	r3, [r4, #4]
 800ab8e:	1ad2      	subs	r2, r2, r3
 800ab90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab92:	b10b      	cbz	r3, 800ab98 <__sflush_r+0x44>
 800ab94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab96:	1ad2      	subs	r2, r2, r3
 800ab98:	2300      	movs	r3, #0
 800ab9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab9c:	6a21      	ldr	r1, [r4, #32]
 800ab9e:	4628      	mov	r0, r5
 800aba0:	47b0      	blx	r6
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	d106      	bne.n	800abb6 <__sflush_r+0x62>
 800aba8:	6829      	ldr	r1, [r5, #0]
 800abaa:	291d      	cmp	r1, #29
 800abac:	d82b      	bhi.n	800ac06 <__sflush_r+0xb2>
 800abae:	4a2a      	ldr	r2, [pc, #168]	@ (800ac58 <__sflush_r+0x104>)
 800abb0:	410a      	asrs	r2, r1
 800abb2:	07d6      	lsls	r6, r2, #31
 800abb4:	d427      	bmi.n	800ac06 <__sflush_r+0xb2>
 800abb6:	2200      	movs	r2, #0
 800abb8:	6062      	str	r2, [r4, #4]
 800abba:	04d9      	lsls	r1, r3, #19
 800abbc:	6922      	ldr	r2, [r4, #16]
 800abbe:	6022      	str	r2, [r4, #0]
 800abc0:	d504      	bpl.n	800abcc <__sflush_r+0x78>
 800abc2:	1c42      	adds	r2, r0, #1
 800abc4:	d101      	bne.n	800abca <__sflush_r+0x76>
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	b903      	cbnz	r3, 800abcc <__sflush_r+0x78>
 800abca:	6560      	str	r0, [r4, #84]	@ 0x54
 800abcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abce:	602f      	str	r7, [r5, #0]
 800abd0:	b1b9      	cbz	r1, 800ac02 <__sflush_r+0xae>
 800abd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abd6:	4299      	cmp	r1, r3
 800abd8:	d002      	beq.n	800abe0 <__sflush_r+0x8c>
 800abda:	4628      	mov	r0, r5
 800abdc:	f7fe fa2c 	bl	8009038 <_free_r>
 800abe0:	2300      	movs	r3, #0
 800abe2:	6363      	str	r3, [r4, #52]	@ 0x34
 800abe4:	e00d      	b.n	800ac02 <__sflush_r+0xae>
 800abe6:	2301      	movs	r3, #1
 800abe8:	4628      	mov	r0, r5
 800abea:	47b0      	blx	r6
 800abec:	4602      	mov	r2, r0
 800abee:	1c50      	adds	r0, r2, #1
 800abf0:	d1c9      	bne.n	800ab86 <__sflush_r+0x32>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d0c6      	beq.n	800ab86 <__sflush_r+0x32>
 800abf8:	2b1d      	cmp	r3, #29
 800abfa:	d001      	beq.n	800ac00 <__sflush_r+0xac>
 800abfc:	2b16      	cmp	r3, #22
 800abfe:	d11e      	bne.n	800ac3e <__sflush_r+0xea>
 800ac00:	602f      	str	r7, [r5, #0]
 800ac02:	2000      	movs	r0, #0
 800ac04:	e022      	b.n	800ac4c <__sflush_r+0xf8>
 800ac06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0a:	b21b      	sxth	r3, r3
 800ac0c:	e01b      	b.n	800ac46 <__sflush_r+0xf2>
 800ac0e:	690f      	ldr	r7, [r1, #16]
 800ac10:	2f00      	cmp	r7, #0
 800ac12:	d0f6      	beq.n	800ac02 <__sflush_r+0xae>
 800ac14:	0793      	lsls	r3, r2, #30
 800ac16:	680e      	ldr	r6, [r1, #0]
 800ac18:	bf08      	it	eq
 800ac1a:	694b      	ldreq	r3, [r1, #20]
 800ac1c:	600f      	str	r7, [r1, #0]
 800ac1e:	bf18      	it	ne
 800ac20:	2300      	movne	r3, #0
 800ac22:	eba6 0807 	sub.w	r8, r6, r7
 800ac26:	608b      	str	r3, [r1, #8]
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	dde9      	ble.n	800ac02 <__sflush_r+0xae>
 800ac2e:	6a21      	ldr	r1, [r4, #32]
 800ac30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac32:	4643      	mov	r3, r8
 800ac34:	463a      	mov	r2, r7
 800ac36:	4628      	mov	r0, r5
 800ac38:	47b0      	blx	r6
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	dc08      	bgt.n	800ac50 <__sflush_r+0xfc>
 800ac3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	4407      	add	r7, r0
 800ac52:	eba8 0800 	sub.w	r8, r8, r0
 800ac56:	e7e7      	b.n	800ac28 <__sflush_r+0xd4>
 800ac58:	dfbffffe 	.word	0xdfbffffe

0800ac5c <_fflush_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	690b      	ldr	r3, [r1, #16]
 800ac60:	4605      	mov	r5, r0
 800ac62:	460c      	mov	r4, r1
 800ac64:	b913      	cbnz	r3, 800ac6c <_fflush_r+0x10>
 800ac66:	2500      	movs	r5, #0
 800ac68:	4628      	mov	r0, r5
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	b118      	cbz	r0, 800ac76 <_fflush_r+0x1a>
 800ac6e:	6a03      	ldr	r3, [r0, #32]
 800ac70:	b90b      	cbnz	r3, 800ac76 <_fflush_r+0x1a>
 800ac72:	f7fd fa73 	bl	800815c <__sinit>
 800ac76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0f3      	beq.n	800ac66 <_fflush_r+0xa>
 800ac7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac80:	07d0      	lsls	r0, r2, #31
 800ac82:	d404      	bmi.n	800ac8e <_fflush_r+0x32>
 800ac84:	0599      	lsls	r1, r3, #22
 800ac86:	d402      	bmi.n	800ac8e <_fflush_r+0x32>
 800ac88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac8a:	f7fd fb7e 	bl	800838a <__retarget_lock_acquire_recursive>
 800ac8e:	4628      	mov	r0, r5
 800ac90:	4621      	mov	r1, r4
 800ac92:	f7ff ff5f 	bl	800ab54 <__sflush_r>
 800ac96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac98:	07da      	lsls	r2, r3, #31
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	d4e4      	bmi.n	800ac68 <_fflush_r+0xc>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	059b      	lsls	r3, r3, #22
 800aca2:	d4e1      	bmi.n	800ac68 <_fflush_r+0xc>
 800aca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aca6:	f7fd fb71 	bl	800838c <__retarget_lock_release_recursive>
 800acaa:	e7dd      	b.n	800ac68 <_fflush_r+0xc>

0800acac <memmove>:
 800acac:	4288      	cmp	r0, r1
 800acae:	b510      	push	{r4, lr}
 800acb0:	eb01 0402 	add.w	r4, r1, r2
 800acb4:	d902      	bls.n	800acbc <memmove+0x10>
 800acb6:	4284      	cmp	r4, r0
 800acb8:	4623      	mov	r3, r4
 800acba:	d807      	bhi.n	800accc <memmove+0x20>
 800acbc:	1e43      	subs	r3, r0, #1
 800acbe:	42a1      	cmp	r1, r4
 800acc0:	d008      	beq.n	800acd4 <memmove+0x28>
 800acc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acca:	e7f8      	b.n	800acbe <memmove+0x12>
 800accc:	4402      	add	r2, r0
 800acce:	4601      	mov	r1, r0
 800acd0:	428a      	cmp	r2, r1
 800acd2:	d100      	bne.n	800acd6 <memmove+0x2a>
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acde:	e7f7      	b.n	800acd0 <memmove+0x24>

0800ace0 <strncmp>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	b16a      	cbz	r2, 800ad00 <strncmp+0x20>
 800ace4:	3901      	subs	r1, #1
 800ace6:	1884      	adds	r4, r0, r2
 800ace8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d103      	bne.n	800acfc <strncmp+0x1c>
 800acf4:	42a0      	cmp	r0, r4
 800acf6:	d001      	beq.n	800acfc <strncmp+0x1c>
 800acf8:	2a00      	cmp	r2, #0
 800acfa:	d1f5      	bne.n	800ace8 <strncmp+0x8>
 800acfc:	1ad0      	subs	r0, r2, r3
 800acfe:	bd10      	pop	{r4, pc}
 800ad00:	4610      	mov	r0, r2
 800ad02:	e7fc      	b.n	800acfe <strncmp+0x1e>

0800ad04 <_sbrk_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d06      	ldr	r5, [pc, #24]	@ (800ad20 <_sbrk_r+0x1c>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	f7f7 fd14 	bl	800273c <_sbrk>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_sbrk_r+0x1a>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_sbrk_r+0x1a>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	20000898 	.word	0x20000898

0800ad24 <memcpy>:
 800ad24:	440a      	add	r2, r1
 800ad26:	4291      	cmp	r1, r2
 800ad28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad2c:	d100      	bne.n	800ad30 <memcpy+0xc>
 800ad2e:	4770      	bx	lr
 800ad30:	b510      	push	{r4, lr}
 800ad32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad3a:	4291      	cmp	r1, r2
 800ad3c:	d1f9      	bne.n	800ad32 <memcpy+0xe>
 800ad3e:	bd10      	pop	{r4, pc}

0800ad40 <nan>:
 800ad40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ad48 <nan+0x8>
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	00000000 	.word	0x00000000
 800ad4c:	7ff80000 	.word	0x7ff80000

0800ad50 <__assert_func>:
 800ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad52:	4614      	mov	r4, r2
 800ad54:	461a      	mov	r2, r3
 800ad56:	4b09      	ldr	r3, [pc, #36]	@ (800ad7c <__assert_func+0x2c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	68d8      	ldr	r0, [r3, #12]
 800ad5e:	b954      	cbnz	r4, 800ad76 <__assert_func+0x26>
 800ad60:	4b07      	ldr	r3, [pc, #28]	@ (800ad80 <__assert_func+0x30>)
 800ad62:	461c      	mov	r4, r3
 800ad64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad68:	9100      	str	r1, [sp, #0]
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	4905      	ldr	r1, [pc, #20]	@ (800ad84 <__assert_func+0x34>)
 800ad6e:	f000 fba7 	bl	800b4c0 <fiprintf>
 800ad72:	f000 fbb7 	bl	800b4e4 <abort>
 800ad76:	4b04      	ldr	r3, [pc, #16]	@ (800ad88 <__assert_func+0x38>)
 800ad78:	e7f4      	b.n	800ad64 <__assert_func+0x14>
 800ad7a:	bf00      	nop
 800ad7c:	20000018 	.word	0x20000018
 800ad80:	0800be85 	.word	0x0800be85
 800ad84:	0800be57 	.word	0x0800be57
 800ad88:	0800be4a 	.word	0x0800be4a

0800ad8c <_calloc_r>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	fba1 5402 	umull	r5, r4, r1, r2
 800ad92:	b93c      	cbnz	r4, 800ada4 <_calloc_r+0x18>
 800ad94:	4629      	mov	r1, r5
 800ad96:	f7fe f9c3 	bl	8009120 <_malloc_r>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	b928      	cbnz	r0, 800adaa <_calloc_r+0x1e>
 800ad9e:	2600      	movs	r6, #0
 800ada0:	4630      	mov	r0, r6
 800ada2:	bd70      	pop	{r4, r5, r6, pc}
 800ada4:	220c      	movs	r2, #12
 800ada6:	6002      	str	r2, [r0, #0]
 800ada8:	e7f9      	b.n	800ad9e <_calloc_r+0x12>
 800adaa:	462a      	mov	r2, r5
 800adac:	4621      	mov	r1, r4
 800adae:	f7fd fa6e 	bl	800828e <memset>
 800adb2:	e7f5      	b.n	800ada0 <_calloc_r+0x14>

0800adb4 <rshift>:
 800adb4:	6903      	ldr	r3, [r0, #16]
 800adb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800adba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800adc2:	f100 0414 	add.w	r4, r0, #20
 800adc6:	dd45      	ble.n	800ae54 <rshift+0xa0>
 800adc8:	f011 011f 	ands.w	r1, r1, #31
 800adcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800add0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800add4:	d10c      	bne.n	800adf0 <rshift+0x3c>
 800add6:	f100 0710 	add.w	r7, r0, #16
 800adda:	4629      	mov	r1, r5
 800addc:	42b1      	cmp	r1, r6
 800adde:	d334      	bcc.n	800ae4a <rshift+0x96>
 800ade0:	1a9b      	subs	r3, r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	1eea      	subs	r2, r5, #3
 800ade6:	4296      	cmp	r6, r2
 800ade8:	bf38      	it	cc
 800adea:	2300      	movcc	r3, #0
 800adec:	4423      	add	r3, r4
 800adee:	e015      	b.n	800ae1c <rshift+0x68>
 800adf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800adf4:	f1c1 0820 	rsb	r8, r1, #32
 800adf8:	40cf      	lsrs	r7, r1
 800adfa:	f105 0e04 	add.w	lr, r5, #4
 800adfe:	46a1      	mov	r9, r4
 800ae00:	4576      	cmp	r6, lr
 800ae02:	46f4      	mov	ip, lr
 800ae04:	d815      	bhi.n	800ae32 <rshift+0x7e>
 800ae06:	1a9a      	subs	r2, r3, r2
 800ae08:	0092      	lsls	r2, r2, #2
 800ae0a:	3a04      	subs	r2, #4
 800ae0c:	3501      	adds	r5, #1
 800ae0e:	42ae      	cmp	r6, r5
 800ae10:	bf38      	it	cc
 800ae12:	2200      	movcc	r2, #0
 800ae14:	18a3      	adds	r3, r4, r2
 800ae16:	50a7      	str	r7, [r4, r2]
 800ae18:	b107      	cbz	r7, 800ae1c <rshift+0x68>
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	1b1a      	subs	r2, r3, r4
 800ae1e:	42a3      	cmp	r3, r4
 800ae20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae24:	bf08      	it	eq
 800ae26:	2300      	moveq	r3, #0
 800ae28:	6102      	str	r2, [r0, #16]
 800ae2a:	bf08      	it	eq
 800ae2c:	6143      	streq	r3, [r0, #20]
 800ae2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae32:	f8dc c000 	ldr.w	ip, [ip]
 800ae36:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae3a:	ea4c 0707 	orr.w	r7, ip, r7
 800ae3e:	f849 7b04 	str.w	r7, [r9], #4
 800ae42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae46:	40cf      	lsrs	r7, r1
 800ae48:	e7da      	b.n	800ae00 <rshift+0x4c>
 800ae4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ae4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ae52:	e7c3      	b.n	800addc <rshift+0x28>
 800ae54:	4623      	mov	r3, r4
 800ae56:	e7e1      	b.n	800ae1c <rshift+0x68>

0800ae58 <__hexdig_fun>:
 800ae58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	d802      	bhi.n	800ae66 <__hexdig_fun+0xe>
 800ae60:	3820      	subs	r0, #32
 800ae62:	b2c0      	uxtb	r0, r0
 800ae64:	4770      	bx	lr
 800ae66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ae6a:	2b05      	cmp	r3, #5
 800ae6c:	d801      	bhi.n	800ae72 <__hexdig_fun+0x1a>
 800ae6e:	3847      	subs	r0, #71	@ 0x47
 800ae70:	e7f7      	b.n	800ae62 <__hexdig_fun+0xa>
 800ae72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ae76:	2b05      	cmp	r3, #5
 800ae78:	d801      	bhi.n	800ae7e <__hexdig_fun+0x26>
 800ae7a:	3827      	subs	r0, #39	@ 0x27
 800ae7c:	e7f1      	b.n	800ae62 <__hexdig_fun+0xa>
 800ae7e:	2000      	movs	r0, #0
 800ae80:	4770      	bx	lr
	...

0800ae84 <__gethex>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	b085      	sub	sp, #20
 800ae8a:	468a      	mov	sl, r1
 800ae8c:	9302      	str	r3, [sp, #8]
 800ae8e:	680b      	ldr	r3, [r1, #0]
 800ae90:	9001      	str	r0, [sp, #4]
 800ae92:	4690      	mov	r8, r2
 800ae94:	1c9c      	adds	r4, r3, #2
 800ae96:	46a1      	mov	r9, r4
 800ae98:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ae9c:	2830      	cmp	r0, #48	@ 0x30
 800ae9e:	d0fa      	beq.n	800ae96 <__gethex+0x12>
 800aea0:	eba9 0303 	sub.w	r3, r9, r3
 800aea4:	f1a3 0b02 	sub.w	fp, r3, #2
 800aea8:	f7ff ffd6 	bl	800ae58 <__hexdig_fun>
 800aeac:	4605      	mov	r5, r0
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d168      	bne.n	800af84 <__gethex+0x100>
 800aeb2:	49a0      	ldr	r1, [pc, #640]	@ (800b134 <__gethex+0x2b0>)
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	f7ff ff12 	bl	800ace0 <strncmp>
 800aebc:	4607      	mov	r7, r0
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d167      	bne.n	800af92 <__gethex+0x10e>
 800aec2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aec6:	4626      	mov	r6, r4
 800aec8:	f7ff ffc6 	bl	800ae58 <__hexdig_fun>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d062      	beq.n	800af96 <__gethex+0x112>
 800aed0:	4623      	mov	r3, r4
 800aed2:	7818      	ldrb	r0, [r3, #0]
 800aed4:	2830      	cmp	r0, #48	@ 0x30
 800aed6:	4699      	mov	r9, r3
 800aed8:	f103 0301 	add.w	r3, r3, #1
 800aedc:	d0f9      	beq.n	800aed2 <__gethex+0x4e>
 800aede:	f7ff ffbb 	bl	800ae58 <__hexdig_fun>
 800aee2:	fab0 f580 	clz	r5, r0
 800aee6:	096d      	lsrs	r5, r5, #5
 800aee8:	f04f 0b01 	mov.w	fp, #1
 800aeec:	464a      	mov	r2, r9
 800aeee:	4616      	mov	r6, r2
 800aef0:	3201      	adds	r2, #1
 800aef2:	7830      	ldrb	r0, [r6, #0]
 800aef4:	f7ff ffb0 	bl	800ae58 <__hexdig_fun>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1f8      	bne.n	800aeee <__gethex+0x6a>
 800aefc:	498d      	ldr	r1, [pc, #564]	@ (800b134 <__gethex+0x2b0>)
 800aefe:	2201      	movs	r2, #1
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff feed 	bl	800ace0 <strncmp>
 800af06:	2800      	cmp	r0, #0
 800af08:	d13f      	bne.n	800af8a <__gethex+0x106>
 800af0a:	b944      	cbnz	r4, 800af1e <__gethex+0x9a>
 800af0c:	1c74      	adds	r4, r6, #1
 800af0e:	4622      	mov	r2, r4
 800af10:	4616      	mov	r6, r2
 800af12:	3201      	adds	r2, #1
 800af14:	7830      	ldrb	r0, [r6, #0]
 800af16:	f7ff ff9f 	bl	800ae58 <__hexdig_fun>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d1f8      	bne.n	800af10 <__gethex+0x8c>
 800af1e:	1ba4      	subs	r4, r4, r6
 800af20:	00a7      	lsls	r7, r4, #2
 800af22:	7833      	ldrb	r3, [r6, #0]
 800af24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800af28:	2b50      	cmp	r3, #80	@ 0x50
 800af2a:	d13e      	bne.n	800afaa <__gethex+0x126>
 800af2c:	7873      	ldrb	r3, [r6, #1]
 800af2e:	2b2b      	cmp	r3, #43	@ 0x2b
 800af30:	d033      	beq.n	800af9a <__gethex+0x116>
 800af32:	2b2d      	cmp	r3, #45	@ 0x2d
 800af34:	d034      	beq.n	800afa0 <__gethex+0x11c>
 800af36:	1c71      	adds	r1, r6, #1
 800af38:	2400      	movs	r4, #0
 800af3a:	7808      	ldrb	r0, [r1, #0]
 800af3c:	f7ff ff8c 	bl	800ae58 <__hexdig_fun>
 800af40:	1e43      	subs	r3, r0, #1
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b18      	cmp	r3, #24
 800af46:	d830      	bhi.n	800afaa <__gethex+0x126>
 800af48:	f1a0 0210 	sub.w	r2, r0, #16
 800af4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af50:	f7ff ff82 	bl	800ae58 <__hexdig_fun>
 800af54:	f100 3cff 	add.w	ip, r0, #4294967295
 800af58:	fa5f fc8c 	uxtb.w	ip, ip
 800af5c:	f1bc 0f18 	cmp.w	ip, #24
 800af60:	f04f 030a 	mov.w	r3, #10
 800af64:	d91e      	bls.n	800afa4 <__gethex+0x120>
 800af66:	b104      	cbz	r4, 800af6a <__gethex+0xe6>
 800af68:	4252      	negs	r2, r2
 800af6a:	4417      	add	r7, r2
 800af6c:	f8ca 1000 	str.w	r1, [sl]
 800af70:	b1ed      	cbz	r5, 800afae <__gethex+0x12a>
 800af72:	f1bb 0f00 	cmp.w	fp, #0
 800af76:	bf0c      	ite	eq
 800af78:	2506      	moveq	r5, #6
 800af7a:	2500      	movne	r5, #0
 800af7c:	4628      	mov	r0, r5
 800af7e:	b005      	add	sp, #20
 800af80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af84:	2500      	movs	r5, #0
 800af86:	462c      	mov	r4, r5
 800af88:	e7b0      	b.n	800aeec <__gethex+0x68>
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	d1c7      	bne.n	800af1e <__gethex+0x9a>
 800af8e:	4627      	mov	r7, r4
 800af90:	e7c7      	b.n	800af22 <__gethex+0x9e>
 800af92:	464e      	mov	r6, r9
 800af94:	462f      	mov	r7, r5
 800af96:	2501      	movs	r5, #1
 800af98:	e7c3      	b.n	800af22 <__gethex+0x9e>
 800af9a:	2400      	movs	r4, #0
 800af9c:	1cb1      	adds	r1, r6, #2
 800af9e:	e7cc      	b.n	800af3a <__gethex+0xb6>
 800afa0:	2401      	movs	r4, #1
 800afa2:	e7fb      	b.n	800af9c <__gethex+0x118>
 800afa4:	fb03 0002 	mla	r0, r3, r2, r0
 800afa8:	e7ce      	b.n	800af48 <__gethex+0xc4>
 800afaa:	4631      	mov	r1, r6
 800afac:	e7de      	b.n	800af6c <__gethex+0xe8>
 800afae:	eba6 0309 	sub.w	r3, r6, r9
 800afb2:	3b01      	subs	r3, #1
 800afb4:	4629      	mov	r1, r5
 800afb6:	2b07      	cmp	r3, #7
 800afb8:	dc0a      	bgt.n	800afd0 <__gethex+0x14c>
 800afba:	9801      	ldr	r0, [sp, #4]
 800afbc:	f7fe f93c 	bl	8009238 <_Balloc>
 800afc0:	4604      	mov	r4, r0
 800afc2:	b940      	cbnz	r0, 800afd6 <__gethex+0x152>
 800afc4:	4b5c      	ldr	r3, [pc, #368]	@ (800b138 <__gethex+0x2b4>)
 800afc6:	4602      	mov	r2, r0
 800afc8:	21e4      	movs	r1, #228	@ 0xe4
 800afca:	485c      	ldr	r0, [pc, #368]	@ (800b13c <__gethex+0x2b8>)
 800afcc:	f7ff fec0 	bl	800ad50 <__assert_func>
 800afd0:	3101      	adds	r1, #1
 800afd2:	105b      	asrs	r3, r3, #1
 800afd4:	e7ef      	b.n	800afb6 <__gethex+0x132>
 800afd6:	f100 0a14 	add.w	sl, r0, #20
 800afda:	2300      	movs	r3, #0
 800afdc:	4655      	mov	r5, sl
 800afde:	469b      	mov	fp, r3
 800afe0:	45b1      	cmp	r9, r6
 800afe2:	d337      	bcc.n	800b054 <__gethex+0x1d0>
 800afe4:	f845 bb04 	str.w	fp, [r5], #4
 800afe8:	eba5 050a 	sub.w	r5, r5, sl
 800afec:	10ad      	asrs	r5, r5, #2
 800afee:	6125      	str	r5, [r4, #16]
 800aff0:	4658      	mov	r0, fp
 800aff2:	f7fe fa13 	bl	800941c <__hi0bits>
 800aff6:	016d      	lsls	r5, r5, #5
 800aff8:	f8d8 6000 	ldr.w	r6, [r8]
 800affc:	1a2d      	subs	r5, r5, r0
 800affe:	42b5      	cmp	r5, r6
 800b000:	dd54      	ble.n	800b0ac <__gethex+0x228>
 800b002:	1bad      	subs	r5, r5, r6
 800b004:	4629      	mov	r1, r5
 800b006:	4620      	mov	r0, r4
 800b008:	f7fe fda7 	bl	8009b5a <__any_on>
 800b00c:	4681      	mov	r9, r0
 800b00e:	b178      	cbz	r0, 800b030 <__gethex+0x1ac>
 800b010:	1e6b      	subs	r3, r5, #1
 800b012:	1159      	asrs	r1, r3, #5
 800b014:	f003 021f 	and.w	r2, r3, #31
 800b018:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b01c:	f04f 0901 	mov.w	r9, #1
 800b020:	fa09 f202 	lsl.w	r2, r9, r2
 800b024:	420a      	tst	r2, r1
 800b026:	d003      	beq.n	800b030 <__gethex+0x1ac>
 800b028:	454b      	cmp	r3, r9
 800b02a:	dc36      	bgt.n	800b09a <__gethex+0x216>
 800b02c:	f04f 0902 	mov.w	r9, #2
 800b030:	4629      	mov	r1, r5
 800b032:	4620      	mov	r0, r4
 800b034:	f7ff febe 	bl	800adb4 <rshift>
 800b038:	442f      	add	r7, r5
 800b03a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b03e:	42bb      	cmp	r3, r7
 800b040:	da42      	bge.n	800b0c8 <__gethex+0x244>
 800b042:	9801      	ldr	r0, [sp, #4]
 800b044:	4621      	mov	r1, r4
 800b046:	f7fe f937 	bl	80092b8 <_Bfree>
 800b04a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b04c:	2300      	movs	r3, #0
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	25a3      	movs	r5, #163	@ 0xa3
 800b052:	e793      	b.n	800af7c <__gethex+0xf8>
 800b054:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b058:	2a2e      	cmp	r2, #46	@ 0x2e
 800b05a:	d012      	beq.n	800b082 <__gethex+0x1fe>
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	d104      	bne.n	800b06a <__gethex+0x1e6>
 800b060:	f845 bb04 	str.w	fp, [r5], #4
 800b064:	f04f 0b00 	mov.w	fp, #0
 800b068:	465b      	mov	r3, fp
 800b06a:	7830      	ldrb	r0, [r6, #0]
 800b06c:	9303      	str	r3, [sp, #12]
 800b06e:	f7ff fef3 	bl	800ae58 <__hexdig_fun>
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	f000 000f 	and.w	r0, r0, #15
 800b078:	4098      	lsls	r0, r3
 800b07a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b07e:	3304      	adds	r3, #4
 800b080:	e7ae      	b.n	800afe0 <__gethex+0x15c>
 800b082:	45b1      	cmp	r9, r6
 800b084:	d8ea      	bhi.n	800b05c <__gethex+0x1d8>
 800b086:	492b      	ldr	r1, [pc, #172]	@ (800b134 <__gethex+0x2b0>)
 800b088:	9303      	str	r3, [sp, #12]
 800b08a:	2201      	movs	r2, #1
 800b08c:	4630      	mov	r0, r6
 800b08e:	f7ff fe27 	bl	800ace0 <strncmp>
 800b092:	9b03      	ldr	r3, [sp, #12]
 800b094:	2800      	cmp	r0, #0
 800b096:	d1e1      	bne.n	800b05c <__gethex+0x1d8>
 800b098:	e7a2      	b.n	800afe0 <__gethex+0x15c>
 800b09a:	1ea9      	subs	r1, r5, #2
 800b09c:	4620      	mov	r0, r4
 800b09e:	f7fe fd5c 	bl	8009b5a <__any_on>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d0c2      	beq.n	800b02c <__gethex+0x1a8>
 800b0a6:	f04f 0903 	mov.w	r9, #3
 800b0aa:	e7c1      	b.n	800b030 <__gethex+0x1ac>
 800b0ac:	da09      	bge.n	800b0c2 <__gethex+0x23e>
 800b0ae:	1b75      	subs	r5, r6, r5
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	9801      	ldr	r0, [sp, #4]
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	f7fe fb17 	bl	80096e8 <__lshift>
 800b0ba:	1b7f      	subs	r7, r7, r5
 800b0bc:	4604      	mov	r4, r0
 800b0be:	f100 0a14 	add.w	sl, r0, #20
 800b0c2:	f04f 0900 	mov.w	r9, #0
 800b0c6:	e7b8      	b.n	800b03a <__gethex+0x1b6>
 800b0c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b0cc:	42bd      	cmp	r5, r7
 800b0ce:	dd6f      	ble.n	800b1b0 <__gethex+0x32c>
 800b0d0:	1bed      	subs	r5, r5, r7
 800b0d2:	42ae      	cmp	r6, r5
 800b0d4:	dc34      	bgt.n	800b140 <__gethex+0x2bc>
 800b0d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d022      	beq.n	800b124 <__gethex+0x2a0>
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d024      	beq.n	800b12c <__gethex+0x2a8>
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d115      	bne.n	800b112 <__gethex+0x28e>
 800b0e6:	42ae      	cmp	r6, r5
 800b0e8:	d113      	bne.n	800b112 <__gethex+0x28e>
 800b0ea:	2e01      	cmp	r6, #1
 800b0ec:	d10b      	bne.n	800b106 <__gethex+0x282>
 800b0ee:	9a02      	ldr	r2, [sp, #8]
 800b0f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	6123      	str	r3, [r4, #16]
 800b0fa:	f8ca 3000 	str.w	r3, [sl]
 800b0fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b100:	2562      	movs	r5, #98	@ 0x62
 800b102:	601c      	str	r4, [r3, #0]
 800b104:	e73a      	b.n	800af7c <__gethex+0xf8>
 800b106:	1e71      	subs	r1, r6, #1
 800b108:	4620      	mov	r0, r4
 800b10a:	f7fe fd26 	bl	8009b5a <__any_on>
 800b10e:	2800      	cmp	r0, #0
 800b110:	d1ed      	bne.n	800b0ee <__gethex+0x26a>
 800b112:	9801      	ldr	r0, [sp, #4]
 800b114:	4621      	mov	r1, r4
 800b116:	f7fe f8cf 	bl	80092b8 <_Bfree>
 800b11a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b11c:	2300      	movs	r3, #0
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	2550      	movs	r5, #80	@ 0x50
 800b122:	e72b      	b.n	800af7c <__gethex+0xf8>
 800b124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1f3      	bne.n	800b112 <__gethex+0x28e>
 800b12a:	e7e0      	b.n	800b0ee <__gethex+0x26a>
 800b12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1dd      	bne.n	800b0ee <__gethex+0x26a>
 800b132:	e7ee      	b.n	800b112 <__gethex+0x28e>
 800b134:	0800bcd8 	.word	0x0800bcd8
 800b138:	0800bb6d 	.word	0x0800bb6d
 800b13c:	0800be86 	.word	0x0800be86
 800b140:	1e6f      	subs	r7, r5, #1
 800b142:	f1b9 0f00 	cmp.w	r9, #0
 800b146:	d130      	bne.n	800b1aa <__gethex+0x326>
 800b148:	b127      	cbz	r7, 800b154 <__gethex+0x2d0>
 800b14a:	4639      	mov	r1, r7
 800b14c:	4620      	mov	r0, r4
 800b14e:	f7fe fd04 	bl	8009b5a <__any_on>
 800b152:	4681      	mov	r9, r0
 800b154:	117a      	asrs	r2, r7, #5
 800b156:	2301      	movs	r3, #1
 800b158:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b15c:	f007 071f 	and.w	r7, r7, #31
 800b160:	40bb      	lsls	r3, r7
 800b162:	4213      	tst	r3, r2
 800b164:	4629      	mov	r1, r5
 800b166:	4620      	mov	r0, r4
 800b168:	bf18      	it	ne
 800b16a:	f049 0902 	orrne.w	r9, r9, #2
 800b16e:	f7ff fe21 	bl	800adb4 <rshift>
 800b172:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b176:	1b76      	subs	r6, r6, r5
 800b178:	2502      	movs	r5, #2
 800b17a:	f1b9 0f00 	cmp.w	r9, #0
 800b17e:	d047      	beq.n	800b210 <__gethex+0x38c>
 800b180:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b184:	2b02      	cmp	r3, #2
 800b186:	d015      	beq.n	800b1b4 <__gethex+0x330>
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d017      	beq.n	800b1bc <__gethex+0x338>
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d109      	bne.n	800b1a4 <__gethex+0x320>
 800b190:	f019 0f02 	tst.w	r9, #2
 800b194:	d006      	beq.n	800b1a4 <__gethex+0x320>
 800b196:	f8da 3000 	ldr.w	r3, [sl]
 800b19a:	ea49 0903 	orr.w	r9, r9, r3
 800b19e:	f019 0f01 	tst.w	r9, #1
 800b1a2:	d10e      	bne.n	800b1c2 <__gethex+0x33e>
 800b1a4:	f045 0510 	orr.w	r5, r5, #16
 800b1a8:	e032      	b.n	800b210 <__gethex+0x38c>
 800b1aa:	f04f 0901 	mov.w	r9, #1
 800b1ae:	e7d1      	b.n	800b154 <__gethex+0x2d0>
 800b1b0:	2501      	movs	r5, #1
 800b1b2:	e7e2      	b.n	800b17a <__gethex+0x2f6>
 800b1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1b6:	f1c3 0301 	rsb	r3, r3, #1
 800b1ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0f0      	beq.n	800b1a4 <__gethex+0x320>
 800b1c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b1c6:	f104 0314 	add.w	r3, r4, #20
 800b1ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b1ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b1d2:	f04f 0c00 	mov.w	ip, #0
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1e0:	d01b      	beq.n	800b21a <__gethex+0x396>
 800b1e2:	3201      	adds	r2, #1
 800b1e4:	6002      	str	r2, [r0, #0]
 800b1e6:	2d02      	cmp	r5, #2
 800b1e8:	f104 0314 	add.w	r3, r4, #20
 800b1ec:	d13c      	bne.n	800b268 <__gethex+0x3e4>
 800b1ee:	f8d8 2000 	ldr.w	r2, [r8]
 800b1f2:	3a01      	subs	r2, #1
 800b1f4:	42b2      	cmp	r2, r6
 800b1f6:	d109      	bne.n	800b20c <__gethex+0x388>
 800b1f8:	1171      	asrs	r1, r6, #5
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b200:	f006 061f 	and.w	r6, r6, #31
 800b204:	fa02 f606 	lsl.w	r6, r2, r6
 800b208:	421e      	tst	r6, r3
 800b20a:	d13a      	bne.n	800b282 <__gethex+0x3fe>
 800b20c:	f045 0520 	orr.w	r5, r5, #32
 800b210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b212:	601c      	str	r4, [r3, #0]
 800b214:	9b02      	ldr	r3, [sp, #8]
 800b216:	601f      	str	r7, [r3, #0]
 800b218:	e6b0      	b.n	800af7c <__gethex+0xf8>
 800b21a:	4299      	cmp	r1, r3
 800b21c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b220:	d8d9      	bhi.n	800b1d6 <__gethex+0x352>
 800b222:	68a3      	ldr	r3, [r4, #8]
 800b224:	459b      	cmp	fp, r3
 800b226:	db17      	blt.n	800b258 <__gethex+0x3d4>
 800b228:	6861      	ldr	r1, [r4, #4]
 800b22a:	9801      	ldr	r0, [sp, #4]
 800b22c:	3101      	adds	r1, #1
 800b22e:	f7fe f803 	bl	8009238 <_Balloc>
 800b232:	4681      	mov	r9, r0
 800b234:	b918      	cbnz	r0, 800b23e <__gethex+0x3ba>
 800b236:	4b1a      	ldr	r3, [pc, #104]	@ (800b2a0 <__gethex+0x41c>)
 800b238:	4602      	mov	r2, r0
 800b23a:	2184      	movs	r1, #132	@ 0x84
 800b23c:	e6c5      	b.n	800afca <__gethex+0x146>
 800b23e:	6922      	ldr	r2, [r4, #16]
 800b240:	3202      	adds	r2, #2
 800b242:	f104 010c 	add.w	r1, r4, #12
 800b246:	0092      	lsls	r2, r2, #2
 800b248:	300c      	adds	r0, #12
 800b24a:	f7ff fd6b 	bl	800ad24 <memcpy>
 800b24e:	4621      	mov	r1, r4
 800b250:	9801      	ldr	r0, [sp, #4]
 800b252:	f7fe f831 	bl	80092b8 <_Bfree>
 800b256:	464c      	mov	r4, r9
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b260:	6122      	str	r2, [r4, #16]
 800b262:	2201      	movs	r2, #1
 800b264:	615a      	str	r2, [r3, #20]
 800b266:	e7be      	b.n	800b1e6 <__gethex+0x362>
 800b268:	6922      	ldr	r2, [r4, #16]
 800b26a:	455a      	cmp	r2, fp
 800b26c:	dd0b      	ble.n	800b286 <__gethex+0x402>
 800b26e:	2101      	movs	r1, #1
 800b270:	4620      	mov	r0, r4
 800b272:	f7ff fd9f 	bl	800adb4 <rshift>
 800b276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b27a:	3701      	adds	r7, #1
 800b27c:	42bb      	cmp	r3, r7
 800b27e:	f6ff aee0 	blt.w	800b042 <__gethex+0x1be>
 800b282:	2501      	movs	r5, #1
 800b284:	e7c2      	b.n	800b20c <__gethex+0x388>
 800b286:	f016 061f 	ands.w	r6, r6, #31
 800b28a:	d0fa      	beq.n	800b282 <__gethex+0x3fe>
 800b28c:	4453      	add	r3, sl
 800b28e:	f1c6 0620 	rsb	r6, r6, #32
 800b292:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b296:	f7fe f8c1 	bl	800941c <__hi0bits>
 800b29a:	42b0      	cmp	r0, r6
 800b29c:	dbe7      	blt.n	800b26e <__gethex+0x3ea>
 800b29e:	e7f0      	b.n	800b282 <__gethex+0x3fe>
 800b2a0:	0800bb6d 	.word	0x0800bb6d

0800b2a4 <L_shift>:
 800b2a4:	f1c2 0208 	rsb	r2, r2, #8
 800b2a8:	0092      	lsls	r2, r2, #2
 800b2aa:	b570      	push	{r4, r5, r6, lr}
 800b2ac:	f1c2 0620 	rsb	r6, r2, #32
 800b2b0:	6843      	ldr	r3, [r0, #4]
 800b2b2:	6804      	ldr	r4, [r0, #0]
 800b2b4:	fa03 f506 	lsl.w	r5, r3, r6
 800b2b8:	432c      	orrs	r4, r5
 800b2ba:	40d3      	lsrs	r3, r2
 800b2bc:	6004      	str	r4, [r0, #0]
 800b2be:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2c2:	4288      	cmp	r0, r1
 800b2c4:	d3f4      	bcc.n	800b2b0 <L_shift+0xc>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}

0800b2c8 <__match>:
 800b2c8:	b530      	push	{r4, r5, lr}
 800b2ca:	6803      	ldr	r3, [r0, #0]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2d2:	b914      	cbnz	r4, 800b2da <__match+0x12>
 800b2d4:	6003      	str	r3, [r0, #0]
 800b2d6:	2001      	movs	r0, #1
 800b2d8:	bd30      	pop	{r4, r5, pc}
 800b2da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b2e2:	2d19      	cmp	r5, #25
 800b2e4:	bf98      	it	ls
 800b2e6:	3220      	addls	r2, #32
 800b2e8:	42a2      	cmp	r2, r4
 800b2ea:	d0f0      	beq.n	800b2ce <__match+0x6>
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e7f3      	b.n	800b2d8 <__match+0x10>

0800b2f0 <__hexnan>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	680b      	ldr	r3, [r1, #0]
 800b2f6:	6801      	ldr	r1, [r0, #0]
 800b2f8:	115e      	asrs	r6, r3, #5
 800b2fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b2fe:	f013 031f 	ands.w	r3, r3, #31
 800b302:	b087      	sub	sp, #28
 800b304:	bf18      	it	ne
 800b306:	3604      	addne	r6, #4
 800b308:	2500      	movs	r5, #0
 800b30a:	1f37      	subs	r7, r6, #4
 800b30c:	4682      	mov	sl, r0
 800b30e:	4690      	mov	r8, r2
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	f846 5c04 	str.w	r5, [r6, #-4]
 800b316:	46b9      	mov	r9, r7
 800b318:	463c      	mov	r4, r7
 800b31a:	9502      	str	r5, [sp, #8]
 800b31c:	46ab      	mov	fp, r5
 800b31e:	784a      	ldrb	r2, [r1, #1]
 800b320:	1c4b      	adds	r3, r1, #1
 800b322:	9303      	str	r3, [sp, #12]
 800b324:	b342      	cbz	r2, 800b378 <__hexnan+0x88>
 800b326:	4610      	mov	r0, r2
 800b328:	9105      	str	r1, [sp, #20]
 800b32a:	9204      	str	r2, [sp, #16]
 800b32c:	f7ff fd94 	bl	800ae58 <__hexdig_fun>
 800b330:	2800      	cmp	r0, #0
 800b332:	d151      	bne.n	800b3d8 <__hexnan+0xe8>
 800b334:	9a04      	ldr	r2, [sp, #16]
 800b336:	9905      	ldr	r1, [sp, #20]
 800b338:	2a20      	cmp	r2, #32
 800b33a:	d818      	bhi.n	800b36e <__hexnan+0x7e>
 800b33c:	9b02      	ldr	r3, [sp, #8]
 800b33e:	459b      	cmp	fp, r3
 800b340:	dd13      	ble.n	800b36a <__hexnan+0x7a>
 800b342:	454c      	cmp	r4, r9
 800b344:	d206      	bcs.n	800b354 <__hexnan+0x64>
 800b346:	2d07      	cmp	r5, #7
 800b348:	dc04      	bgt.n	800b354 <__hexnan+0x64>
 800b34a:	462a      	mov	r2, r5
 800b34c:	4649      	mov	r1, r9
 800b34e:	4620      	mov	r0, r4
 800b350:	f7ff ffa8 	bl	800b2a4 <L_shift>
 800b354:	4544      	cmp	r4, r8
 800b356:	d952      	bls.n	800b3fe <__hexnan+0x10e>
 800b358:	2300      	movs	r3, #0
 800b35a:	f1a4 0904 	sub.w	r9, r4, #4
 800b35e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b362:	f8cd b008 	str.w	fp, [sp, #8]
 800b366:	464c      	mov	r4, r9
 800b368:	461d      	mov	r5, r3
 800b36a:	9903      	ldr	r1, [sp, #12]
 800b36c:	e7d7      	b.n	800b31e <__hexnan+0x2e>
 800b36e:	2a29      	cmp	r2, #41	@ 0x29
 800b370:	d157      	bne.n	800b422 <__hexnan+0x132>
 800b372:	3102      	adds	r1, #2
 800b374:	f8ca 1000 	str.w	r1, [sl]
 800b378:	f1bb 0f00 	cmp.w	fp, #0
 800b37c:	d051      	beq.n	800b422 <__hexnan+0x132>
 800b37e:	454c      	cmp	r4, r9
 800b380:	d206      	bcs.n	800b390 <__hexnan+0xa0>
 800b382:	2d07      	cmp	r5, #7
 800b384:	dc04      	bgt.n	800b390 <__hexnan+0xa0>
 800b386:	462a      	mov	r2, r5
 800b388:	4649      	mov	r1, r9
 800b38a:	4620      	mov	r0, r4
 800b38c:	f7ff ff8a 	bl	800b2a4 <L_shift>
 800b390:	4544      	cmp	r4, r8
 800b392:	d936      	bls.n	800b402 <__hexnan+0x112>
 800b394:	f1a8 0204 	sub.w	r2, r8, #4
 800b398:	4623      	mov	r3, r4
 800b39a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b39e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b3a2:	429f      	cmp	r7, r3
 800b3a4:	d2f9      	bcs.n	800b39a <__hexnan+0xaa>
 800b3a6:	1b3b      	subs	r3, r7, r4
 800b3a8:	f023 0303 	bic.w	r3, r3, #3
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	3401      	adds	r4, #1
 800b3b0:	3e03      	subs	r6, #3
 800b3b2:	42b4      	cmp	r4, r6
 800b3b4:	bf88      	it	hi
 800b3b6:	2304      	movhi	r3, #4
 800b3b8:	4443      	add	r3, r8
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f843 2b04 	str.w	r2, [r3], #4
 800b3c0:	429f      	cmp	r7, r3
 800b3c2:	d2fb      	bcs.n	800b3bc <__hexnan+0xcc>
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	b91b      	cbnz	r3, 800b3d0 <__hexnan+0xe0>
 800b3c8:	4547      	cmp	r7, r8
 800b3ca:	d128      	bne.n	800b41e <__hexnan+0x12e>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	2005      	movs	r0, #5
 800b3d2:	b007      	add	sp, #28
 800b3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d8:	3501      	adds	r5, #1
 800b3da:	2d08      	cmp	r5, #8
 800b3dc:	f10b 0b01 	add.w	fp, fp, #1
 800b3e0:	dd06      	ble.n	800b3f0 <__hexnan+0x100>
 800b3e2:	4544      	cmp	r4, r8
 800b3e4:	d9c1      	bls.n	800b36a <__hexnan+0x7a>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3ec:	2501      	movs	r5, #1
 800b3ee:	3c04      	subs	r4, #4
 800b3f0:	6822      	ldr	r2, [r4, #0]
 800b3f2:	f000 000f 	and.w	r0, r0, #15
 800b3f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3fa:	6020      	str	r0, [r4, #0]
 800b3fc:	e7b5      	b.n	800b36a <__hexnan+0x7a>
 800b3fe:	2508      	movs	r5, #8
 800b400:	e7b3      	b.n	800b36a <__hexnan+0x7a>
 800b402:	9b01      	ldr	r3, [sp, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d0dd      	beq.n	800b3c4 <__hexnan+0xd4>
 800b408:	f1c3 0320 	rsb	r3, r3, #32
 800b40c:	f04f 32ff 	mov.w	r2, #4294967295
 800b410:	40da      	lsrs	r2, r3
 800b412:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b416:	4013      	ands	r3, r2
 800b418:	f846 3c04 	str.w	r3, [r6, #-4]
 800b41c:	e7d2      	b.n	800b3c4 <__hexnan+0xd4>
 800b41e:	3f04      	subs	r7, #4
 800b420:	e7d0      	b.n	800b3c4 <__hexnan+0xd4>
 800b422:	2004      	movs	r0, #4
 800b424:	e7d5      	b.n	800b3d2 <__hexnan+0xe2>

0800b426 <__ascii_mbtowc>:
 800b426:	b082      	sub	sp, #8
 800b428:	b901      	cbnz	r1, 800b42c <__ascii_mbtowc+0x6>
 800b42a:	a901      	add	r1, sp, #4
 800b42c:	b142      	cbz	r2, 800b440 <__ascii_mbtowc+0x1a>
 800b42e:	b14b      	cbz	r3, 800b444 <__ascii_mbtowc+0x1e>
 800b430:	7813      	ldrb	r3, [r2, #0]
 800b432:	600b      	str	r3, [r1, #0]
 800b434:	7812      	ldrb	r2, [r2, #0]
 800b436:	1e10      	subs	r0, r2, #0
 800b438:	bf18      	it	ne
 800b43a:	2001      	movne	r0, #1
 800b43c:	b002      	add	sp, #8
 800b43e:	4770      	bx	lr
 800b440:	4610      	mov	r0, r2
 800b442:	e7fb      	b.n	800b43c <__ascii_mbtowc+0x16>
 800b444:	f06f 0001 	mvn.w	r0, #1
 800b448:	e7f8      	b.n	800b43c <__ascii_mbtowc+0x16>

0800b44a <_realloc_r>:
 800b44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44e:	4680      	mov	r8, r0
 800b450:	4615      	mov	r5, r2
 800b452:	460c      	mov	r4, r1
 800b454:	b921      	cbnz	r1, 800b460 <_realloc_r+0x16>
 800b456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b45a:	4611      	mov	r1, r2
 800b45c:	f7fd be60 	b.w	8009120 <_malloc_r>
 800b460:	b92a      	cbnz	r2, 800b46e <_realloc_r+0x24>
 800b462:	f7fd fde9 	bl	8009038 <_free_r>
 800b466:	2400      	movs	r4, #0
 800b468:	4620      	mov	r0, r4
 800b46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46e:	f000 f840 	bl	800b4f2 <_malloc_usable_size_r>
 800b472:	4285      	cmp	r5, r0
 800b474:	4606      	mov	r6, r0
 800b476:	d802      	bhi.n	800b47e <_realloc_r+0x34>
 800b478:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b47c:	d8f4      	bhi.n	800b468 <_realloc_r+0x1e>
 800b47e:	4629      	mov	r1, r5
 800b480:	4640      	mov	r0, r8
 800b482:	f7fd fe4d 	bl	8009120 <_malloc_r>
 800b486:	4607      	mov	r7, r0
 800b488:	2800      	cmp	r0, #0
 800b48a:	d0ec      	beq.n	800b466 <_realloc_r+0x1c>
 800b48c:	42b5      	cmp	r5, r6
 800b48e:	462a      	mov	r2, r5
 800b490:	4621      	mov	r1, r4
 800b492:	bf28      	it	cs
 800b494:	4632      	movcs	r2, r6
 800b496:	f7ff fc45 	bl	800ad24 <memcpy>
 800b49a:	4621      	mov	r1, r4
 800b49c:	4640      	mov	r0, r8
 800b49e:	f7fd fdcb 	bl	8009038 <_free_r>
 800b4a2:	463c      	mov	r4, r7
 800b4a4:	e7e0      	b.n	800b468 <_realloc_r+0x1e>

0800b4a6 <__ascii_wctomb>:
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	b141      	cbz	r1, 800b4be <__ascii_wctomb+0x18>
 800b4ac:	2aff      	cmp	r2, #255	@ 0xff
 800b4ae:	d904      	bls.n	800b4ba <__ascii_wctomb+0x14>
 800b4b0:	228a      	movs	r2, #138	@ 0x8a
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	4770      	bx	lr
 800b4ba:	700a      	strb	r2, [r1, #0]
 800b4bc:	2001      	movs	r0, #1
 800b4be:	4770      	bx	lr

0800b4c0 <fiprintf>:
 800b4c0:	b40e      	push	{r1, r2, r3}
 800b4c2:	b503      	push	{r0, r1, lr}
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	ab03      	add	r3, sp, #12
 800b4c8:	4805      	ldr	r0, [pc, #20]	@ (800b4e0 <fiprintf+0x20>)
 800b4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	f000 f83f 	bl	800b554 <_vfiprintf_r>
 800b4d6:	b002      	add	sp, #8
 800b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4dc:	b003      	add	sp, #12
 800b4de:	4770      	bx	lr
 800b4e0:	20000018 	.word	0x20000018

0800b4e4 <abort>:
 800b4e4:	b508      	push	{r3, lr}
 800b4e6:	2006      	movs	r0, #6
 800b4e8:	f000 fa08 	bl	800b8fc <raise>
 800b4ec:	2001      	movs	r0, #1
 800b4ee:	f7f7 f8ad 	bl	800264c <_exit>

0800b4f2 <_malloc_usable_size_r>:
 800b4f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f6:	1f18      	subs	r0, r3, #4
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	bfbc      	itt	lt
 800b4fc:	580b      	ldrlt	r3, [r1, r0]
 800b4fe:	18c0      	addlt	r0, r0, r3
 800b500:	4770      	bx	lr

0800b502 <__sfputc_r>:
 800b502:	6893      	ldr	r3, [r2, #8]
 800b504:	3b01      	subs	r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	b410      	push	{r4}
 800b50a:	6093      	str	r3, [r2, #8]
 800b50c:	da08      	bge.n	800b520 <__sfputc_r+0x1e>
 800b50e:	6994      	ldr	r4, [r2, #24]
 800b510:	42a3      	cmp	r3, r4
 800b512:	db01      	blt.n	800b518 <__sfputc_r+0x16>
 800b514:	290a      	cmp	r1, #10
 800b516:	d103      	bne.n	800b520 <__sfputc_r+0x1e>
 800b518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b51c:	f000 b932 	b.w	800b784 <__swbuf_r>
 800b520:	6813      	ldr	r3, [r2, #0]
 800b522:	1c58      	adds	r0, r3, #1
 800b524:	6010      	str	r0, [r2, #0]
 800b526:	7019      	strb	r1, [r3, #0]
 800b528:	4608      	mov	r0, r1
 800b52a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <__sfputs_r>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	4606      	mov	r6, r0
 800b534:	460f      	mov	r7, r1
 800b536:	4614      	mov	r4, r2
 800b538:	18d5      	adds	r5, r2, r3
 800b53a:	42ac      	cmp	r4, r5
 800b53c:	d101      	bne.n	800b542 <__sfputs_r+0x12>
 800b53e:	2000      	movs	r0, #0
 800b540:	e007      	b.n	800b552 <__sfputs_r+0x22>
 800b542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b546:	463a      	mov	r2, r7
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff ffda 	bl	800b502 <__sfputc_r>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d1f3      	bne.n	800b53a <__sfputs_r+0xa>
 800b552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b554 <_vfiprintf_r>:
 800b554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b558:	460d      	mov	r5, r1
 800b55a:	b09d      	sub	sp, #116	@ 0x74
 800b55c:	4614      	mov	r4, r2
 800b55e:	4698      	mov	r8, r3
 800b560:	4606      	mov	r6, r0
 800b562:	b118      	cbz	r0, 800b56c <_vfiprintf_r+0x18>
 800b564:	6a03      	ldr	r3, [r0, #32]
 800b566:	b90b      	cbnz	r3, 800b56c <_vfiprintf_r+0x18>
 800b568:	f7fc fdf8 	bl	800815c <__sinit>
 800b56c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b56e:	07d9      	lsls	r1, r3, #31
 800b570:	d405      	bmi.n	800b57e <_vfiprintf_r+0x2a>
 800b572:	89ab      	ldrh	r3, [r5, #12]
 800b574:	059a      	lsls	r2, r3, #22
 800b576:	d402      	bmi.n	800b57e <_vfiprintf_r+0x2a>
 800b578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b57a:	f7fc ff06 	bl	800838a <__retarget_lock_acquire_recursive>
 800b57e:	89ab      	ldrh	r3, [r5, #12]
 800b580:	071b      	lsls	r3, r3, #28
 800b582:	d501      	bpl.n	800b588 <_vfiprintf_r+0x34>
 800b584:	692b      	ldr	r3, [r5, #16]
 800b586:	b99b      	cbnz	r3, 800b5b0 <_vfiprintf_r+0x5c>
 800b588:	4629      	mov	r1, r5
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 f938 	bl	800b800 <__swsetup_r>
 800b590:	b170      	cbz	r0, 800b5b0 <_vfiprintf_r+0x5c>
 800b592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b594:	07dc      	lsls	r4, r3, #31
 800b596:	d504      	bpl.n	800b5a2 <_vfiprintf_r+0x4e>
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	b01d      	add	sp, #116	@ 0x74
 800b59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a2:	89ab      	ldrh	r3, [r5, #12]
 800b5a4:	0598      	lsls	r0, r3, #22
 800b5a6:	d4f7      	bmi.n	800b598 <_vfiprintf_r+0x44>
 800b5a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5aa:	f7fc feef 	bl	800838c <__retarget_lock_release_recursive>
 800b5ae:	e7f3      	b.n	800b598 <_vfiprintf_r+0x44>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5b4:	2320      	movs	r3, #32
 800b5b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5be:	2330      	movs	r3, #48	@ 0x30
 800b5c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b770 <_vfiprintf_r+0x21c>
 800b5c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5c8:	f04f 0901 	mov.w	r9, #1
 800b5cc:	4623      	mov	r3, r4
 800b5ce:	469a      	mov	sl, r3
 800b5d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5d4:	b10a      	cbz	r2, 800b5da <_vfiprintf_r+0x86>
 800b5d6:	2a25      	cmp	r2, #37	@ 0x25
 800b5d8:	d1f9      	bne.n	800b5ce <_vfiprintf_r+0x7a>
 800b5da:	ebba 0b04 	subs.w	fp, sl, r4
 800b5de:	d00b      	beq.n	800b5f8 <_vfiprintf_r+0xa4>
 800b5e0:	465b      	mov	r3, fp
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7ff ffa2 	bl	800b530 <__sfputs_r>
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	f000 80a7 	beq.w	800b740 <_vfiprintf_r+0x1ec>
 800b5f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5f4:	445a      	add	r2, fp
 800b5f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 809f 	beq.w	800b740 <_vfiprintf_r+0x1ec>
 800b602:	2300      	movs	r3, #0
 800b604:	f04f 32ff 	mov.w	r2, #4294967295
 800b608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b60c:	f10a 0a01 	add.w	sl, sl, #1
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	9307      	str	r3, [sp, #28]
 800b614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b618:	931a      	str	r3, [sp, #104]	@ 0x68
 800b61a:	4654      	mov	r4, sl
 800b61c:	2205      	movs	r2, #5
 800b61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b622:	4853      	ldr	r0, [pc, #332]	@ (800b770 <_vfiprintf_r+0x21c>)
 800b624:	f7f4 fdd4 	bl	80001d0 <memchr>
 800b628:	9a04      	ldr	r2, [sp, #16]
 800b62a:	b9d8      	cbnz	r0, 800b664 <_vfiprintf_r+0x110>
 800b62c:	06d1      	lsls	r1, r2, #27
 800b62e:	bf44      	itt	mi
 800b630:	2320      	movmi	r3, #32
 800b632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b636:	0713      	lsls	r3, r2, #28
 800b638:	bf44      	itt	mi
 800b63a:	232b      	movmi	r3, #43	@ 0x2b
 800b63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b640:	f89a 3000 	ldrb.w	r3, [sl]
 800b644:	2b2a      	cmp	r3, #42	@ 0x2a
 800b646:	d015      	beq.n	800b674 <_vfiprintf_r+0x120>
 800b648:	9a07      	ldr	r2, [sp, #28]
 800b64a:	4654      	mov	r4, sl
 800b64c:	2000      	movs	r0, #0
 800b64e:	f04f 0c0a 	mov.w	ip, #10
 800b652:	4621      	mov	r1, r4
 800b654:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b658:	3b30      	subs	r3, #48	@ 0x30
 800b65a:	2b09      	cmp	r3, #9
 800b65c:	d94b      	bls.n	800b6f6 <_vfiprintf_r+0x1a2>
 800b65e:	b1b0      	cbz	r0, 800b68e <_vfiprintf_r+0x13a>
 800b660:	9207      	str	r2, [sp, #28]
 800b662:	e014      	b.n	800b68e <_vfiprintf_r+0x13a>
 800b664:	eba0 0308 	sub.w	r3, r0, r8
 800b668:	fa09 f303 	lsl.w	r3, r9, r3
 800b66c:	4313      	orrs	r3, r2
 800b66e:	9304      	str	r3, [sp, #16]
 800b670:	46a2      	mov	sl, r4
 800b672:	e7d2      	b.n	800b61a <_vfiprintf_r+0xc6>
 800b674:	9b03      	ldr	r3, [sp, #12]
 800b676:	1d19      	adds	r1, r3, #4
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	9103      	str	r1, [sp, #12]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bfbb      	ittet	lt
 800b680:	425b      	neglt	r3, r3
 800b682:	f042 0202 	orrlt.w	r2, r2, #2
 800b686:	9307      	strge	r3, [sp, #28]
 800b688:	9307      	strlt	r3, [sp, #28]
 800b68a:	bfb8      	it	lt
 800b68c:	9204      	strlt	r2, [sp, #16]
 800b68e:	7823      	ldrb	r3, [r4, #0]
 800b690:	2b2e      	cmp	r3, #46	@ 0x2e
 800b692:	d10a      	bne.n	800b6aa <_vfiprintf_r+0x156>
 800b694:	7863      	ldrb	r3, [r4, #1]
 800b696:	2b2a      	cmp	r3, #42	@ 0x2a
 800b698:	d132      	bne.n	800b700 <_vfiprintf_r+0x1ac>
 800b69a:	9b03      	ldr	r3, [sp, #12]
 800b69c:	1d1a      	adds	r2, r3, #4
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	9203      	str	r2, [sp, #12]
 800b6a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6a6:	3402      	adds	r4, #2
 800b6a8:	9305      	str	r3, [sp, #20]
 800b6aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b780 <_vfiprintf_r+0x22c>
 800b6ae:	7821      	ldrb	r1, [r4, #0]
 800b6b0:	2203      	movs	r2, #3
 800b6b2:	4650      	mov	r0, sl
 800b6b4:	f7f4 fd8c 	bl	80001d0 <memchr>
 800b6b8:	b138      	cbz	r0, 800b6ca <_vfiprintf_r+0x176>
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	eba0 000a 	sub.w	r0, r0, sl
 800b6c0:	2240      	movs	r2, #64	@ 0x40
 800b6c2:	4082      	lsls	r2, r0
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	3401      	adds	r4, #1
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ce:	4829      	ldr	r0, [pc, #164]	@ (800b774 <_vfiprintf_r+0x220>)
 800b6d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6d4:	2206      	movs	r2, #6
 800b6d6:	f7f4 fd7b 	bl	80001d0 <memchr>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d03f      	beq.n	800b75e <_vfiprintf_r+0x20a>
 800b6de:	4b26      	ldr	r3, [pc, #152]	@ (800b778 <_vfiprintf_r+0x224>)
 800b6e0:	bb1b      	cbnz	r3, 800b72a <_vfiprintf_r+0x1d6>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	3307      	adds	r3, #7
 800b6e6:	f023 0307 	bic.w	r3, r3, #7
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	9303      	str	r3, [sp, #12]
 800b6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6f0:	443b      	add	r3, r7
 800b6f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6f4:	e76a      	b.n	800b5cc <_vfiprintf_r+0x78>
 800b6f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	e7a8      	b.n	800b652 <_vfiprintf_r+0xfe>
 800b700:	2300      	movs	r3, #0
 800b702:	3401      	adds	r4, #1
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	4619      	mov	r1, r3
 800b708:	f04f 0c0a 	mov.w	ip, #10
 800b70c:	4620      	mov	r0, r4
 800b70e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b712:	3a30      	subs	r2, #48	@ 0x30
 800b714:	2a09      	cmp	r2, #9
 800b716:	d903      	bls.n	800b720 <_vfiprintf_r+0x1cc>
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0c6      	beq.n	800b6aa <_vfiprintf_r+0x156>
 800b71c:	9105      	str	r1, [sp, #20]
 800b71e:	e7c4      	b.n	800b6aa <_vfiprintf_r+0x156>
 800b720:	fb0c 2101 	mla	r1, ip, r1, r2
 800b724:	4604      	mov	r4, r0
 800b726:	2301      	movs	r3, #1
 800b728:	e7f0      	b.n	800b70c <_vfiprintf_r+0x1b8>
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	462a      	mov	r2, r5
 800b730:	4b12      	ldr	r3, [pc, #72]	@ (800b77c <_vfiprintf_r+0x228>)
 800b732:	a904      	add	r1, sp, #16
 800b734:	4630      	mov	r0, r6
 800b736:	f7fb feb9 	bl	80074ac <_printf_float>
 800b73a:	4607      	mov	r7, r0
 800b73c:	1c78      	adds	r0, r7, #1
 800b73e:	d1d6      	bne.n	800b6ee <_vfiprintf_r+0x19a>
 800b740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b742:	07d9      	lsls	r1, r3, #31
 800b744:	d405      	bmi.n	800b752 <_vfiprintf_r+0x1fe>
 800b746:	89ab      	ldrh	r3, [r5, #12]
 800b748:	059a      	lsls	r2, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_vfiprintf_r+0x1fe>
 800b74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b74e:	f7fc fe1d 	bl	800838c <__retarget_lock_release_recursive>
 800b752:	89ab      	ldrh	r3, [r5, #12]
 800b754:	065b      	lsls	r3, r3, #25
 800b756:	f53f af1f 	bmi.w	800b598 <_vfiprintf_r+0x44>
 800b75a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b75c:	e71e      	b.n	800b59c <_vfiprintf_r+0x48>
 800b75e:	ab03      	add	r3, sp, #12
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	462a      	mov	r2, r5
 800b764:	4b05      	ldr	r3, [pc, #20]	@ (800b77c <_vfiprintf_r+0x228>)
 800b766:	a904      	add	r1, sp, #16
 800b768:	4630      	mov	r0, r6
 800b76a:	f7fc f937 	bl	80079dc <_printf_i>
 800b76e:	e7e4      	b.n	800b73a <_vfiprintf_r+0x1e6>
 800b770:	0800be31 	.word	0x0800be31
 800b774:	0800be3b 	.word	0x0800be3b
 800b778:	080074ad 	.word	0x080074ad
 800b77c:	0800b531 	.word	0x0800b531
 800b780:	0800be37 	.word	0x0800be37

0800b784 <__swbuf_r>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	460e      	mov	r6, r1
 800b788:	4614      	mov	r4, r2
 800b78a:	4605      	mov	r5, r0
 800b78c:	b118      	cbz	r0, 800b796 <__swbuf_r+0x12>
 800b78e:	6a03      	ldr	r3, [r0, #32]
 800b790:	b90b      	cbnz	r3, 800b796 <__swbuf_r+0x12>
 800b792:	f7fc fce3 	bl	800815c <__sinit>
 800b796:	69a3      	ldr	r3, [r4, #24]
 800b798:	60a3      	str	r3, [r4, #8]
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	071a      	lsls	r2, r3, #28
 800b79e:	d501      	bpl.n	800b7a4 <__swbuf_r+0x20>
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	b943      	cbnz	r3, 800b7b6 <__swbuf_r+0x32>
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f000 f82a 	bl	800b800 <__swsetup_r>
 800b7ac:	b118      	cbz	r0, 800b7b6 <__swbuf_r+0x32>
 800b7ae:	f04f 37ff 	mov.w	r7, #4294967295
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	6922      	ldr	r2, [r4, #16]
 800b7ba:	1a98      	subs	r0, r3, r2
 800b7bc:	6963      	ldr	r3, [r4, #20]
 800b7be:	b2f6      	uxtb	r6, r6
 800b7c0:	4283      	cmp	r3, r0
 800b7c2:	4637      	mov	r7, r6
 800b7c4:	dc05      	bgt.n	800b7d2 <__swbuf_r+0x4e>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f7ff fa47 	bl	800ac5c <_fflush_r>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d1ed      	bne.n	800b7ae <__swbuf_r+0x2a>
 800b7d2:	68a3      	ldr	r3, [r4, #8]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	60a3      	str	r3, [r4, #8]
 800b7d8:	6823      	ldr	r3, [r4, #0]
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	6022      	str	r2, [r4, #0]
 800b7de:	701e      	strb	r6, [r3, #0]
 800b7e0:	6962      	ldr	r2, [r4, #20]
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d004      	beq.n	800b7f2 <__swbuf_r+0x6e>
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	07db      	lsls	r3, r3, #31
 800b7ec:	d5e1      	bpl.n	800b7b2 <__swbuf_r+0x2e>
 800b7ee:	2e0a      	cmp	r6, #10
 800b7f0:	d1df      	bne.n	800b7b2 <__swbuf_r+0x2e>
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f7ff fa31 	bl	800ac5c <_fflush_r>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0d9      	beq.n	800b7b2 <__swbuf_r+0x2e>
 800b7fe:	e7d6      	b.n	800b7ae <__swbuf_r+0x2a>

0800b800 <__swsetup_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4b29      	ldr	r3, [pc, #164]	@ (800b8a8 <__swsetup_r+0xa8>)
 800b804:	4605      	mov	r5, r0
 800b806:	6818      	ldr	r0, [r3, #0]
 800b808:	460c      	mov	r4, r1
 800b80a:	b118      	cbz	r0, 800b814 <__swsetup_r+0x14>
 800b80c:	6a03      	ldr	r3, [r0, #32]
 800b80e:	b90b      	cbnz	r3, 800b814 <__swsetup_r+0x14>
 800b810:	f7fc fca4 	bl	800815c <__sinit>
 800b814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b818:	0719      	lsls	r1, r3, #28
 800b81a:	d422      	bmi.n	800b862 <__swsetup_r+0x62>
 800b81c:	06da      	lsls	r2, r3, #27
 800b81e:	d407      	bmi.n	800b830 <__swsetup_r+0x30>
 800b820:	2209      	movs	r2, #9
 800b822:	602a      	str	r2, [r5, #0]
 800b824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	f04f 30ff 	mov.w	r0, #4294967295
 800b82e:	e033      	b.n	800b898 <__swsetup_r+0x98>
 800b830:	0758      	lsls	r0, r3, #29
 800b832:	d512      	bpl.n	800b85a <__swsetup_r+0x5a>
 800b834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b836:	b141      	cbz	r1, 800b84a <__swsetup_r+0x4a>
 800b838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b83c:	4299      	cmp	r1, r3
 800b83e:	d002      	beq.n	800b846 <__swsetup_r+0x46>
 800b840:	4628      	mov	r0, r5
 800b842:	f7fd fbf9 	bl	8009038 <_free_r>
 800b846:	2300      	movs	r3, #0
 800b848:	6363      	str	r3, [r4, #52]	@ 0x34
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b850:	81a3      	strh	r3, [r4, #12]
 800b852:	2300      	movs	r3, #0
 800b854:	6063      	str	r3, [r4, #4]
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f043 0308 	orr.w	r3, r3, #8
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	b94b      	cbnz	r3, 800b87a <__swsetup_r+0x7a>
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b86c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b870:	d003      	beq.n	800b87a <__swsetup_r+0x7a>
 800b872:	4621      	mov	r1, r4
 800b874:	4628      	mov	r0, r5
 800b876:	f000 f883 	bl	800b980 <__smakebuf_r>
 800b87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b87e:	f013 0201 	ands.w	r2, r3, #1
 800b882:	d00a      	beq.n	800b89a <__swsetup_r+0x9a>
 800b884:	2200      	movs	r2, #0
 800b886:	60a2      	str	r2, [r4, #8]
 800b888:	6962      	ldr	r2, [r4, #20]
 800b88a:	4252      	negs	r2, r2
 800b88c:	61a2      	str	r2, [r4, #24]
 800b88e:	6922      	ldr	r2, [r4, #16]
 800b890:	b942      	cbnz	r2, 800b8a4 <__swsetup_r+0xa4>
 800b892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b896:	d1c5      	bne.n	800b824 <__swsetup_r+0x24>
 800b898:	bd38      	pop	{r3, r4, r5, pc}
 800b89a:	0799      	lsls	r1, r3, #30
 800b89c:	bf58      	it	pl
 800b89e:	6962      	ldrpl	r2, [r4, #20]
 800b8a0:	60a2      	str	r2, [r4, #8]
 800b8a2:	e7f4      	b.n	800b88e <__swsetup_r+0x8e>
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	e7f7      	b.n	800b898 <__swsetup_r+0x98>
 800b8a8:	20000018 	.word	0x20000018

0800b8ac <_raise_r>:
 800b8ac:	291f      	cmp	r1, #31
 800b8ae:	b538      	push	{r3, r4, r5, lr}
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	d904      	bls.n	800b8c0 <_raise_r+0x14>
 800b8b6:	2316      	movs	r3, #22
 800b8b8:	6003      	str	r3, [r0, #0]
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b8c2:	b112      	cbz	r2, 800b8ca <_raise_r+0x1e>
 800b8c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8c8:	b94b      	cbnz	r3, 800b8de <_raise_r+0x32>
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f000 f830 	bl	800b930 <_getpid_r>
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	4601      	mov	r1, r0
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8da:	f000 b817 	b.w	800b90c <_kill_r>
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d00a      	beq.n	800b8f8 <_raise_r+0x4c>
 800b8e2:	1c59      	adds	r1, r3, #1
 800b8e4:	d103      	bne.n	800b8ee <_raise_r+0x42>
 800b8e6:	2316      	movs	r3, #22
 800b8e8:	6003      	str	r3, [r0, #0]
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	e7e7      	b.n	800b8be <_raise_r+0x12>
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	4798      	blx	r3
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e7e0      	b.n	800b8be <_raise_r+0x12>

0800b8fc <raise>:
 800b8fc:	4b02      	ldr	r3, [pc, #8]	@ (800b908 <raise+0xc>)
 800b8fe:	4601      	mov	r1, r0
 800b900:	6818      	ldr	r0, [r3, #0]
 800b902:	f7ff bfd3 	b.w	800b8ac <_raise_r>
 800b906:	bf00      	nop
 800b908:	20000018 	.word	0x20000018

0800b90c <_kill_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	@ (800b92c <_kill_r+0x20>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	f7f6 fe87 	bl	800262c <_kill>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d102      	bne.n	800b928 <_kill_r+0x1c>
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	b103      	cbz	r3, 800b928 <_kill_r+0x1c>
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	bf00      	nop
 800b92c:	20000898 	.word	0x20000898

0800b930 <_getpid_r>:
 800b930:	f7f6 be74 	b.w	800261c <_getpid>

0800b934 <__swhatbuf_r>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	460c      	mov	r4, r1
 800b938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b93c:	2900      	cmp	r1, #0
 800b93e:	b096      	sub	sp, #88	@ 0x58
 800b940:	4615      	mov	r5, r2
 800b942:	461e      	mov	r6, r3
 800b944:	da0d      	bge.n	800b962 <__swhatbuf_r+0x2e>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b94c:	f04f 0100 	mov.w	r1, #0
 800b950:	bf14      	ite	ne
 800b952:	2340      	movne	r3, #64	@ 0x40
 800b954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b958:	2000      	movs	r0, #0
 800b95a:	6031      	str	r1, [r6, #0]
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	b016      	add	sp, #88	@ 0x58
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	466a      	mov	r2, sp
 800b964:	f000 f848 	bl	800b9f8 <_fstat_r>
 800b968:	2800      	cmp	r0, #0
 800b96a:	dbec      	blt.n	800b946 <__swhatbuf_r+0x12>
 800b96c:	9901      	ldr	r1, [sp, #4]
 800b96e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b976:	4259      	negs	r1, r3
 800b978:	4159      	adcs	r1, r3
 800b97a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b97e:	e7eb      	b.n	800b958 <__swhatbuf_r+0x24>

0800b980 <__smakebuf_r>:
 800b980:	898b      	ldrh	r3, [r1, #12]
 800b982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b984:	079d      	lsls	r5, r3, #30
 800b986:	4606      	mov	r6, r0
 800b988:	460c      	mov	r4, r1
 800b98a:	d507      	bpl.n	800b99c <__smakebuf_r+0x1c>
 800b98c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	6123      	str	r3, [r4, #16]
 800b994:	2301      	movs	r3, #1
 800b996:	6163      	str	r3, [r4, #20]
 800b998:	b003      	add	sp, #12
 800b99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b99c:	ab01      	add	r3, sp, #4
 800b99e:	466a      	mov	r2, sp
 800b9a0:	f7ff ffc8 	bl	800b934 <__swhatbuf_r>
 800b9a4:	9f00      	ldr	r7, [sp, #0]
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7fd fbb8 	bl	8009120 <_malloc_r>
 800b9b0:	b948      	cbnz	r0, 800b9c6 <__smakebuf_r+0x46>
 800b9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b6:	059a      	lsls	r2, r3, #22
 800b9b8:	d4ee      	bmi.n	800b998 <__smakebuf_r+0x18>
 800b9ba:	f023 0303 	bic.w	r3, r3, #3
 800b9be:	f043 0302 	orr.w	r3, r3, #2
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	e7e2      	b.n	800b98c <__smakebuf_r+0xc>
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	6020      	str	r0, [r4, #0]
 800b9ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9d6:	b15b      	cbz	r3, 800b9f0 <__smakebuf_r+0x70>
 800b9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9dc:	4630      	mov	r0, r6
 800b9de:	f000 f81d 	bl	800ba1c <_isatty_r>
 800b9e2:	b128      	cbz	r0, 800b9f0 <__smakebuf_r+0x70>
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	f023 0303 	bic.w	r3, r3, #3
 800b9ea:	f043 0301 	orr.w	r3, r3, #1
 800b9ee:	81a3      	strh	r3, [r4, #12]
 800b9f0:	89a3      	ldrh	r3, [r4, #12]
 800b9f2:	431d      	orrs	r5, r3
 800b9f4:	81a5      	strh	r5, [r4, #12]
 800b9f6:	e7cf      	b.n	800b998 <__smakebuf_r+0x18>

0800b9f8 <_fstat_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ba18 <_fstat_r+0x20>)
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4608      	mov	r0, r1
 800ba02:	4611      	mov	r1, r2
 800ba04:	602b      	str	r3, [r5, #0]
 800ba06:	f7f6 fe71 	bl	80026ec <_fstat>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	d102      	bne.n	800ba14 <_fstat_r+0x1c>
 800ba0e:	682b      	ldr	r3, [r5, #0]
 800ba10:	b103      	cbz	r3, 800ba14 <_fstat_r+0x1c>
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
 800ba16:	bf00      	nop
 800ba18:	20000898 	.word	0x20000898

0800ba1c <_isatty_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d06      	ldr	r5, [pc, #24]	@ (800ba38 <_isatty_r+0x1c>)
 800ba20:	2300      	movs	r3, #0
 800ba22:	4604      	mov	r4, r0
 800ba24:	4608      	mov	r0, r1
 800ba26:	602b      	str	r3, [r5, #0]
 800ba28:	f7f6 fe70 	bl	800270c <_isatty>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_isatty_r+0x1a>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_isatty_r+0x1a>
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	20000898 	.word	0x20000898

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
