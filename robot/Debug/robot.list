
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b314  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b4a8  0800b4a8  0000c4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b938  0800b938  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b938  0800b938  0000c938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b940  0800b940  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b940  0800b940  0000c940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b944  0800b944  0000c944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b948  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000006d0  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008a4  200008a4  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010529  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294a  00000000  00000000  0001d72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00020078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb3  00000000  00000000  00020fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002303e  00000000  00000000  00021b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014499  00000000  00000000  00044b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce3e8  00000000  00000000  0005902a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127412  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000527c  00000000  00000000  00127458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  0012c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b48c 	.word	0x0800b48c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b48c 	.word	0x0800b48c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ff4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	200c      	movs	r0, #12
 800100c:	f002 f939 	bl	8003282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001010:	200c      	movs	r0, #12
 8001012:	f002 f952 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	200e      	movs	r0, #14
 800101c:	f002 f931 	bl	8003282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f002 f94a 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2010      	movs	r0, #16
 800102c:	f002 f929 	bl	8003282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001030:	2010      	movs	r0, #16
 8001032:	f002 f942 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2011      	movs	r0, #17
 800103c:	f002 f921 	bl	8003282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001040:	2011      	movs	r0, #17
 8001042:	f002 f93a 	bl	80032ba <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <Motor_Position>:
//舵机角度控制函数
//position:0 折叠； 1 收拢； 2 展开
//delay确保已转换完成

void Motor_Position(int position)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(position == 0)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <Motor_Position+0x16>
	{
		Motor_Control(65);
 8001062:	2041      	movs	r0, #65	@ 0x41
 8001064:	f000 fe90 	bl	8001d88 <Motor_Control>
 8001068:	e00c      	b.n	8001084 <Motor_Position+0x30>
	}
	else if(position == 1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d103      	bne.n	8001078 <Motor_Position+0x24>
	{
		Motor_Control(40);
 8001070:	2028      	movs	r0, #40	@ 0x28
 8001072:	f000 fe89 	bl	8001d88 <Motor_Control>
 8001076:	e005      	b.n	8001084 <Motor_Position+0x30>
	}
	else if(position == 2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d102      	bne.n	8001084 <Motor_Position+0x30>
	{
		Motor_Control(0);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 fe82 	bl	8001d88 <Motor_Control>
	}

	HAL_Delay(800);
 8001084:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001088:	f001 fffc 	bl	8003084 <HAL_Delay>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Move_Turn>:
//控制电机直角转弯函数
//direction：1 前进； 2 后退
//Delay:560 空载90度左右；650 2物块90度左右

void Move_Turn(int direction)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	int Left_In = -67, Left_Out = 70;	//左初始速度
 800109c:	f06f 0342 	mvn.w	r3, #66	@ 0x42
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	2346      	movs	r3, #70	@ 0x46
 80010a4:	613b      	str	r3, [r7, #16]
	int Right_In = -67, Right_Out = 70;	//右初始速度
 80010a6:	f06f 0342 	mvn.w	r3, #66	@ 0x42
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	2346      	movs	r3, #70	@ 0x46
 80010ae:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;//实际转化参数
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]

    Move_Twin_Wheels(-70, -70);
 80010b8:	f06f 0145 	mvn.w	r1, #69	@ 0x45
 80010bc:	f06f 0045 	mvn.w	r0, #69	@ 0x45
 80010c0:	f000 fdbc 	bl	8001c3c <Move_Twin_Wheels>
	HAL_Delay(270);//310
 80010c4:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010c8:	f001 ffdc 	bl	8003084 <HAL_Delay>
	Move_Twin_Wheels(0, 0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 fdb4 	bl	8001c3c <Move_Twin_Wheels>
	HAL_Delay(100);
 80010d4:	2064      	movs	r0, #100	@ 0x64
 80010d6:	f001 ffd5 	bl	8003084 <HAL_Delay>

	Motor_Position(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff ffba 	bl	8001054 <Motor_Position>

	if(direction == 1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d104      	bne.n	80010f0 <Move_Turn+0x5c>
	{
		Left_Speed = Left_In;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_Out;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	e006      	b.n	80010fe <Move_Turn+0x6a>
	}
	else if(direction == 2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d103      	bne.n	80010fe <Move_Turn+0x6a>
	{
		Left_Speed = Left_Out;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_In;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
	}

	if(Left_Speed > 100)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	2b64      	cmp	r3, #100	@ 0x64
 8001102:	dd02      	ble.n	800110a <Move_Turn+0x76>
		Left_Speed = 100;
 8001104:	2364      	movs	r3, #100	@ 0x64
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	e014      	b.n	8001134 <Move_Turn+0xa0>
	else if (Left_Speed < -100)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001110:	da03      	bge.n	800111a <Move_Turn+0x86>
		Left_Speed = -100;
 8001112:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	e00c      	b.n	8001134 <Move_Turn+0xa0>
	else if(Right_Speed > 100)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b64      	cmp	r3, #100	@ 0x64
 800111e:	dd02      	ble.n	8001126 <Move_Turn+0x92>
		Right_Speed = 100;
 8001120:	2364      	movs	r3, #100	@ 0x64
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	e006      	b.n	8001134 <Move_Turn+0xa0>
	else if (Right_Speed < -100)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800112c:	da02      	bge.n	8001134 <Move_Turn+0xa0>
		Right_Speed = -100;
 800112e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001132:	61bb      	str	r3, [r7, #24]

	Move_Twin_Wheels(Left_Speed, Right_Speed);
 8001134:	69b9      	ldr	r1, [r7, #24]
 8001136:	69f8      	ldr	r0, [r7, #28]
 8001138:	f000 fd80 	bl	8001c3c <Move_Twin_Wheels>
	HAL_Delay(680);//680
 800113c:	f44f 702a 	mov.w	r0, #680	@ 0x2a8
 8001140:	f001 ffa0 	bl	8003084 <HAL_Delay>
	Move_Twin_Wheels(0, 0);
 8001144:	2100      	movs	r1, #0
 8001146:	2000      	movs	r0, #0
 8001148:	f000 fd78 	bl	8001c3c <Move_Twin_Wheels>
	HAL_Delay(100);
 800114c:	2064      	movs	r0, #100	@ 0x64
 800114e:	f001 ff99 	bl	8003084 <HAL_Delay>
}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <Position_Adj>:
//转弯姿态调整函数
//direction：1 左； 2 右；
//基准速度设定60， 可带动3物块

void Position_Adj(int direction)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	int Adj_cnt = 100;		//计数值，确定调整时长
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	61bb      	str	r3, [r7, #24]
	int Left_Turn = 60;		//左基准初始速度
 8001168:	233c      	movs	r3, #60	@ 0x3c
 800116a:	617b      	str	r3, [r7, #20]
	int Right_Turn = 60;	//右基准初始速度
 800116c:	233c      	movs	r3, #60	@ 0x3c
 800116e:	613b      	str	r3, [r7, #16]
	int TurnLeft_adj = 1;	//左调整值
 8001170:	2301      	movs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
	int TurnRight_adj = 1;	//右调整值
 8001174:	2301      	movs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
	int turn = 0, error = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]

	if(direction == 1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d103      	bne.n	8001196 <Position_Adj+0x3a>
		turn = -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
 8001194:	e004      	b.n	80011a0 <Position_Adj+0x44>
	else if(direction == 2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d101      	bne.n	80011a0 <Position_Adj+0x44>
		turn = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24

	for(int i = 0; i < Adj_cnt; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	e0aa      	b.n	80012fc <Position_Adj+0x1a0>
	{
		if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == OUT)
 80011a6:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <Position_Adj+0x1c0>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10a      	bne.n	80011c4 <Position_Adj+0x68>
 80011ae:	4b5b      	ldr	r3, [pc, #364]	@ (800131c <Position_Adj+0x1c0>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d106      	bne.n	80011c4 <Position_Adj+0x68>
 80011b6:	4b59      	ldr	r3, [pc, #356]	@ (800131c <Position_Adj+0x1c0>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <Position_Adj+0x68>
		{
			error = 3;
 80011be:	2303      	movs	r3, #3
 80011c0:	623b      	str	r3, [r7, #32]
 80011c2:	e061      	b.n	8001288 <Position_Adj+0x12c>
		}
		else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT)
 80011c4:	4b55      	ldr	r3, [pc, #340]	@ (800131c <Position_Adj+0x1c0>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10d      	bne.n	80011e8 <Position_Adj+0x8c>
 80011cc:	4b53      	ldr	r3, [pc, #332]	@ (800131c <Position_Adj+0x1c0>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d109      	bne.n	80011e8 <Position_Adj+0x8c>
 80011d4:	4b51      	ldr	r3, [pc, #324]	@ (800131c <Position_Adj+0x1c0>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d105      	bne.n	80011e8 <Position_Adj+0x8c>
		{
			error = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
			turn = -1;
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e6:	e04f      	b.n	8001288 <Position_Adj+0x12c>
		}
		else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 80011e8:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <Position_Adj+0x1c0>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10d      	bne.n	800120c <Position_Adj+0xb0>
 80011f0:	4b4a      	ldr	r3, [pc, #296]	@ (800131c <Position_Adj+0x1c0>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d109      	bne.n	800120c <Position_Adj+0xb0>
 80011f8:	4b48      	ldr	r3, [pc, #288]	@ (800131c <Position_Adj+0x1c0>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <Position_Adj+0xb0>
		{
			error = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
			turn = -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
 800120a:	e03d      	b.n	8001288 <Position_Adj+0x12c>
		}
		else if((GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == OUT) || (GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN))
 800120c:	4b43      	ldr	r3, [pc, #268]	@ (800131c <Position_Adj+0x1c0>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d107      	bne.n	8001224 <Position_Adj+0xc8>
 8001214:	4b41      	ldr	r3, [pc, #260]	@ (800131c <Position_Adj+0x1c0>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <Position_Adj+0xc8>
 800121c:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <Position_Adj+0x1c0>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d00b      	beq.n	800123c <Position_Adj+0xe0>
 8001224:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <Position_Adj+0x1c0>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10c      	bne.n	8001246 <Position_Adj+0xea>
 800122c:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <Position_Adj+0x1c0>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <Position_Adj+0xea>
 8001234:	4b39      	ldr	r3, [pc, #228]	@ (800131c <Position_Adj+0x1c0>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <Position_Adj+0xea>
		{
			error = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
			turn = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
 8001244:	e020      	b.n	8001288 <Position_Adj+0x12c>
		}
		else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 8001246:	4b35      	ldr	r3, [pc, #212]	@ (800131c <Position_Adj+0x1c0>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d10c      	bne.n	8001268 <Position_Adj+0x10c>
 800124e:	4b33      	ldr	r3, [pc, #204]	@ (800131c <Position_Adj+0x1c0>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d108      	bne.n	8001268 <Position_Adj+0x10c>
 8001256:	4b31      	ldr	r3, [pc, #196]	@ (800131c <Position_Adj+0x1c0>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <Position_Adj+0x10c>
		{
			error = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	623b      	str	r3, [r7, #32]
			turn = 1;
 8001262:	2301      	movs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
 8001266:	e00f      	b.n	8001288 <Position_Adj+0x12c>
		}
		else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN)
 8001268:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <Position_Adj+0x1c0>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10b      	bne.n	8001288 <Position_Adj+0x12c>
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <Position_Adj+0x1c0>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <Position_Adj+0x12c>
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <Position_Adj+0x1c0>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d103      	bne.n	8001288 <Position_Adj+0x12c>
		{
			error = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
			turn = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		Left_Speed = turn * (Left_Turn + error * TurnLeft_adj);
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	fb03 f202 	mul.w	r2, r3, r2
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	441a      	add	r2, r3
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Right_Speed = (-1) * turn * (Right_Turn + error * TurnRight_adj);
 800129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129e:	425b      	negs	r3, r3
 80012a0:	6a3a      	ldr	r2, [r7, #32]
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	fb02 f101 	mul.w	r1, r2, r1
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	440a      	add	r2, r1
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(Left_Speed > 100)
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	2b64      	cmp	r3, #100	@ 0x64
 80012b6:	dd02      	ble.n	80012be <Position_Adj+0x162>
				Left_Speed = 100;
 80012b8:	2364      	movs	r3, #100	@ 0x64
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012bc:	e014      	b.n	80012e8 <Position_Adj+0x18c>
		else if (Left_Speed < -100)
 80012be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c0:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012c4:	da03      	bge.n	80012ce <Position_Adj+0x172>
			Left_Speed = -100;
 80012c6:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012cc:	e00c      	b.n	80012e8 <Position_Adj+0x18c>
		else if(Right_Speed > 100)
 80012ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d0:	2b64      	cmp	r3, #100	@ 0x64
 80012d2:	dd02      	ble.n	80012da <Position_Adj+0x17e>
			Right_Speed = 100;
 80012d4:	2364      	movs	r3, #100	@ 0x64
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012d8:	e006      	b.n	80012e8 <Position_Adj+0x18c>
		else if (Right_Speed < -100)
 80012da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012dc:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80012e0:	da02      	bge.n	80012e8 <Position_Adj+0x18c>
			Right_Speed = -100;
 80012e2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		Move_Twin_Wheels(Left_Speed, Right_Speed);
 80012e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012ec:	f000 fca6 	bl	8001c3c <Move_Twin_Wheels>
 		HAL_Delay(10); //是否延时由调试情况决定
 80012f0:	200a      	movs	r0, #10
 80012f2:	f001 fec7 	bl	8003084 <HAL_Delay>
	for(int i = 0; i < Adj_cnt; i++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	429a      	cmp	r2, r3
 8001302:	f6ff af50 	blt.w	80011a6 <Position_Adj+0x4a>
	}
	Move_Twin_Wheels(0, 0);
 8001306:	2100      	movs	r1, #0
 8001308:	2000      	movs	r0, #0
 800130a:	f000 fc97 	bl	8001c3c <Move_Twin_Wheels>
	HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	@ 0x64
 8001310:	f001 feb8 	bl	8003084 <HAL_Delay>
}
 8001314:	bf00      	nop
 8001316:	3730      	adds	r7, #48	@ 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200002c8 	.word	0x200002c8

08001320 <Move_Straight>:

//电机直行控制函数
//direction：1 前进； 2 后退

void Move_Straight(int direction)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	int Left_ori = 88;		//左初始值
 8001328:	2358      	movs	r3, #88	@ 0x58
 800132a:	617b      	str	r3, [r7, #20]
	int Right_ori = 88;		//右初始值
 800132c:	2358      	movs	r3, #88	@ 0x58
 800132e:	613b      	str	r3, [r7, #16]
	int GoLeft_adj = 1;		//左调整值
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
	int GoRight_adj = 1;		//右调整值
 8001334:	2301      	movs	r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
	int Left_Times = 1, Right_Times = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
	int turn = 0, error = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]

	if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == OUT)
 8001350:	4b60      	ldr	r3, [pc, #384]	@ (80014d4 <Move_Straight+0x1b4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10a      	bne.n	800136e <Move_Straight+0x4e>
 8001358:	4b5e      	ldr	r3, [pc, #376]	@ (80014d4 <Move_Straight+0x1b4>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d106      	bne.n	800136e <Move_Straight+0x4e>
 8001360:	4b5c      	ldr	r3, [pc, #368]	@ (80014d4 <Move_Straight+0x1b4>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d102      	bne.n	800136e <Move_Straight+0x4e>
	{
		error = 4;
 8001368:	2304      	movs	r3, #4
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	e061      	b.n	8001432 <Move_Straight+0x112>
	}
	else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT)
 800136e:	4b59      	ldr	r3, [pc, #356]	@ (80014d4 <Move_Straight+0x1b4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10d      	bne.n	8001392 <Move_Straight+0x72>
 8001376:	4b57      	ldr	r3, [pc, #348]	@ (80014d4 <Move_Straight+0x1b4>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d109      	bne.n	8001392 <Move_Straight+0x72>
 800137e:	4b55      	ldr	r3, [pc, #340]	@ (80014d4 <Move_Straight+0x1b4>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d105      	bne.n	8001392 <Move_Straight+0x72>
	{
		error = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
		turn = -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	e04f      	b.n	8001432 <Move_Straight+0x112>
	}
	else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 8001392:	4b50      	ldr	r3, [pc, #320]	@ (80014d4 <Move_Straight+0x1b4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10d      	bne.n	80013b6 <Move_Straight+0x96>
 800139a:	4b4e      	ldr	r3, [pc, #312]	@ (80014d4 <Move_Straight+0x1b4>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <Move_Straight+0x96>
 80013a2:	4b4c      	ldr	r3, [pc, #304]	@ (80014d4 <Move_Straight+0x1b4>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d105      	bne.n	80013b6 <Move_Straight+0x96>
	{
		error = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
		turn = -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	e03d      	b.n	8001432 <Move_Straight+0x112>
	}
	else if((GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == OUT) || (GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN))
 80013b6:	4b47      	ldr	r3, [pc, #284]	@ (80014d4 <Move_Straight+0x1b4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <Move_Straight+0xae>
 80013be:	4b45      	ldr	r3, [pc, #276]	@ (80014d4 <Move_Straight+0x1b4>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d103      	bne.n	80013ce <Move_Straight+0xae>
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <Move_Straight+0x1b4>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d00b      	beq.n	80013e6 <Move_Straight+0xc6>
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <Move_Straight+0x1b4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <Move_Straight+0xd0>
 80013d6:	4b3f      	ldr	r3, [pc, #252]	@ (80014d4 <Move_Straight+0x1b4>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d108      	bne.n	80013f0 <Move_Straight+0xd0>
 80013de:	4b3d      	ldr	r3, [pc, #244]	@ (80014d4 <Move_Straight+0x1b4>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d104      	bne.n	80013f0 <Move_Straight+0xd0>
	{
		error = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
		turn = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e020      	b.n	8001432 <Move_Straight+0x112>
	}
	else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 80013f0:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <Move_Straight+0x1b4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <Move_Straight+0xf2>
 80013f8:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <Move_Straight+0x1b4>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d108      	bne.n	8001412 <Move_Straight+0xf2>
 8001400:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <Move_Straight+0x1b4>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d104      	bne.n	8001412 <Move_Straight+0xf2>
	{
		error = 1;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
		turn = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	e00f      	b.n	8001432 <Move_Straight+0x112>
	}
	else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN)
 8001412:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <Move_Straight+0x1b4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10b      	bne.n	8001432 <Move_Straight+0x112>
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <Move_Straight+0x1b4>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <Move_Straight+0x112>
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <Move_Straight+0x1b4>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <Move_Straight+0x112>
	{
		error = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
		turn = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
//	{
//		error = 2;
//		turn = 1;
//	}

	if(turn == -1){
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d104      	bne.n	8001444 <Move_Straight+0x124>
		Left_Times = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
		Right_Times = 3;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	e006      	b.n	8001452 <Move_Straight+0x132>
	}else if(turn == 1){
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d103      	bne.n	8001452 <Move_Straight+0x132>
		Left_Times = 3;
 800144a:	2303      	movs	r3, #3
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
		Right_Times = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	623b      	str	r3, [r7, #32]
	}

	Left_Speed = Left_ori + Left_Times * turn * error * GoLeft_adj;
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4413      	add	r3, r2
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Right_Speed = Right_ori - Right_Times * turn * error * GoRight_adj;
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(Left_Speed > 100)
 8001486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001488:	2b64      	cmp	r3, #100	@ 0x64
 800148a:	dd02      	ble.n	8001492 <Move_Straight+0x172>
		Left_Speed = 100;
 800148c:	2364      	movs	r3, #100	@ 0x64
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001490:	e014      	b.n	80014bc <Move_Straight+0x19c>
	else if (Left_Speed < -100)
 8001492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001494:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001498:	da03      	bge.n	80014a2 <Move_Straight+0x182>
		Left_Speed = -100;
 800149a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014a0:	e00c      	b.n	80014bc <Move_Straight+0x19c>
	else if(Right_Speed > 100)
 80014a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a4:	2b64      	cmp	r3, #100	@ 0x64
 80014a6:	dd02      	ble.n	80014ae <Move_Straight+0x18e>
		Right_Speed = 100;
 80014a8:	2364      	movs	r3, #100	@ 0x64
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ac:	e006      	b.n	80014bc <Move_Straight+0x19c>
	else if (Right_Speed < -100)
 80014ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b0:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80014b4:	da02      	bge.n	80014bc <Move_Straight+0x19c>
		Right_Speed = -100;
 80014b6:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	Move_Twin_Wheels(Left_Speed, Right_Speed);
 80014bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80014c0:	f000 fbbc 	bl	8001c3c <Move_Twin_Wheels>
	HAL_Delay(10); //是否延时由调试情况决定
 80014c4:	200a      	movs	r0, #10
 80014c6:	f001 fddd 	bl	8003084 <HAL_Delay>
}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	@ 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002c8 	.word	0x200002c8

080014d8 <Judge_cross>:

//岔路口判断
//return：0 非；1 是

int Judge_cross(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	if(GrayData[0] == IN && GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN && GrayData[4] == IN)
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <Judge_cross+0x3c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <Judge_cross+0x30>
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <Judge_cross+0x3c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10d      	bne.n	8001508 <Judge_cross+0x30>
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <Judge_cross+0x3c>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <Judge_cross+0x30>
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <Judge_cross+0x3c>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <Judge_cross+0x30>
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <Judge_cross+0x3c>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <Judge_cross+0x30>
	{
		return 1;
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <Judge_cross+0x32>
	}
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	200002c8 	.word	0x200002c8

08001518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b4d      	ldr	r3, [pc, #308]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a4c      	ldr	r2, [pc, #304]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001538:	f043 0310 	orr.w	r3, r3, #16
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a45      	ldr	r2, [pc, #276]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <MX_GPIO_Init+0x150>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b3f      	ldr	r3, [pc, #252]	@ (8001668 <MX_GPIO_Init+0x150>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a3e      	ldr	r2, [pc, #248]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b3c      	ldr	r3, [pc, #240]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a37      	ldr	r2, [pc, #220]	@ (8001668 <MX_GPIO_Init+0x150>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <MX_GPIO_Init+0x150>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <MX_GPIO_Init+0x150>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a30      	ldr	r2, [pc, #192]	@ (8001668 <MX_GPIO_Init+0x150>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <MX_GPIO_Init+0x150>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <MX_GPIO_Init+0x150>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a29      	ldr	r2, [pc, #164]	@ (8001668 <MX_GPIO_Init+0x150>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <MX_GPIO_Init+0x150>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	210f      	movs	r1, #15
 80015da:	4824      	ldr	r0, [pc, #144]	@ (800166c <MX_GPIO_Init+0x154>)
 80015dc:	f002 fc3e 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015e0:	2310      	movs	r3, #16
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	481f      	ldr	r0, [pc, #124]	@ (8001670 <MX_GPIO_Init+0x158>)
 80015f4:	f002 fa7e 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Engine_Right_Yellow_Pin|Engine_Right_Green_Pin;
 80015f8:	2303      	movs	r3, #3
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	481a      	ldr	r0, [pc, #104]	@ (8001674 <MX_GPIO_Init+0x15c>)
 800160c:	f002 fa72 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = Gray_R2_Pin|Gray_R1_Pin|Gray_M_Pin|Gray_L1_Pin
 8001610:	f44f 6378 	mov.w	r3, #3968	@ 0xf80
 8001614:	61fb      	str	r3, [r7, #28]
                          |Gray_L2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4812      	ldr	r0, [pc, #72]	@ (8001670 <MX_GPIO_Init+0x158>)
 8001626:	f002 fa65 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin;
 800162a:	230f      	movs	r3, #15
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <MX_GPIO_Init+0x154>)
 8001642:	f002 fa57 	bl	8003af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Engine_Left_Green_Pin|Engine_Left_Yellow_Pin;
 8001646:	2328      	movs	r3, #40	@ 0x28
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	@ (8001678 <MX_GPIO_Init+0x160>)
 800165a:	f002 fa4b 	bl	8003af4 <HAL_GPIO_Init>

}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	@ 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40020800 	.word	0x40020800
 8001678:	40020400 	.word	0x40020400

0800167c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af04      	add	r7, sp, #16
 8001682:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim5.Instance) // 确认是正确的定时�????
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b81      	ldr	r3, [pc, #516]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d123      	bne.n	80016d8 <HAL_TIM_PeriodElapsedCallback+0x5c>
    {
        MotorData = Motor_angel;
 8001690:	4b80      	ldr	r3, [pc, #512]	@ (8001894 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a80      	ldr	r2, [pc, #512]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001696:	6013      	str	r3, [r2, #0]

    	sprintf((char*)TransmitData, "灰度传感器：%d %d %d %d %d \n 已经经过%d个路口\n ", GrayData[0],GrayData[1],GrayData[2],GrayData[3],GrayData[4],cross_cnt);
 8001698:	4b80      	ldr	r3, [pc, #512]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800169a:	681c      	ldr	r4, [r3, #0]
 800169c:	4b7f      	ldr	r3, [pc, #508]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800169e:	685d      	ldr	r5, [r3, #4]
 80016a0:	4b7e      	ldr	r3, [pc, #504]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a7d      	ldr	r2, [pc, #500]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80016a6:	68d2      	ldr	r2, [r2, #12]
 80016a8:	497c      	ldr	r1, [pc, #496]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80016aa:	6909      	ldr	r1, [r1, #16]
 80016ac:	487c      	ldr	r0, [pc, #496]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80016ae:	6800      	ldr	r0, [r0, #0]
 80016b0:	9003      	str	r0, [sp, #12]
 80016b2:	9102      	str	r1, [sp, #8]
 80016b4:	9201      	str	r2, [sp, #4]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	462b      	mov	r3, r5
 80016ba:	4622      	mov	r2, r4
 80016bc:	4979      	ldr	r1, [pc, #484]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80016be:	487a      	ldr	r0, [pc, #488]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016c0:	f006 faac 	bl	8007c1c <siprintf>
    	HAL_UART_Transmit_DMA(&huart2, TransmitData, sizeof(TransmitData));//蓝牙
 80016c4:	22c8      	movs	r2, #200	@ 0xc8
 80016c6:	4978      	ldr	r1, [pc, #480]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016c8:	4878      	ldr	r0, [pc, #480]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016ca:	f004 fb65 	bl	8005d98 <HAL_UART_Transmit_DMA>
    	HAL_UART_Transmit_DMA(&huart3, TransmitData, sizeof(TransmitData));//传输信息
 80016ce:	22c8      	movs	r2, #200	@ 0xc8
 80016d0:	4975      	ldr	r1, [pc, #468]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016d2:	4877      	ldr	r0, [pc, #476]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80016d4:	f004 fb60 	bl	8005d98 <HAL_UART_Transmit_DMA>
    }//此为TIM5触发的中�???? 1s�????�????

    if(htim->Instance == htim6.Instance)		              //10ms中断
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b75      	ldr	r3, [pc, #468]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f040 8088 	bne.w	80017f6 <HAL_TIM_PeriodElapsedCallback+0x17a>
    {
        EngineData[0] = Read_Rotational_Speed(0);         //0为左,转�?�单位为RPM
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 fab8 	bl	8001c5c <Read_Rotational_Speed>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f4:	ee17 2a90 	vmov	r2, s15
 80016f8:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80016fa:	601a      	str	r2, [r3, #0]
        EngineData[1] = Read_Rotational_Speed(1);         //1为右，转速单位为RPM
 80016fc:	2001      	movs	r0, #1
 80016fe:	f000 faad 	bl	8001c5c <Read_Rotational_Speed>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170a:	ee17 2a90 	vmov	r2, s15
 800170e:	4b6a      	ldr	r3, [pc, #424]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001710:	605a      	str	r2, [r3, #4]
        if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_SET)
 8001712:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001716:	4869      	ldr	r0, [pc, #420]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001718:	f002 fb88 	bl	8003e2c <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b01      	cmp	r3, #1
 8001720:	d103      	bne.n	800172a <HAL_TIM_PeriodElapsedCallback+0xae>
        {
        	GrayData[0] = 1;
 8001722:	4b5e      	ldr	r3, [pc, #376]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001724:	2201      	movs	r2, #1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00a      	b.n	8001740 <HAL_TIM_PeriodElapsedCallback+0xc4>
        }
        else if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_RESET)
 800172a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800172e:	4863      	ldr	r0, [pc, #396]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001730:	f002 fb7c 	bl	8003e2c <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_TIM_PeriodElapsedCallback+0xc4>
        {
        	GrayData[0] = 0;
 800173a:	4b58      	ldr	r3, [pc, #352]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_SET)
 8001740:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001744:	485d      	ldr	r0, [pc, #372]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001746:	f002 fb71 	bl	8003e2c <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d103      	bne.n	8001758 <HAL_TIM_PeriodElapsedCallback+0xdc>
        {
        	GrayData[1] = 1;
 8001750:	4b52      	ldr	r3, [pc, #328]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001752:	2201      	movs	r2, #1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e00a      	b.n	800176e <HAL_TIM_PeriodElapsedCallback+0xf2>
        }
        else if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_RESET)
 8001758:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800175c:	4857      	ldr	r0, [pc, #348]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 800175e:	f002 fb65 	bl	8003e2c <HAL_GPIO_ReadPin>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0xf2>
        {
        	GrayData[1] = 0;
 8001768:	4b4c      	ldr	r3, [pc, #304]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
        }
        if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_SET)
 800176e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001772:	4852      	ldr	r0, [pc, #328]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001774:	f002 fb5a 	bl	8003e2c <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d103      	bne.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x10a>
        {
        	GrayData[2] = 1;
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001780:	2201      	movs	r2, #1
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	e00a      	b.n	800179c <HAL_TIM_PeriodElapsedCallback+0x120>
        }
        else if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_RESET)
 8001786:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800178a:	484c      	ldr	r0, [pc, #304]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 800178c:	f002 fb4e 	bl	8003e2c <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_TIM_PeriodElapsedCallback+0x120>
        {
        	GrayData[2] = 0;
 8001796:	4b41      	ldr	r3, [pc, #260]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
        }
        if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_SET)
 800179c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017a0:	4846      	ldr	r0, [pc, #280]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017a2:	f002 fb43 	bl	8003e2c <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d103      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0x138>
        {
        	GrayData[3] = 1;
 80017ac:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	e00a      	b.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x14e>
        }
        else if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_RESET)
 80017b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b8:	4840      	ldr	r0, [pc, #256]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017ba:	f002 fb37 	bl	8003e2c <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x14e>
        {
        	GrayData[3] = 0;
 80017c4:	4b35      	ldr	r3, [pc, #212]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
        }
        if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_SET)
 80017ca:	2180      	movs	r1, #128	@ 0x80
 80017cc:	483b      	ldr	r0, [pc, #236]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017ce:	f002 fb2d 	bl	8003e2c <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d103      	bne.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0x164>
        {
        	GrayData[4] = 1;
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017da:	2201      	movs	r2, #1
 80017dc:	611a      	str	r2, [r3, #16]
	{
		if(COUNTERNUMRIGHT < 10000)	EngineRight.loopNum++;         //向上计数超过10000，正溢出+1
		else if(COUNTERNUMRIGHT > 10000)	EngineRight.loopNum--;     //向下计数小于0，负溢出+1
		__HAL_TIM_SetCounter(&htim8, 10000);             //重新设定初始�????
	}
}
 80017de:	e053      	b.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x20c>
        else if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_RESET)
 80017e0:	2180      	movs	r1, #128	@ 0x80
 80017e2:	4836      	ldr	r0, [pc, #216]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017e4:	f002 fb22 	bl	8003e2c <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d14c      	bne.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x20c>
        	GrayData[4] = 0;
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
}
 80017f4:	e048      	b.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x20c>
	else if(htim->Instance == htim1.Instance)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b31      	ldr	r3, [pc, #196]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d11e      	bne.n	8001840 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		if(COUNTERNUMLEFT < 10000)	EngineLeft.loopNum++;         //向上计数超过10000，正溢出+1
 8001802:	4b2f      	ldr	r3, [pc, #188]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	f242 720f 	movw	r2, #9999	@ 0x270f
 800180c:	4293      	cmp	r3, r2
 800180e:	d805      	bhi.n	800181c <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8001810:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	3301      	adds	r3, #1
 8001816:	4a2b      	ldr	r2, [pc, #172]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001818:	6093      	str	r3, [r2, #8]
 800181a:	e00b      	b.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		else if(COUNTERNUMLEFT > 10000)	EngineLeft.loopNum--;     //向下计数小于0，负溢出+1
 800181c:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001826:	4293      	cmp	r3, r2
 8001828:	d904      	bls.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 800182a:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a24      	ldr	r2, [pc, #144]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001832:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SetCounter(&htim1, 10000);             //重新设定初始�????
 8001834:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f242 7210 	movw	r2, #10000	@ 0x2710
 800183c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800183e:	e023      	b.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x20c>
	else if(htim->Instance == htim8.Instance)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d11d      	bne.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x20c>
		if(COUNTERNUMRIGHT < 10000)	EngineRight.loopNum++;         //向上计数超过10000，正溢出+1
 800184c:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001856:	4293      	cmp	r3, r2
 8001858:	d805      	bhi.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	3301      	adds	r3, #1
 8001860:	4a1a      	ldr	r2, [pc, #104]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001862:	6093      	str	r3, [r2, #8]
 8001864:	e00b      	b.n	800187e <HAL_TIM_PeriodElapsedCallback+0x202>
		else if(COUNTERNUMRIGHT > 10000)	EngineRight.loopNum--;     //向下计数小于0，负溢出+1
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001870:	4293      	cmp	r3, r2
 8001872:	d904      	bls.n	800187e <HAL_TIM_PeriodElapsedCallback+0x202>
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x250>)
 800187c:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SetCounter(&htim8, 10000);             //重新设定初始�????
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001886:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	20000424 	.word	0x20000424
 8001894:	200002dc 	.word	0x200002dc
 8001898:	200002b8 	.word	0x200002b8
 800189c:	200002c8 	.word	0x200002c8
 80018a0:	200002c4 	.word	0x200002c4
 80018a4:	0800b4a8 	.word	0x0800b4a8
 80018a8:	200001f0 	.word	0x200001f0
 80018ac:	20000544 	.word	0x20000544
 80018b0:	2000058c 	.word	0x2000058c
 80018b4:	2000046c 	.word	0x2000046c
 80018b8:	200002bc 	.word	0x200002bc
 80018bc:	40021000 	.word	0x40021000
 80018c0:	20000304 	.word	0x20000304
 80018c4:	200002e0 	.word	0x200002e0
 80018c8:	200004b4 	.word	0x200004b4
 80018cc:	200002f0 	.word	0x200002f0

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b0a0      	sub	sp, #128	@ 0x80
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d6:	f001 fb63 	bl	8002fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018da:	f000 f8df 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f7ff fe1b 	bl	8001518 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e2:	f7ff fb7f 	bl	8000fe4 <MX_DMA_Init>
  MX_TIM9_Init();
 80018e6:	f000 ff4b 	bl	8002780 <MX_TIM9_Init>
  MX_TIM2_Init();
 80018ea:	f000 fd09 	bl	8002300 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018ee:	f000 fd53 	bl	8002398 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018f2:	f000 fddd 	bl	80024b0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80018f6:	f001 f97d 	bl	8002bf4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80018fa:	f000 fe65 	bl	80025c8 <MX_TIM5_Init>
  MX_TIM1_Init();
 80018fe:	f000 fca7 	bl	8002250 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001902:	f000 feaf 	bl	8002664 <MX_TIM6_Init>
  MX_TIM8_Init();
 8001906:	f000 fee3 	bl	80026d0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 800190a:	f001 f99d 	bl	8002c48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Engine_Init();
 800190e:	f000 fa75 	bl	8001dfc <Engine_Init>
  Motor_Init();
 8001912:	f000 fabd 	bl	8001e90 <Motor_Init>
  GraySensor_Init();
 8001916:	f000 fad1 	bl	8001ebc <GraySensor_Init>
  HAL_TIM_Base_Start_IT(&htim5);//初始化TIM5，用于发送非阻塞信息
 800191a:	485d      	ldr	r0, [pc, #372]	@ (8001a90 <main+0x1c0>)
 800191c:	f002 ffb8 	bl	8004890 <HAL_TIM_Base_Start_IT>

  HAL_Delay(3000);
 8001920:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001924:	f001 fbae 	bl	8003084 <HAL_Delay>
  Motor_Position(2);
 8001928:	2002      	movs	r0, #2
 800192a:	f7ff fb93 	bl	8001054 <Motor_Position>

  int path[30] = {3, 3, 2, 3, 3, 1, 3, 3, 1, 3, 3, 0};
 800192e:	463b      	mov	r3, r7
 8001930:	2278      	movs	r2, #120	@ 0x78
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f006 f9d4 	bl	8007ce2 <memset>
 800193a:	2303      	movs	r3, #3
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	2303      	movs	r3, #3
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	2302      	movs	r3, #2
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	2303      	movs	r3, #3
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	2303      	movs	r3, #3
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	2301      	movs	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	2303      	movs	r3, #3
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	2303      	movs	r3, #3
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	2303      	movs	r3, #3
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(path[cross_cnt] == 0){
 8001966:	4b4b      	ldr	r3, [pc, #300]	@ (8001a94 <main+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	3380      	adds	r3, #128	@ 0x80
 800196e:	443b      	add	r3, r7
 8001970:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10f      	bne.n	8001998 <main+0xc8>
		  Move_Twin_Wheels(-70, -70);
 8001978:	f06f 0145 	mvn.w	r1, #69	@ 0x45
 800197c:	f06f 0045 	mvn.w	r0, #69	@ 0x45
 8001980:	f000 f95c 	bl	8001c3c <Move_Twin_Wheels>
	      HAL_Delay(310);
 8001984:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001988:	f001 fb7c 	bl	8003084 <HAL_Delay>
		  Move_Twin_Wheels(0, 0);
 800198c:	2100      	movs	r1, #0
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f954 	bl	8001c3c <Move_Twin_Wheels>
		  while(1);
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <main+0xc4>
	  }else if(path[cross_cnt] == 1){
 8001998:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <main+0x1c4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	3380      	adds	r3, #128	@ 0x80
 80019a0:	443b      	add	r3, r7
 80019a2:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d11a      	bne.n	80019e0 <main+0x110>
		  Move_Turn(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff fb72 	bl	8001094 <Move_Turn>
		  Position_Adj(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fbd3 	bl	800115c <Position_Adj>
		  Motor_Position(2);
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff fb4c 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 80019bc:	4b35      	ldr	r3, [pc, #212]	@ (8001a94 <main+0x1c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a34      	ldr	r2, [pc, #208]	@ (8001a94 <main+0x1c4>)
 80019c4:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < 20; i++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019ca:	e005      	b.n	80019d8 <main+0x108>
			  Move_Straight(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff fca7 	bl	8001320 <Move_Straight>
		  for(int i = 0; i < 20; i++){
 80019d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019d4:	3301      	adds	r3, #1
 80019d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019da:	2b13      	cmp	r3, #19
 80019dc:	ddf6      	ble.n	80019cc <main+0xfc>
 80019de:	e02f      	b.n	8001a40 <main+0x170>
		  }
	  }else if(path[cross_cnt] == 2){
 80019e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <main+0x1c4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	3380      	adds	r3, #128	@ 0x80
 80019e8:	443b      	add	r3, r7
 80019ea:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d11a      	bne.n	8001a28 <main+0x158>
		  Move_Turn(2);
 80019f2:	2002      	movs	r0, #2
 80019f4:	f7ff fb4e 	bl	8001094 <Move_Turn>
		  Position_Adj(2);
 80019f8:	2002      	movs	r0, #2
 80019fa:	f7ff fbaf 	bl	800115c <Position_Adj>
		  Motor_Position(2);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff fb28 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 8001a04:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <main+0x1c4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <main+0x1c4>)
 8001a0c:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < 20; i++){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a12:	e005      	b.n	8001a20 <main+0x150>
			  Move_Straight(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff fc83 	bl	8001320 <Move_Straight>
		  for(int i = 0; i < 20; i++){
 8001a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a22:	2b13      	cmp	r3, #19
 8001a24:	ddf6      	ble.n	8001a14 <main+0x144>
 8001a26:	e00b      	b.n	8001a40 <main+0x170>
		  }
	  }else if(path[cross_cnt] == 3){
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <main+0x1c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	3380      	adds	r3, #128	@ 0x80
 8001a30:	443b      	add	r3, r7
 8001a32:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d102      	bne.n	8001a40 <main+0x170>
		  Move_Straight(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fc70 	bl	8001320 <Move_Straight>
	  }

	  if(Judge_cross() == 1){
 8001a40:	f7ff fd4a 	bl	80014d8 <Judge_cross>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <main+0x18a>
		  cross_cnt++;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <main+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <main+0x1c4>)
 8001a52:	6013      	str	r3, [r2, #0]
          HAL_Delay(100);
 8001a54:	2064      	movs	r0, #100	@ 0x64
 8001a56:	f001 fb15 	bl	8003084 <HAL_Delay>
	  }

      if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // �????测到按键按下
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	480e      	ldr	r0, [pc, #56]	@ (8001a98 <main+0x1c8>)
 8001a5e:	f002 f9e5 	bl	8003e2c <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f47f af7e 	bne.w	8001966 <main+0x96>
      {
          HAL_Delay(50); // �????单延迟，以便于消�????
 8001a6a:	2032      	movs	r0, #50	@ 0x32
 8001a6c:	f001 fb0a 	bl	8003084 <HAL_Delay>
          if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // 再次确认按键确实被按�????
 8001a70:	2110      	movs	r1, #16
 8001a72:	4809      	ldr	r0, [pc, #36]	@ (8001a98 <main+0x1c8>)
 8001a74:	f002 f9da 	bl	8003e2c <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f47f af73 	bne.w	8001966 <main+0x96>
          {
        	  HAL_PWR_EnterSTANDBYMode();
 8001a80:	f002 fa06 	bl	8003e90 <HAL_PWR_EnterSTANDBYMode>
        	  break;
 8001a84:	bf00      	nop
 8001a86:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3780      	adds	r7, #128	@ 0x80
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000424 	.word	0x20000424
 8001a94:	200002c4 	.word	0x200002c4
 8001a98:	40021000 	.word	0x40021000

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	@ 0x50
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0320 	add.w	r3, r7, #32
 8001aa6:	2230      	movs	r2, #48	@ 0x30
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f006 f919 	bl	8007ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <SystemClock_Config+0xcc>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	4a27      	ldr	r2, [pc, #156]	@ (8001b68 <SystemClock_Config+0xcc>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad0:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <SystemClock_Config+0xcc>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <SystemClock_Config+0xd0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a21      	ldr	r2, [pc, #132]	@ (8001b6c <SystemClock_Config+0xd0>)
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <SystemClock_Config+0xd0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2302      	movs	r3, #2
 8001b04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b10:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001b14:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1e:	f107 0320 	add.w	r3, r7, #32
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 f9cc 	bl	8003ec0 <HAL_RCC_OscConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b2e:	f000 f81f 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b32:	230f      	movs	r3, #15
 8001b34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b36:	2302      	movs	r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2105      	movs	r1, #5
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fc2d 	bl	80043b0 <HAL_RCC_ClockConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b5c:	f000 f808 	bl	8001b70 <Error_Handler>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3750      	adds	r7, #80	@ 0x50
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <Error_Handler+0x8>

08001b7c <Move_Left>:
Engine EngineLeft;
Engine EngineRight;

//TIM3左轮 TIM4右轮
void Move_Left(int velocity)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0e      	blt.n	8001ba8 <Move_Left+0x2c>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2108      	movs	r1, #8
 8001b8e:	4811      	ldr	r0, [pc, #68]	@ (8001bd4 <Move_Left+0x58>)
 8001b90:	f002 f964 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2104      	movs	r1, #4
 8001b98:	480e      	ldr	r0, [pc, #56]	@ (8001bd4 <Move_Left+0x58>)
 8001b9a:	f002 f95f 	bl	8003e5c <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, velocity);
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <Move_Left+0x5c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
		}
}
 8001ba6:	e011      	b.n	8001bcc <Move_Left+0x50>
		else if(velocity < 0){
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da0e      	bge.n	8001bcc <Move_Left+0x50>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	4808      	ldr	r0, [pc, #32]	@ (8001bd4 <Move_Left+0x58>)
 8001bb4:	f002 f952 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2104      	movs	r1, #4
 8001bbc:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <Move_Left+0x58>)
 8001bbe:	f002 f94d 	bl	8003e5c <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	425a      	negs	r2, r3
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <Move_Left+0x5c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	20000394 	.word	0x20000394

08001bdc <Move_Right>:

void Move_Right(int velocity)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0e      	blt.n	8001c08 <Move_Right+0x2c>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2102      	movs	r1, #2
 8001bee:	4811      	ldr	r0, [pc, #68]	@ (8001c34 <Move_Right+0x58>)
 8001bf0:	f002 f934 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	480e      	ldr	r0, [pc, #56]	@ (8001c34 <Move_Right+0x58>)
 8001bfa:	f002 f92f 	bl	8003e5c <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, velocity);
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <Move_Right+0x5c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
		}
}
 8001c06:	e011      	b.n	8001c2c <Move_Right+0x50>
		else if(velocity < 0){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da0e      	bge.n	8001c2c <Move_Right+0x50>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2102      	movs	r1, #2
 8001c12:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <Move_Right+0x58>)
 8001c14:	f002 f922 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <Move_Right+0x58>)
 8001c1e:	f002 f91d 	bl	8003e5c <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	425a      	negs	r2, r3
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <Move_Right+0x5c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	200003dc 	.word	0x200003dc

08001c3c <Move_Twin_Wheels>:
//分别控制左右轮 velocity 范围 -100 - -50  50 - 100

void Move_Twin_Wheels(int velocity_1 ,int velocity_2)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	Move_Left(velocity_2);
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	f7ff ff98 	bl	8001b7c <Move_Left>
	Move_Right(velocity_1);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ffc5 	bl	8001bdc <Move_Right>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <Read_Rotational_Speed>:
//velocity_1 是左轮， velocity_2 是右轮
//这里存在错误！Left Right 反了！但是上面那行注释正确
//65， 63几乎直行（偏右）

float Read_Rotational_Speed(int n)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	float rotational_speed = 0;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
	if(n == 0)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d137      	bne.n	8001ce0 <Read_Rotational_Speed+0x84>
	{
		int16_t pluse = COUNTERNUMLEFT - RELOADVALUELEFT/2;
 8001c70:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <Read_Rotational_Speed+0x110>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b3c      	ldr	r3, [pc, #240]	@ (8001d6c <Read_Rotational_Speed+0x110>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	813b      	strh	r3, [r7, #8]
        //从开始到现在当前10ms的总脉冲数
		EngineLeft.totalAngle = pluse + EngineLeft.loopNum * RELOADVALUELEFT/2;
 8001c88:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c8c:	4b38      	ldr	r3, [pc, #224]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4619      	mov	r1, r3
 8001c92:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <Read_Rotational_Speed+0x110>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b33      	ldr	r3, [pc, #204]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001ca4:	605a      	str	r2, [r3, #4]
        //进行速度计算,4倍频,编码器11位,减速比56,再乘以6000即为每分钟输出轴多少转
        //motor.totalAngle - motor.lastAngle为当前10ms内的增量，即脉冲数
		EngineLeft.speed = (float)(EngineLeft.totalAngle - EngineLeft.lastAngle)/(4*11*RR)*6000;
 8001ca6:	4b32      	ldr	r3, [pc, #200]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb8:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001d74 <Read_Rotational_Speed+0x118>
 8001cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001d78 <Read_Rotational_Speed+0x11c>
 8001cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc8:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001cca:	edc3 7a03 	vstr	s15, [r3, #12]
		rotational_speed = EngineLeft.speed;
 8001cce:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	60fb      	str	r3, [r7, #12]
		EngineLeft.lastAngle = EngineLeft.totalAngle;              //更新转过的圈数
 8001cd4:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a25      	ldr	r2, [pc, #148]	@ (8001d70 <Read_Rotational_Speed+0x114>)
 8001cda:	6013      	str	r3, [r2, #0]
		return rotational_speed;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	e03c      	b.n	8001d5a <Read_Rotational_Speed+0xfe>
	}

    //如果是编码器更新中断,即10ms内,脉冲数超过了计数范围,需要进行处理
	else if(n == 1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d137      	bne.n	8001d56 <Read_Rotational_Speed+0xfa>
	{
		int16_t pluse = COUNTERNUMRIGHT - RELOADVALUERIGHT/2;
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <Read_Rotational_Speed+0x120>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <Read_Rotational_Speed+0x120>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	817b      	strh	r3, [r7, #10]
        //从开始到现在当前10ms的总脉冲数
		EngineRight.totalAngle = pluse + EngineRight.loopNum * RELOADVALUERIGHT/2;
 8001cfe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <Read_Rotational_Speed+0x120>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d1a:	605a      	str	r2, [r3, #4]
        //进行速度计算,4倍频,编码器11位,减速比56,再乘以6000即为每分钟输出轴多少转
        //motor.totalAngle - motor.lastAngle为当前10ms内的增量，即脉冲数
		EngineRight.speed = (float)(EngineRight.totalAngle - EngineRight.lastAngle)/(4*11*RR)*6000;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001d74 <Read_Rotational_Speed+0x118>
 8001d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d36:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001d78 <Read_Rotational_Speed+0x11c>
 8001d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d40:	edc3 7a03 	vstr	s15, [r3, #12]
		rotational_speed = EngineRight.speed;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60fb      	str	r3, [r7, #12]
		EngineRight.lastAngle = EngineRight.totalAngle;              //更新转过的圈数
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <Read_Rotational_Speed+0x124>)
 8001d50:	6013      	str	r3, [r2, #0]
		return rotational_speed;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	e001      	b.n	8001d5a <Read_Rotational_Speed+0xfe>
	}
	else
		return 0;
 8001d56:	f04f 0300 	mov.w	r3, #0
}
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000304 	.word	0x20000304
 8001d70:	200002e0 	.word	0x200002e0
 8001d74:	451a0000 	.word	0x451a0000
 8001d78:	45bb8000 	.word	0x45bb8000
 8001d7c:	200004b4 	.word	0x200004b4
 8001d80:	200002f0 	.word	0x200002f0
 8001d84:	00000000 	.word	0x00000000

08001d88 <Motor_Control>:
//n=0读左轮转速，n=1读右轮转速


void Motor_Control(int duty_cycle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    // 舵机控制占空比范围2.5% ~ 12.5%
    // Counter Period设置的是2000，因此占空比设置范围是50 ~ 250
	Motor_angel = duty_cycle * 0.9 - 45;
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fbc7 	bl	8000524 <__aeabi_i2d>
 8001d96:	a317      	add	r3, pc, #92	@ (adr r3, 8001df4 <Motor_Control+0x6c>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <Motor_Control+0x60>)
 8001dae:	f7fe fa6b 	bl	8000288 <__aeabi_dsub>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe ff15 	bl	8000be8 <__aeabi_d2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <Motor_Control+0x64>)
 8001dc2:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 50 + duty_cycle);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <Motor_Control+0x68>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 250 - duty_cycle);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f1c3 02fa 	rsb	r2, r3, #250	@ 0xfa
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <Motor_Control+0x68>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	f3af 8000 	nop.w
 8001de8:	40468000 	.word	0x40468000
 8001dec:	200002dc 	.word	0x200002dc
 8001df0:	200004fc 	.word	0x200004fc
 8001df4:	cccccccd 	.word	0xcccccccd
 8001df8:	3feccccc 	.word	0x3feccccc

08001dfc <Engine_Init>:
//要先初始化再装在车上
//50-250表示0-180度，duty_cycle的范围是0-200
//输入0为初始状态（完全张开），输入65为完全收缩，输入35为装载物块后的收紧值

void Engine_Init()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);      //开启编码器定时器
 8001e00:	213c      	movs	r1, #60	@ 0x3c
 8001e02:	481c      	ldr	r0, [pc, #112]	@ (8001e74 <Engine_Init+0x78>)
 8001e04:	f002 ffca 	bl	8004d9c <HAL_TIM_Encoder_Start>
    __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);           //开启编码器定时器更新中断,防溢出处理
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <Engine_Init+0x78>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <Engine_Init+0x78>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001e18:	213c      	movs	r1, #60	@ 0x3c
 8001e1a:	4817      	ldr	r0, [pc, #92]	@ (8001e78 <Engine_Init+0x7c>)
 8001e1c:	f002 ffbe 	bl	8004d9c <HAL_TIM_Encoder_Start>
    __HAL_TIM_ENABLE_IT(&htim8,TIM_IT_UPDATE);
 8001e20:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <Engine_Init+0x7c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <Engine_Init+0x7c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);                       //开启10ms定时器中断
 8001e30:	4812      	ldr	r0, [pc, #72]	@ (8001e7c <Engine_Init+0x80>)
 8001e32:	f002 fd2d 	bl	8004890 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001e36:	2100      	movs	r1, #0
 8001e38:	4811      	ldr	r0, [pc, #68]	@ (8001e80 <Engine_Init+0x84>)
 8001e3a:	f002 fdf3 	bl	8004a24 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4810      	ldr	r0, [pc, #64]	@ (8001e84 <Engine_Init+0x88>)
 8001e42:	f002 fdef 	bl	8004a24 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 10000);
 8001e46:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <Engine_Init+0x78>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim8, 10000);
 8001e50:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <Engine_Init+0x7c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
	EngineLeft.loopNum = 0;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <Engine_Init+0x8c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
	EngineRight.loopNum = 0;
 8001e60:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <Engine_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
	Move_Twin_Wheels(0, 0);
 8001e66:	2100      	movs	r1, #0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fee7 	bl	8001c3c <Move_Twin_Wheels>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000304 	.word	0x20000304
 8001e78:	200004b4 	.word	0x200004b4
 8001e7c:	2000046c 	.word	0x2000046c
 8001e80:	20000394 	.word	0x20000394
 8001e84:	200003dc 	.word	0x200003dc
 8001e88:	200002e0 	.word	0x200002e0
 8001e8c:	200002f0 	.word	0x200002f0

08001e90 <Motor_Init>:


void Motor_Init()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
 8001e94:	2100      	movs	r1, #0
 8001e96:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <Motor_Init+0x28>)
 8001e98:	f002 fdc4 	bl	8004a24 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_2);
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	4806      	ldr	r0, [pc, #24]	@ (8001eb8 <Motor_Init+0x28>)
 8001ea0:	f002 fdc0 	bl	8004a24 <HAL_TIM_PWM_Start_IT>
	Motor_Control(65);
 8001ea4:	2041      	movs	r0, #65	@ 0x41
 8001ea6:	f7ff ff6f 	bl	8001d88 <Motor_Control>
	HAL_Delay(1000);
 8001eaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001eae:	f001 f8e9 	bl	8003084 <HAL_Delay>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200004fc 	.word	0x200004fc

08001ebc <GraySensor_Init>:
//延时0.8s保证姿态调整正常

void GraySensor_Init()
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	GrayData[0] = 0;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <GraySensor_Init+0x2c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
	GrayData[1] = 0;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <GraySensor_Init+0x2c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
	GrayData[2] = 0;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <GraySensor_Init+0x2c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
	GrayData[3] = 0;
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <GraySensor_Init+0x2c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
	GrayData[4] = 0;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <GraySensor_Init+0x2c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	200002c8 	.word	0x200002c8

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_MspInit+0x4c>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	4a0f      	ldr	r2, [pc, #60]	@ (8001f38 <HAL_MspInit+0x4c>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_MspInit+0x4c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <HAL_MspInit+0x4c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	4a08      	ldr	r2, [pc, #32]	@ (8001f38 <HAL_MspInit+0x4c>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1e:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <HAL_MspInit+0x4c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <NMI_Handler+0x4>

08001f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <HardFault_Handler+0x4>

08001f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <MemManage_Handler+0x4>

08001f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f92:	f001 f857 	bl	8003044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <DMA1_Stream1_IRQHandler+0x10>)
 8001fa2:	f001 fb3d 	bl	8003620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000694 	.word	0x20000694

08001fb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <DMA1_Stream3_IRQHandler+0x10>)
 8001fb6:	f001 fb33 	bl	8003620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200006f4 	.word	0x200006f4

08001fc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <DMA1_Stream5_IRQHandler+0x10>)
 8001fca:	f001 fb29 	bl	8003620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200005d4 	.word	0x200005d4

08001fd8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <DMA1_Stream6_IRQHandler+0x10>)
 8001fde:	f001 fb1f 	bl	8003620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000634 	.word	0x20000634

08001fec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ff2:	f002 ff61 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000304 	.word	0x20000304

08002000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <TIM2_IRQHandler+0x10>)
 8002006:	f002 ff57 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000034c 	.word	0x2000034c

08002014 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <TIM3_IRQHandler+0x10>)
 800201a:	f002 ff4d 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000394 	.word	0x20000394

08002028 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <TIM4_IRQHandler+0x10>)
 800202e:	f002 ff43 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200003dc 	.word	0x200003dc

0800203c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <USART2_IRQHandler+0x10>)
 8002042:	f003 ff19 	bl	8005e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000544 	.word	0x20000544

08002050 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <USART3_IRQHandler+0x10>)
 8002056:	f003 ff0f 	bl	8005e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000058c 	.word	0x2000058c

08002064 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800206a:	f002 ff25 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200004b4 	.word	0x200004b4

08002078 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TIM5_IRQHandler+0x10>)
 800207e:	f002 ff1b 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000424 	.word	0x20000424

0800208c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <TIM6_DAC_IRQHandler+0x10>)
 8002092:	f002 ff11 	bl	8004eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000046c 	.word	0x2000046c

080020a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_kill>:

int _kill(int pid, int sig)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ba:	f005 fe65 	bl	8007d88 <__errno>
 80020be:	4603      	mov	r3, r0
 80020c0:	2216      	movs	r2, #22
 80020c2:	601a      	str	r2, [r3, #0]
  return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_exit>:

void _exit (int status)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe7 	bl	80020b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <_exit+0x12>

080020e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e00a      	b.n	800210e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020f8:	f3af 8000 	nop.w
 80020fc:	4601      	mov	r1, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	60ba      	str	r2, [r7, #8]
 8002104:	b2ca      	uxtb	r2, r1
 8002106:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	dbf0      	blt.n	80020f8 <_read+0x12>
  }

  return len;
 8002116:	687b      	ldr	r3, [r7, #4]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e009      	b.n	8002146 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	60ba      	str	r2, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3301      	adds	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbf1      	blt.n	8002132 <_write+0x12>
  }
  return len;
 800214e:	687b      	ldr	r3, [r7, #4]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_close>:

int _close(int file)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002180:	605a      	str	r2, [r3, #4]
  return 0;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_isatty>:

int _isatty(int file)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002198:	2301      	movs	r3, #1
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <_sbrk+0x5c>)
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <_sbrk+0x60>)
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d4:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <_sbrk+0x64>)
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <_sbrk+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d207      	bcs.n	8002200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f0:	f005 fdca 	bl	8007d88 <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	220c      	movs	r2, #12
 80021f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e009      	b.n	8002214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002200:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <_sbrk+0x64>)
 8002210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20020000 	.word	0x20020000
 8002220:	00000400 	.word	0x00000400
 8002224:	20000300 	.word	0x20000300
 8002228:	200008a8 	.word	0x200008a8

0800222c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	@ 0x30
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	2224      	movs	r2, #36	@ 0x24
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f005 fd3f 	bl	8007ce2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800226c:	4b22      	ldr	r3, [pc, #136]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 800226e:	4a23      	ldr	r2, [pc, #140]	@ (80022fc <MX_TIM1_Init+0xac>)
 8002270:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002272:	4b21      	ldr	r3, [pc, #132]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002278:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800227e:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 8002280:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002284:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002286:	4b1c      	ldr	r3, [pc, #112]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800228c:	4b1a      	ldr	r3, [pc, #104]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 800228e:	2200      	movs	r2, #0
 8002290:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002292:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002298:	2301      	movs	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022a0:	2301      	movs	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	4619      	mov	r1, r3
 80022c2:	480d      	ldr	r0, [pc, #52]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 80022c4:	f002 fcc4 	bl	8004c50 <HAL_TIM_Encoder_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80022ce:	f7ff fc4f 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	@ (80022f8 <MX_TIM1_Init+0xa8>)
 80022e0:	f003 fc7a 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022ea:	f7ff fc41 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	@ 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000304 	.word	0x20000304
 80022fc:	40010000 	.word	0x40010000

08002300 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	463b      	mov	r3, r7
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800231c:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <MX_TIM2_Init+0x94>)
 800231e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002322:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <MX_TIM2_Init+0x94>)
 8002326:	2253      	movs	r2, #83	@ 0x53
 8002328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <MX_TIM2_Init+0x94>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002330:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <MX_TIM2_Init+0x94>)
 8002332:	2263      	movs	r2, #99	@ 0x63
 8002334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <MX_TIM2_Init+0x94>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233c:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <MX_TIM2_Init+0x94>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002342:	4814      	ldr	r0, [pc, #80]	@ (8002394 <MX_TIM2_Init+0x94>)
 8002344:	f002 fa54 	bl	80047f0 <HAL_TIM_Base_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800234e:	f7ff fc0f 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	@ (8002394 <MX_TIM2_Init+0x94>)
 8002360:	f002 ff5c 	bl	800521c <HAL_TIM_ConfigClockSource>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800236a:	f7ff fc01 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002376:	463b      	mov	r3, r7
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	@ (8002394 <MX_TIM2_Init+0x94>)
 800237c:	f003 fc2c 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002386:	f7ff fbf3 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	2000034c 	.word	0x2000034c

08002398 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b092      	sub	sp, #72	@ 0x48
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c6:	463b      	mov	r3, r7
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
 80023d4:	615a      	str	r2, [r3, #20]
 80023d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023d8:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <MX_TIM3_Init+0x110>)
 80023da:	4a34      	ldr	r2, [pc, #208]	@ (80024ac <MX_TIM3_Init+0x114>)
 80023dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80023de:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <MX_TIM3_Init+0x110>)
 80023e0:	2253      	movs	r2, #83	@ 0x53
 80023e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b30      	ldr	r3, [pc, #192]	@ (80024a8 <MX_TIM3_Init+0x110>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80023ea:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <MX_TIM3_Init+0x110>)
 80023ec:	2263      	movs	r2, #99	@ 0x63
 80023ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b2d      	ldr	r3, [pc, #180]	@ (80024a8 <MX_TIM3_Init+0x110>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <MX_TIM3_Init+0x110>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023fc:	482a      	ldr	r0, [pc, #168]	@ (80024a8 <MX_TIM3_Init+0x110>)
 80023fe:	f002 f9f7 	bl	80047f0 <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002408:	f7ff fbb2 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002412:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002416:	4619      	mov	r1, r3
 8002418:	4823      	ldr	r0, [pc, #140]	@ (80024a8 <MX_TIM3_Init+0x110>)
 800241a:	f002 feff 	bl	800521c <HAL_TIM_ConfigClockSource>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002424:	f7ff fba4 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002428:	481f      	ldr	r0, [pc, #124]	@ (80024a8 <MX_TIM3_Init+0x110>)
 800242a:	f002 faa1 	bl	8004970 <HAL_TIM_PWM_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002434:	f7ff fb9c 	bl	8001b70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800243c:	2310      	movs	r3, #16
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002444:	4619      	mov	r1, r3
 8002446:	4818      	ldr	r0, [pc, #96]	@ (80024a8 <MX_TIM3_Init+0x110>)
 8002448:	f002 ffaf 	bl	80053aa <HAL_TIM_SlaveConfigSynchro>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8002452:	f7ff fb8d 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002456:	2320      	movs	r3, #32
 8002458:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	4810      	ldr	r0, [pc, #64]	@ (80024a8 <MX_TIM3_Init+0x110>)
 8002466:	f003 fbb7 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002470:	f7ff fb7e 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002474:	2360      	movs	r3, #96	@ 0x60
 8002476:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002484:	463b      	mov	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	4619      	mov	r1, r3
 800248a:	4807      	ldr	r0, [pc, #28]	@ (80024a8 <MX_TIM3_Init+0x110>)
 800248c:	f002 fe04 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002496:	f7ff fb6b 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800249a:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <MX_TIM3_Init+0x110>)
 800249c:	f000 fb20 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 80024a0:	bf00      	nop
 80024a2:	3748      	adds	r7, #72	@ 0x48
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000394 	.word	0x20000394
 80024ac:	40000400 	.word	0x40000400

080024b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b092      	sub	sp, #72	@ 0x48
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80024c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024de:	463b      	mov	r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
 80024ec:	615a      	str	r2, [r3, #20]
 80024ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024f0:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <MX_TIM4_Init+0x110>)
 80024f2:	4a34      	ldr	r2, [pc, #208]	@ (80025c4 <MX_TIM4_Init+0x114>)
 80024f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80024f6:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <MX_TIM4_Init+0x110>)
 80024f8:	2253      	movs	r2, #83	@ 0x53
 80024fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fc:	4b30      	ldr	r3, [pc, #192]	@ (80025c0 <MX_TIM4_Init+0x110>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <MX_TIM4_Init+0x110>)
 8002504:	2263      	movs	r2, #99	@ 0x63
 8002506:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b2d      	ldr	r3, [pc, #180]	@ (80025c0 <MX_TIM4_Init+0x110>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250e:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <MX_TIM4_Init+0x110>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002514:	482a      	ldr	r0, [pc, #168]	@ (80025c0 <MX_TIM4_Init+0x110>)
 8002516:	f002 f96b 	bl	80047f0 <HAL_TIM_Base_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002520:	f7ff fb26 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002528:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800252a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800252e:	4619      	mov	r1, r3
 8002530:	4823      	ldr	r0, [pc, #140]	@ (80025c0 <MX_TIM4_Init+0x110>)
 8002532:	f002 fe73 	bl	800521c <HAL_TIM_ConfigClockSource>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800253c:	f7ff fb18 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002540:	481f      	ldr	r0, [pc, #124]	@ (80025c0 <MX_TIM4_Init+0x110>)
 8002542:	f002 fa15 	bl	8004970 <HAL_TIM_PWM_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800254c:	f7ff fb10 	bl	8001b70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002554:	2310      	movs	r3, #16
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	4818      	ldr	r0, [pc, #96]	@ (80025c0 <MX_TIM4_Init+0x110>)
 8002560:	f002 ff23 	bl	80053aa <HAL_TIM_SlaveConfigSynchro>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 800256a:	f7ff fb01 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4810      	ldr	r0, [pc, #64]	@ (80025c0 <MX_TIM4_Init+0x110>)
 800257e:	f003 fb2b 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8002588:	f7ff faf2 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800258c:	2360      	movs	r3, #96	@ 0x60
 800258e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	2200      	movs	r2, #0
 80025a0:	4619      	mov	r1, r3
 80025a2:	4807      	ldr	r0, [pc, #28]	@ (80025c0 <MX_TIM4_Init+0x110>)
 80025a4:	f002 fd78 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80025ae:	f7ff fadf 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025b2:	4803      	ldr	r0, [pc, #12]	@ (80025c0 <MX_TIM4_Init+0x110>)
 80025b4:	f000 fa94 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 80025b8:	bf00      	nop
 80025ba:	3748      	adds	r7, #72	@ 0x48
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200003dc 	.word	0x200003dc
 80025c4:	40000800 	.word	0x40000800

080025c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <MX_TIM5_Init+0x94>)
 80025e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002660 <MX_TIM5_Init+0x98>)
 80025e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <MX_TIM5_Init+0x94>)
 80025ec:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80025f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <MX_TIM5_Init+0x94>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <MX_TIM5_Init+0x94>)
 80025fa:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80025fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002600:	4b16      	ldr	r3, [pc, #88]	@ (800265c <MX_TIM5_Init+0x94>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <MX_TIM5_Init+0x94>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800260c:	4813      	ldr	r0, [pc, #76]	@ (800265c <MX_TIM5_Init+0x94>)
 800260e:	f002 f8ef 	bl	80047f0 <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002618:	f7ff faaa 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	4619      	mov	r1, r3
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <MX_TIM5_Init+0x94>)
 800262a:	f002 fdf7 	bl	800521c <HAL_TIM_ConfigClockSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002634:	f7ff fa9c 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002640:	463b      	mov	r3, r7
 8002642:	4619      	mov	r1, r3
 8002644:	4805      	ldr	r0, [pc, #20]	@ (800265c <MX_TIM5_Init+0x94>)
 8002646:	f003 fac7 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002650:	f7ff fa8e 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000424 	.word	0x20000424
 8002660:	40000c00 	.word	0x40000c00

08002664 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266a:	463b      	mov	r3, r7
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <MX_TIM6_Init+0x64>)
 8002674:	4a15      	ldr	r2, [pc, #84]	@ (80026cc <MX_TIM6_Init+0x68>)
 8002676:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002678:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <MX_TIM6_Init+0x64>)
 800267a:	2253      	movs	r2, #83	@ 0x53
 800267c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <MX_TIM6_Init+0x64>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002684:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <MX_TIM6_Init+0x64>)
 8002686:	f242 720f 	movw	r2, #9999	@ 0x270f
 800268a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <MX_TIM6_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002692:	480d      	ldr	r0, [pc, #52]	@ (80026c8 <MX_TIM6_Init+0x64>)
 8002694:	f002 f8ac 	bl	80047f0 <HAL_TIM_Base_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800269e:	f7ff fa67 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026aa:	463b      	mov	r3, r7
 80026ac:	4619      	mov	r1, r3
 80026ae:	4806      	ldr	r0, [pc, #24]	@ (80026c8 <MX_TIM6_Init+0x64>)
 80026b0:	f003 fa92 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026ba:	f7ff fa59 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000046c 	.word	0x2000046c
 80026cc:	40001000 	.word	0x40001000

080026d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	@ 0x30
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	2224      	movs	r2, #36	@ 0x24
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f005 faff 	bl	8007ce2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026ec:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <MX_TIM8_Init+0xa8>)
 80026ee:	4a23      	ldr	r2, [pc, #140]	@ (800277c <MX_TIM8_Init+0xac>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80026f2:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <MX_TIM8_Init+0xa8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <MX_TIM8_Init+0xa8>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <MX_TIM8_Init+0xa8>)
 8002700:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002704:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <MX_TIM8_Init+0xa8>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800270c:	4b1a      	ldr	r3, [pc, #104]	@ (8002778 <MX_TIM8_Init+0xa8>)
 800270e:	2200      	movs	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002712:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <MX_TIM8_Init+0xa8>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002718:	2301      	movs	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002720:	2301      	movs	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002730:	2301      	movs	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	4619      	mov	r1, r3
 8002742:	480d      	ldr	r0, [pc, #52]	@ (8002778 <MX_TIM8_Init+0xa8>)
 8002744:	f002 fa84 	bl	8004c50 <HAL_TIM_Encoder_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800274e:	f7ff fa0f 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	@ (8002778 <MX_TIM8_Init+0xa8>)
 8002760:	f003 fa3a 	bl	8005bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800276a:	f7ff fa01 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	3730      	adds	r7, #48	@ 0x30
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200004b4 	.word	0x200004b4
 800277c:	40010400 	.word	0x40010400

08002780 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	@ 0x30
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	615a      	str	r2, [r3, #20]
 80027a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80027a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <MX_TIM9_Init+0xd8>)
 80027aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1680-1;
 80027ac:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027ae:	f240 628f 	movw	r2, #1679	@ 0x68f
 80027b2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b4:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 80027ba:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027bc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80027c0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c2:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c8:	4b22      	ldr	r3, [pc, #136]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80027ce:	4821      	ldr	r0, [pc, #132]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027d0:	f002 f80e 	bl	80047f0 <HAL_TIM_Base_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 80027da:	f7ff f9c9 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80027e4:	f107 0320 	add.w	r3, r7, #32
 80027e8:	4619      	mov	r1, r3
 80027ea:	481a      	ldr	r0, [pc, #104]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027ec:	f002 fd16 	bl	800521c <HAL_TIM_ConfigClockSource>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 80027f6:	f7ff f9bb 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80027fa:	4816      	ldr	r0, [pc, #88]	@ (8002854 <MX_TIM9_Init+0xd4>)
 80027fc:	f002 f8b8 	bl	8004970 <HAL_TIM_PWM_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002806:	f7ff f9b3 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280a:	2360      	movs	r3, #96	@ 0x60
 800280c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2200      	movs	r2, #0
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	@ (8002854 <MX_TIM9_Init+0xd4>)
 8002822:	f002 fc39 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800282c:	f7ff f9a0 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	2204      	movs	r2, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4807      	ldr	r0, [pc, #28]	@ (8002854 <MX_TIM9_Init+0xd4>)
 8002838:	f002 fc2e 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8002842:	f7ff f995 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002846:	4803      	ldr	r0, [pc, #12]	@ (8002854 <MX_TIM9_Init+0xd4>)
 8002848:	f000 f94a 	bl	8002ae0 <HAL_TIM_MspPostInit>

}
 800284c:	bf00      	nop
 800284e:	3730      	adds	r7, #48	@ 0x30
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200004fc 	.word	0x200004fc
 8002858:	40014000 	.word	0x40014000

0800285c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	@ 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3a      	ldr	r2, [pc, #232]	@ (8002964 <HAL_TIM_Encoder_MspInit+0x108>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d135      	bne.n	80028ea <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	4b39      	ldr	r3, [pc, #228]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	4a38      	ldr	r2, [pc, #224]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6453      	str	r3, [r2, #68]	@ 0x44
 800288e:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	4b32      	ldr	r3, [pc, #200]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4a31      	ldr	r2, [pc, #196]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Engine_Leftcode1_Pin|Engine_Leftcode2_Pin;
 80028b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	4619      	mov	r1, r3
 80028d2:	4826      	ldr	r0, [pc, #152]	@ (800296c <HAL_TIM_Encoder_MspInit+0x110>)
 80028d4:	f001 f90e 	bl	8003af4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 4, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2104      	movs	r1, #4
 80028dc:	2019      	movs	r0, #25
 80028de:	f000 fcd0 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028e2:	2019      	movs	r0, #25
 80028e4:	f000 fce9 	bl	80032ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80028e8:	e038      	b.n	800295c <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a20      	ldr	r2, [pc, #128]	@ (8002970 <HAL_TIM_Encoder_MspInit+0x114>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d133      	bne.n	800295c <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	6453      	str	r3, [r2, #68]	@ 0x44
 8002904:	4b18      	ldr	r3, [pc, #96]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	4b14      	ldr	r3, [pc, #80]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	4a13      	ldr	r2, [pc, #76]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Engine_Rightcode1_Pin|Engine_Rightcode2_Pin;
 800292c:	23c0      	movs	r3, #192	@ 0xc0
 800292e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800293c:	2303      	movs	r3, #3
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	4619      	mov	r1, r3
 8002946:	480b      	ldr	r0, [pc, #44]	@ (8002974 <HAL_TIM_Encoder_MspInit+0x118>)
 8002948:	f001 f8d4 	bl	8003af4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 4, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2104      	movs	r1, #4
 8002950:	202c      	movs	r0, #44	@ 0x2c
 8002952:	f000 fc96 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002956:	202c      	movs	r0, #44	@ 0x2c
 8002958:	f000 fcaf 	bl	80032ba <HAL_NVIC_EnableIRQ>
}
 800295c:	bf00      	nop
 800295e:	3730      	adds	r7, #48	@ 0x30
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40010000 	.word	0x40010000
 8002968:	40023800 	.word	0x40023800
 800296c:	40020000 	.word	0x40020000
 8002970:	40010400 	.word	0x40010400
 8002974:	40020800 	.word	0x40020800

08002978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002988:	d116      	bne.n	80029b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a4d      	ldr	r2, [pc, #308]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2101      	movs	r1, #1
 80029aa:	201c      	movs	r0, #28
 80029ac:	f000 fc69 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029b0:	201c      	movs	r0, #28
 80029b2:	f000 fc82 	bl	80032ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80029b6:	e082      	b.n	8002abe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a43      	ldr	r2, [pc, #268]	@ (8002acc <HAL_TIM_Base_MspInit+0x154>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d116      	bne.n	80029f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ca:	4a3f      	ldr	r2, [pc, #252]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2103      	movs	r1, #3
 80029e2:	201d      	movs	r0, #29
 80029e4:	f000 fc4d 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029e8:	201d      	movs	r0, #29
 80029ea:	f000 fc66 	bl	80032ba <HAL_NVIC_EnableIRQ>
}
 80029ee:	e066      	b.n	8002abe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM4)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a36      	ldr	r2, [pc, #216]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x158>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d116      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	4b32      	ldr	r3, [pc, #200]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	4a31      	ldr	r2, [pc, #196]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2103      	movs	r1, #3
 8002a1a:	201e      	movs	r0, #30
 8002a1c:	f000 fc31 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a20:	201e      	movs	r0, #30
 8002a22:	f000 fc4a 	bl	80032ba <HAL_NVIC_EnableIRQ>
}
 8002a26:	e04a      	b.n	8002abe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a29      	ldr	r2, [pc, #164]	@ (8002ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d116      	bne.n	8002a60 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a3c:	f043 0308 	orr.w	r3, r3, #8
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2105      	movs	r1, #5
 8002a52:	2032      	movs	r0, #50	@ 0x32
 8002a54:	f000 fc15 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a58:	2032      	movs	r0, #50	@ 0x32
 8002a5a:	f000 fc2e 	bl	80032ba <HAL_NVIC_EnableIRQ>
}
 8002a5e:	e02e      	b.n	8002abe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM6)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_TIM_Base_MspInit+0x160>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d116      	bne.n	8002a98 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b16      	ldr	r3, [pc, #88]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	4a15      	ldr	r2, [pc, #84]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a74:	f043 0310 	orr.w	r3, r3, #16
 8002a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2107      	movs	r1, #7
 8002a8a:	2036      	movs	r0, #54	@ 0x36
 8002a8c:	f000 fbf9 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a90:	2036      	movs	r0, #54	@ 0x36
 8002a92:	f000 fc12 	bl	80032ba <HAL_NVIC_EnableIRQ>
}
 8002a96:	e012      	b.n	8002abe <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <HAL_TIM_Base_MspInit+0x164>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10d      	bne.n	8002abe <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_TIM_Base_MspInit+0x150>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
}
 8002abe:	bf00      	nop
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40001000 	.word	0x40001000
 8002adc:	40014000 	.word	0x40014000

08002ae0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a36      	ldr	r2, [pc, #216]	@ (8002bd8 <HAL_TIM_MspPostInit+0xf8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d11e      	bne.n	8002b40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b35      	ldr	r3, [pc, #212]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a34      	ldr	r2, [pc, #208]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b32      	ldr	r3, [pc, #200]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Engine_PWM_Left_Pin;
 8002b1e:	2340      	movs	r3, #64	@ 0x40
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Left_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4829      	ldr	r0, [pc, #164]	@ (8002be0 <HAL_TIM_MspPostInit+0x100>)
 8002b3a:	f000 ffdb 	bl	8003af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002b3e:	e047      	b.n	8002bd0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a27      	ldr	r2, [pc, #156]	@ (8002be4 <HAL_TIM_MspPostInit+0x104>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d11f      	bne.n	8002b8a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	4a22      	ldr	r2, [pc, #136]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Engine_PWM_Right_Pin;
 8002b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Right_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	4819      	ldr	r0, [pc, #100]	@ (8002be8 <HAL_TIM_MspPostInit+0x108>)
 8002b84:	f000 ffb6 	bl	8003af4 <HAL_GPIO_Init>
}
 8002b88:	e022      	b.n	8002bd0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM9)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <HAL_TIM_MspPostInit+0x10c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d11d      	bne.n	8002bd0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002b9e:	f043 0310 	orr.w	r3, r3, #16
 8002ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <HAL_TIM_MspPostInit+0xfc>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_PWM_TIM9_CH1_Pin|Motor_PWM_TIM9_CH2_Pin;
 8002bb0:	2360      	movs	r3, #96	@ 0x60
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4809      	ldr	r0, [pc, #36]	@ (8002bf0 <HAL_TIM_MspPostInit+0x110>)
 8002bcc:	f000 ff92 	bl	8003af4 <HAL_GPIO_Init>
}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	@ 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002bfa:	4a12      	ldr	r2, [pc, #72]	@ (8002c44 <MX_USART2_UART_Init+0x50>)
 8002bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	@ (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c2c:	f003 f864 	bl	8005cf8 <HAL_UART_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c36:	f7fe ff9b 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000544 	.word	0x20000544
 8002c44:	40004400 	.word	0x40004400

08002c48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c4e:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <MX_USART3_UART_Init+0x50>)
 8002c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_USART3_UART_Init+0x4c>)
 8002c80:	f003 f83a 	bl	8005cf8 <HAL_UART_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c8a:	f7fe ff71 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	2000058c 	.word	0x2000058c
 8002c98:	40004800 	.word	0x40004800

08002c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	@ 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 031c 	add.w	r3, r7, #28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a97      	ldr	r2, [pc, #604]	@ (8002f18 <HAL_UART_MspInit+0x27c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	f040 8091 	bne.w	8002de2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	4b95      	ldr	r3, [pc, #596]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	4a94      	ldr	r2, [pc, #592]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd0:	4b92      	ldr	r3, [pc, #584]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	4a8d      	ldr	r2, [pc, #564]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cec:	4b8b      	ldr	r3, [pc, #556]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 8002cf8:	230c      	movs	r3, #12
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d08:	2307      	movs	r3, #7
 8002d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4883      	ldr	r0, [pc, #524]	@ (8002f20 <HAL_UART_MspInit+0x284>)
 8002d14:	f000 feee 	bl	8003af4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d18:	4b82      	ldr	r3, [pc, #520]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d1a:	4a83      	ldr	r2, [pc, #524]	@ (8002f28 <HAL_UART_MspInit+0x28c>)
 8002d1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d1e:	4b81      	ldr	r3, [pc, #516]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d20:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d24:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d26:	4b7f      	ldr	r3, [pc, #508]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d32:	4b7c      	ldr	r3, [pc, #496]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d40:	4b78      	ldr	r3, [pc, #480]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d46:	4b77      	ldr	r3, [pc, #476]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d4c:	4b75      	ldr	r3, [pc, #468]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d52:	4b74      	ldr	r3, [pc, #464]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d58:	4872      	ldr	r0, [pc, #456]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d5a:	f000 fac9 	bl	80032f0 <HAL_DMA_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002d64:	f7fe ff04 	bl	8001b70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8002f24 <HAL_UART_MspInit+0x288>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d74:	4b6d      	ldr	r3, [pc, #436]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002d76:	4a6e      	ldr	r2, [pc, #440]	@ (8002f30 <HAL_UART_MspInit+0x294>)
 8002d78:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002d7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d80:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d82:	4b6a      	ldr	r3, [pc, #424]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002d84:	2240      	movs	r2, #64	@ 0x40
 8002d86:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d88:	4b68      	ldr	r3, [pc, #416]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8e:	4b67      	ldr	r3, [pc, #412]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002d90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d94:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d96:	4b65      	ldr	r3, [pc, #404]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9c:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002da2:	4b62      	ldr	r3, [pc, #392]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002da8:	4b60      	ldr	r3, [pc, #384]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dae:	4b5f      	ldr	r3, [pc, #380]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002db4:	485d      	ldr	r0, [pc, #372]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002db6:	f000 fa9b 	bl	80032f0 <HAL_DMA_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002dc0:	f7fe fed6 	bl	8001b70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a59      	ldr	r2, [pc, #356]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002dc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dca:	4a58      	ldr	r2, [pc, #352]	@ (8002f2c <HAL_UART_MspInit+0x290>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2106      	movs	r1, #6
 8002dd4:	2026      	movs	r0, #38	@ 0x26
 8002dd6:	f000 fa54 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dda:	2026      	movs	r0, #38	@ 0x26
 8002ddc:	f000 fa6d 	bl	80032ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002de0:	e096      	b.n	8002f10 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a53      	ldr	r2, [pc, #332]	@ (8002f34 <HAL_UART_MspInit+0x298>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	f040 8091 	bne.w	8002f10 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	4a49      	ldr	r2, [pc, #292]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfe:	4b47      	ldr	r3, [pc, #284]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b43      	ldr	r3, [pc, #268]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a42      	ldr	r2, [pc, #264]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b40      	ldr	r3, [pc, #256]	@ (8002f1c <HAL_UART_MspInit+0x280>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e38:	2307      	movs	r3, #7
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	483d      	ldr	r0, [pc, #244]	@ (8002f38 <HAL_UART_MspInit+0x29c>)
 8002e44:	f000 fe56 	bl	8003af4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e48:	4b3c      	ldr	r3, [pc, #240]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f40 <HAL_UART_MspInit+0x2a4>)
 8002e4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e54:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e56:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5c:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e62:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e68:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6a:	4b34      	ldr	r3, [pc, #208]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e70:	4b32      	ldr	r3, [pc, #200]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e82:	4b2e      	ldr	r3, [pc, #184]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e88:	482c      	ldr	r0, [pc, #176]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e8a:	f000 fa31 	bl	80032f0 <HAL_DMA_Init>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002e94:	f7fe fe6c 	bl	8001b70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a28      	ldr	r2, [pc, #160]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e9e:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <HAL_UART_MspInit+0x2a0>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002ea4:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ea6:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <HAL_UART_MspInit+0x2ac>)
 8002ea8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002eaa:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002eac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002eb0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb8:	4b22      	ldr	r3, [pc, #136]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ec0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ec4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ede:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ee4:	4817      	ldr	r0, [pc, #92]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ee6:	f000 fa03 	bl	80032f0 <HAL_DMA_Init>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002ef0:	f7fe fe3e 	bl	8001b70 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002efa:	4a12      	ldr	r2, [pc, #72]	@ (8002f44 <HAL_UART_MspInit+0x2a8>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2100      	movs	r1, #0
 8002f04:	2027      	movs	r0, #39	@ 0x27
 8002f06:	f000 f9bc 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f0a:	2027      	movs	r0, #39	@ 0x27
 8002f0c:	f000 f9d5 	bl	80032ba <HAL_NVIC_EnableIRQ>
}
 8002f10:	bf00      	nop
 8002f12:	3730      	adds	r7, #48	@ 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40004400 	.word	0x40004400
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	200005d4 	.word	0x200005d4
 8002f28:	40026088 	.word	0x40026088
 8002f2c:	20000634 	.word	0x20000634
 8002f30:	400260a0 	.word	0x400260a0
 8002f34:	40004800 	.word	0x40004800
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	20000694 	.word	0x20000694
 8002f40:	40026028 	.word	0x40026028
 8002f44:	200006f4 	.word	0x200006f4
 8002f48:	40026058 	.word	0x40026058

08002f4c <Reset_Handler>:
 8002f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f84 <LoopFillZerobss+0xe>
 8002f50:	f7ff f96c 	bl	800222c <SystemInit>
 8002f54:	480c      	ldr	r0, [pc, #48]	@ (8002f88 <LoopFillZerobss+0x12>)
 8002f56:	490d      	ldr	r1, [pc, #52]	@ (8002f8c <LoopFillZerobss+0x16>)
 8002f58:	4a0d      	ldr	r2, [pc, #52]	@ (8002f90 <LoopFillZerobss+0x1a>)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e002      	b.n	8002f64 <LoopCopyDataInit>

08002f5e <CopyDataInit>:
 8002f5e:	58d4      	ldr	r4, [r2, r3]
 8002f60:	50c4      	str	r4, [r0, r3]
 8002f62:	3304      	adds	r3, #4

08002f64 <LoopCopyDataInit>:
 8002f64:	18c4      	adds	r4, r0, r3
 8002f66:	428c      	cmp	r4, r1
 8002f68:	d3f9      	bcc.n	8002f5e <CopyDataInit>
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <LoopFillZerobss+0x1e>)
 8002f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f98 <LoopFillZerobss+0x22>)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e001      	b.n	8002f76 <LoopFillZerobss>

08002f72 <FillZerobss>:
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	3204      	adds	r2, #4

08002f76 <LoopFillZerobss>:
 8002f76:	42a2      	cmp	r2, r4
 8002f78:	d3fb      	bcc.n	8002f72 <FillZerobss>
 8002f7a:	f004 ff0b 	bl	8007d94 <__libc_init_array>
 8002f7e:	f7fe fca7 	bl	80018d0 <main>
 8002f82:	4770      	bx	lr
 8002f84:	20020000 	.word	0x20020000
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	200001d4 	.word	0x200001d4
 8002f90:	0800b948 	.word	0x0800b948
 8002f94:	200001d4 	.word	0x200001d4
 8002f98:	200008a4 	.word	0x200008a4

08002f9c <ADC_IRQHandler>:
 8002f9c:	e7fe      	b.n	8002f9c <ADC_IRQHandler>
	...

08002fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <HAL_Init+0x40>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <HAL_Init+0x40>)
 8002fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fbc:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a07      	ldr	r2, [pc, #28]	@ (8002fe0 <HAL_Init+0x40>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f000 f94f 	bl	800326c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fce:	200f      	movs	r0, #15
 8002fd0:	f000 f808 	bl	8002fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd4:	f7fe ff8a 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00

08002fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fec:	4b12      	ldr	r3, [pc, #72]	@ (8003038 <HAL_InitTick+0x54>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <HAL_InitTick+0x58>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f967 	bl	80032d6 <HAL_SYSTICK_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00e      	b.n	8003030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d80a      	bhi.n	800302e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003018:	2200      	movs	r2, #0
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f000 f92f 	bl	8003282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003024:	4a06      	ldr	r2, [pc, #24]	@ (8003040 <HAL_InitTick+0x5c>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000000 	.word	0x20000000
 800303c:	20000008 	.word	0x20000008
 8003040:	20000004 	.word	0x20000004

08003044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003048:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <HAL_IncTick+0x20>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_IncTick+0x24>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4413      	add	r3, r2
 8003054:	4a04      	ldr	r2, [pc, #16]	@ (8003068 <HAL_IncTick+0x24>)
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000008 	.word	0x20000008
 8003068:	20000754 	.word	0x20000754

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <HAL_GetTick+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000754 	.word	0x20000754

08003084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff ffee 	bl	800306c <HAL_GetTick>
 8003090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d005      	beq.n	80030aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309e:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <HAL_Delay+0x44>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030aa:	bf00      	nop
 80030ac:	f7ff ffde 	bl	800306c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d8f7      	bhi.n	80030ac <HAL_Delay+0x28>
  {
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000008 	.word	0x20000008

080030cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fe:	4a04      	ldr	r2, [pc, #16]	@ (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	60d3      	str	r3, [r2, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <__NVIC_GetPriorityGrouping+0x18>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 0307 	and.w	r3, r3, #7
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db0b      	blt.n	800315a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	4907      	ldr	r1, [pc, #28]	@ (8003168 <__NVIC_EnableIRQ+0x38>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2001      	movs	r0, #1
 8003152:	fa00 f202 	lsl.w	r2, r0, r2
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e000e100 	.word	0xe000e100

0800316c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db0a      	blt.n	8003196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	@ (80031b8 <__NVIC_SetPriority+0x4c>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	440b      	add	r3, r1
 8003190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003194:	e00a      	b.n	80031ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4908      	ldr	r1, [pc, #32]	@ (80031bc <__NVIC_SetPriority+0x50>)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3b04      	subs	r3, #4
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	761a      	strb	r2, [r3, #24]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f1c3 0307 	rsb	r3, r3, #7
 80031da:	2b04      	cmp	r3, #4
 80031dc:	bf28      	it	cs
 80031de:	2304      	movcs	r3, #4
 80031e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d902      	bls.n	80031f0 <NVIC_EncodePriority+0x30>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3b03      	subs	r3, #3
 80031ee:	e000      	b.n	80031f2 <NVIC_EncodePriority+0x32>
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	401a      	ands	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43d9      	mvns	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	4313      	orrs	r3, r2
         );
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003238:	d301      	bcc.n	800323e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323a:	2301      	movs	r3, #1
 800323c:	e00f      	b.n	800325e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323e:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <SysTick_Config+0x40>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003246:	210f      	movs	r1, #15
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f7ff ff8e 	bl	800316c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <SysTick_Config+0x40>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003256:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <SysTick_Config+0x40>)
 8003258:	2207      	movs	r2, #7
 800325a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000e010 	.word	0xe000e010

0800326c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff29 	bl	80030cc <__NVIC_SetPriorityGrouping>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003294:	f7ff ff3e 	bl	8003114 <__NVIC_GetPriorityGrouping>
 8003298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7ff ff8e 	bl	80031c0 <NVIC_EncodePriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff5d 	bl	800316c <__NVIC_SetPriority>
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff31 	bl	8003130 <__NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ffa2 	bl	8003228 <SysTick_Config>
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7ff feb6 	bl	800306c <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e099      	b.n	8003440 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332c:	e00f      	b.n	800334e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800332e:	f7ff fe9d 	bl	800306c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b05      	cmp	r3, #5
 800333a:	d908      	bls.n	800334e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2203      	movs	r2, #3
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e078      	b.n	8003440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e8      	bne.n	800332e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <HAL_DMA_Init+0x158>)
 8003368:	4013      	ands	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d107      	bne.n	80033b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	4313      	orrs	r3, r2
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0307 	bic.w	r3, r3, #7
 80033ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d117      	bne.n	8003412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fb01 	bl	80039fc <DMA_CheckFifoParam>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2240      	movs	r2, #64	@ 0x40
 8003404:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800340e:	2301      	movs	r3, #1
 8003410:	e016      	b.n	8003440 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fab8 	bl	8003990 <DMA_CalcBaseAndBitshift>
 8003420:	4603      	mov	r3, r0
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	223f      	movs	r2, #63	@ 0x3f
 800342a:	409a      	lsls	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	f010803f 	.word	0xf010803f

0800344c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_DMA_Start_IT+0x26>
 800346e:	2302      	movs	r3, #2
 8003470:	e040      	b.n	80034f4 <HAL_DMA_Start_IT+0xa8>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d12f      	bne.n	80034e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa4a 	bl	8003934 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	223f      	movs	r2, #63	@ 0x3f
 80034a6:	409a      	lsls	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0216 	orr.w	r2, r2, #22
 80034ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0208 	orr.w	r2, r2, #8
 80034d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e005      	b.n	80034f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
 80034f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003508:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800350a:	f7ff fdaf 	bl	800306c <HAL_GetTick>
 800350e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d008      	beq.n	800352e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2280      	movs	r2, #128	@ 0x80
 8003520:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e052      	b.n	80035d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0216 	bic.w	r2, r2, #22
 800353c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800354c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_DMA_Abort+0x62>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0208 	bic.w	r2, r2, #8
 800356c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357e:	e013      	b.n	80035a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003580:	f7ff fd74 	bl	800306c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b05      	cmp	r3, #5
 800358c:	d90c      	bls.n	80035a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e015      	b.n	80035d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e4      	bne.n	8003580 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ba:	223f      	movs	r2, #63	@ 0x3f
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d004      	beq.n	80035fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2280      	movs	r2, #128	@ 0x80
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00c      	b.n	8003614 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2205      	movs	r2, #5
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800362c:	4b8e      	ldr	r3, [pc, #568]	@ (8003868 <HAL_DMA_IRQHandler+0x248>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a8e      	ldr	r2, [pc, #568]	@ (800386c <HAL_DMA_IRQHandler+0x24c>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0a9b      	lsrs	r3, r3, #10
 8003638:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364a:	2208      	movs	r2, #8
 800364c:	409a      	lsls	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01a      	beq.n	800368c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0204 	bic.w	r2, r2, #4
 8003672:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003678:	2208      	movs	r2, #8
 800367a:	409a      	lsls	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	2201      	movs	r2, #1
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d012      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	2201      	movs	r2, #1
 80036b0:	409a      	lsls	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ba:	f043 0202 	orr.w	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	2204      	movs	r2, #4
 80036c8:	409a      	lsls	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e4:	2204      	movs	r2, #4
 80036e6:	409a      	lsls	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fc:	2210      	movs	r2, #16
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d043      	beq.n	8003790 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d03c      	beq.n	8003790 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371a:	2210      	movs	r2, #16
 800371c:	409a      	lsls	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d018      	beq.n	8003762 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	d024      	beq.n	8003790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
 800374e:	e01f      	b.n	8003790 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01b      	beq.n	8003790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
 8003760:	e016      	b.n	8003790 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0208 	bic.w	r2, r2, #8
 800377e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003794:	2220      	movs	r2, #32
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 808f 	beq.w	80038c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8087 	beq.w	80038c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	2220      	movs	r2, #32
 80037b8:	409a      	lsls	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d136      	bne.n	8003838 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0216 	bic.w	r2, r2, #22
 80037d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <HAL_DMA_IRQHandler+0x1da>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0208 	bic.w	r2, r2, #8
 8003808:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380e:	223f      	movs	r2, #63	@ 0x3f
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382a:	2b00      	cmp	r3, #0
 800382c:	d07e      	beq.n	800392c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
        }
        return;
 8003836:	e079      	b.n	800392c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d01d      	beq.n	8003882 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10d      	bne.n	8003870 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003858:	2b00      	cmp	r3, #0
 800385a:	d031      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
 8003864:	e02c      	b.n	80038c0 <HAL_DMA_IRQHandler+0x2a0>
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000
 800386c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d023      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
 8003880:	e01e      	b.n	80038c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10f      	bne.n	80038b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0210 	bic.w	r2, r2, #16
 800389e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d032      	beq.n	800392e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d022      	beq.n	800391a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2205      	movs	r2, #5
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d307      	bcc.n	8003908 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f2      	bne.n	80038ec <HAL_DMA_IRQHandler+0x2cc>
 8003906:	e000      	b.n	800390a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003908:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
 800392a:	e000      	b.n	800392e <HAL_DMA_IRQHandler+0x30e>
        return;
 800392c:	bf00      	nop
    }
  }
}
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003950:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b40      	cmp	r3, #64	@ 0x40
 8003960:	d108      	bne.n	8003974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003972:	e007      	b.n	8003984 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	3b10      	subs	r3, #16
 80039a0:	4a14      	ldr	r2, [pc, #80]	@ (80039f4 <DMA_CalcBaseAndBitshift+0x64>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039aa:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <DMA_CalcBaseAndBitshift+0x68>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d909      	bls.n	80039d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80039d0:	e007      	b.n	80039e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	aaaaaaab 	.word	0xaaaaaaab
 80039f8:	0800b500 	.word	0x0800b500

080039fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11f      	bne.n	8003a56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d856      	bhi.n	8003aca <DMA_CheckFifoParam+0xce>
 8003a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a24 <DMA_CheckFifoParam+0x28>)
 8003a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a22:	bf00      	nop
 8003a24:	08003a35 	.word	0x08003a35
 8003a28:	08003a47 	.word	0x08003a47
 8003a2c:	08003a35 	.word	0x08003a35
 8003a30:	08003acb 	.word	0x08003acb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d046      	beq.n	8003ace <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a44:	e043      	b.n	8003ace <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a4e:	d140      	bne.n	8003ad2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a54:	e03d      	b.n	8003ad2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5e:	d121      	bne.n	8003aa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d837      	bhi.n	8003ad6 <DMA_CheckFifoParam+0xda>
 8003a66:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <DMA_CheckFifoParam+0x70>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a83 	.word	0x08003a83
 8003a74:	08003a7d 	.word	0x08003a7d
 8003a78:	08003a95 	.word	0x08003a95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a80:	e030      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d025      	beq.n	8003ada <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a92:	e022      	b.n	8003ada <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a9c:	d11f      	bne.n	8003ade <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aa2:	e01c      	b.n	8003ade <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d903      	bls.n	8003ab2 <DMA_CheckFifoParam+0xb6>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d003      	beq.n	8003ab8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ab0:	e018      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab6:	e015      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e00b      	b.n	8003ae2 <DMA_CheckFifoParam+0xe6>
      break;
 8003aca:	bf00      	nop
 8003acc:	e00a      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e008      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e006      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e004      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b089      	sub	sp, #36	@ 0x24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e16b      	b.n	8003de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b10:	2201      	movs	r2, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	f040 815a 	bne.w	8003de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d005      	beq.n	8003b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d130      	bne.n	8003ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	2203      	movs	r2, #3
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 0201 	and.w	r2, r3, #1
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d017      	beq.n	8003be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d123      	bne.n	8003c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	08da      	lsrs	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3208      	adds	r2, #8
 8003bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	220f      	movs	r2, #15
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	08da      	lsrs	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3208      	adds	r2, #8
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	2203      	movs	r2, #3
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0203 	and.w	r2, r3, #3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80b4 	beq.w	8003de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b60      	ldr	r3, [pc, #384]	@ (8003e00 <HAL_GPIO_Init+0x30c>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	4a5f      	ldr	r2, [pc, #380]	@ (8003e00 <HAL_GPIO_Init+0x30c>)
 8003c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e00 <HAL_GPIO_Init+0x30c>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c96:	4a5b      	ldr	r2, [pc, #364]	@ (8003e04 <HAL_GPIO_Init+0x310>)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	220f      	movs	r2, #15
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	@ (8003e08 <HAL_GPIO_Init+0x314>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d02b      	beq.n	8003d1a <HAL_GPIO_Init+0x226>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a51      	ldr	r2, [pc, #324]	@ (8003e0c <HAL_GPIO_Init+0x318>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d025      	beq.n	8003d16 <HAL_GPIO_Init+0x222>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a50      	ldr	r2, [pc, #320]	@ (8003e10 <HAL_GPIO_Init+0x31c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01f      	beq.n	8003d12 <HAL_GPIO_Init+0x21e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e14 <HAL_GPIO_Init+0x320>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d019      	beq.n	8003d0e <HAL_GPIO_Init+0x21a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e18 <HAL_GPIO_Init+0x324>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_GPIO_Init+0x216>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8003e1c <HAL_GPIO_Init+0x328>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00d      	beq.n	8003d06 <HAL_GPIO_Init+0x212>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4c      	ldr	r2, [pc, #304]	@ (8003e20 <HAL_GPIO_Init+0x32c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <HAL_GPIO_Init+0x20e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8003e24 <HAL_GPIO_Init+0x330>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_GPIO_Init+0x20a>
 8003cfa:	2307      	movs	r3, #7
 8003cfc:	e00e      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003cfe:	2308      	movs	r3, #8
 8003d00:	e00c      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003d02:	2306      	movs	r3, #6
 8003d04:	e00a      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003d06:	2305      	movs	r3, #5
 8003d08:	e008      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e004      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e002      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_GPIO_Init+0x228>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	f002 0203 	and.w	r2, r2, #3
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	4093      	lsls	r3, r2
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d2c:	4935      	ldr	r1, [pc, #212]	@ (8003e04 <HAL_GPIO_Init+0x310>)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d5e:	4a32      	ldr	r2, [pc, #200]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d64:	4b30      	ldr	r3, [pc, #192]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d88:	4a27      	ldr	r2, [pc, #156]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d8e:	4b26      	ldr	r3, [pc, #152]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ddc:	4a12      	ldr	r2, [pc, #72]	@ (8003e28 <HAL_GPIO_Init+0x334>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	f67f ae90 	bls.w	8003b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3724      	adds	r7, #36	@ 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40020400 	.word	0x40020400
 8003e10:	40020800 	.word	0x40020800
 8003e14:	40020c00 	.word	0x40020c00
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40021400 	.word	0x40021400
 8003e20:	40021800 	.word	0x40021800
 8003e24:	40021c00 	.word	0x40021c00
 8003e28:	40013c00 	.word	0x40013c00

08003e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d002      	beq.n	8003e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
 8003e48:	e001      	b.n	8003e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e6c:	787b      	ldrb	r3, [r7, #1]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e78:	e003      	b.n	8003e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	041a      	lsls	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	619a      	str	r2, [r3, #24]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003e94:	4b08      	ldr	r3, [pc, #32]	@ (8003eb8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a07      	ldr	r2, [pc, #28]	@ (8003eb8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ea0:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	4a05      	ldr	r2, [pc, #20]	@ (8003ebc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003eac:	bf30      	wfi
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e267      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d075      	beq.n	8003fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ede:	4b88      	ldr	r3, [pc, #544]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d00c      	beq.n	8003f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eea:	4b85      	ldr	r3, [pc, #532]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d112      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef6:	4b82      	ldr	r3, [pc, #520]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f02:	d10b      	bne.n	8003f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	4b7e      	ldr	r3, [pc, #504]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d05b      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x108>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d157      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e242      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f24:	d106      	bne.n	8003f34 <HAL_RCC_OscConfig+0x74>
 8003f26:	4b76      	ldr	r3, [pc, #472]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a75      	ldr	r2, [pc, #468]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e01d      	b.n	8003f70 <HAL_RCC_OscConfig+0xb0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x98>
 8003f3e:	4b70      	ldr	r3, [pc, #448]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6f      	ldr	r2, [pc, #444]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a6c      	ldr	r2, [pc, #432]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0xb0>
 8003f58:	4b69      	ldr	r3, [pc, #420]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a68      	ldr	r2, [pc, #416]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b66      	ldr	r3, [pc, #408]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a65      	ldr	r2, [pc, #404]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d013      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7ff f878 	bl	800306c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f80:	f7ff f874 	bl	800306c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b64      	cmp	r3, #100	@ 0x64
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e207      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	4b5b      	ldr	r3, [pc, #364]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0xc0>
 8003f9e:	e014      	b.n	8003fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7ff f864 	bl	800306c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7ff f860 	bl	800306c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	@ 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1f3      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	4b51      	ldr	r3, [pc, #324]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xe8>
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d063      	beq.n	800409e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe2:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d11c      	bne.n	8004028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fee:	4b44      	ldr	r3, [pc, #272]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d116      	bne.n	8004028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffa:	4b41      	ldr	r3, [pc, #260]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_RCC_OscConfig+0x152>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e1c7      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004012:	4b3b      	ldr	r3, [pc, #236]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4937      	ldr	r1, [pc, #220]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	e03a      	b.n	800409e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004030:	4b34      	ldr	r3, [pc, #208]	@ (8004104 <HAL_RCC_OscConfig+0x244>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004036:	f7ff f819 	bl	800306c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800403e:	f7ff f815 	bl	800306c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1a8      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	4b2b      	ldr	r3, [pc, #172]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405c:	4b28      	ldr	r3, [pc, #160]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4925      	ldr	r1, [pc, #148]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]
 8004070:	e015      	b.n	800409e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004072:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCC_OscConfig+0x244>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe fff8 	bl	800306c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004080:	f7fe fff4 	bl	800306c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e187      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d036      	beq.n	8004118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <HAL_RCC_OscConfig+0x248>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fe ffd8 	bl	800306c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c0:	f7fe ffd4 	bl	800306c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e167      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_OscConfig+0x240>)
 80040d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x200>
 80040de:	e01b      	b.n	8004118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e0:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <HAL_RCC_OscConfig+0x248>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fe ffc1 	bl	800306c <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	e00e      	b.n	800410c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ee:	f7fe ffbd 	bl	800306c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d907      	bls.n	800410c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e150      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
 8004100:	40023800 	.word	0x40023800
 8004104:	42470000 	.word	0x42470000
 8004108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	4b88      	ldr	r3, [pc, #544]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 800410e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1ea      	bne.n	80040ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 8097 	beq.w	8004254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412a:	4b81      	ldr	r3, [pc, #516]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	4b7d      	ldr	r3, [pc, #500]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	4a7c      	ldr	r2, [pc, #496]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 8004140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004144:	6413      	str	r3, [r2, #64]	@ 0x40
 8004146:	4b7a      	ldr	r3, [pc, #488]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004152:	2301      	movs	r3, #1
 8004154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004156:	4b77      	ldr	r3, [pc, #476]	@ (8004334 <HAL_RCC_OscConfig+0x474>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d118      	bne.n	8004194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004162:	4b74      	ldr	r3, [pc, #464]	@ (8004334 <HAL_RCC_OscConfig+0x474>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a73      	ldr	r2, [pc, #460]	@ (8004334 <HAL_RCC_OscConfig+0x474>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416e:	f7fe ff7d 	bl	800306c <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004176:	f7fe ff79 	bl	800306c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e10c      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	4b6a      	ldr	r3, [pc, #424]	@ (8004334 <HAL_RCC_OscConfig+0x474>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x2ea>
 800419c:	4b64      	ldr	r3, [pc, #400]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a63      	ldr	r2, [pc, #396]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	e01c      	b.n	80041e4 <HAL_RCC_OscConfig+0x324>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x30c>
 80041b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80041be:	4b5c      	ldr	r3, [pc, #368]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ca:	e00b      	b.n	80041e4 <HAL_RCC_OscConfig+0x324>
 80041cc:	4b58      	ldr	r3, [pc, #352]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d0:	4a57      	ldr	r2, [pc, #348]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d8:	4b55      	ldr	r3, [pc, #340]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041dc:	4a54      	ldr	r2, [pc, #336]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80041de:	f023 0304 	bic.w	r3, r3, #4
 80041e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d015      	beq.n	8004218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fe ff3e 	bl	800306c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f2:	e00a      	b.n	800420a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f4:	f7fe ff3a 	bl	800306c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e0cb      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420a:	4b49      	ldr	r3, [pc, #292]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0ee      	beq.n	80041f4 <HAL_RCC_OscConfig+0x334>
 8004216:	e014      	b.n	8004242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004218:	f7fe ff28 	bl	800306c <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421e:	e00a      	b.n	8004236 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004220:	f7fe ff24 	bl	800306c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e0b5      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004236:	4b3e      	ldr	r3, [pc, #248]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1ee      	bne.n	8004220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004248:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 800424a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424c:	4a38      	ldr	r2, [pc, #224]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 800424e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004252:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80a1 	beq.w	80043a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800425e:	4b34      	ldr	r3, [pc, #208]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b08      	cmp	r3, #8
 8004268:	d05c      	beq.n	8004324 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d141      	bne.n	80042f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004272:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCC_OscConfig+0x478>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe fef8 	bl	800306c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004280:	f7fe fef4 	bl	800306c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e087      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	4b27      	ldr	r3, [pc, #156]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	491b      	ldr	r1, [pc, #108]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <HAL_RCC_OscConfig+0x478>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7fe fecd 	bl	800306c <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d6:	f7fe fec9 	bl	800306c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e05c      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e8:	4b11      	ldr	r3, [pc, #68]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x416>
 80042f4:	e054      	b.n	80043a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <HAL_RCC_OscConfig+0x478>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe feb6 	bl	800306c <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe feb2 	bl	800306c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e045      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_RCC_OscConfig+0x470>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x444>
 8004322:	e03d      	b.n	80043a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e038      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
 8004330:	40023800 	.word	0x40023800
 8004334:	40007000 	.word	0x40007000
 8004338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800433c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <HAL_RCC_OscConfig+0x4ec>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d028      	beq.n	800439c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d121      	bne.n	800439c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d11a      	bne.n	800439c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800436c:	4013      	ands	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004374:	4293      	cmp	r3, r2
 8004376:	d111      	bne.n	800439c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	3b01      	subs	r3, #1
 8004386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d107      	bne.n	800439c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800

080043b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0cc      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b68      	ldr	r3, [pc, #416]	@ (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d90c      	bls.n	80043ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b65      	ldr	r3, [pc, #404]	@ (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b63      	ldr	r3, [pc, #396]	@ (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0b8      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004404:	4b59      	ldr	r3, [pc, #356]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4a58      	ldr	r2, [pc, #352]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800440e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800441c:	4b53      	ldr	r3, [pc, #332]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4a52      	ldr	r2, [pc, #328]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4b50      	ldr	r3, [pc, #320]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	494d      	ldr	r1, [pc, #308]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d044      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b47      	ldr	r3, [pc, #284]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d119      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e07f      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d003      	beq.n	800446e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800446a:	2b03      	cmp	r3, #3
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	4b3f      	ldr	r3, [pc, #252]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e06f      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447e:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e067      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b37      	ldr	r3, [pc, #220]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4934      	ldr	r1, [pc, #208]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a0:	f7fe fde4 	bl	800306c <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fe fde0 	bl	800306c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e04f      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b2b      	ldr	r3, [pc, #172]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d20c      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b22      	ldr	r3, [pc, #136]	@ (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b20      	ldr	r3, [pc, #128]	@ (8004568 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e032      	b.n	800455e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004504:	4b19      	ldr	r3, [pc, #100]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4916      	ldr	r1, [pc, #88]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004522:	4b12      	ldr	r3, [pc, #72]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	490e      	ldr	r1, [pc, #56]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004536:	f000 f821 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800453a:	4602      	mov	r2, r0
 800453c:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	490a      	ldr	r1, [pc, #40]	@ (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	5ccb      	ldrb	r3, [r1, r3]
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	4a09      	ldr	r2, [pc, #36]	@ (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004552:	4b09      	ldr	r3, [pc, #36]	@ (8004578 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fd44 	bl	8002fe4 <HAL_InitTick>

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023c00 	.word	0x40023c00
 800456c:	40023800 	.word	0x40023800
 8004570:	0800b4e8 	.word	0x0800b4e8
 8004574:	20000000 	.word	0x20000000
 8004578:	20000004 	.word	0x20000004

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004580:	b094      	sub	sp, #80	@ 0x50
 8004582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	647b      	str	r3, [r7, #68]	@ 0x44
 8004588:	2300      	movs	r3, #0
 800458a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800458c:	2300      	movs	r3, #0
 800458e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004594:	4b79      	ldr	r3, [pc, #484]	@ (800477c <HAL_RCC_GetSysClockFreq+0x200>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b08      	cmp	r3, #8
 800459e:	d00d      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x40>
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	f200 80e1 	bhi.w	8004768 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x34>
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ae:	e0db      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b73      	ldr	r3, [pc, #460]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80045b4:	e0db      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b6:	4b73      	ldr	r3, [pc, #460]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x208>)
 80045b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ba:	e0d8      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045bc:	4b6f      	ldr	r3, [pc, #444]	@ (800477c <HAL_RCC_GetSysClockFreq+0x200>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045c6:	4b6d      	ldr	r3, [pc, #436]	@ (800477c <HAL_RCC_GetSysClockFreq+0x200>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d063      	beq.n	800469a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d2:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCC_GetSysClockFreq+0x200>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	2200      	movs	r2, #0
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045e6:	2300      	movs	r3, #0
 80045e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045ee:	4622      	mov	r2, r4
 80045f0:	462b      	mov	r3, r5
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	0159      	lsls	r1, r3, #5
 80045fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004600:	0150      	lsls	r0, r2, #5
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4621      	mov	r1, r4
 8004608:	1a51      	subs	r1, r2, r1
 800460a:	6139      	str	r1, [r7, #16]
 800460c:	4629      	mov	r1, r5
 800460e:	eb63 0301 	sbc.w	r3, r3, r1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004620:	4659      	mov	r1, fp
 8004622:	018b      	lsls	r3, r1, #6
 8004624:	4651      	mov	r1, sl
 8004626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800462a:	4651      	mov	r1, sl
 800462c:	018a      	lsls	r2, r1, #6
 800462e:	4651      	mov	r1, sl
 8004630:	ebb2 0801 	subs.w	r8, r2, r1
 8004634:	4659      	mov	r1, fp
 8004636:	eb63 0901 	sbc.w	r9, r3, r1
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800464a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464e:	4690      	mov	r8, r2
 8004650:	4699      	mov	r9, r3
 8004652:	4623      	mov	r3, r4
 8004654:	eb18 0303 	adds.w	r3, r8, r3
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	462b      	mov	r3, r5
 800465c:	eb49 0303 	adc.w	r3, r9, r3
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800466e:	4629      	mov	r1, r5
 8004670:	024b      	lsls	r3, r1, #9
 8004672:	4621      	mov	r1, r4
 8004674:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004678:	4621      	mov	r1, r4
 800467a:	024a      	lsls	r2, r1, #9
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004682:	2200      	movs	r2, #0
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800468c:	f7fc fafc 	bl	8000c88 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4613      	mov	r3, r2
 8004696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004698:	e058      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469a:	4b38      	ldr	r3, [pc, #224]	@ (800477c <HAL_RCC_GetSysClockFreq+0x200>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	2200      	movs	r2, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	4611      	mov	r1, r2
 80046a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	2300      	movs	r3, #0
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	f04f 0000 	mov.w	r0, #0
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	0159      	lsls	r1, r3, #5
 80046c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c6:	0150      	lsls	r0, r2, #5
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4641      	mov	r1, r8
 80046ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80046d2:	4649      	mov	r1, r9
 80046d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046ec:	ebb2 040a 	subs.w	r4, r2, sl
 80046f0:	eb63 050b 	sbc.w	r5, r3, fp
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	00eb      	lsls	r3, r5, #3
 80046fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004702:	00e2      	lsls	r2, r4, #3
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	4643      	mov	r3, r8
 800470a:	18e3      	adds	r3, r4, r3
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	464b      	mov	r3, r9
 8004710:	eb45 0303 	adc.w	r3, r5, r3
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004722:	4629      	mov	r1, r5
 8004724:	028b      	lsls	r3, r1, #10
 8004726:	4621      	mov	r1, r4
 8004728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800472c:	4621      	mov	r1, r4
 800472e:	028a      	lsls	r2, r1, #10
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004736:	2200      	movs	r2, #0
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	61fa      	str	r2, [r7, #28]
 800473c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004740:	f7fc faa2 	bl	8000c88 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4613      	mov	r3, r2
 800474a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_RCC_GetSysClockFreq+0x200>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	3301      	adds	r3, #1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800475c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800475e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004766:	e002      	b.n	800476e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x204>)
 800476a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800476c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004770:	4618      	mov	r0, r3
 8004772:	3750      	adds	r7, #80	@ 0x50
 8004774:	46bd      	mov	sp, r7
 8004776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	00f42400 	.word	0x00f42400
 8004784:	007a1200 	.word	0x007a1200

08004788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <HAL_RCC_GetHCLKFreq+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	20000000 	.word	0x20000000

080047a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047a4:	f7ff fff0 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	0a9b      	lsrs	r3, r3, #10
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	4903      	ldr	r1, [pc, #12]	@ (80047c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40023800 	.word	0x40023800
 80047c4:	0800b4f8 	.word	0x0800b4f8

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047cc:	f7ff ffdc 	bl	8004788 <HAL_RCC_GetHCLKFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	0b5b      	lsrs	r3, r3, #13
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	4903      	ldr	r1, [pc, #12]	@ (80047ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80047de:	5ccb      	ldrb	r3, [r1, r3]
 80047e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800b4f8 	.word	0x0800b4f8

080047f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e041      	b.n	8004886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fe f8ae 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f000 fe26 	bl	8005480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d001      	beq.n	80048a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e04e      	b.n	8004946 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	@ (8004954 <HAL_TIM_Base_Start_IT+0xc4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d022      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d2:	d01d      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004958 <HAL_TIM_Base_Start_IT+0xc8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1e      	ldr	r2, [pc, #120]	@ (800495c <HAL_TIM_Base_Start_IT+0xcc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <HAL_TIM_Base_Start_IT+0xd0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <HAL_TIM_Base_Start_IT+0xd4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a19      	ldr	r2, [pc, #100]	@ (8004968 <HAL_TIM_Base_Start_IT+0xd8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x80>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a18      	ldr	r2, [pc, #96]	@ (800496c <HAL_TIM_Base_Start_IT+0xdc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d111      	bne.n	8004934 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b06      	cmp	r3, #6
 8004920:	d010      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	e007      	b.n	8004944 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40000c00 	.word	0x40000c00
 8004964:	40010400 	.word	0x40010400
 8004968:	40014000 	.word	0x40014000
 800496c:	40001800 	.word	0x40001800

08004970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e041      	b.n	8004a06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f839 	bl	8004a0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 fd66 	bl	8005480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start_IT+0x28>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e022      	b.n	8004a92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d109      	bne.n	8004a66 <HAL_TIM_PWM_Start_IT+0x42>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	bf14      	ite	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	2300      	moveq	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e015      	b.n	8004a92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start_IT+0x5c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e008      	b.n	8004a92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0c7      	b.n	8004c2a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start_IT+0x86>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa8:	e013      	b.n	8004ad2 <HAL_TIM_PWM_Start_IT+0xae>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start_IT+0x96>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ab8:	e00b      	b.n	8004ad2 <HAL_TIM_PWM_Start_IT+0xae>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_PWM_Start_IT+0xa6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac8:	e003      	b.n	8004ad2 <HAL_TIM_PWM_Start_IT+0xae>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	d841      	bhi.n	8004b5c <HAL_TIM_PWM_Start_IT+0x138>
 8004ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b5d 	.word	0x08004b5d
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b27 	.word	0x08004b27
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004b5d 	.word	0x08004b5d
 8004b00:	08004b39 	.word	0x08004b39
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004b4b 	.word	0x08004b4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0202 	orr.w	r2, r2, #2
 8004b22:	60da      	str	r2, [r3, #12]
      break;
 8004b24:	e01d      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0204 	orr.w	r2, r2, #4
 8004b34:	60da      	str	r2, [r3, #12]
      break;
 8004b36:	e014      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	60da      	str	r2, [r3, #12]
      break;
 8004b48:	e00b      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0210 	orr.w	r2, r2, #16
 8004b58:	60da      	str	r2, [r3, #12]
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d15f      	bne.n	8004c28 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 f80c 	bl	8005b8e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004c34 <HAL_TIM_PWM_Start_IT+0x210>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <HAL_TIM_PWM_Start_IT+0x166>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2c      	ldr	r2, [pc, #176]	@ (8004c38 <HAL_TIM_PWM_Start_IT+0x214>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_PWM_Start_IT+0x16a>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_TIM_PWM_Start_IT+0x16c>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a22      	ldr	r2, [pc, #136]	@ (8004c34 <HAL_TIM_PWM_Start_IT+0x210>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d022      	beq.n	8004bf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8004c3c <HAL_TIM_PWM_Start_IT+0x218>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d018      	beq.n	8004bf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c40 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c44 <HAL_TIM_PWM_Start_IT+0x220>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <HAL_TIM_PWM_Start_IT+0x214>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <HAL_TIM_PWM_Start_IT+0x224>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a17      	ldr	r2, [pc, #92]	@ (8004c4c <HAL_TIM_PWM_Start_IT+0x228>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d111      	bne.n	8004c18 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d010      	beq.n	8004c28 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	e007      	b.n	8004c28 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40010400 	.word	0x40010400
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40001800 	.word	0x40001800

08004c50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e097      	b.n	8004d94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fd fdef 	bl	800285c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c94:	f023 0307 	bic.w	r3, r3, #7
 8004c98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f000 fbeb 	bl	8005480 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004cf0:	f023 030c 	bic.w	r3, r3, #12
 8004cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	011a      	lsls	r2, r3, #4
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	031b      	lsls	r3, r3, #12
 8004d20:	4313      	orrs	r3, r2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4313      	orrs	r3, r2
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004db4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004dc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d110      	bne.n	8004dee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dd2:	7b7b      	ldrb	r3, [r7, #13]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d001      	beq.n	8004ddc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e069      	b.n	8004eb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dec:	e031      	b.n	8004e52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d110      	bne.n	8004e16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df4:	7bbb      	ldrb	r3, [r7, #14]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dfa:	7b3b      	ldrb	r3, [r7, #12]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d001      	beq.n	8004e04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e055      	b.n	8004eb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e14:	e01d      	b.n	8004e52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d108      	bne.n	8004e2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d105      	bne.n	8004e2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e22:	7b7b      	ldrb	r3, [r7, #13]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d102      	bne.n	8004e2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e28:	7b3b      	ldrb	r3, [r7, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e03e      	b.n	8004eb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_TIM_Encoder_Start+0xc4>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d008      	beq.n	8004e70 <HAL_TIM_Encoder_Start+0xd4>
 8004e5e:	e00f      	b.n	8004e80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2201      	movs	r2, #1
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fe90 	bl	8005b8e <TIM_CCxChannelCmd>
      break;
 8004e6e:	e016      	b.n	8004e9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2201      	movs	r2, #1
 8004e76:	2104      	movs	r1, #4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fe88 	bl	8005b8e <TIM_CCxChannelCmd>
      break;
 8004e7e:	e00e      	b.n	8004e9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fe80 	bl	8005b8e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2201      	movs	r2, #1
 8004e94:	2104      	movs	r1, #4
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fe79 	bl	8005b8e <TIM_CCxChannelCmd>
      break;
 8004e9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d020      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0202 	mvn.w	r2, #2
 8004eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa9d 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa8f 	bl	800542e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 faa0 	bl	8005456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d020      	beq.n	8004f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01b      	beq.n	8004f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0204 	mvn.w	r2, #4
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa77 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa69 	bl	800542e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fa7a 	bl	8005456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d020      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0208 	mvn.w	r2, #8
 8004f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fa51 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa43 	bl	800542e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fa54 	bl	8005456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d020      	beq.n	8005000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01b      	beq.n	8005000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0210 	mvn.w	r2, #16
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2208      	movs	r2, #8
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa2b 	bl	8005442 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa1d 	bl	800542e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fa2e 	bl	8005456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0201 	mvn.w	r2, #1
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fb2c 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00c      	beq.n	8005048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005034:	2b00      	cmp	r3, #0
 8005036:	d007      	beq.n	8005048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fe4e 	bl	8005ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f9ff 	bl	800546a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0220 	mvn.w	r2, #32
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fe20 	bl	8005cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e0ae      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	f200 809f 	bhi.w	8005204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050c6:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	08005101 	.word	0x08005101
 80050d0:	08005205 	.word	0x08005205
 80050d4:	08005205 	.word	0x08005205
 80050d8:	08005205 	.word	0x08005205
 80050dc:	08005141 	.word	0x08005141
 80050e0:	08005205 	.word	0x08005205
 80050e4:	08005205 	.word	0x08005205
 80050e8:	08005205 	.word	0x08005205
 80050ec:	08005183 	.word	0x08005183
 80050f0:	08005205 	.word	0x08005205
 80050f4:	08005205 	.word	0x08005205
 80050f8:	08005205 	.word	0x08005205
 80050fc:	080051c3 	.word	0x080051c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fa66 	bl	80055d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	619a      	str	r2, [r3, #24]
      break;
 800513e:	e064      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fab6 	bl	80056b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800515a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6999      	ldr	r1, [r3, #24]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
      break;
 8005180:	e043      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fb0b 	bl	80057a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0204 	bic.w	r2, r2, #4
 80051ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
      break;
 80051c0:	e023      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fb5f 	bl	800588c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	61da      	str	r2, [r3, #28]
      break;
 8005202:	e002      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_TIM_ConfigClockSource+0x1c>
 8005234:	2302      	movs	r3, #2
 8005236:	e0b4      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x186>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800525e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005270:	d03e      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005276:	f200 8087 	bhi.w	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527e:	f000 8086 	beq.w	800538e <HAL_TIM_ConfigClockSource+0x172>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005286:	d87f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b70      	cmp	r3, #112	@ 0x70
 800528a:	d01a      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xa6>
 800528c:	2b70      	cmp	r3, #112	@ 0x70
 800528e:	d87b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b60      	cmp	r3, #96	@ 0x60
 8005292:	d050      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x11a>
 8005294:	2b60      	cmp	r3, #96	@ 0x60
 8005296:	d877      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b50      	cmp	r3, #80	@ 0x50
 800529a:	d03c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xfa>
 800529c:	2b50      	cmp	r3, #80	@ 0x50
 800529e:	d873      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d058      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x13a>
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	d86f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b30      	cmp	r3, #48	@ 0x30
 80052aa:	d064      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052ac:	2b30      	cmp	r3, #48	@ 0x30
 80052ae:	d86b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d060      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d867      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d05a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052c0:	e062      	b.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	f000 fc3c 	bl	8005b4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
      break;
 80052ee:	e04f      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	f000 fc25 	bl	8005b4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e03c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	461a      	mov	r2, r3
 8005324:	f000 fb99 	bl	8005a5a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2150      	movs	r1, #80	@ 0x50
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fbf2 	bl	8005b18 <TIM_ITRx_SetConfig>
      break;
 8005334:	e02c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005342:	461a      	mov	r2, r3
 8005344:	f000 fbb8 	bl	8005ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2160      	movs	r1, #96	@ 0x60
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fbe2 	bl	8005b18 <TIM_ITRx_SetConfig>
      break;
 8005354:	e01c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	461a      	mov	r2, r3
 8005364:	f000 fb79 	bl	8005a5a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2140      	movs	r1, #64	@ 0x40
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fbd2 	bl	8005b18 <TIM_ITRx_SetConfig>
      break;
 8005374:	e00c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fbc9 	bl	8005b18 <TIM_ITRx_SetConfig>
      break;
 8005386:	e003      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e000      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800538e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80053be:	2302      	movs	r3, #2
 80053c0:	e031      	b.n	8005426 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 faaf 	bl	8005938 <TIM_SlaveTimer_SetConfig>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e018      	b.n	8005426 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005402:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005412:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a46      	ldr	r2, [pc, #280]	@ (80055ac <TIM_Base_SetConfig+0x12c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549e:	d00f      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a43      	ldr	r2, [pc, #268]	@ (80055b0 <TIM_Base_SetConfig+0x130>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a42      	ldr	r2, [pc, #264]	@ (80055b4 <TIM_Base_SetConfig+0x134>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a41      	ldr	r2, [pc, #260]	@ (80055b8 <TIM_Base_SetConfig+0x138>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0x40>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a40      	ldr	r2, [pc, #256]	@ (80055bc <TIM_Base_SetConfig+0x13c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d108      	bne.n	80054d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a35      	ldr	r2, [pc, #212]	@ (80055ac <TIM_Base_SetConfig+0x12c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02b      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e0:	d027      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a32      	ldr	r2, [pc, #200]	@ (80055b0 <TIM_Base_SetConfig+0x130>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d023      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a31      	ldr	r2, [pc, #196]	@ (80055b4 <TIM_Base_SetConfig+0x134>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01f      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a30      	ldr	r2, [pc, #192]	@ (80055b8 <TIM_Base_SetConfig+0x138>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01b      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2f      	ldr	r2, [pc, #188]	@ (80055bc <TIM_Base_SetConfig+0x13c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d017      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2e      	ldr	r2, [pc, #184]	@ (80055c0 <TIM_Base_SetConfig+0x140>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2d      	ldr	r2, [pc, #180]	@ (80055c4 <TIM_Base_SetConfig+0x144>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00f      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2c      	ldr	r2, [pc, #176]	@ (80055c8 <TIM_Base_SetConfig+0x148>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00b      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2b      	ldr	r2, [pc, #172]	@ (80055cc <TIM_Base_SetConfig+0x14c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2a      	ldr	r2, [pc, #168]	@ (80055d0 <TIM_Base_SetConfig+0x150>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a29      	ldr	r2, [pc, #164]	@ (80055d4 <TIM_Base_SetConfig+0x154>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d108      	bne.n	8005544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a10      	ldr	r2, [pc, #64]	@ (80055ac <TIM_Base_SetConfig+0x12c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_Base_SetConfig+0xf8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a12      	ldr	r2, [pc, #72]	@ (80055bc <TIM_Base_SetConfig+0x13c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d103      	bne.n	8005580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d105      	bne.n	800559e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f023 0201 	bic.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]
  }
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800
 80055cc:	40001800 	.word	0x40001800
 80055d0:	40001c00 	.word	0x40001c00
 80055d4:	40002000 	.word	0x40002000

080055d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	f023 0201 	bic.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0303 	bic.w	r3, r3, #3
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 0302 	bic.w	r3, r3, #2
 8005620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a20      	ldr	r2, [pc, #128]	@ (80056b0 <TIM_OC1_SetConfig+0xd8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC1_SetConfig+0x64>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1f      	ldr	r2, [pc, #124]	@ (80056b4 <TIM_OC1_SetConfig+0xdc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d10c      	bne.n	8005656 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0308 	bic.w	r3, r3, #8
 8005642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a15      	ldr	r2, [pc, #84]	@ (80056b0 <TIM_OC1_SetConfig+0xd8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC1_SetConfig+0x8e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <TIM_OC1_SetConfig+0xdc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d111      	bne.n	800568a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800566c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40010400 	.word	0x40010400

080056b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0320 	bic.w	r3, r3, #32
 8005702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a22      	ldr	r2, [pc, #136]	@ (800579c <TIM_OC2_SetConfig+0xe4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC2_SetConfig+0x68>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a21      	ldr	r2, [pc, #132]	@ (80057a0 <TIM_OC2_SetConfig+0xe8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d10d      	bne.n	800573c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800573a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a17      	ldr	r2, [pc, #92]	@ (800579c <TIM_OC2_SetConfig+0xe4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC2_SetConfig+0x94>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a16      	ldr	r2, [pc, #88]	@ (80057a0 <TIM_OC2_SetConfig+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d113      	bne.n	8005774 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800575a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	621a      	str	r2, [r3, #32]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400

080057a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a21      	ldr	r2, [pc, #132]	@ (8005884 <TIM_OC3_SetConfig+0xe0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_OC3_SetConfig+0x66>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a20      	ldr	r2, [pc, #128]	@ (8005888 <TIM_OC3_SetConfig+0xe4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10d      	bne.n	8005826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a16      	ldr	r2, [pc, #88]	@ (8005884 <TIM_OC3_SetConfig+0xe0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_OC3_SetConfig+0x92>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a15      	ldr	r2, [pc, #84]	@ (8005888 <TIM_OC3_SetConfig+0xe4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d113      	bne.n	800585e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800583c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	621a      	str	r2, [r3, #32]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	40010000 	.word	0x40010000
 8005888:	40010400 	.word	0x40010400

0800588c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a12      	ldr	r2, [pc, #72]	@ (8005930 <TIM_OC4_SetConfig+0xa4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_OC4_SetConfig+0x68>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a11      	ldr	r2, [pc, #68]	@ (8005934 <TIM_OC4_SetConfig+0xa8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d109      	bne.n	8005908 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000
 8005934:	40010400 	.word	0x40010400

08005938 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005954:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b70      	cmp	r3, #112	@ 0x70
 8005980:	d01a      	beq.n	80059b8 <TIM_SlaveTimer_SetConfig+0x80>
 8005982:	2b70      	cmp	r3, #112	@ 0x70
 8005984:	d860      	bhi.n	8005a48 <TIM_SlaveTimer_SetConfig+0x110>
 8005986:	2b60      	cmp	r3, #96	@ 0x60
 8005988:	d054      	beq.n	8005a34 <TIM_SlaveTimer_SetConfig+0xfc>
 800598a:	2b60      	cmp	r3, #96	@ 0x60
 800598c:	d85c      	bhi.n	8005a48 <TIM_SlaveTimer_SetConfig+0x110>
 800598e:	2b50      	cmp	r3, #80	@ 0x50
 8005990:	d046      	beq.n	8005a20 <TIM_SlaveTimer_SetConfig+0xe8>
 8005992:	2b50      	cmp	r3, #80	@ 0x50
 8005994:	d858      	bhi.n	8005a48 <TIM_SlaveTimer_SetConfig+0x110>
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d019      	beq.n	80059ce <TIM_SlaveTimer_SetConfig+0x96>
 800599a:	2b40      	cmp	r3, #64	@ 0x40
 800599c:	d854      	bhi.n	8005a48 <TIM_SlaveTimer_SetConfig+0x110>
 800599e:	2b30      	cmp	r3, #48	@ 0x30
 80059a0:	d055      	beq.n	8005a4e <TIM_SlaveTimer_SetConfig+0x116>
 80059a2:	2b30      	cmp	r3, #48	@ 0x30
 80059a4:	d850      	bhi.n	8005a48 <TIM_SlaveTimer_SetConfig+0x110>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d051      	beq.n	8005a4e <TIM_SlaveTimer_SetConfig+0x116>
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d84c      	bhi.n	8005a48 <TIM_SlaveTimer_SetConfig+0x110>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d04d      	beq.n	8005a4e <TIM_SlaveTimer_SetConfig+0x116>
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d04b      	beq.n	8005a4e <TIM_SlaveTimer_SetConfig+0x116>
 80059b6:	e047      	b.n	8005a48 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80059c8:	f000 f8c1 	bl	8005b4e <TIM_ETR_SetConfig>
      break;
 80059cc:	e040      	b.n	8005a50 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d101      	bne.n	80059da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e03b      	b.n	8005a52 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a00:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]
      break;
 8005a1e:	e017      	b.n	8005a50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f000 f814 	bl	8005a5a <TIM_TI1_ConfigInputStage>
      break;
 8005a32:	e00d      	b.n	8005a50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a40:	461a      	mov	r2, r3
 8005a42:	f000 f839 	bl	8005ab8 <TIM_TI2_ConfigInputStage>
      break;
 8005a46:	e003      	b.n	8005a50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4c:	e000      	b.n	8005a50 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005a4e:	bf00      	nop
  }

  return status;
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f023 0201 	bic.w	r2, r3, #1
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 030a 	bic.w	r3, r3, #10
 8005a96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	621a      	str	r2, [r3, #32]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0210 	bic.w	r2, r3, #16
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	031b      	lsls	r3, r3, #12
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f043 0307 	orr.w	r3, r3, #7
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	609a      	str	r2, [r3, #8]
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	609a      	str	r2, [r3, #8]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b087      	sub	sp, #28
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f003 031f 	and.w	r3, r3, #31
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	401a      	ands	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e05a      	b.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a21      	ldr	r2, [pc, #132]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d022      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3c:	d01d      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d018      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00e      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a18      	ldr	r2, [pc, #96]	@ (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d009      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10c      	bne.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40010400 	.word	0x40010400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40001800 	.word	0x40001800

08005cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e042      	b.n	8005d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc ffbc 	bl	8002c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2224      	movs	r2, #36	@ 0x24
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fdcb 	bl	80068d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	@ 0x30
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d156      	bne.n	8005e60 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_UART_Transmit_DMA+0x26>
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e04f      	b.n	8005e62 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2221      	movs	r2, #33	@ 0x21
 8005dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	4a21      	ldr	r2, [pc, #132]	@ (8005e6c <HAL_UART_Transmit_DMA+0xd4>)
 8005de8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dee:	4a20      	ldr	r2, [pc, #128]	@ (8005e70 <HAL_UART_Transmit_DMA+0xd8>)
 8005df0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e74 <HAL_UART_Transmit_DMA+0xdc>)
 8005df8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	2200      	movs	r2, #0
 8005e00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3304      	adds	r3, #4
 8005e16:	461a      	mov	r2, r3
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	f7fd fb17 	bl	800344c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	617b      	str	r3, [r7, #20]
   return(result);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6a39      	ldr	r1, [r7, #32]
 8005e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e000      	b.n	8005e62 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
  }
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3730      	adds	r7, #48	@ 0x30
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	08006405 	.word	0x08006405
 8005e70:	0800649f 	.word	0x0800649f
 8005e74:	080064bb 	.word	0x080064bb

08005e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10f      	bne.n	8005ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fc40 	bl	800675c <UART_Receive_IT>
      return;
 8005edc:	e25b      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80de 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80d1 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f043 0202 	orr.w	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
 8005f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f043 0204 	orr.w	r2, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
 8005f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	f043 0208 	orr.w	r2, r3, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 81f2 	beq.w	800638c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fbcb 	bl	800675c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd0:	2b40      	cmp	r3, #64	@ 0x40
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x17a>
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04f      	beq.n	8006092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fad3 	bl	800659e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006002:	2b40      	cmp	r3, #64	@ 0x40
 8006004:	d141      	bne.n	800608a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800601c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006032:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006036:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800603e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800604a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1d9      	bne.n	8006006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	4a7e      	ldr	r2, [pc, #504]	@ (8006258 <HAL_UART_IRQHandler+0x3e0>)
 8006060:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fab8 	bl	80035dc <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00e      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9a8 	bl	80063d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e00a      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9a4 	bl	80063d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e006      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9a0 	bl	80063d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800609e:	e175      	b.n	800638c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	bf00      	nop
    return;
 80060a2:	e173      	b.n	800638c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	f040 814f 	bne.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8148 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8141 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	f040 80b6 	bne.w	800625c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8145 	beq.w	8006390 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800610a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800610e:	429a      	cmp	r2, r3
 8006110:	f080 813e 	bcs.w	8006390 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800611a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006126:	f000 8088 	beq.w	800623a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	330c      	adds	r3, #12
 8006130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006140:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006148:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	330c      	adds	r3, #12
 8006152:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800615a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006162:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800616e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1d9      	bne.n	800612a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3314      	adds	r3, #20
 8006196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800619a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800619e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e1      	bne.n	8006176 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80061c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80061d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80061d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80061dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80061e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e3      	bne.n	80061b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800620a:	f023 0310 	bic.w	r3, r3, #16
 800620e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800621c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800621e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006222:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800622a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e3      	bne.n	80061f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006234:	4618      	mov	r0, r3
 8006236:	f7fd f961 	bl	80034fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006248:	b29b      	uxth	r3, r3
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	b29b      	uxth	r3, r3
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8cb 	bl	80063ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006256:	e09b      	b.n	8006390 <HAL_UART_IRQHandler+0x518>
 8006258:	08006665 	.word	0x08006665
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006264:	b29b      	uxth	r3, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 808e 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8089 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80062a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80062a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e3      	bne.n	8006282 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3314      	adds	r3, #20
 80062da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80062de:	633a      	str	r2, [r7, #48]	@ 0x30
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e3      	bne.n	80062ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0310 	bic.w	r3, r3, #16
 8006316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	617b      	str	r3, [r7, #20]
   return(result);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e3      	bne.n	8006300 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800633e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f851 	bl	80063ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800634a:	e023      	b.n	8006394 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f991 	bl	800668c <UART_Transmit_IT>
    return;
 800636a:	e014      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f9d1 	bl	800672c <UART_EndTransmit_IT>
    return;
 800638a:	e004      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    return;
 800638c:	bf00      	nop
 800638e:	e002      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006394:	bf00      	nop
  }
}
 8006396:	37e8      	adds	r7, #232	@ 0xe8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b090      	sub	sp, #64	@ 0x40
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d137      	bne.n	8006490 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006422:	2200      	movs	r2, #0
 8006424:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	623b      	str	r3, [r7, #32]
   return(result);
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800643e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3314      	adds	r3, #20
 8006444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006446:	633a      	str	r2, [r7, #48]	@ 0x30
 8006448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800644c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800645a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	60fb      	str	r3, [r7, #12]
   return(result);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
 8006472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800647a:	61fa      	str	r2, [r7, #28]
 800647c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	617b      	str	r3, [r7, #20]
   return(result);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800648e:	e002      	b.n	8006496 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006490:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006492:	f7ff ff83 	bl	800639c <HAL_UART_TxCpltCallback>
}
 8006496:	bf00      	nop
 8006498:	3740      	adds	r7, #64	@ 0x40
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff ff7f 	bl	80063b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064b2:	bf00      	nop
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d6:	2b80      	cmp	r3, #128	@ 0x80
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b21      	cmp	r3, #33	@ 0x21
 80064ec:	d108      	bne.n	8006500 <UART_DMAError+0x46>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80064fa:	68b8      	ldr	r0, [r7, #8]
 80064fc:	f000 f827 	bl	800654e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650a:	2b40      	cmp	r3, #64	@ 0x40
 800650c:	bf0c      	ite	eq
 800650e:	2301      	moveq	r3, #1
 8006510:	2300      	movne	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b22      	cmp	r3, #34	@ 0x22
 8006520:	d108      	bne.n	8006534 <UART_DMAError+0x7a>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800652e:	68b8      	ldr	r0, [r7, #8]
 8006530:	f000 f835 	bl	800659e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006538:	f043 0210 	orr.w	r2, r3, #16
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006540:	68b8      	ldr	r0, [r7, #8]
 8006542:	f7ff ff49 	bl	80063d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800654e:	b480      	push	{r7}
 8006550:	b089      	sub	sp, #36	@ 0x24
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	60bb      	str	r3, [r7, #8]
   return(result);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	61ba      	str	r2, [r7, #24]
 8006578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6979      	ldr	r1, [r7, #20]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	613b      	str	r3, [r7, #16]
   return(result);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006592:	bf00      	nop
 8006594:	3724      	adds	r7, #36	@ 0x24
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800659e:	b480      	push	{r7}
 80065a0:	b095      	sub	sp, #84	@ 0x54
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80065c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006612:	2b01      	cmp	r3, #1
 8006614:	d119      	bne.n	800664a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	60bb      	str	r3, [r7, #8]
   return(result);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f023 0310 	bic.w	r3, r3, #16
 800662c:	647b      	str	r3, [r7, #68]	@ 0x44
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006636:	61ba      	str	r2, [r7, #24]
 8006638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6979      	ldr	r1, [r7, #20]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	613b      	str	r3, [r7, #16]
   return(result);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006658:	bf00      	nop
 800665a:	3754      	adds	r7, #84	@ 0x54
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff feaa 	bl	80063d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b21      	cmp	r3, #33	@ 0x21
 800669e:	d13e      	bne.n	800671e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a8:	d114      	bne.n	80066d4 <UART_Transmit_IT+0x48>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d110      	bne.n	80066d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]
 80066d2:	e008      	b.n	80066e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6211      	str	r1, [r2, #32]
 80066de:	781a      	ldrb	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	4619      	mov	r1, r3
 80066f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10f      	bne.n	800671a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006708:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006718:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e000      	b.n	8006720 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800671e:	2302      	movs	r3, #2
  }
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006742:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fe25 	bl	800639c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b08c      	sub	sp, #48	@ 0x30
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b22      	cmp	r3, #34	@ 0x22
 800676e:	f040 80ae 	bne.w	80068ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677a:	d117      	bne.n	80067ac <UART_Receive_IT+0x50>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d113      	bne.n	80067ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	b29a      	uxth	r2, r3
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	1c9a      	adds	r2, r3, #2
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80067aa:	e026      	b.n	80067fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067be:	d007      	beq.n	80067d0 <UART_Receive_IT+0x74>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <UART_Receive_IT+0x82>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e008      	b.n	80067f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29b      	uxth	r3, r3
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4619      	mov	r1, r3
 8006808:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800680a:	2b00      	cmp	r3, #0
 800680c:	d15d      	bne.n	80068ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0220 	bic.w	r2, r2, #32
 800681c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800682c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695a      	ldr	r2, [r3, #20]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0201 	bic.w	r2, r2, #1
 800683c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006850:	2b01      	cmp	r3, #1
 8006852:	d135      	bne.n	80068c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	613b      	str	r3, [r7, #16]
   return(result);
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f023 0310 	bic.w	r3, r3, #16
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800687a:	623a      	str	r2, [r7, #32]
 800687c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	69f9      	ldr	r1, [r7, #28]
 8006880:	6a3a      	ldr	r2, [r7, #32]
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	61bb      	str	r3, [r7, #24]
   return(result);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e5      	bne.n	800685a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b10      	cmp	r3, #16
 800689a:	d10a      	bne.n	80068b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fd97 	bl	80063ec <HAL_UARTEx_RxEventCallback>
 80068be:	e002      	b.n	80068c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fd7f 	bl	80063c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e002      	b.n	80068d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e000      	b.n	80068d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068ce:	2302      	movs	r3, #2
  }
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3730      	adds	r7, #48	@ 0x30
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068dc:	b0c0      	sub	sp, #256	@ 0x100
 80068de:	af00      	add	r7, sp, #0
 80068e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f4:	68d9      	ldr	r1, [r3, #12]
 80068f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	ea40 0301 	orr.w	r3, r0, r1
 8006900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	431a      	orrs	r2, r3
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	431a      	orrs	r2, r3
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006930:	f021 010c 	bic.w	r1, r1, #12
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800693e:	430b      	orrs	r3, r1
 8006940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006952:	6999      	ldr	r1, [r3, #24]
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	ea40 0301 	orr.w	r3, r0, r1
 800695e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b8f      	ldr	r3, [pc, #572]	@ (8006ba4 <UART_SetConfig+0x2cc>)
 8006968:	429a      	cmp	r2, r3
 800696a:	d005      	beq.n	8006978 <UART_SetConfig+0xa0>
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	4b8d      	ldr	r3, [pc, #564]	@ (8006ba8 <UART_SetConfig+0x2d0>)
 8006974:	429a      	cmp	r2, r3
 8006976:	d104      	bne.n	8006982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006978:	f7fd ff26 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 800697c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006980:	e003      	b.n	800698a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006982:	f7fd ff0d 	bl	80047a0 <HAL_RCC_GetPCLK1Freq>
 8006986:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800698a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006994:	f040 810c 	bne.w	8006bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800699c:	2200      	movs	r2, #0
 800699e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80069a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80069aa:	4622      	mov	r2, r4
 80069ac:	462b      	mov	r3, r5
 80069ae:	1891      	adds	r1, r2, r2
 80069b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80069b2:	415b      	adcs	r3, r3
 80069b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80069ba:	4621      	mov	r1, r4
 80069bc:	eb12 0801 	adds.w	r8, r2, r1
 80069c0:	4629      	mov	r1, r5
 80069c2:	eb43 0901 	adc.w	r9, r3, r1
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069da:	4690      	mov	r8, r2
 80069dc:	4699      	mov	r9, r3
 80069de:	4623      	mov	r3, r4
 80069e0:	eb18 0303 	adds.w	r3, r8, r3
 80069e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069e8:	462b      	mov	r3, r5
 80069ea:	eb49 0303 	adc.w	r3, r9, r3
 80069ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a06:	460b      	mov	r3, r1
 8006a08:	18db      	adds	r3, r3, r3
 8006a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	eb42 0303 	adc.w	r3, r2, r3
 8006a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a1c:	f7fa f934 	bl	8000c88 <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4b61      	ldr	r3, [pc, #388]	@ (8006bac <UART_SetConfig+0x2d4>)
 8006a26:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	011c      	lsls	r4, r3, #4
 8006a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	1891      	adds	r1, r2, r2
 8006a46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a48:	415b      	adcs	r3, r3
 8006a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a50:	4641      	mov	r1, r8
 8006a52:	eb12 0a01 	adds.w	sl, r2, r1
 8006a56:	4649      	mov	r1, r9
 8006a58:	eb43 0b01 	adc.w	fp, r3, r1
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a70:	4692      	mov	sl, r2
 8006a72:	469b      	mov	fp, r3
 8006a74:	4643      	mov	r3, r8
 8006a76:	eb1a 0303 	adds.w	r3, sl, r3
 8006a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	eb4b 0303 	adc.w	r3, fp, r3
 8006a84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	18db      	adds	r3, r3, r3
 8006aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	eb42 0303 	adc.w	r3, r2, r3
 8006aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ab2:	f7fa f8e9 	bl	8000c88 <__aeabi_uldivmod>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4611      	mov	r1, r2
 8006abc:	4b3b      	ldr	r3, [pc, #236]	@ (8006bac <UART_SetConfig+0x2d4>)
 8006abe:	fba3 2301 	umull	r2, r3, r3, r1
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	2264      	movs	r2, #100	@ 0x64
 8006ac6:	fb02 f303 	mul.w	r3, r2, r3
 8006aca:	1acb      	subs	r3, r1, r3
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ad2:	4b36      	ldr	r3, [pc, #216]	@ (8006bac <UART_SetConfig+0x2d4>)
 8006ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ae0:	441c      	add	r4, r3
 8006ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006aec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006af4:	4642      	mov	r2, r8
 8006af6:	464b      	mov	r3, r9
 8006af8:	1891      	adds	r1, r2, r2
 8006afa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006afc:	415b      	adcs	r3, r3
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b04:	4641      	mov	r1, r8
 8006b06:	1851      	adds	r1, r2, r1
 8006b08:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	414b      	adcs	r3, r1
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	00cb      	lsls	r3, r1, #3
 8006b20:	4651      	mov	r1, sl
 8006b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b26:	4651      	mov	r1, sl
 8006b28:	00ca      	lsls	r2, r1, #3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4642      	mov	r2, r8
 8006b32:	189b      	adds	r3, r3, r2
 8006b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b38:	464b      	mov	r3, r9
 8006b3a:	460a      	mov	r2, r1
 8006b3c:	eb42 0303 	adc.w	r3, r2, r3
 8006b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b58:	460b      	mov	r3, r1
 8006b5a:	18db      	adds	r3, r3, r3
 8006b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b5e:	4613      	mov	r3, r2
 8006b60:	eb42 0303 	adc.w	r3, r2, r3
 8006b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b6e:	f7fa f88b 	bl	8000c88 <__aeabi_uldivmod>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4b0d      	ldr	r3, [pc, #52]	@ (8006bac <UART_SetConfig+0x2d4>)
 8006b78:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	2164      	movs	r1, #100	@ 0x64
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	3332      	adds	r3, #50	@ 0x32
 8006b8a:	4a08      	ldr	r2, [pc, #32]	@ (8006bac <UART_SetConfig+0x2d4>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	f003 0207 	and.w	r2, r3, #7
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4422      	add	r2, r4
 8006b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ba0:	e106      	b.n	8006db0 <UART_SetConfig+0x4d8>
 8006ba2:	bf00      	nop
 8006ba4:	40011000 	.word	0x40011000
 8006ba8:	40011400 	.word	0x40011400
 8006bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	1891      	adds	r1, r2, r2
 8006bc8:	6239      	str	r1, [r7, #32]
 8006bca:	415b      	adcs	r3, r3
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bd2:	4641      	mov	r1, r8
 8006bd4:	1854      	adds	r4, r2, r1
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	eb43 0501 	adc.w	r5, r3, r1
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	f04f 0300 	mov.w	r3, #0
 8006be4:	00eb      	lsls	r3, r5, #3
 8006be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bea:	00e2      	lsls	r2, r4, #3
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	4643      	mov	r3, r8
 8006bf2:	18e3      	adds	r3, r4, r3
 8006bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	eb45 0303 	adc.w	r3, r5, r3
 8006bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c12:	f04f 0200 	mov.w	r2, #0
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c1e:	4629      	mov	r1, r5
 8006c20:	008b      	lsls	r3, r1, #2
 8006c22:	4621      	mov	r1, r4
 8006c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c28:	4621      	mov	r1, r4
 8006c2a:	008a      	lsls	r2, r1, #2
 8006c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c30:	f7fa f82a 	bl	8000c88 <__aeabi_uldivmod>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4b60      	ldr	r3, [pc, #384]	@ (8006dbc <UART_SetConfig+0x4e4>)
 8006c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	011c      	lsls	r4, r3, #4
 8006c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c54:	4642      	mov	r2, r8
 8006c56:	464b      	mov	r3, r9
 8006c58:	1891      	adds	r1, r2, r2
 8006c5a:	61b9      	str	r1, [r7, #24]
 8006c5c:	415b      	adcs	r3, r3
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c64:	4641      	mov	r1, r8
 8006c66:	1851      	adds	r1, r2, r1
 8006c68:	6139      	str	r1, [r7, #16]
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	414b      	adcs	r3, r1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c7c:	4659      	mov	r1, fp
 8006c7e:	00cb      	lsls	r3, r1, #3
 8006c80:	4651      	mov	r1, sl
 8006c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c86:	4651      	mov	r1, sl
 8006c88:	00ca      	lsls	r2, r1, #3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	4642      	mov	r2, r8
 8006c92:	189b      	adds	r3, r3, r2
 8006c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c98:	464b      	mov	r3, r9
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	008b      	lsls	r3, r1, #2
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	008a      	lsls	r2, r1, #2
 8006cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006cce:	f7f9 ffdb 	bl	8000c88 <__aeabi_uldivmod>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4b38      	ldr	r3, [pc, #224]	@ (8006dbc <UART_SetConfig+0x4e4>)
 8006cda:	fba3 2301 	umull	r2, r3, r3, r1
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	2264      	movs	r2, #100	@ 0x64
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	1acb      	subs	r3, r1, r3
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	3332      	adds	r3, #50	@ 0x32
 8006cec:	4a33      	ldr	r2, [pc, #204]	@ (8006dbc <UART_SetConfig+0x4e4>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cf8:	441c      	add	r4, r3
 8006cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cfe:	2200      	movs	r2, #0
 8006d00:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d02:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	1891      	adds	r1, r2, r2
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	415b      	adcs	r3, r3
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d18:	4641      	mov	r1, r8
 8006d1a:	1851      	adds	r1, r2, r1
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	4649      	mov	r1, r9
 8006d20:	414b      	adcs	r3, r1
 8006d22:	607b      	str	r3, [r7, #4]
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d30:	4659      	mov	r1, fp
 8006d32:	00cb      	lsls	r3, r1, #3
 8006d34:	4651      	mov	r1, sl
 8006d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d3a:	4651      	mov	r1, sl
 8006d3c:	00ca      	lsls	r2, r1, #3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	4619      	mov	r1, r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	4642      	mov	r2, r8
 8006d46:	189b      	adds	r3, r3, r2
 8006d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d4a:	464b      	mov	r3, r9
 8006d4c:	460a      	mov	r2, r1
 8006d4e:	eb42 0303 	adc.w	r3, r2, r3
 8006d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	f04f 0300 	mov.w	r3, #0
 8006d68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	008b      	lsls	r3, r1, #2
 8006d70:	4641      	mov	r1, r8
 8006d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d76:	4641      	mov	r1, r8
 8006d78:	008a      	lsls	r2, r1, #2
 8006d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d7e:	f7f9 ff83 	bl	8000c88 <__aeabi_uldivmod>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <UART_SetConfig+0x4e4>)
 8006d88:	fba3 1302 	umull	r1, r3, r3, r2
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	2164      	movs	r1, #100	@ 0x64
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	3332      	adds	r3, #50	@ 0x32
 8006d9a:	4a08      	ldr	r2, [pc, #32]	@ (8006dbc <UART_SetConfig+0x4e4>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	f003 020f 	and.w	r2, r3, #15
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4422      	add	r2, r4
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006db6:	46bd      	mov	sp, r7
 8006db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dbc:	51eb851f 	.word	0x51eb851f

08006dc0 <__cvt>:
 8006dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc4:	ec57 6b10 	vmov	r6, r7, d0
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	463b      	mov	r3, r7
 8006dd0:	bfbb      	ittet	lt
 8006dd2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006dd6:	461f      	movlt	r7, r3
 8006dd8:	2300      	movge	r3, #0
 8006dda:	232d      	movlt	r3, #45	@ 0x2d
 8006ddc:	700b      	strb	r3, [r1, #0]
 8006dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006de0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006de4:	4691      	mov	r9, r2
 8006de6:	f023 0820 	bic.w	r8, r3, #32
 8006dea:	bfbc      	itt	lt
 8006dec:	4632      	movlt	r2, r6
 8006dee:	4616      	movlt	r6, r2
 8006df0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006df4:	d005      	beq.n	8006e02 <__cvt+0x42>
 8006df6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006dfa:	d100      	bne.n	8006dfe <__cvt+0x3e>
 8006dfc:	3401      	adds	r4, #1
 8006dfe:	2102      	movs	r1, #2
 8006e00:	e000      	b.n	8006e04 <__cvt+0x44>
 8006e02:	2103      	movs	r1, #3
 8006e04:	ab03      	add	r3, sp, #12
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	ab02      	add	r3, sp, #8
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	ec47 6b10 	vmov	d0, r6, r7
 8006e10:	4653      	mov	r3, sl
 8006e12:	4622      	mov	r2, r4
 8006e14:	f001 f874 	bl	8007f00 <_dtoa_r>
 8006e18:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	d119      	bne.n	8006e54 <__cvt+0x94>
 8006e20:	f019 0f01 	tst.w	r9, #1
 8006e24:	d00e      	beq.n	8006e44 <__cvt+0x84>
 8006e26:	eb00 0904 	add.w	r9, r0, r4
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4630      	mov	r0, r6
 8006e30:	4639      	mov	r1, r7
 8006e32:	f7f9 fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e36:	b108      	cbz	r0, 8006e3c <__cvt+0x7c>
 8006e38:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e3c:	2230      	movs	r2, #48	@ 0x30
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	454b      	cmp	r3, r9
 8006e42:	d31e      	bcc.n	8006e82 <__cvt+0xc2>
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e48:	1b5b      	subs	r3, r3, r5
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	b004      	add	sp, #16
 8006e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e58:	eb00 0904 	add.w	r9, r0, r4
 8006e5c:	d1e5      	bne.n	8006e2a <__cvt+0x6a>
 8006e5e:	7803      	ldrb	r3, [r0, #0]
 8006e60:	2b30      	cmp	r3, #48	@ 0x30
 8006e62:	d10a      	bne.n	8006e7a <__cvt+0xba>
 8006e64:	2200      	movs	r2, #0
 8006e66:	2300      	movs	r3, #0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e70:	b918      	cbnz	r0, 8006e7a <__cvt+0xba>
 8006e72:	f1c4 0401 	rsb	r4, r4, #1
 8006e76:	f8ca 4000 	str.w	r4, [sl]
 8006e7a:	f8da 3000 	ldr.w	r3, [sl]
 8006e7e:	4499      	add	r9, r3
 8006e80:	e7d3      	b.n	8006e2a <__cvt+0x6a>
 8006e82:	1c59      	adds	r1, r3, #1
 8006e84:	9103      	str	r1, [sp, #12]
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e7d9      	b.n	8006e3e <__cvt+0x7e>

08006e8a <__exponent>:
 8006e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	bfba      	itte	lt
 8006e90:	4249      	neglt	r1, r1
 8006e92:	232d      	movlt	r3, #45	@ 0x2d
 8006e94:	232b      	movge	r3, #43	@ 0x2b
 8006e96:	2909      	cmp	r1, #9
 8006e98:	7002      	strb	r2, [r0, #0]
 8006e9a:	7043      	strb	r3, [r0, #1]
 8006e9c:	dd29      	ble.n	8006ef2 <__exponent+0x68>
 8006e9e:	f10d 0307 	add.w	r3, sp, #7
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	270a      	movs	r7, #10
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006eac:	fb07 1416 	mls	r4, r7, r6, r1
 8006eb0:	3430      	adds	r4, #48	@ 0x30
 8006eb2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	2c63      	cmp	r4, #99	@ 0x63
 8006eba:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	dcf1      	bgt.n	8006ea6 <__exponent+0x1c>
 8006ec2:	3130      	adds	r1, #48	@ 0x30
 8006ec4:	1e94      	subs	r4, r2, #2
 8006ec6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006eca:	1c41      	adds	r1, r0, #1
 8006ecc:	4623      	mov	r3, r4
 8006ece:	42ab      	cmp	r3, r5
 8006ed0:	d30a      	bcc.n	8006ee8 <__exponent+0x5e>
 8006ed2:	f10d 0309 	add.w	r3, sp, #9
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	42ac      	cmp	r4, r5
 8006eda:	bf88      	it	hi
 8006edc:	2300      	movhi	r3, #0
 8006ede:	3302      	adds	r3, #2
 8006ee0:	4403      	add	r3, r0
 8006ee2:	1a18      	subs	r0, r3, r0
 8006ee4:	b003      	add	sp, #12
 8006ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006eec:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ef0:	e7ed      	b.n	8006ece <__exponent+0x44>
 8006ef2:	2330      	movs	r3, #48	@ 0x30
 8006ef4:	3130      	adds	r1, #48	@ 0x30
 8006ef6:	7083      	strb	r3, [r0, #2]
 8006ef8:	70c1      	strb	r1, [r0, #3]
 8006efa:	1d03      	adds	r3, r0, #4
 8006efc:	e7f1      	b.n	8006ee2 <__exponent+0x58>
	...

08006f00 <_printf_float>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	b08d      	sub	sp, #52	@ 0x34
 8006f06:	460c      	mov	r4, r1
 8006f08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	461f      	mov	r7, r3
 8006f10:	4605      	mov	r5, r0
 8006f12:	f000 feef 	bl	8007cf4 <_localeconv_r>
 8006f16:	6803      	ldr	r3, [r0, #0]
 8006f18:	9304      	str	r3, [sp, #16]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7f9 f9a8 	bl	8000270 <strlen>
 8006f20:	2300      	movs	r3, #0
 8006f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f24:	f8d8 3000 	ldr.w	r3, [r8]
 8006f28:	9005      	str	r0, [sp, #20]
 8006f2a:	3307      	adds	r3, #7
 8006f2c:	f023 0307 	bic.w	r3, r3, #7
 8006f30:	f103 0208 	add.w	r2, r3, #8
 8006f34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f38:	f8d4 b000 	ldr.w	fp, [r4]
 8006f3c:	f8c8 2000 	str.w	r2, [r8]
 8006f40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f48:	9307      	str	r3, [sp, #28]
 8006f4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f56:	4b9c      	ldr	r3, [pc, #624]	@ (80071c8 <_printf_float+0x2c8>)
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5c:	f7f9 fde6 	bl	8000b2c <__aeabi_dcmpun>
 8006f60:	bb70      	cbnz	r0, 8006fc0 <_printf_float+0xc0>
 8006f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f66:	4b98      	ldr	r3, [pc, #608]	@ (80071c8 <_printf_float+0x2c8>)
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6c:	f7f9 fdc0 	bl	8000af0 <__aeabi_dcmple>
 8006f70:	bb30      	cbnz	r0, 8006fc0 <_printf_float+0xc0>
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	4640      	mov	r0, r8
 8006f78:	4649      	mov	r1, r9
 8006f7a:	f7f9 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8006f7e:	b110      	cbz	r0, 8006f86 <_printf_float+0x86>
 8006f80:	232d      	movs	r3, #45	@ 0x2d
 8006f82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f86:	4a91      	ldr	r2, [pc, #580]	@ (80071cc <_printf_float+0x2cc>)
 8006f88:	4b91      	ldr	r3, [pc, #580]	@ (80071d0 <_printf_float+0x2d0>)
 8006f8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f8e:	bf94      	ite	ls
 8006f90:	4690      	movls	r8, r2
 8006f92:	4698      	movhi	r8, r3
 8006f94:	2303      	movs	r3, #3
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	f02b 0304 	bic.w	r3, fp, #4
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	f04f 0900 	mov.w	r9, #0
 8006fa2:	9700      	str	r7, [sp, #0]
 8006fa4:	4633      	mov	r3, r6
 8006fa6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 f9d2 	bl	8007354 <_printf_common>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f040 808d 	bne.w	80070d0 <_printf_float+0x1d0>
 8006fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fba:	b00d      	add	sp, #52	@ 0x34
 8006fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	f7f9 fdb0 	bl	8000b2c <__aeabi_dcmpun>
 8006fcc:	b140      	cbz	r0, 8006fe0 <_printf_float+0xe0>
 8006fce:	464b      	mov	r3, r9
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bfbc      	itt	lt
 8006fd4:	232d      	movlt	r3, #45	@ 0x2d
 8006fd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006fda:	4a7e      	ldr	r2, [pc, #504]	@ (80071d4 <_printf_float+0x2d4>)
 8006fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80071d8 <_printf_float+0x2d8>)
 8006fde:	e7d4      	b.n	8006f8a <_printf_float+0x8a>
 8006fe0:	6863      	ldr	r3, [r4, #4]
 8006fe2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006fe6:	9206      	str	r2, [sp, #24]
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	d13b      	bne.n	8007064 <_printf_float+0x164>
 8006fec:	2306      	movs	r3, #6
 8006fee:	6063      	str	r3, [r4, #4]
 8006ff0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6022      	str	r2, [r4, #0]
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ffc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007000:	ab09      	add	r3, sp, #36	@ 0x24
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	ec49 8b10 	vmov	d0, r8, r9
 800700a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800700e:	4628      	mov	r0, r5
 8007010:	f7ff fed6 	bl	8006dc0 <__cvt>
 8007014:	9b06      	ldr	r3, [sp, #24]
 8007016:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007018:	2b47      	cmp	r3, #71	@ 0x47
 800701a:	4680      	mov	r8, r0
 800701c:	d129      	bne.n	8007072 <_printf_float+0x172>
 800701e:	1cc8      	adds	r0, r1, #3
 8007020:	db02      	blt.n	8007028 <_printf_float+0x128>
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	4299      	cmp	r1, r3
 8007026:	dd41      	ble.n	80070ac <_printf_float+0x1ac>
 8007028:	f1aa 0a02 	sub.w	sl, sl, #2
 800702c:	fa5f fa8a 	uxtb.w	sl, sl
 8007030:	3901      	subs	r1, #1
 8007032:	4652      	mov	r2, sl
 8007034:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007038:	9109      	str	r1, [sp, #36]	@ 0x24
 800703a:	f7ff ff26 	bl	8006e8a <__exponent>
 800703e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007040:	1813      	adds	r3, r2, r0
 8007042:	2a01      	cmp	r2, #1
 8007044:	4681      	mov	r9, r0
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	dc02      	bgt.n	8007050 <_printf_float+0x150>
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	07d2      	lsls	r2, r2, #31
 800704e:	d501      	bpl.n	8007054 <_printf_float+0x154>
 8007050:	3301      	adds	r3, #1
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0a2      	beq.n	8006fa2 <_printf_float+0xa2>
 800705c:	232d      	movs	r3, #45	@ 0x2d
 800705e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007062:	e79e      	b.n	8006fa2 <_printf_float+0xa2>
 8007064:	9a06      	ldr	r2, [sp, #24]
 8007066:	2a47      	cmp	r2, #71	@ 0x47
 8007068:	d1c2      	bne.n	8006ff0 <_printf_float+0xf0>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1c0      	bne.n	8006ff0 <_printf_float+0xf0>
 800706e:	2301      	movs	r3, #1
 8007070:	e7bd      	b.n	8006fee <_printf_float+0xee>
 8007072:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007076:	d9db      	bls.n	8007030 <_printf_float+0x130>
 8007078:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800707c:	d118      	bne.n	80070b0 <_printf_float+0x1b0>
 800707e:	2900      	cmp	r1, #0
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	dd0b      	ble.n	800709c <_printf_float+0x19c>
 8007084:	6121      	str	r1, [r4, #16]
 8007086:	b913      	cbnz	r3, 800708e <_printf_float+0x18e>
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	07d0      	lsls	r0, r2, #31
 800708c:	d502      	bpl.n	8007094 <_printf_float+0x194>
 800708e:	3301      	adds	r3, #1
 8007090:	440b      	add	r3, r1
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007096:	f04f 0900 	mov.w	r9, #0
 800709a:	e7db      	b.n	8007054 <_printf_float+0x154>
 800709c:	b913      	cbnz	r3, 80070a4 <_printf_float+0x1a4>
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	07d2      	lsls	r2, r2, #31
 80070a2:	d501      	bpl.n	80070a8 <_printf_float+0x1a8>
 80070a4:	3302      	adds	r3, #2
 80070a6:	e7f4      	b.n	8007092 <_printf_float+0x192>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e7f2      	b.n	8007092 <_printf_float+0x192>
 80070ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070b2:	4299      	cmp	r1, r3
 80070b4:	db05      	blt.n	80070c2 <_printf_float+0x1c2>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	6121      	str	r1, [r4, #16]
 80070ba:	07d8      	lsls	r0, r3, #31
 80070bc:	d5ea      	bpl.n	8007094 <_printf_float+0x194>
 80070be:	1c4b      	adds	r3, r1, #1
 80070c0:	e7e7      	b.n	8007092 <_printf_float+0x192>
 80070c2:	2900      	cmp	r1, #0
 80070c4:	bfd4      	ite	le
 80070c6:	f1c1 0202 	rsble	r2, r1, #2
 80070ca:	2201      	movgt	r2, #1
 80070cc:	4413      	add	r3, r2
 80070ce:	e7e0      	b.n	8007092 <_printf_float+0x192>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	055a      	lsls	r2, r3, #21
 80070d4:	d407      	bmi.n	80070e6 <_printf_float+0x1e6>
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	4642      	mov	r2, r8
 80070da:	4631      	mov	r1, r6
 80070dc:	4628      	mov	r0, r5
 80070de:	47b8      	blx	r7
 80070e0:	3001      	adds	r0, #1
 80070e2:	d12b      	bne.n	800713c <_printf_float+0x23c>
 80070e4:	e767      	b.n	8006fb6 <_printf_float+0xb6>
 80070e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070ea:	f240 80dd 	bls.w	80072a8 <_printf_float+0x3a8>
 80070ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	f7f9 fce7 	bl	8000ac8 <__aeabi_dcmpeq>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d033      	beq.n	8007166 <_printf_float+0x266>
 80070fe:	4a37      	ldr	r2, [pc, #220]	@ (80071dc <_printf_float+0x2dc>)
 8007100:	2301      	movs	r3, #1
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	f43f af54 	beq.w	8006fb6 <_printf_float+0xb6>
 800710e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007112:	4543      	cmp	r3, r8
 8007114:	db02      	blt.n	800711c <_printf_float+0x21c>
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	07d8      	lsls	r0, r3, #31
 800711a:	d50f      	bpl.n	800713c <_printf_float+0x23c>
 800711c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af45 	beq.w	8006fb6 <_printf_float+0xb6>
 800712c:	f04f 0900 	mov.w	r9, #0
 8007130:	f108 38ff 	add.w	r8, r8, #4294967295
 8007134:	f104 0a1a 	add.w	sl, r4, #26
 8007138:	45c8      	cmp	r8, r9
 800713a:	dc09      	bgt.n	8007150 <_printf_float+0x250>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	079b      	lsls	r3, r3, #30
 8007140:	f100 8103 	bmi.w	800734a <_printf_float+0x44a>
 8007144:	68e0      	ldr	r0, [r4, #12]
 8007146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007148:	4298      	cmp	r0, r3
 800714a:	bfb8      	it	lt
 800714c:	4618      	movlt	r0, r3
 800714e:	e734      	b.n	8006fba <_printf_float+0xba>
 8007150:	2301      	movs	r3, #1
 8007152:	4652      	mov	r2, sl
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f af2b 	beq.w	8006fb6 <_printf_float+0xb6>
 8007160:	f109 0901 	add.w	r9, r9, #1
 8007164:	e7e8      	b.n	8007138 <_printf_float+0x238>
 8007166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	dc39      	bgt.n	80071e0 <_printf_float+0x2e0>
 800716c:	4a1b      	ldr	r2, [pc, #108]	@ (80071dc <_printf_float+0x2dc>)
 800716e:	2301      	movs	r3, #1
 8007170:	4631      	mov	r1, r6
 8007172:	4628      	mov	r0, r5
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	f43f af1d 	beq.w	8006fb6 <_printf_float+0xb6>
 800717c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007180:	ea59 0303 	orrs.w	r3, r9, r3
 8007184:	d102      	bne.n	800718c <_printf_float+0x28c>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	07d9      	lsls	r1, r3, #31
 800718a:	d5d7      	bpl.n	800713c <_printf_float+0x23c>
 800718c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007190:	4631      	mov	r1, r6
 8007192:	4628      	mov	r0, r5
 8007194:	47b8      	blx	r7
 8007196:	3001      	adds	r0, #1
 8007198:	f43f af0d 	beq.w	8006fb6 <_printf_float+0xb6>
 800719c:	f04f 0a00 	mov.w	sl, #0
 80071a0:	f104 0b1a 	add.w	fp, r4, #26
 80071a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a6:	425b      	negs	r3, r3
 80071a8:	4553      	cmp	r3, sl
 80071aa:	dc01      	bgt.n	80071b0 <_printf_float+0x2b0>
 80071ac:	464b      	mov	r3, r9
 80071ae:	e793      	b.n	80070d8 <_printf_float+0x1d8>
 80071b0:	2301      	movs	r3, #1
 80071b2:	465a      	mov	r2, fp
 80071b4:	4631      	mov	r1, r6
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b8      	blx	r7
 80071ba:	3001      	adds	r0, #1
 80071bc:	f43f aefb 	beq.w	8006fb6 <_printf_float+0xb6>
 80071c0:	f10a 0a01 	add.w	sl, sl, #1
 80071c4:	e7ee      	b.n	80071a4 <_printf_float+0x2a4>
 80071c6:	bf00      	nop
 80071c8:	7fefffff 	.word	0x7fefffff
 80071cc:	0800b508 	.word	0x0800b508
 80071d0:	0800b50c 	.word	0x0800b50c
 80071d4:	0800b510 	.word	0x0800b510
 80071d8:	0800b514 	.word	0x0800b514
 80071dc:	0800b518 	.word	0x0800b518
 80071e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80071e6:	4553      	cmp	r3, sl
 80071e8:	bfa8      	it	ge
 80071ea:	4653      	movge	r3, sl
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	4699      	mov	r9, r3
 80071f0:	dc36      	bgt.n	8007260 <_printf_float+0x360>
 80071f2:	f04f 0b00 	mov.w	fp, #0
 80071f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071fa:	f104 021a 	add.w	r2, r4, #26
 80071fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007200:	9306      	str	r3, [sp, #24]
 8007202:	eba3 0309 	sub.w	r3, r3, r9
 8007206:	455b      	cmp	r3, fp
 8007208:	dc31      	bgt.n	800726e <_printf_float+0x36e>
 800720a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720c:	459a      	cmp	sl, r3
 800720e:	dc3a      	bgt.n	8007286 <_printf_float+0x386>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	07da      	lsls	r2, r3, #31
 8007214:	d437      	bmi.n	8007286 <_printf_float+0x386>
 8007216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007218:	ebaa 0903 	sub.w	r9, sl, r3
 800721c:	9b06      	ldr	r3, [sp, #24]
 800721e:	ebaa 0303 	sub.w	r3, sl, r3
 8007222:	4599      	cmp	r9, r3
 8007224:	bfa8      	it	ge
 8007226:	4699      	movge	r9, r3
 8007228:	f1b9 0f00 	cmp.w	r9, #0
 800722c:	dc33      	bgt.n	8007296 <_printf_float+0x396>
 800722e:	f04f 0800 	mov.w	r8, #0
 8007232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007236:	f104 0b1a 	add.w	fp, r4, #26
 800723a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723c:	ebaa 0303 	sub.w	r3, sl, r3
 8007240:	eba3 0309 	sub.w	r3, r3, r9
 8007244:	4543      	cmp	r3, r8
 8007246:	f77f af79 	ble.w	800713c <_printf_float+0x23c>
 800724a:	2301      	movs	r3, #1
 800724c:	465a      	mov	r2, fp
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	47b8      	blx	r7
 8007254:	3001      	adds	r0, #1
 8007256:	f43f aeae 	beq.w	8006fb6 <_printf_float+0xb6>
 800725a:	f108 0801 	add.w	r8, r8, #1
 800725e:	e7ec      	b.n	800723a <_printf_float+0x33a>
 8007260:	4642      	mov	r2, r8
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	d1c2      	bne.n	80071f2 <_printf_float+0x2f2>
 800726c:	e6a3      	b.n	8006fb6 <_printf_float+0xb6>
 800726e:	2301      	movs	r3, #1
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	9206      	str	r2, [sp, #24]
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	f43f ae9c 	beq.w	8006fb6 <_printf_float+0xb6>
 800727e:	9a06      	ldr	r2, [sp, #24]
 8007280:	f10b 0b01 	add.w	fp, fp, #1
 8007284:	e7bb      	b.n	80071fe <_printf_float+0x2fe>
 8007286:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	d1c0      	bne.n	8007216 <_printf_float+0x316>
 8007294:	e68f      	b.n	8006fb6 <_printf_float+0xb6>
 8007296:	9a06      	ldr	r2, [sp, #24]
 8007298:	464b      	mov	r3, r9
 800729a:	4442      	add	r2, r8
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	d1c3      	bne.n	800722e <_printf_float+0x32e>
 80072a6:	e686      	b.n	8006fb6 <_printf_float+0xb6>
 80072a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072ac:	f1ba 0f01 	cmp.w	sl, #1
 80072b0:	dc01      	bgt.n	80072b6 <_printf_float+0x3b6>
 80072b2:	07db      	lsls	r3, r3, #31
 80072b4:	d536      	bpl.n	8007324 <_printf_float+0x424>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4642      	mov	r2, r8
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f ae78 	beq.w	8006fb6 <_printf_float+0xb6>
 80072c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	f43f ae70 	beq.w	8006fb6 <_printf_float+0xb6>
 80072d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80072da:	2200      	movs	r2, #0
 80072dc:	2300      	movs	r3, #0
 80072de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072e2:	f7f9 fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80072e6:	b9c0      	cbnz	r0, 800731a <_printf_float+0x41a>
 80072e8:	4653      	mov	r3, sl
 80072ea:	f108 0201 	add.w	r2, r8, #1
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	d10c      	bne.n	8007312 <_printf_float+0x412>
 80072f8:	e65d      	b.n	8006fb6 <_printf_float+0xb6>
 80072fa:	2301      	movs	r3, #1
 80072fc:	465a      	mov	r2, fp
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	f43f ae56 	beq.w	8006fb6 <_printf_float+0xb6>
 800730a:	f108 0801 	add.w	r8, r8, #1
 800730e:	45d0      	cmp	r8, sl
 8007310:	dbf3      	blt.n	80072fa <_printf_float+0x3fa>
 8007312:	464b      	mov	r3, r9
 8007314:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007318:	e6df      	b.n	80070da <_printf_float+0x1da>
 800731a:	f04f 0800 	mov.w	r8, #0
 800731e:	f104 0b1a 	add.w	fp, r4, #26
 8007322:	e7f4      	b.n	800730e <_printf_float+0x40e>
 8007324:	2301      	movs	r3, #1
 8007326:	4642      	mov	r2, r8
 8007328:	e7e1      	b.n	80072ee <_printf_float+0x3ee>
 800732a:	2301      	movs	r3, #1
 800732c:	464a      	mov	r2, r9
 800732e:	4631      	mov	r1, r6
 8007330:	4628      	mov	r0, r5
 8007332:	47b8      	blx	r7
 8007334:	3001      	adds	r0, #1
 8007336:	f43f ae3e 	beq.w	8006fb6 <_printf_float+0xb6>
 800733a:	f108 0801 	add.w	r8, r8, #1
 800733e:	68e3      	ldr	r3, [r4, #12]
 8007340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007342:	1a5b      	subs	r3, r3, r1
 8007344:	4543      	cmp	r3, r8
 8007346:	dcf0      	bgt.n	800732a <_printf_float+0x42a>
 8007348:	e6fc      	b.n	8007144 <_printf_float+0x244>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	f104 0919 	add.w	r9, r4, #25
 8007352:	e7f4      	b.n	800733e <_printf_float+0x43e>

08007354 <_printf_common>:
 8007354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	4616      	mov	r6, r2
 800735a:	4698      	mov	r8, r3
 800735c:	688a      	ldr	r2, [r1, #8]
 800735e:	690b      	ldr	r3, [r1, #16]
 8007360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007364:	4293      	cmp	r3, r2
 8007366:	bfb8      	it	lt
 8007368:	4613      	movlt	r3, r2
 800736a:	6033      	str	r3, [r6, #0]
 800736c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007370:	4607      	mov	r7, r0
 8007372:	460c      	mov	r4, r1
 8007374:	b10a      	cbz	r2, 800737a <_printf_common+0x26>
 8007376:	3301      	adds	r3, #1
 8007378:	6033      	str	r3, [r6, #0]
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	0699      	lsls	r1, r3, #26
 800737e:	bf42      	ittt	mi
 8007380:	6833      	ldrmi	r3, [r6, #0]
 8007382:	3302      	addmi	r3, #2
 8007384:	6033      	strmi	r3, [r6, #0]
 8007386:	6825      	ldr	r5, [r4, #0]
 8007388:	f015 0506 	ands.w	r5, r5, #6
 800738c:	d106      	bne.n	800739c <_printf_common+0x48>
 800738e:	f104 0a19 	add.w	sl, r4, #25
 8007392:	68e3      	ldr	r3, [r4, #12]
 8007394:	6832      	ldr	r2, [r6, #0]
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	42ab      	cmp	r3, r5
 800739a:	dc26      	bgt.n	80073ea <_printf_common+0x96>
 800739c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073a0:	6822      	ldr	r2, [r4, #0]
 80073a2:	3b00      	subs	r3, #0
 80073a4:	bf18      	it	ne
 80073a6:	2301      	movne	r3, #1
 80073a8:	0692      	lsls	r2, r2, #26
 80073aa:	d42b      	bmi.n	8007404 <_printf_common+0xb0>
 80073ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073b0:	4641      	mov	r1, r8
 80073b2:	4638      	mov	r0, r7
 80073b4:	47c8      	blx	r9
 80073b6:	3001      	adds	r0, #1
 80073b8:	d01e      	beq.n	80073f8 <_printf_common+0xa4>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	6922      	ldr	r2, [r4, #16]
 80073be:	f003 0306 	and.w	r3, r3, #6
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	bf02      	ittt	eq
 80073c6:	68e5      	ldreq	r5, [r4, #12]
 80073c8:	6833      	ldreq	r3, [r6, #0]
 80073ca:	1aed      	subeq	r5, r5, r3
 80073cc:	68a3      	ldr	r3, [r4, #8]
 80073ce:	bf0c      	ite	eq
 80073d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d4:	2500      	movne	r5, #0
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bfc4      	itt	gt
 80073da:	1a9b      	subgt	r3, r3, r2
 80073dc:	18ed      	addgt	r5, r5, r3
 80073de:	2600      	movs	r6, #0
 80073e0:	341a      	adds	r4, #26
 80073e2:	42b5      	cmp	r5, r6
 80073e4:	d11a      	bne.n	800741c <_printf_common+0xc8>
 80073e6:	2000      	movs	r0, #0
 80073e8:	e008      	b.n	80073fc <_printf_common+0xa8>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4652      	mov	r2, sl
 80073ee:	4641      	mov	r1, r8
 80073f0:	4638      	mov	r0, r7
 80073f2:	47c8      	blx	r9
 80073f4:	3001      	adds	r0, #1
 80073f6:	d103      	bne.n	8007400 <_printf_common+0xac>
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007400:	3501      	adds	r5, #1
 8007402:	e7c6      	b.n	8007392 <_printf_common+0x3e>
 8007404:	18e1      	adds	r1, r4, r3
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	2030      	movs	r0, #48	@ 0x30
 800740a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800740e:	4422      	add	r2, r4
 8007410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007418:	3302      	adds	r3, #2
 800741a:	e7c7      	b.n	80073ac <_printf_common+0x58>
 800741c:	2301      	movs	r3, #1
 800741e:	4622      	mov	r2, r4
 8007420:	4641      	mov	r1, r8
 8007422:	4638      	mov	r0, r7
 8007424:	47c8      	blx	r9
 8007426:	3001      	adds	r0, #1
 8007428:	d0e6      	beq.n	80073f8 <_printf_common+0xa4>
 800742a:	3601      	adds	r6, #1
 800742c:	e7d9      	b.n	80073e2 <_printf_common+0x8e>
	...

08007430 <_printf_i>:
 8007430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007434:	7e0f      	ldrb	r7, [r1, #24]
 8007436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007438:	2f78      	cmp	r7, #120	@ 0x78
 800743a:	4691      	mov	r9, r2
 800743c:	4680      	mov	r8, r0
 800743e:	460c      	mov	r4, r1
 8007440:	469a      	mov	sl, r3
 8007442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007446:	d807      	bhi.n	8007458 <_printf_i+0x28>
 8007448:	2f62      	cmp	r7, #98	@ 0x62
 800744a:	d80a      	bhi.n	8007462 <_printf_i+0x32>
 800744c:	2f00      	cmp	r7, #0
 800744e:	f000 80d2 	beq.w	80075f6 <_printf_i+0x1c6>
 8007452:	2f58      	cmp	r7, #88	@ 0x58
 8007454:	f000 80b9 	beq.w	80075ca <_printf_i+0x19a>
 8007458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800745c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007460:	e03a      	b.n	80074d8 <_printf_i+0xa8>
 8007462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007466:	2b15      	cmp	r3, #21
 8007468:	d8f6      	bhi.n	8007458 <_printf_i+0x28>
 800746a:	a101      	add	r1, pc, #4	@ (adr r1, 8007470 <_printf_i+0x40>)
 800746c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007470:	080074c9 	.word	0x080074c9
 8007474:	080074dd 	.word	0x080074dd
 8007478:	08007459 	.word	0x08007459
 800747c:	08007459 	.word	0x08007459
 8007480:	08007459 	.word	0x08007459
 8007484:	08007459 	.word	0x08007459
 8007488:	080074dd 	.word	0x080074dd
 800748c:	08007459 	.word	0x08007459
 8007490:	08007459 	.word	0x08007459
 8007494:	08007459 	.word	0x08007459
 8007498:	08007459 	.word	0x08007459
 800749c:	080075dd 	.word	0x080075dd
 80074a0:	08007507 	.word	0x08007507
 80074a4:	08007597 	.word	0x08007597
 80074a8:	08007459 	.word	0x08007459
 80074ac:	08007459 	.word	0x08007459
 80074b0:	080075ff 	.word	0x080075ff
 80074b4:	08007459 	.word	0x08007459
 80074b8:	08007507 	.word	0x08007507
 80074bc:	08007459 	.word	0x08007459
 80074c0:	08007459 	.word	0x08007459
 80074c4:	0800759f 	.word	0x0800759f
 80074c8:	6833      	ldr	r3, [r6, #0]
 80074ca:	1d1a      	adds	r2, r3, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6032      	str	r2, [r6, #0]
 80074d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074d8:	2301      	movs	r3, #1
 80074da:	e09d      	b.n	8007618 <_printf_i+0x1e8>
 80074dc:	6833      	ldr	r3, [r6, #0]
 80074de:	6820      	ldr	r0, [r4, #0]
 80074e0:	1d19      	adds	r1, r3, #4
 80074e2:	6031      	str	r1, [r6, #0]
 80074e4:	0606      	lsls	r6, r0, #24
 80074e6:	d501      	bpl.n	80074ec <_printf_i+0xbc>
 80074e8:	681d      	ldr	r5, [r3, #0]
 80074ea:	e003      	b.n	80074f4 <_printf_i+0xc4>
 80074ec:	0645      	lsls	r5, r0, #25
 80074ee:	d5fb      	bpl.n	80074e8 <_printf_i+0xb8>
 80074f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	da03      	bge.n	8007500 <_printf_i+0xd0>
 80074f8:	232d      	movs	r3, #45	@ 0x2d
 80074fa:	426d      	negs	r5, r5
 80074fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007500:	4859      	ldr	r0, [pc, #356]	@ (8007668 <_printf_i+0x238>)
 8007502:	230a      	movs	r3, #10
 8007504:	e011      	b.n	800752a <_printf_i+0xfa>
 8007506:	6821      	ldr	r1, [r4, #0]
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	0608      	lsls	r0, r1, #24
 800750c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007510:	d402      	bmi.n	8007518 <_printf_i+0xe8>
 8007512:	0649      	lsls	r1, r1, #25
 8007514:	bf48      	it	mi
 8007516:	b2ad      	uxthmi	r5, r5
 8007518:	2f6f      	cmp	r7, #111	@ 0x6f
 800751a:	4853      	ldr	r0, [pc, #332]	@ (8007668 <_printf_i+0x238>)
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	bf14      	ite	ne
 8007520:	230a      	movne	r3, #10
 8007522:	2308      	moveq	r3, #8
 8007524:	2100      	movs	r1, #0
 8007526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800752a:	6866      	ldr	r6, [r4, #4]
 800752c:	60a6      	str	r6, [r4, #8]
 800752e:	2e00      	cmp	r6, #0
 8007530:	bfa2      	ittt	ge
 8007532:	6821      	ldrge	r1, [r4, #0]
 8007534:	f021 0104 	bicge.w	r1, r1, #4
 8007538:	6021      	strge	r1, [r4, #0]
 800753a:	b90d      	cbnz	r5, 8007540 <_printf_i+0x110>
 800753c:	2e00      	cmp	r6, #0
 800753e:	d04b      	beq.n	80075d8 <_printf_i+0x1a8>
 8007540:	4616      	mov	r6, r2
 8007542:	fbb5 f1f3 	udiv	r1, r5, r3
 8007546:	fb03 5711 	mls	r7, r3, r1, r5
 800754a:	5dc7      	ldrb	r7, [r0, r7]
 800754c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007550:	462f      	mov	r7, r5
 8007552:	42bb      	cmp	r3, r7
 8007554:	460d      	mov	r5, r1
 8007556:	d9f4      	bls.n	8007542 <_printf_i+0x112>
 8007558:	2b08      	cmp	r3, #8
 800755a:	d10b      	bne.n	8007574 <_printf_i+0x144>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	07df      	lsls	r7, r3, #31
 8007560:	d508      	bpl.n	8007574 <_printf_i+0x144>
 8007562:	6923      	ldr	r3, [r4, #16]
 8007564:	6861      	ldr	r1, [r4, #4]
 8007566:	4299      	cmp	r1, r3
 8007568:	bfde      	ittt	le
 800756a:	2330      	movle	r3, #48	@ 0x30
 800756c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007570:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007574:	1b92      	subs	r2, r2, r6
 8007576:	6122      	str	r2, [r4, #16]
 8007578:	f8cd a000 	str.w	sl, [sp]
 800757c:	464b      	mov	r3, r9
 800757e:	aa03      	add	r2, sp, #12
 8007580:	4621      	mov	r1, r4
 8007582:	4640      	mov	r0, r8
 8007584:	f7ff fee6 	bl	8007354 <_printf_common>
 8007588:	3001      	adds	r0, #1
 800758a:	d14a      	bne.n	8007622 <_printf_i+0x1f2>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	b004      	add	sp, #16
 8007592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	f043 0320 	orr.w	r3, r3, #32
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	4833      	ldr	r0, [pc, #204]	@ (800766c <_printf_i+0x23c>)
 80075a0:	2778      	movs	r7, #120	@ 0x78
 80075a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	6831      	ldr	r1, [r6, #0]
 80075aa:	061f      	lsls	r7, r3, #24
 80075ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80075b0:	d402      	bmi.n	80075b8 <_printf_i+0x188>
 80075b2:	065f      	lsls	r7, r3, #25
 80075b4:	bf48      	it	mi
 80075b6:	b2ad      	uxthmi	r5, r5
 80075b8:	6031      	str	r1, [r6, #0]
 80075ba:	07d9      	lsls	r1, r3, #31
 80075bc:	bf44      	itt	mi
 80075be:	f043 0320 	orrmi.w	r3, r3, #32
 80075c2:	6023      	strmi	r3, [r4, #0]
 80075c4:	b11d      	cbz	r5, 80075ce <_printf_i+0x19e>
 80075c6:	2310      	movs	r3, #16
 80075c8:	e7ac      	b.n	8007524 <_printf_i+0xf4>
 80075ca:	4827      	ldr	r0, [pc, #156]	@ (8007668 <_printf_i+0x238>)
 80075cc:	e7e9      	b.n	80075a2 <_printf_i+0x172>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	f023 0320 	bic.w	r3, r3, #32
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	e7f6      	b.n	80075c6 <_printf_i+0x196>
 80075d8:	4616      	mov	r6, r2
 80075da:	e7bd      	b.n	8007558 <_printf_i+0x128>
 80075dc:	6833      	ldr	r3, [r6, #0]
 80075de:	6825      	ldr	r5, [r4, #0]
 80075e0:	6961      	ldr	r1, [r4, #20]
 80075e2:	1d18      	adds	r0, r3, #4
 80075e4:	6030      	str	r0, [r6, #0]
 80075e6:	062e      	lsls	r6, r5, #24
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	d501      	bpl.n	80075f0 <_printf_i+0x1c0>
 80075ec:	6019      	str	r1, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <_printf_i+0x1c6>
 80075f0:	0668      	lsls	r0, r5, #25
 80075f2:	d5fb      	bpl.n	80075ec <_printf_i+0x1bc>
 80075f4:	8019      	strh	r1, [r3, #0]
 80075f6:	2300      	movs	r3, #0
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	4616      	mov	r6, r2
 80075fc:	e7bc      	b.n	8007578 <_printf_i+0x148>
 80075fe:	6833      	ldr	r3, [r6, #0]
 8007600:	1d1a      	adds	r2, r3, #4
 8007602:	6032      	str	r2, [r6, #0]
 8007604:	681e      	ldr	r6, [r3, #0]
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	2100      	movs	r1, #0
 800760a:	4630      	mov	r0, r6
 800760c:	f7f8 fde0 	bl	80001d0 <memchr>
 8007610:	b108      	cbz	r0, 8007616 <_printf_i+0x1e6>
 8007612:	1b80      	subs	r0, r0, r6
 8007614:	6060      	str	r0, [r4, #4]
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	2300      	movs	r3, #0
 800761c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007620:	e7aa      	b.n	8007578 <_printf_i+0x148>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	4632      	mov	r2, r6
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	47d0      	blx	sl
 800762c:	3001      	adds	r0, #1
 800762e:	d0ad      	beq.n	800758c <_printf_i+0x15c>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	079b      	lsls	r3, r3, #30
 8007634:	d413      	bmi.n	800765e <_printf_i+0x22e>
 8007636:	68e0      	ldr	r0, [r4, #12]
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	4298      	cmp	r0, r3
 800763c:	bfb8      	it	lt
 800763e:	4618      	movlt	r0, r3
 8007640:	e7a6      	b.n	8007590 <_printf_i+0x160>
 8007642:	2301      	movs	r3, #1
 8007644:	4632      	mov	r2, r6
 8007646:	4649      	mov	r1, r9
 8007648:	4640      	mov	r0, r8
 800764a:	47d0      	blx	sl
 800764c:	3001      	adds	r0, #1
 800764e:	d09d      	beq.n	800758c <_printf_i+0x15c>
 8007650:	3501      	adds	r5, #1
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	9903      	ldr	r1, [sp, #12]
 8007656:	1a5b      	subs	r3, r3, r1
 8007658:	42ab      	cmp	r3, r5
 800765a:	dcf2      	bgt.n	8007642 <_printf_i+0x212>
 800765c:	e7eb      	b.n	8007636 <_printf_i+0x206>
 800765e:	2500      	movs	r5, #0
 8007660:	f104 0619 	add.w	r6, r4, #25
 8007664:	e7f5      	b.n	8007652 <_printf_i+0x222>
 8007666:	bf00      	nop
 8007668:	0800b51a 	.word	0x0800b51a
 800766c:	0800b52b 	.word	0x0800b52b

08007670 <_scanf_float>:
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	b087      	sub	sp, #28
 8007676:	4617      	mov	r7, r2
 8007678:	9303      	str	r3, [sp, #12]
 800767a:	688b      	ldr	r3, [r1, #8]
 800767c:	1e5a      	subs	r2, r3, #1
 800767e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007682:	bf81      	itttt	hi
 8007684:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007688:	eb03 0b05 	addhi.w	fp, r3, r5
 800768c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007690:	608b      	strhi	r3, [r1, #8]
 8007692:	680b      	ldr	r3, [r1, #0]
 8007694:	460a      	mov	r2, r1
 8007696:	f04f 0500 	mov.w	r5, #0
 800769a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800769e:	f842 3b1c 	str.w	r3, [r2], #28
 80076a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80076a6:	4680      	mov	r8, r0
 80076a8:	460c      	mov	r4, r1
 80076aa:	bf98      	it	ls
 80076ac:	f04f 0b00 	movls.w	fp, #0
 80076b0:	9201      	str	r2, [sp, #4]
 80076b2:	4616      	mov	r6, r2
 80076b4:	46aa      	mov	sl, r5
 80076b6:	46a9      	mov	r9, r5
 80076b8:	9502      	str	r5, [sp, #8]
 80076ba:	68a2      	ldr	r2, [r4, #8]
 80076bc:	b152      	cbz	r2, 80076d4 <_scanf_float+0x64>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80076c4:	d864      	bhi.n	8007790 <_scanf_float+0x120>
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d83c      	bhi.n	8007744 <_scanf_float+0xd4>
 80076ca:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80076ce:	b2c8      	uxtb	r0, r1
 80076d0:	280e      	cmp	r0, #14
 80076d2:	d93a      	bls.n	800774a <_scanf_float+0xda>
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	d003      	beq.n	80076e2 <_scanf_float+0x72>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076e6:	f1ba 0f01 	cmp.w	sl, #1
 80076ea:	f200 8117 	bhi.w	800791c <_scanf_float+0x2ac>
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	429e      	cmp	r6, r3
 80076f2:	f200 8108 	bhi.w	8007906 <_scanf_float+0x296>
 80076f6:	2001      	movs	r0, #1
 80076f8:	b007      	add	sp, #28
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007702:	2a0d      	cmp	r2, #13
 8007704:	d8e6      	bhi.n	80076d4 <_scanf_float+0x64>
 8007706:	a101      	add	r1, pc, #4	@ (adr r1, 800770c <_scanf_float+0x9c>)
 8007708:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800770c:	08007853 	.word	0x08007853
 8007710:	080076d5 	.word	0x080076d5
 8007714:	080076d5 	.word	0x080076d5
 8007718:	080076d5 	.word	0x080076d5
 800771c:	080078b3 	.word	0x080078b3
 8007720:	0800788b 	.word	0x0800788b
 8007724:	080076d5 	.word	0x080076d5
 8007728:	080076d5 	.word	0x080076d5
 800772c:	08007861 	.word	0x08007861
 8007730:	080076d5 	.word	0x080076d5
 8007734:	080076d5 	.word	0x080076d5
 8007738:	080076d5 	.word	0x080076d5
 800773c:	080076d5 	.word	0x080076d5
 8007740:	08007819 	.word	0x08007819
 8007744:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007748:	e7db      	b.n	8007702 <_scanf_float+0x92>
 800774a:	290e      	cmp	r1, #14
 800774c:	d8c2      	bhi.n	80076d4 <_scanf_float+0x64>
 800774e:	a001      	add	r0, pc, #4	@ (adr r0, 8007754 <_scanf_float+0xe4>)
 8007750:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007754:	08007809 	.word	0x08007809
 8007758:	080076d5 	.word	0x080076d5
 800775c:	08007809 	.word	0x08007809
 8007760:	0800789f 	.word	0x0800789f
 8007764:	080076d5 	.word	0x080076d5
 8007768:	080077b1 	.word	0x080077b1
 800776c:	080077ef 	.word	0x080077ef
 8007770:	080077ef 	.word	0x080077ef
 8007774:	080077ef 	.word	0x080077ef
 8007778:	080077ef 	.word	0x080077ef
 800777c:	080077ef 	.word	0x080077ef
 8007780:	080077ef 	.word	0x080077ef
 8007784:	080077ef 	.word	0x080077ef
 8007788:	080077ef 	.word	0x080077ef
 800778c:	080077ef 	.word	0x080077ef
 8007790:	2b6e      	cmp	r3, #110	@ 0x6e
 8007792:	d809      	bhi.n	80077a8 <_scanf_float+0x138>
 8007794:	2b60      	cmp	r3, #96	@ 0x60
 8007796:	d8b2      	bhi.n	80076fe <_scanf_float+0x8e>
 8007798:	2b54      	cmp	r3, #84	@ 0x54
 800779a:	d07b      	beq.n	8007894 <_scanf_float+0x224>
 800779c:	2b59      	cmp	r3, #89	@ 0x59
 800779e:	d199      	bne.n	80076d4 <_scanf_float+0x64>
 80077a0:	2d07      	cmp	r5, #7
 80077a2:	d197      	bne.n	80076d4 <_scanf_float+0x64>
 80077a4:	2508      	movs	r5, #8
 80077a6:	e02c      	b.n	8007802 <_scanf_float+0x192>
 80077a8:	2b74      	cmp	r3, #116	@ 0x74
 80077aa:	d073      	beq.n	8007894 <_scanf_float+0x224>
 80077ac:	2b79      	cmp	r3, #121	@ 0x79
 80077ae:	e7f6      	b.n	800779e <_scanf_float+0x12e>
 80077b0:	6821      	ldr	r1, [r4, #0]
 80077b2:	05c8      	lsls	r0, r1, #23
 80077b4:	d51b      	bpl.n	80077ee <_scanf_float+0x17e>
 80077b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80077ba:	6021      	str	r1, [r4, #0]
 80077bc:	f109 0901 	add.w	r9, r9, #1
 80077c0:	f1bb 0f00 	cmp.w	fp, #0
 80077c4:	d003      	beq.n	80077ce <_scanf_float+0x15e>
 80077c6:	3201      	adds	r2, #1
 80077c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077cc:	60a2      	str	r2, [r4, #8]
 80077ce:	68a3      	ldr	r3, [r4, #8]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	60a3      	str	r3, [r4, #8]
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	3301      	adds	r3, #1
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3b01      	subs	r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
 80077e2:	f340 8087 	ble.w	80078f4 <_scanf_float+0x284>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	603b      	str	r3, [r7, #0]
 80077ec:	e765      	b.n	80076ba <_scanf_float+0x4a>
 80077ee:	eb1a 0105 	adds.w	r1, sl, r5
 80077f2:	f47f af6f 	bne.w	80076d4 <_scanf_float+0x64>
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80077fc:	6022      	str	r2, [r4, #0]
 80077fe:	460d      	mov	r5, r1
 8007800:	468a      	mov	sl, r1
 8007802:	f806 3b01 	strb.w	r3, [r6], #1
 8007806:	e7e2      	b.n	80077ce <_scanf_float+0x15e>
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	0610      	lsls	r0, r2, #24
 800780c:	f57f af62 	bpl.w	80076d4 <_scanf_float+0x64>
 8007810:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007814:	6022      	str	r2, [r4, #0]
 8007816:	e7f4      	b.n	8007802 <_scanf_float+0x192>
 8007818:	f1ba 0f00 	cmp.w	sl, #0
 800781c:	d10e      	bne.n	800783c <_scanf_float+0x1cc>
 800781e:	f1b9 0f00 	cmp.w	r9, #0
 8007822:	d10e      	bne.n	8007842 <_scanf_float+0x1d2>
 8007824:	6822      	ldr	r2, [r4, #0]
 8007826:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800782a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800782e:	d108      	bne.n	8007842 <_scanf_float+0x1d2>
 8007830:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007834:	6022      	str	r2, [r4, #0]
 8007836:	f04f 0a01 	mov.w	sl, #1
 800783a:	e7e2      	b.n	8007802 <_scanf_float+0x192>
 800783c:	f1ba 0f02 	cmp.w	sl, #2
 8007840:	d055      	beq.n	80078ee <_scanf_float+0x27e>
 8007842:	2d01      	cmp	r5, #1
 8007844:	d002      	beq.n	800784c <_scanf_float+0x1dc>
 8007846:	2d04      	cmp	r5, #4
 8007848:	f47f af44 	bne.w	80076d4 <_scanf_float+0x64>
 800784c:	3501      	adds	r5, #1
 800784e:	b2ed      	uxtb	r5, r5
 8007850:	e7d7      	b.n	8007802 <_scanf_float+0x192>
 8007852:	f1ba 0f01 	cmp.w	sl, #1
 8007856:	f47f af3d 	bne.w	80076d4 <_scanf_float+0x64>
 800785a:	f04f 0a02 	mov.w	sl, #2
 800785e:	e7d0      	b.n	8007802 <_scanf_float+0x192>
 8007860:	b97d      	cbnz	r5, 8007882 <_scanf_float+0x212>
 8007862:	f1b9 0f00 	cmp.w	r9, #0
 8007866:	f47f af38 	bne.w	80076da <_scanf_float+0x6a>
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007870:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007874:	f040 8108 	bne.w	8007a88 <_scanf_float+0x418>
 8007878:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800787c:	6022      	str	r2, [r4, #0]
 800787e:	2501      	movs	r5, #1
 8007880:	e7bf      	b.n	8007802 <_scanf_float+0x192>
 8007882:	2d03      	cmp	r5, #3
 8007884:	d0e2      	beq.n	800784c <_scanf_float+0x1dc>
 8007886:	2d05      	cmp	r5, #5
 8007888:	e7de      	b.n	8007848 <_scanf_float+0x1d8>
 800788a:	2d02      	cmp	r5, #2
 800788c:	f47f af22 	bne.w	80076d4 <_scanf_float+0x64>
 8007890:	2503      	movs	r5, #3
 8007892:	e7b6      	b.n	8007802 <_scanf_float+0x192>
 8007894:	2d06      	cmp	r5, #6
 8007896:	f47f af1d 	bne.w	80076d4 <_scanf_float+0x64>
 800789a:	2507      	movs	r5, #7
 800789c:	e7b1      	b.n	8007802 <_scanf_float+0x192>
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	0591      	lsls	r1, r2, #22
 80078a2:	f57f af17 	bpl.w	80076d4 <_scanf_float+0x64>
 80078a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80078aa:	6022      	str	r2, [r4, #0]
 80078ac:	f8cd 9008 	str.w	r9, [sp, #8]
 80078b0:	e7a7      	b.n	8007802 <_scanf_float+0x192>
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80078b8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80078bc:	d006      	beq.n	80078cc <_scanf_float+0x25c>
 80078be:	0550      	lsls	r0, r2, #21
 80078c0:	f57f af08 	bpl.w	80076d4 <_scanf_float+0x64>
 80078c4:	f1b9 0f00 	cmp.w	r9, #0
 80078c8:	f000 80de 	beq.w	8007a88 <_scanf_float+0x418>
 80078cc:	0591      	lsls	r1, r2, #22
 80078ce:	bf58      	it	pl
 80078d0:	9902      	ldrpl	r1, [sp, #8]
 80078d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80078d6:	bf58      	it	pl
 80078d8:	eba9 0101 	subpl.w	r1, r9, r1
 80078dc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80078e0:	bf58      	it	pl
 80078e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80078e6:	6022      	str	r2, [r4, #0]
 80078e8:	f04f 0900 	mov.w	r9, #0
 80078ec:	e789      	b.n	8007802 <_scanf_float+0x192>
 80078ee:	f04f 0a03 	mov.w	sl, #3
 80078f2:	e786      	b.n	8007802 <_scanf_float+0x192>
 80078f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80078f8:	4639      	mov	r1, r7
 80078fa:	4640      	mov	r0, r8
 80078fc:	4798      	blx	r3
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aedb 	beq.w	80076ba <_scanf_float+0x4a>
 8007904:	e6e6      	b.n	80076d4 <_scanf_float+0x64>
 8007906:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800790a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800790e:	463a      	mov	r2, r7
 8007910:	4640      	mov	r0, r8
 8007912:	4798      	blx	r3
 8007914:	6923      	ldr	r3, [r4, #16]
 8007916:	3b01      	subs	r3, #1
 8007918:	6123      	str	r3, [r4, #16]
 800791a:	e6e8      	b.n	80076ee <_scanf_float+0x7e>
 800791c:	1e6b      	subs	r3, r5, #1
 800791e:	2b06      	cmp	r3, #6
 8007920:	d824      	bhi.n	800796c <_scanf_float+0x2fc>
 8007922:	2d02      	cmp	r5, #2
 8007924:	d836      	bhi.n	8007994 <_scanf_float+0x324>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	429e      	cmp	r6, r3
 800792a:	f67f aee4 	bls.w	80076f6 <_scanf_float+0x86>
 800792e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007936:	463a      	mov	r2, r7
 8007938:	4640      	mov	r0, r8
 800793a:	4798      	blx	r3
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	3b01      	subs	r3, #1
 8007940:	6123      	str	r3, [r4, #16]
 8007942:	e7f0      	b.n	8007926 <_scanf_float+0x2b6>
 8007944:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007948:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800794c:	463a      	mov	r2, r7
 800794e:	4640      	mov	r0, r8
 8007950:	4798      	blx	r3
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	3b01      	subs	r3, #1
 8007956:	6123      	str	r3, [r4, #16]
 8007958:	f10a 3aff 	add.w	sl, sl, #4294967295
 800795c:	fa5f fa8a 	uxtb.w	sl, sl
 8007960:	f1ba 0f02 	cmp.w	sl, #2
 8007964:	d1ee      	bne.n	8007944 <_scanf_float+0x2d4>
 8007966:	3d03      	subs	r5, #3
 8007968:	b2ed      	uxtb	r5, r5
 800796a:	1b76      	subs	r6, r6, r5
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	05da      	lsls	r2, r3, #23
 8007970:	d530      	bpl.n	80079d4 <_scanf_float+0x364>
 8007972:	055b      	lsls	r3, r3, #21
 8007974:	d511      	bpl.n	800799a <_scanf_float+0x32a>
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	429e      	cmp	r6, r3
 800797a:	f67f aebc 	bls.w	80076f6 <_scanf_float+0x86>
 800797e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007986:	463a      	mov	r2, r7
 8007988:	4640      	mov	r0, r8
 800798a:	4798      	blx	r3
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	3b01      	subs	r3, #1
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	e7f0      	b.n	8007976 <_scanf_float+0x306>
 8007994:	46aa      	mov	sl, r5
 8007996:	46b3      	mov	fp, r6
 8007998:	e7de      	b.n	8007958 <_scanf_float+0x2e8>
 800799a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	2965      	cmp	r1, #101	@ 0x65
 80079a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80079a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80079aa:	6123      	str	r3, [r4, #16]
 80079ac:	d00c      	beq.n	80079c8 <_scanf_float+0x358>
 80079ae:	2945      	cmp	r1, #69	@ 0x45
 80079b0:	d00a      	beq.n	80079c8 <_scanf_float+0x358>
 80079b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079b6:	463a      	mov	r2, r7
 80079b8:	4640      	mov	r0, r8
 80079ba:	4798      	blx	r3
 80079bc:	6923      	ldr	r3, [r4, #16]
 80079be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	1eb5      	subs	r5, r6, #2
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079cc:	463a      	mov	r2, r7
 80079ce:	4640      	mov	r0, r8
 80079d0:	4798      	blx	r3
 80079d2:	462e      	mov	r6, r5
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	f012 0210 	ands.w	r2, r2, #16
 80079da:	d001      	beq.n	80079e0 <_scanf_float+0x370>
 80079dc:	2000      	movs	r0, #0
 80079de:	e68b      	b.n	80076f8 <_scanf_float+0x88>
 80079e0:	7032      	strb	r2, [r6, #0]
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80079e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ec:	d11c      	bne.n	8007a28 <_scanf_float+0x3b8>
 80079ee:	9b02      	ldr	r3, [sp, #8]
 80079f0:	454b      	cmp	r3, r9
 80079f2:	eba3 0209 	sub.w	r2, r3, r9
 80079f6:	d123      	bne.n	8007a40 <_scanf_float+0x3d0>
 80079f8:	9901      	ldr	r1, [sp, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	4640      	mov	r0, r8
 80079fe:	f002 fbf7 	bl	800a1f0 <_strtod_r>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	6821      	ldr	r1, [r4, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f011 0f02 	tst.w	r1, #2
 8007a0c:	ec57 6b10 	vmov	r6, r7, d0
 8007a10:	f103 0204 	add.w	r2, r3, #4
 8007a14:	d01f      	beq.n	8007a56 <_scanf_float+0x3e6>
 8007a16:	9903      	ldr	r1, [sp, #12]
 8007a18:	600a      	str	r2, [r1, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	e9c3 6700 	strd	r6, r7, [r3]
 8007a20:	68e3      	ldr	r3, [r4, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60e3      	str	r3, [r4, #12]
 8007a26:	e7d9      	b.n	80079dc <_scanf_float+0x36c>
 8007a28:	9b04      	ldr	r3, [sp, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0e4      	beq.n	80079f8 <_scanf_float+0x388>
 8007a2e:	9905      	ldr	r1, [sp, #20]
 8007a30:	230a      	movs	r3, #10
 8007a32:	3101      	adds	r1, #1
 8007a34:	4640      	mov	r0, r8
 8007a36:	f002 fc5b 	bl	800a2f0 <_strtol_r>
 8007a3a:	9b04      	ldr	r3, [sp, #16]
 8007a3c:	9e05      	ldr	r6, [sp, #20]
 8007a3e:	1ac2      	subs	r2, r0, r3
 8007a40:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007a44:	429e      	cmp	r6, r3
 8007a46:	bf28      	it	cs
 8007a48:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007a4c:	4910      	ldr	r1, [pc, #64]	@ (8007a90 <_scanf_float+0x420>)
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f000 f8e4 	bl	8007c1c <siprintf>
 8007a54:	e7d0      	b.n	80079f8 <_scanf_float+0x388>
 8007a56:	f011 0f04 	tst.w	r1, #4
 8007a5a:	9903      	ldr	r1, [sp, #12]
 8007a5c:	600a      	str	r2, [r1, #0]
 8007a5e:	d1dc      	bne.n	8007a1a <_scanf_float+0x3aa>
 8007a60:	681d      	ldr	r5, [r3, #0]
 8007a62:	4632      	mov	r2, r6
 8007a64:	463b      	mov	r3, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	f7f9 f85f 	bl	8000b2c <__aeabi_dcmpun>
 8007a6e:	b128      	cbz	r0, 8007a7c <_scanf_float+0x40c>
 8007a70:	4808      	ldr	r0, [pc, #32]	@ (8007a94 <_scanf_float+0x424>)
 8007a72:	f000 f9b7 	bl	8007de4 <nanf>
 8007a76:	ed85 0a00 	vstr	s0, [r5]
 8007a7a:	e7d1      	b.n	8007a20 <_scanf_float+0x3b0>
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f9 f8b2 	bl	8000be8 <__aeabi_d2f>
 8007a84:	6028      	str	r0, [r5, #0]
 8007a86:	e7cb      	b.n	8007a20 <_scanf_float+0x3b0>
 8007a88:	f04f 0900 	mov.w	r9, #0
 8007a8c:	e629      	b.n	80076e2 <_scanf_float+0x72>
 8007a8e:	bf00      	nop
 8007a90:	0800b53c 	.word	0x0800b53c
 8007a94:	0800b8d5 	.word	0x0800b8d5

08007a98 <std>:
 8007a98:	2300      	movs	r3, #0
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007aa6:	6083      	str	r3, [r0, #8]
 8007aa8:	8181      	strh	r1, [r0, #12]
 8007aaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007aac:	81c2      	strh	r2, [r0, #14]
 8007aae:	6183      	str	r3, [r0, #24]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	305c      	adds	r0, #92	@ 0x5c
 8007ab6:	f000 f914 	bl	8007ce2 <memset>
 8007aba:	4b0d      	ldr	r3, [pc, #52]	@ (8007af0 <std+0x58>)
 8007abc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007abe:	4b0d      	ldr	r3, [pc, #52]	@ (8007af4 <std+0x5c>)
 8007ac0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8007af8 <std+0x60>)
 8007ac4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8007afc <std+0x64>)
 8007ac8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007aca:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <std+0x68>)
 8007acc:	6224      	str	r4, [r4, #32]
 8007ace:	429c      	cmp	r4, r3
 8007ad0:	d006      	beq.n	8007ae0 <std+0x48>
 8007ad2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ad6:	4294      	cmp	r4, r2
 8007ad8:	d002      	beq.n	8007ae0 <std+0x48>
 8007ada:	33d0      	adds	r3, #208	@ 0xd0
 8007adc:	429c      	cmp	r4, r3
 8007ade:	d105      	bne.n	8007aec <std+0x54>
 8007ae0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ae8:	f000 b978 	b.w	8007ddc <__retarget_lock_init_recursive>
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	bf00      	nop
 8007af0:	08007c5d 	.word	0x08007c5d
 8007af4:	08007c7f 	.word	0x08007c7f
 8007af8:	08007cb7 	.word	0x08007cb7
 8007afc:	08007cdb 	.word	0x08007cdb
 8007b00:	20000758 	.word	0x20000758

08007b04 <stdio_exit_handler>:
 8007b04:	4a02      	ldr	r2, [pc, #8]	@ (8007b10 <stdio_exit_handler+0xc>)
 8007b06:	4903      	ldr	r1, [pc, #12]	@ (8007b14 <stdio_exit_handler+0x10>)
 8007b08:	4803      	ldr	r0, [pc, #12]	@ (8007b18 <stdio_exit_handler+0x14>)
 8007b0a:	f000 b869 	b.w	8007be0 <_fwalk_sglue>
 8007b0e:	bf00      	nop
 8007b10:	2000000c 	.word	0x2000000c
 8007b14:	0800a6ad 	.word	0x0800a6ad
 8007b18:	2000001c 	.word	0x2000001c

08007b1c <cleanup_stdio>:
 8007b1c:	6841      	ldr	r1, [r0, #4]
 8007b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b50 <cleanup_stdio+0x34>)
 8007b20:	4299      	cmp	r1, r3
 8007b22:	b510      	push	{r4, lr}
 8007b24:	4604      	mov	r4, r0
 8007b26:	d001      	beq.n	8007b2c <cleanup_stdio+0x10>
 8007b28:	f002 fdc0 	bl	800a6ac <_fflush_r>
 8007b2c:	68a1      	ldr	r1, [r4, #8]
 8007b2e:	4b09      	ldr	r3, [pc, #36]	@ (8007b54 <cleanup_stdio+0x38>)
 8007b30:	4299      	cmp	r1, r3
 8007b32:	d002      	beq.n	8007b3a <cleanup_stdio+0x1e>
 8007b34:	4620      	mov	r0, r4
 8007b36:	f002 fdb9 	bl	800a6ac <_fflush_r>
 8007b3a:	68e1      	ldr	r1, [r4, #12]
 8007b3c:	4b06      	ldr	r3, [pc, #24]	@ (8007b58 <cleanup_stdio+0x3c>)
 8007b3e:	4299      	cmp	r1, r3
 8007b40:	d004      	beq.n	8007b4c <cleanup_stdio+0x30>
 8007b42:	4620      	mov	r0, r4
 8007b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b48:	f002 bdb0 	b.w	800a6ac <_fflush_r>
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000758 	.word	0x20000758
 8007b54:	200007c0 	.word	0x200007c0
 8007b58:	20000828 	.word	0x20000828

08007b5c <global_stdio_init.part.0>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b8c <global_stdio_init.part.0+0x30>)
 8007b60:	4c0b      	ldr	r4, [pc, #44]	@ (8007b90 <global_stdio_init.part.0+0x34>)
 8007b62:	4a0c      	ldr	r2, [pc, #48]	@ (8007b94 <global_stdio_init.part.0+0x38>)
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	4620      	mov	r0, r4
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2104      	movs	r1, #4
 8007b6c:	f7ff ff94 	bl	8007a98 <std>
 8007b70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b74:	2201      	movs	r2, #1
 8007b76:	2109      	movs	r1, #9
 8007b78:	f7ff ff8e 	bl	8007a98 <std>
 8007b7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b80:	2202      	movs	r2, #2
 8007b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b86:	2112      	movs	r1, #18
 8007b88:	f7ff bf86 	b.w	8007a98 <std>
 8007b8c:	20000890 	.word	0x20000890
 8007b90:	20000758 	.word	0x20000758
 8007b94:	08007b05 	.word	0x08007b05

08007b98 <__sfp_lock_acquire>:
 8007b98:	4801      	ldr	r0, [pc, #4]	@ (8007ba0 <__sfp_lock_acquire+0x8>)
 8007b9a:	f000 b920 	b.w	8007dde <__retarget_lock_acquire_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	20000899 	.word	0x20000899

08007ba4 <__sfp_lock_release>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	@ (8007bac <__sfp_lock_release+0x8>)
 8007ba6:	f000 b91b 	b.w	8007de0 <__retarget_lock_release_recursive>
 8007baa:	bf00      	nop
 8007bac:	20000899 	.word	0x20000899

08007bb0 <__sinit>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	f7ff fff0 	bl	8007b98 <__sfp_lock_acquire>
 8007bb8:	6a23      	ldr	r3, [r4, #32]
 8007bba:	b11b      	cbz	r3, 8007bc4 <__sinit+0x14>
 8007bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc0:	f7ff bff0 	b.w	8007ba4 <__sfp_lock_release>
 8007bc4:	4b04      	ldr	r3, [pc, #16]	@ (8007bd8 <__sinit+0x28>)
 8007bc6:	6223      	str	r3, [r4, #32]
 8007bc8:	4b04      	ldr	r3, [pc, #16]	@ (8007bdc <__sinit+0x2c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f5      	bne.n	8007bbc <__sinit+0xc>
 8007bd0:	f7ff ffc4 	bl	8007b5c <global_stdio_init.part.0>
 8007bd4:	e7f2      	b.n	8007bbc <__sinit+0xc>
 8007bd6:	bf00      	nop
 8007bd8:	08007b1d 	.word	0x08007b1d
 8007bdc:	20000890 	.word	0x20000890

08007be0 <_fwalk_sglue>:
 8007be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	4607      	mov	r7, r0
 8007be6:	4688      	mov	r8, r1
 8007be8:	4614      	mov	r4, r2
 8007bea:	2600      	movs	r6, #0
 8007bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8007bf4:	d505      	bpl.n	8007c02 <_fwalk_sglue+0x22>
 8007bf6:	6824      	ldr	r4, [r4, #0]
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	d1f7      	bne.n	8007bec <_fwalk_sglue+0xc>
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d907      	bls.n	8007c18 <_fwalk_sglue+0x38>
 8007c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	d003      	beq.n	8007c18 <_fwalk_sglue+0x38>
 8007c10:	4629      	mov	r1, r5
 8007c12:	4638      	mov	r0, r7
 8007c14:	47c0      	blx	r8
 8007c16:	4306      	orrs	r6, r0
 8007c18:	3568      	adds	r5, #104	@ 0x68
 8007c1a:	e7e9      	b.n	8007bf0 <_fwalk_sglue+0x10>

08007c1c <siprintf>:
 8007c1c:	b40e      	push	{r1, r2, r3}
 8007c1e:	b500      	push	{lr}
 8007c20:	b09c      	sub	sp, #112	@ 0x70
 8007c22:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c24:	9002      	str	r0, [sp, #8]
 8007c26:	9006      	str	r0, [sp, #24]
 8007c28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c2c:	4809      	ldr	r0, [pc, #36]	@ (8007c54 <siprintf+0x38>)
 8007c2e:	9107      	str	r1, [sp, #28]
 8007c30:	9104      	str	r1, [sp, #16]
 8007c32:	4909      	ldr	r1, [pc, #36]	@ (8007c58 <siprintf+0x3c>)
 8007c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c38:	9105      	str	r1, [sp, #20]
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	a902      	add	r1, sp, #8
 8007c40:	f002 fbb4 	bl	800a3ac <_svfiprintf_r>
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	b01c      	add	sp, #112	@ 0x70
 8007c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c50:	b003      	add	sp, #12
 8007c52:	4770      	bx	lr
 8007c54:	20000018 	.word	0x20000018
 8007c58:	ffff0208 	.word	0xffff0208

08007c5c <__sread>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	460c      	mov	r4, r1
 8007c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c64:	f000 f86c 	bl	8007d40 <_read_r>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	bfab      	itete	ge
 8007c6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c70:	181b      	addge	r3, r3, r0
 8007c72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c76:	bfac      	ite	ge
 8007c78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c7a:	81a3      	strhlt	r3, [r4, #12]
 8007c7c:	bd10      	pop	{r4, pc}

08007c7e <__swrite>:
 8007c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c82:	461f      	mov	r7, r3
 8007c84:	898b      	ldrh	r3, [r1, #12]
 8007c86:	05db      	lsls	r3, r3, #23
 8007c88:	4605      	mov	r5, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	d505      	bpl.n	8007c9c <__swrite+0x1e>
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	2302      	movs	r3, #2
 8007c96:	2200      	movs	r2, #0
 8007c98:	f000 f840 	bl	8007d1c <_lseek_r>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	4632      	mov	r2, r6
 8007caa:	463b      	mov	r3, r7
 8007cac:	4628      	mov	r0, r5
 8007cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	f000 b857 	b.w	8007d64 <_write_r>

08007cb6 <__sseek>:
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cbe:	f000 f82d 	bl	8007d1c <_lseek_r>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	bf15      	itete	ne
 8007cc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cd2:	81a3      	strheq	r3, [r4, #12]
 8007cd4:	bf18      	it	ne
 8007cd6:	81a3      	strhne	r3, [r4, #12]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__sclose>:
 8007cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cde:	f000 b80d 	b.w	8007cfc <_close_r>

08007ce2 <memset>:
 8007ce2:	4402      	add	r2, r0
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d100      	bne.n	8007cec <memset+0xa>
 8007cea:	4770      	bx	lr
 8007cec:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf0:	e7f9      	b.n	8007ce6 <memset+0x4>
	...

08007cf4 <_localeconv_r>:
 8007cf4:	4800      	ldr	r0, [pc, #0]	@ (8007cf8 <_localeconv_r+0x4>)
 8007cf6:	4770      	bx	lr
 8007cf8:	20000158 	.word	0x20000158

08007cfc <_close_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d06      	ldr	r5, [pc, #24]	@ (8007d18 <_close_r+0x1c>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7fa fa26 	bl	8002158 <_close>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_close_r+0x1a>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_close_r+0x1a>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20000894 	.word	0x20000894

08007d1c <_lseek_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	@ (8007d3c <_lseek_r+0x20>)
 8007d20:	4604      	mov	r4, r0
 8007d22:	4608      	mov	r0, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	2200      	movs	r2, #0
 8007d28:	602a      	str	r2, [r5, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7fa fa3b 	bl	80021a6 <_lseek>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_lseek_r+0x1e>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_lseek_r+0x1e>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	20000894 	.word	0x20000894

08007d40 <_read_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d07      	ldr	r5, [pc, #28]	@ (8007d60 <_read_r+0x20>)
 8007d44:	4604      	mov	r4, r0
 8007d46:	4608      	mov	r0, r1
 8007d48:	4611      	mov	r1, r2
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	602a      	str	r2, [r5, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f7fa f9c9 	bl	80020e6 <_read>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <_read_r+0x1e>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b103      	cbz	r3, 8007d5e <_read_r+0x1e>
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	20000894 	.word	0x20000894

08007d64 <_write_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4d07      	ldr	r5, [pc, #28]	@ (8007d84 <_write_r+0x20>)
 8007d68:	4604      	mov	r4, r0
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	2200      	movs	r2, #0
 8007d70:	602a      	str	r2, [r5, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	f7fa f9d4 	bl	8002120 <_write>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_write_r+0x1e>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_write_r+0x1e>
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	20000894 	.word	0x20000894

08007d88 <__errno>:
 8007d88:	4b01      	ldr	r3, [pc, #4]	@ (8007d90 <__errno+0x8>)
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000018 	.word	0x20000018

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	4d0d      	ldr	r5, [pc, #52]	@ (8007dcc <__libc_init_array+0x38>)
 8007d98:	4c0d      	ldr	r4, [pc, #52]	@ (8007dd0 <__libc_init_array+0x3c>)
 8007d9a:	1b64      	subs	r4, r4, r5
 8007d9c:	10a4      	asrs	r4, r4, #2
 8007d9e:	2600      	movs	r6, #0
 8007da0:	42a6      	cmp	r6, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	4d0b      	ldr	r5, [pc, #44]	@ (8007dd4 <__libc_init_array+0x40>)
 8007da6:	4c0c      	ldr	r4, [pc, #48]	@ (8007dd8 <__libc_init_array+0x44>)
 8007da8:	f003 fb70 	bl	800b48c <_init>
 8007dac:	1b64      	subs	r4, r4, r5
 8007dae:	10a4      	asrs	r4, r4, #2
 8007db0:	2600      	movs	r6, #0
 8007db2:	42a6      	cmp	r6, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbc:	4798      	blx	r3
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc6:	4798      	blx	r3
 8007dc8:	3601      	adds	r6, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	0800b940 	.word	0x0800b940
 8007dd0:	0800b940 	.word	0x0800b940
 8007dd4:	0800b940 	.word	0x0800b940
 8007dd8:	0800b944 	.word	0x0800b944

08007ddc <__retarget_lock_init_recursive>:
 8007ddc:	4770      	bx	lr

08007dde <__retarget_lock_acquire_recursive>:
 8007dde:	4770      	bx	lr

08007de0 <__retarget_lock_release_recursive>:
 8007de0:	4770      	bx	lr
	...

08007de4 <nanf>:
 8007de4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007dec <nanf+0x8>
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	7fc00000 	.word	0x7fc00000

08007df0 <quorem>:
 8007df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	6903      	ldr	r3, [r0, #16]
 8007df6:	690c      	ldr	r4, [r1, #16]
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	db7e      	blt.n	8007efc <quorem+0x10c>
 8007dfe:	3c01      	subs	r4, #1
 8007e00:	f101 0814 	add.w	r8, r1, #20
 8007e04:	00a3      	lsls	r3, r4, #2
 8007e06:	f100 0514 	add.w	r5, r0, #20
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e22:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e26:	d32e      	bcc.n	8007e86 <quorem+0x96>
 8007e28:	f04f 0a00 	mov.w	sl, #0
 8007e2c:	46c4      	mov	ip, r8
 8007e2e:	46ae      	mov	lr, r5
 8007e30:	46d3      	mov	fp, sl
 8007e32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e36:	b298      	uxth	r0, r3
 8007e38:	fb06 a000 	mla	r0, r6, r0, sl
 8007e3c:	0c02      	lsrs	r2, r0, #16
 8007e3e:	0c1b      	lsrs	r3, r3, #16
 8007e40:	fb06 2303 	mla	r3, r6, r3, r2
 8007e44:	f8de 2000 	ldr.w	r2, [lr]
 8007e48:	b280      	uxth	r0, r0
 8007e4a:	b292      	uxth	r2, r2
 8007e4c:	1a12      	subs	r2, r2, r0
 8007e4e:	445a      	add	r2, fp
 8007e50:	f8de 0000 	ldr.w	r0, [lr]
 8007e54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e62:	b292      	uxth	r2, r2
 8007e64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e68:	45e1      	cmp	r9, ip
 8007e6a:	f84e 2b04 	str.w	r2, [lr], #4
 8007e6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e72:	d2de      	bcs.n	8007e32 <quorem+0x42>
 8007e74:	9b00      	ldr	r3, [sp, #0]
 8007e76:	58eb      	ldr	r3, [r5, r3]
 8007e78:	b92b      	cbnz	r3, 8007e86 <quorem+0x96>
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	d32f      	bcc.n	8007ee4 <quorem+0xf4>
 8007e84:	613c      	str	r4, [r7, #16]
 8007e86:	4638      	mov	r0, r7
 8007e88:	f001 f9c2 	bl	8009210 <__mcmp>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	db25      	blt.n	8007edc <quorem+0xec>
 8007e90:	4629      	mov	r1, r5
 8007e92:	2000      	movs	r0, #0
 8007e94:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e98:	f8d1 c000 	ldr.w	ip, [r1]
 8007e9c:	fa1f fe82 	uxth.w	lr, r2
 8007ea0:	fa1f f38c 	uxth.w	r3, ip
 8007ea4:	eba3 030e 	sub.w	r3, r3, lr
 8007ea8:	4403      	add	r3, r0
 8007eaa:	0c12      	lsrs	r2, r2, #16
 8007eac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007eb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eba:	45c1      	cmp	r9, r8
 8007ebc:	f841 3b04 	str.w	r3, [r1], #4
 8007ec0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ec4:	d2e6      	bcs.n	8007e94 <quorem+0xa4>
 8007ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ece:	b922      	cbnz	r2, 8007eda <quorem+0xea>
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	d30b      	bcc.n	8007ef0 <quorem+0x100>
 8007ed8:	613c      	str	r4, [r7, #16]
 8007eda:	3601      	adds	r6, #1
 8007edc:	4630      	mov	r0, r6
 8007ede:	b003      	add	sp, #12
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	3b04      	subs	r3, #4
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	d1cb      	bne.n	8007e84 <quorem+0x94>
 8007eec:	3c01      	subs	r4, #1
 8007eee:	e7c6      	b.n	8007e7e <quorem+0x8e>
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	3b04      	subs	r3, #4
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	d1ef      	bne.n	8007ed8 <quorem+0xe8>
 8007ef8:	3c01      	subs	r4, #1
 8007efa:	e7ea      	b.n	8007ed2 <quorem+0xe2>
 8007efc:	2000      	movs	r0, #0
 8007efe:	e7ee      	b.n	8007ede <quorem+0xee>

08007f00 <_dtoa_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	69c7      	ldr	r7, [r0, #28]
 8007f06:	b099      	sub	sp, #100	@ 0x64
 8007f08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f0c:	ec55 4b10 	vmov	r4, r5, d0
 8007f10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007f12:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f14:	4683      	mov	fp, r0
 8007f16:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f1a:	b97f      	cbnz	r7, 8007f3c <_dtoa_r+0x3c>
 8007f1c:	2010      	movs	r0, #16
 8007f1e:	f000 fdfd 	bl	8008b1c <malloc>
 8007f22:	4602      	mov	r2, r0
 8007f24:	f8cb 001c 	str.w	r0, [fp, #28]
 8007f28:	b920      	cbnz	r0, 8007f34 <_dtoa_r+0x34>
 8007f2a:	4ba7      	ldr	r3, [pc, #668]	@ (80081c8 <_dtoa_r+0x2c8>)
 8007f2c:	21ef      	movs	r1, #239	@ 0xef
 8007f2e:	48a7      	ldr	r0, [pc, #668]	@ (80081cc <_dtoa_r+0x2cc>)
 8007f30:	f002 fc36 	bl	800a7a0 <__assert_func>
 8007f34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f38:	6007      	str	r7, [r0, #0]
 8007f3a:	60c7      	str	r7, [r0, #12]
 8007f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f40:	6819      	ldr	r1, [r3, #0]
 8007f42:	b159      	cbz	r1, 8007f5c <_dtoa_r+0x5c>
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	604a      	str	r2, [r1, #4]
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4093      	lsls	r3, r2
 8007f4c:	608b      	str	r3, [r1, #8]
 8007f4e:	4658      	mov	r0, fp
 8007f50:	f000 feda 	bl	8008d08 <_Bfree>
 8007f54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	1e2b      	subs	r3, r5, #0
 8007f5e:	bfb9      	ittee	lt
 8007f60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f64:	9303      	strlt	r3, [sp, #12]
 8007f66:	2300      	movge	r3, #0
 8007f68:	6033      	strge	r3, [r6, #0]
 8007f6a:	9f03      	ldr	r7, [sp, #12]
 8007f6c:	4b98      	ldr	r3, [pc, #608]	@ (80081d0 <_dtoa_r+0x2d0>)
 8007f6e:	bfbc      	itt	lt
 8007f70:	2201      	movlt	r2, #1
 8007f72:	6032      	strlt	r2, [r6, #0]
 8007f74:	43bb      	bics	r3, r7
 8007f76:	d112      	bne.n	8007f9e <_dtoa_r+0x9e>
 8007f78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f84:	4323      	orrs	r3, r4
 8007f86:	f000 854d 	beq.w	8008a24 <_dtoa_r+0xb24>
 8007f8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80081e4 <_dtoa_r+0x2e4>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 854f 	beq.w	8008a34 <_dtoa_r+0xb34>
 8007f96:	f10a 0303 	add.w	r3, sl, #3
 8007f9a:	f000 bd49 	b.w	8008a30 <_dtoa_r+0xb30>
 8007f9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	ec51 0b17 	vmov	r0, r1, d7
 8007fa8:	2300      	movs	r3, #0
 8007faa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007fae:	f7f8 fd8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	b158      	cbz	r0, 8007fce <_dtoa_r+0xce>
 8007fb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007fb8:	2301      	movs	r3, #1
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fbe:	b113      	cbz	r3, 8007fc6 <_dtoa_r+0xc6>
 8007fc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007fc2:	4b84      	ldr	r3, [pc, #528]	@ (80081d4 <_dtoa_r+0x2d4>)
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80081e8 <_dtoa_r+0x2e8>
 8007fca:	f000 bd33 	b.w	8008a34 <_dtoa_r+0xb34>
 8007fce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007fd2:	aa16      	add	r2, sp, #88	@ 0x58
 8007fd4:	a917      	add	r1, sp, #92	@ 0x5c
 8007fd6:	4658      	mov	r0, fp
 8007fd8:	f001 fa3a 	bl	8009450 <__d2b>
 8007fdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007fe0:	4681      	mov	r9, r0
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	d077      	beq.n	80080d6 <_dtoa_r+0x1d6>
 8007fe6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fe8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ff4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ff8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ffc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008000:	4619      	mov	r1, r3
 8008002:	2200      	movs	r2, #0
 8008004:	4b74      	ldr	r3, [pc, #464]	@ (80081d8 <_dtoa_r+0x2d8>)
 8008006:	f7f8 f93f 	bl	8000288 <__aeabi_dsub>
 800800a:	a369      	add	r3, pc, #420	@ (adr r3, 80081b0 <_dtoa_r+0x2b0>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 faf2 	bl	80005f8 <__aeabi_dmul>
 8008014:	a368      	add	r3, pc, #416	@ (adr r3, 80081b8 <_dtoa_r+0x2b8>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 f937 	bl	800028c <__adddf3>
 800801e:	4604      	mov	r4, r0
 8008020:	4630      	mov	r0, r6
 8008022:	460d      	mov	r5, r1
 8008024:	f7f8 fa7e 	bl	8000524 <__aeabi_i2d>
 8008028:	a365      	add	r3, pc, #404	@ (adr r3, 80081c0 <_dtoa_r+0x2c0>)
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f7f8 fae3 	bl	80005f8 <__aeabi_dmul>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4620      	mov	r0, r4
 8008038:	4629      	mov	r1, r5
 800803a:	f7f8 f927 	bl	800028c <__adddf3>
 800803e:	4604      	mov	r4, r0
 8008040:	460d      	mov	r5, r1
 8008042:	f7f8 fd89 	bl	8000b58 <__aeabi_d2iz>
 8008046:	2200      	movs	r2, #0
 8008048:	4607      	mov	r7, r0
 800804a:	2300      	movs	r3, #0
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	f7f8 fd44 	bl	8000adc <__aeabi_dcmplt>
 8008054:	b140      	cbz	r0, 8008068 <_dtoa_r+0x168>
 8008056:	4638      	mov	r0, r7
 8008058:	f7f8 fa64 	bl	8000524 <__aeabi_i2d>
 800805c:	4622      	mov	r2, r4
 800805e:	462b      	mov	r3, r5
 8008060:	f7f8 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8008064:	b900      	cbnz	r0, 8008068 <_dtoa_r+0x168>
 8008066:	3f01      	subs	r7, #1
 8008068:	2f16      	cmp	r7, #22
 800806a:	d851      	bhi.n	8008110 <_dtoa_r+0x210>
 800806c:	4b5b      	ldr	r3, [pc, #364]	@ (80081dc <_dtoa_r+0x2dc>)
 800806e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800807a:	f7f8 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800807e:	2800      	cmp	r0, #0
 8008080:	d048      	beq.n	8008114 <_dtoa_r+0x214>
 8008082:	3f01      	subs	r7, #1
 8008084:	2300      	movs	r3, #0
 8008086:	9312      	str	r3, [sp, #72]	@ 0x48
 8008088:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800808a:	1b9b      	subs	r3, r3, r6
 800808c:	1e5a      	subs	r2, r3, #1
 800808e:	bf44      	itt	mi
 8008090:	f1c3 0801 	rsbmi	r8, r3, #1
 8008094:	2300      	movmi	r3, #0
 8008096:	9208      	str	r2, [sp, #32]
 8008098:	bf54      	ite	pl
 800809a:	f04f 0800 	movpl.w	r8, #0
 800809e:	9308      	strmi	r3, [sp, #32]
 80080a0:	2f00      	cmp	r7, #0
 80080a2:	db39      	blt.n	8008118 <_dtoa_r+0x218>
 80080a4:	9b08      	ldr	r3, [sp, #32]
 80080a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80080a8:	443b      	add	r3, r7
 80080aa:	9308      	str	r3, [sp, #32]
 80080ac:	2300      	movs	r3, #0
 80080ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80080b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b2:	2b09      	cmp	r3, #9
 80080b4:	d864      	bhi.n	8008180 <_dtoa_r+0x280>
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	bfc4      	itt	gt
 80080ba:	3b04      	subgt	r3, #4
 80080bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80080be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c0:	f1a3 0302 	sub.w	r3, r3, #2
 80080c4:	bfcc      	ite	gt
 80080c6:	2400      	movgt	r4, #0
 80080c8:	2401      	movle	r4, #1
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d863      	bhi.n	8008196 <_dtoa_r+0x296>
 80080ce:	e8df f003 	tbb	[pc, r3]
 80080d2:	372a      	.short	0x372a
 80080d4:	5535      	.short	0x5535
 80080d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80080da:	441e      	add	r6, r3
 80080dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	bfc1      	itttt	gt
 80080e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80080e8:	409f      	lslgt	r7, r3
 80080ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80080ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80080f2:	bfd6      	itet	le
 80080f4:	f1c3 0320 	rsble	r3, r3, #32
 80080f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80080fc:	fa04 f003 	lslle.w	r0, r4, r3
 8008100:	f7f8 fa00 	bl	8000504 <__aeabi_ui2d>
 8008104:	2201      	movs	r2, #1
 8008106:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800810a:	3e01      	subs	r6, #1
 800810c:	9214      	str	r2, [sp, #80]	@ 0x50
 800810e:	e777      	b.n	8008000 <_dtoa_r+0x100>
 8008110:	2301      	movs	r3, #1
 8008112:	e7b8      	b.n	8008086 <_dtoa_r+0x186>
 8008114:	9012      	str	r0, [sp, #72]	@ 0x48
 8008116:	e7b7      	b.n	8008088 <_dtoa_r+0x188>
 8008118:	427b      	negs	r3, r7
 800811a:	930a      	str	r3, [sp, #40]	@ 0x28
 800811c:	2300      	movs	r3, #0
 800811e:	eba8 0807 	sub.w	r8, r8, r7
 8008122:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008124:	e7c4      	b.n	80080b0 <_dtoa_r+0x1b0>
 8008126:	2300      	movs	r3, #0
 8008128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800812a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800812c:	2b00      	cmp	r3, #0
 800812e:	dc35      	bgt.n	800819c <_dtoa_r+0x29c>
 8008130:	2301      	movs	r3, #1
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	9307      	str	r3, [sp, #28]
 8008136:	461a      	mov	r2, r3
 8008138:	920e      	str	r2, [sp, #56]	@ 0x38
 800813a:	e00b      	b.n	8008154 <_dtoa_r+0x254>
 800813c:	2301      	movs	r3, #1
 800813e:	e7f3      	b.n	8008128 <_dtoa_r+0x228>
 8008140:	2300      	movs	r3, #0
 8008142:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008146:	18fb      	adds	r3, r7, r3
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	bfb8      	it	lt
 8008152:	2301      	movlt	r3, #1
 8008154:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008158:	2100      	movs	r1, #0
 800815a:	2204      	movs	r2, #4
 800815c:	f102 0514 	add.w	r5, r2, #20
 8008160:	429d      	cmp	r5, r3
 8008162:	d91f      	bls.n	80081a4 <_dtoa_r+0x2a4>
 8008164:	6041      	str	r1, [r0, #4]
 8008166:	4658      	mov	r0, fp
 8008168:	f000 fd8e 	bl	8008c88 <_Balloc>
 800816c:	4682      	mov	sl, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d13c      	bne.n	80081ec <_dtoa_r+0x2ec>
 8008172:	4b1b      	ldr	r3, [pc, #108]	@ (80081e0 <_dtoa_r+0x2e0>)
 8008174:	4602      	mov	r2, r0
 8008176:	f240 11af 	movw	r1, #431	@ 0x1af
 800817a:	e6d8      	b.n	8007f2e <_dtoa_r+0x2e>
 800817c:	2301      	movs	r3, #1
 800817e:	e7e0      	b.n	8008142 <_dtoa_r+0x242>
 8008180:	2401      	movs	r4, #1
 8008182:	2300      	movs	r3, #0
 8008184:	9309      	str	r3, [sp, #36]	@ 0x24
 8008186:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008188:	f04f 33ff 	mov.w	r3, #4294967295
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	9307      	str	r3, [sp, #28]
 8008190:	2200      	movs	r2, #0
 8008192:	2312      	movs	r3, #18
 8008194:	e7d0      	b.n	8008138 <_dtoa_r+0x238>
 8008196:	2301      	movs	r3, #1
 8008198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800819a:	e7f5      	b.n	8008188 <_dtoa_r+0x288>
 800819c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	9307      	str	r3, [sp, #28]
 80081a2:	e7d7      	b.n	8008154 <_dtoa_r+0x254>
 80081a4:	3101      	adds	r1, #1
 80081a6:	0052      	lsls	r2, r2, #1
 80081a8:	e7d8      	b.n	800815c <_dtoa_r+0x25c>
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w
 80081b0:	636f4361 	.word	0x636f4361
 80081b4:	3fd287a7 	.word	0x3fd287a7
 80081b8:	8b60c8b3 	.word	0x8b60c8b3
 80081bc:	3fc68a28 	.word	0x3fc68a28
 80081c0:	509f79fb 	.word	0x509f79fb
 80081c4:	3fd34413 	.word	0x3fd34413
 80081c8:	0800b54e 	.word	0x0800b54e
 80081cc:	0800b565 	.word	0x0800b565
 80081d0:	7ff00000 	.word	0x7ff00000
 80081d4:	0800b519 	.word	0x0800b519
 80081d8:	3ff80000 	.word	0x3ff80000
 80081dc:	0800b660 	.word	0x0800b660
 80081e0:	0800b5bd 	.word	0x0800b5bd
 80081e4:	0800b54a 	.word	0x0800b54a
 80081e8:	0800b518 	.word	0x0800b518
 80081ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081f0:	6018      	str	r0, [r3, #0]
 80081f2:	9b07      	ldr	r3, [sp, #28]
 80081f4:	2b0e      	cmp	r3, #14
 80081f6:	f200 80a4 	bhi.w	8008342 <_dtoa_r+0x442>
 80081fa:	2c00      	cmp	r4, #0
 80081fc:	f000 80a1 	beq.w	8008342 <_dtoa_r+0x442>
 8008200:	2f00      	cmp	r7, #0
 8008202:	dd33      	ble.n	800826c <_dtoa_r+0x36c>
 8008204:	4bad      	ldr	r3, [pc, #692]	@ (80084bc <_dtoa_r+0x5bc>)
 8008206:	f007 020f 	and.w	r2, r7, #15
 800820a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800820e:	ed93 7b00 	vldr	d7, [r3]
 8008212:	05f8      	lsls	r0, r7, #23
 8008214:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008218:	ea4f 1427 	mov.w	r4, r7, asr #4
 800821c:	d516      	bpl.n	800824c <_dtoa_r+0x34c>
 800821e:	4ba8      	ldr	r3, [pc, #672]	@ (80084c0 <_dtoa_r+0x5c0>)
 8008220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008224:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008228:	f7f8 fb10 	bl	800084c <__aeabi_ddiv>
 800822c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008230:	f004 040f 	and.w	r4, r4, #15
 8008234:	2603      	movs	r6, #3
 8008236:	4da2      	ldr	r5, [pc, #648]	@ (80084c0 <_dtoa_r+0x5c0>)
 8008238:	b954      	cbnz	r4, 8008250 <_dtoa_r+0x350>
 800823a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800823e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008242:	f7f8 fb03 	bl	800084c <__aeabi_ddiv>
 8008246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800824a:	e028      	b.n	800829e <_dtoa_r+0x39e>
 800824c:	2602      	movs	r6, #2
 800824e:	e7f2      	b.n	8008236 <_dtoa_r+0x336>
 8008250:	07e1      	lsls	r1, r4, #31
 8008252:	d508      	bpl.n	8008266 <_dtoa_r+0x366>
 8008254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008258:	e9d5 2300 	ldrd	r2, r3, [r5]
 800825c:	f7f8 f9cc 	bl	80005f8 <__aeabi_dmul>
 8008260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008264:	3601      	adds	r6, #1
 8008266:	1064      	asrs	r4, r4, #1
 8008268:	3508      	adds	r5, #8
 800826a:	e7e5      	b.n	8008238 <_dtoa_r+0x338>
 800826c:	f000 80d2 	beq.w	8008414 <_dtoa_r+0x514>
 8008270:	427c      	negs	r4, r7
 8008272:	4b92      	ldr	r3, [pc, #584]	@ (80084bc <_dtoa_r+0x5bc>)
 8008274:	4d92      	ldr	r5, [pc, #584]	@ (80084c0 <_dtoa_r+0x5c0>)
 8008276:	f004 020f 	and.w	r2, r4, #15
 800827a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008286:	f7f8 f9b7 	bl	80005f8 <__aeabi_dmul>
 800828a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800828e:	1124      	asrs	r4, r4, #4
 8008290:	2300      	movs	r3, #0
 8008292:	2602      	movs	r6, #2
 8008294:	2c00      	cmp	r4, #0
 8008296:	f040 80b2 	bne.w	80083fe <_dtoa_r+0x4fe>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1d3      	bne.n	8008246 <_dtoa_r+0x346>
 800829e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 80b7 	beq.w	8008418 <_dtoa_r+0x518>
 80082aa:	4b86      	ldr	r3, [pc, #536]	@ (80084c4 <_dtoa_r+0x5c4>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7f8 fc13 	bl	8000adc <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f000 80ae 	beq.w	8008418 <_dtoa_r+0x518>
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 80aa 	beq.w	8008418 <_dtoa_r+0x518>
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dd37      	ble.n	800833a <_dtoa_r+0x43a>
 80082ca:	1e7b      	subs	r3, r7, #1
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	4620      	mov	r0, r4
 80082d0:	4b7d      	ldr	r3, [pc, #500]	@ (80084c8 <_dtoa_r+0x5c8>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082de:	9c00      	ldr	r4, [sp, #0]
 80082e0:	3601      	adds	r6, #1
 80082e2:	4630      	mov	r0, r6
 80082e4:	f7f8 f91e 	bl	8000524 <__aeabi_i2d>
 80082e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	4b76      	ldr	r3, [pc, #472]	@ (80084cc <_dtoa_r+0x5cc>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7f7 ffca 	bl	800028c <__adddf3>
 80082f8:	4605      	mov	r5, r0
 80082fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80082fe:	2c00      	cmp	r4, #0
 8008300:	f040 808d 	bne.w	800841e <_dtoa_r+0x51e>
 8008304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008308:	4b71      	ldr	r3, [pc, #452]	@ (80084d0 <_dtoa_r+0x5d0>)
 800830a:	2200      	movs	r2, #0
 800830c:	f7f7 ffbc 	bl	8000288 <__aeabi_dsub>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008318:	462a      	mov	r2, r5
 800831a:	4633      	mov	r3, r6
 800831c:	f7f8 fbfc 	bl	8000b18 <__aeabi_dcmpgt>
 8008320:	2800      	cmp	r0, #0
 8008322:	f040 828b 	bne.w	800883c <_dtoa_r+0x93c>
 8008326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800832a:	462a      	mov	r2, r5
 800832c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008330:	f7f8 fbd4 	bl	8000adc <__aeabi_dcmplt>
 8008334:	2800      	cmp	r0, #0
 8008336:	f040 8128 	bne.w	800858a <_dtoa_r+0x68a>
 800833a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800833e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008342:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008344:	2b00      	cmp	r3, #0
 8008346:	f2c0 815a 	blt.w	80085fe <_dtoa_r+0x6fe>
 800834a:	2f0e      	cmp	r7, #14
 800834c:	f300 8157 	bgt.w	80085fe <_dtoa_r+0x6fe>
 8008350:	4b5a      	ldr	r3, [pc, #360]	@ (80084bc <_dtoa_r+0x5bc>)
 8008352:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008356:	ed93 7b00 	vldr	d7, [r3]
 800835a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	ed8d 7b00 	vstr	d7, [sp]
 8008362:	da03      	bge.n	800836c <_dtoa_r+0x46c>
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	2b00      	cmp	r3, #0
 8008368:	f340 8101 	ble.w	800856e <_dtoa_r+0x66e>
 800836c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008370:	4656      	mov	r6, sl
 8008372:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f8 fa67 	bl	800084c <__aeabi_ddiv>
 800837e:	f7f8 fbeb 	bl	8000b58 <__aeabi_d2iz>
 8008382:	4680      	mov	r8, r0
 8008384:	f7f8 f8ce 	bl	8000524 <__aeabi_i2d>
 8008388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800838c:	f7f8 f934 	bl	80005f8 <__aeabi_dmul>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4620      	mov	r0, r4
 8008396:	4629      	mov	r1, r5
 8008398:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800839c:	f7f7 ff74 	bl	8000288 <__aeabi_dsub>
 80083a0:	f806 4b01 	strb.w	r4, [r6], #1
 80083a4:	9d07      	ldr	r5, [sp, #28]
 80083a6:	eba6 040a 	sub.w	r4, r6, sl
 80083aa:	42a5      	cmp	r5, r4
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	f040 8117 	bne.w	80085e2 <_dtoa_r+0x6e2>
 80083b4:	f7f7 ff6a 	bl	800028c <__adddf3>
 80083b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	f7f8 fbaa 	bl	8000b18 <__aeabi_dcmpgt>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f040 80f9 	bne.w	80085bc <_dtoa_r+0x6bc>
 80083ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ce:	4620      	mov	r0, r4
 80083d0:	4629      	mov	r1, r5
 80083d2:	f7f8 fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 80083d6:	b118      	cbz	r0, 80083e0 <_dtoa_r+0x4e0>
 80083d8:	f018 0f01 	tst.w	r8, #1
 80083dc:	f040 80ee 	bne.w	80085bc <_dtoa_r+0x6bc>
 80083e0:	4649      	mov	r1, r9
 80083e2:	4658      	mov	r0, fp
 80083e4:	f000 fc90 	bl	8008d08 <_Bfree>
 80083e8:	2300      	movs	r3, #0
 80083ea:	7033      	strb	r3, [r6, #0]
 80083ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083ee:	3701      	adds	r7, #1
 80083f0:	601f      	str	r7, [r3, #0]
 80083f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 831d 	beq.w	8008a34 <_dtoa_r+0xb34>
 80083fa:	601e      	str	r6, [r3, #0]
 80083fc:	e31a      	b.n	8008a34 <_dtoa_r+0xb34>
 80083fe:	07e2      	lsls	r2, r4, #31
 8008400:	d505      	bpl.n	800840e <_dtoa_r+0x50e>
 8008402:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008406:	f7f8 f8f7 	bl	80005f8 <__aeabi_dmul>
 800840a:	3601      	adds	r6, #1
 800840c:	2301      	movs	r3, #1
 800840e:	1064      	asrs	r4, r4, #1
 8008410:	3508      	adds	r5, #8
 8008412:	e73f      	b.n	8008294 <_dtoa_r+0x394>
 8008414:	2602      	movs	r6, #2
 8008416:	e742      	b.n	800829e <_dtoa_r+0x39e>
 8008418:	9c07      	ldr	r4, [sp, #28]
 800841a:	9704      	str	r7, [sp, #16]
 800841c:	e761      	b.n	80082e2 <_dtoa_r+0x3e2>
 800841e:	4b27      	ldr	r3, [pc, #156]	@ (80084bc <_dtoa_r+0x5bc>)
 8008420:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008422:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008426:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800842a:	4454      	add	r4, sl
 800842c:	2900      	cmp	r1, #0
 800842e:	d053      	beq.n	80084d8 <_dtoa_r+0x5d8>
 8008430:	4928      	ldr	r1, [pc, #160]	@ (80084d4 <_dtoa_r+0x5d4>)
 8008432:	2000      	movs	r0, #0
 8008434:	f7f8 fa0a 	bl	800084c <__aeabi_ddiv>
 8008438:	4633      	mov	r3, r6
 800843a:	462a      	mov	r2, r5
 800843c:	f7f7 ff24 	bl	8000288 <__aeabi_dsub>
 8008440:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008444:	4656      	mov	r6, sl
 8008446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800844a:	f7f8 fb85 	bl	8000b58 <__aeabi_d2iz>
 800844e:	4605      	mov	r5, r0
 8008450:	f7f8 f868 	bl	8000524 <__aeabi_i2d>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845c:	f7f7 ff14 	bl	8000288 <__aeabi_dsub>
 8008460:	3530      	adds	r5, #48	@ 0x30
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800846a:	f806 5b01 	strb.w	r5, [r6], #1
 800846e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008472:	f7f8 fb33 	bl	8000adc <__aeabi_dcmplt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d171      	bne.n	800855e <_dtoa_r+0x65e>
 800847a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800847e:	4911      	ldr	r1, [pc, #68]	@ (80084c4 <_dtoa_r+0x5c4>)
 8008480:	2000      	movs	r0, #0
 8008482:	f7f7 ff01 	bl	8000288 <__aeabi_dsub>
 8008486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800848a:	f7f8 fb27 	bl	8000adc <__aeabi_dcmplt>
 800848e:	2800      	cmp	r0, #0
 8008490:	f040 8095 	bne.w	80085be <_dtoa_r+0x6be>
 8008494:	42a6      	cmp	r6, r4
 8008496:	f43f af50 	beq.w	800833a <_dtoa_r+0x43a>
 800849a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800849e:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <_dtoa_r+0x5c8>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	4b08      	ldr	r3, [pc, #32]	@ (80084c8 <_dtoa_r+0x5c8>)
 80084a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084ac:	2200      	movs	r2, #0
 80084ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084b2:	f7f8 f8a1 	bl	80005f8 <__aeabi_dmul>
 80084b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084ba:	e7c4      	b.n	8008446 <_dtoa_r+0x546>
 80084bc:	0800b660 	.word	0x0800b660
 80084c0:	0800b638 	.word	0x0800b638
 80084c4:	3ff00000 	.word	0x3ff00000
 80084c8:	40240000 	.word	0x40240000
 80084cc:	401c0000 	.word	0x401c0000
 80084d0:	40140000 	.word	0x40140000
 80084d4:	3fe00000 	.word	0x3fe00000
 80084d8:	4631      	mov	r1, r6
 80084da:	4628      	mov	r0, r5
 80084dc:	f7f8 f88c 	bl	80005f8 <__aeabi_dmul>
 80084e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80084e6:	4656      	mov	r6, sl
 80084e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ec:	f7f8 fb34 	bl	8000b58 <__aeabi_d2iz>
 80084f0:	4605      	mov	r5, r0
 80084f2:	f7f8 f817 	bl	8000524 <__aeabi_i2d>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084fe:	f7f7 fec3 	bl	8000288 <__aeabi_dsub>
 8008502:	3530      	adds	r5, #48	@ 0x30
 8008504:	f806 5b01 	strb.w	r5, [r6], #1
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	42a6      	cmp	r6, r4
 800850e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	d124      	bne.n	8008562 <_dtoa_r+0x662>
 8008518:	4bac      	ldr	r3, [pc, #688]	@ (80087cc <_dtoa_r+0x8cc>)
 800851a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800851e:	f7f7 feb5 	bl	800028c <__adddf3>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800852a:	f7f8 faf5 	bl	8000b18 <__aeabi_dcmpgt>
 800852e:	2800      	cmp	r0, #0
 8008530:	d145      	bne.n	80085be <_dtoa_r+0x6be>
 8008532:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008536:	49a5      	ldr	r1, [pc, #660]	@ (80087cc <_dtoa_r+0x8cc>)
 8008538:	2000      	movs	r0, #0
 800853a:	f7f7 fea5 	bl	8000288 <__aeabi_dsub>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008546:	f7f8 fac9 	bl	8000adc <__aeabi_dcmplt>
 800854a:	2800      	cmp	r0, #0
 800854c:	f43f aef5 	beq.w	800833a <_dtoa_r+0x43a>
 8008550:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008552:	1e73      	subs	r3, r6, #1
 8008554:	9315      	str	r3, [sp, #84]	@ 0x54
 8008556:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800855a:	2b30      	cmp	r3, #48	@ 0x30
 800855c:	d0f8      	beq.n	8008550 <_dtoa_r+0x650>
 800855e:	9f04      	ldr	r7, [sp, #16]
 8008560:	e73e      	b.n	80083e0 <_dtoa_r+0x4e0>
 8008562:	4b9b      	ldr	r3, [pc, #620]	@ (80087d0 <_dtoa_r+0x8d0>)
 8008564:	f7f8 f848 	bl	80005f8 <__aeabi_dmul>
 8008568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800856c:	e7bc      	b.n	80084e8 <_dtoa_r+0x5e8>
 800856e:	d10c      	bne.n	800858a <_dtoa_r+0x68a>
 8008570:	4b98      	ldr	r3, [pc, #608]	@ (80087d4 <_dtoa_r+0x8d4>)
 8008572:	2200      	movs	r2, #0
 8008574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008578:	f7f8 f83e 	bl	80005f8 <__aeabi_dmul>
 800857c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008580:	f7f8 fac0 	bl	8000b04 <__aeabi_dcmpge>
 8008584:	2800      	cmp	r0, #0
 8008586:	f000 8157 	beq.w	8008838 <_dtoa_r+0x938>
 800858a:	2400      	movs	r4, #0
 800858c:	4625      	mov	r5, r4
 800858e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008590:	43db      	mvns	r3, r3
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	4656      	mov	r6, sl
 8008596:	2700      	movs	r7, #0
 8008598:	4621      	mov	r1, r4
 800859a:	4658      	mov	r0, fp
 800859c:	f000 fbb4 	bl	8008d08 <_Bfree>
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	d0dc      	beq.n	800855e <_dtoa_r+0x65e>
 80085a4:	b12f      	cbz	r7, 80085b2 <_dtoa_r+0x6b2>
 80085a6:	42af      	cmp	r7, r5
 80085a8:	d003      	beq.n	80085b2 <_dtoa_r+0x6b2>
 80085aa:	4639      	mov	r1, r7
 80085ac:	4658      	mov	r0, fp
 80085ae:	f000 fbab 	bl	8008d08 <_Bfree>
 80085b2:	4629      	mov	r1, r5
 80085b4:	4658      	mov	r0, fp
 80085b6:	f000 fba7 	bl	8008d08 <_Bfree>
 80085ba:	e7d0      	b.n	800855e <_dtoa_r+0x65e>
 80085bc:	9704      	str	r7, [sp, #16]
 80085be:	4633      	mov	r3, r6
 80085c0:	461e      	mov	r6, r3
 80085c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085c6:	2a39      	cmp	r2, #57	@ 0x39
 80085c8:	d107      	bne.n	80085da <_dtoa_r+0x6da>
 80085ca:	459a      	cmp	sl, r3
 80085cc:	d1f8      	bne.n	80085c0 <_dtoa_r+0x6c0>
 80085ce:	9a04      	ldr	r2, [sp, #16]
 80085d0:	3201      	adds	r2, #1
 80085d2:	9204      	str	r2, [sp, #16]
 80085d4:	2230      	movs	r2, #48	@ 0x30
 80085d6:	f88a 2000 	strb.w	r2, [sl]
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	3201      	adds	r2, #1
 80085de:	701a      	strb	r2, [r3, #0]
 80085e0:	e7bd      	b.n	800855e <_dtoa_r+0x65e>
 80085e2:	4b7b      	ldr	r3, [pc, #492]	@ (80087d0 <_dtoa_r+0x8d0>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	f7f8 f807 	bl	80005f8 <__aeabi_dmul>
 80085ea:	2200      	movs	r2, #0
 80085ec:	2300      	movs	r3, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	460d      	mov	r5, r1
 80085f2:	f7f8 fa69 	bl	8000ac8 <__aeabi_dcmpeq>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f43f aebb 	beq.w	8008372 <_dtoa_r+0x472>
 80085fc:	e6f0      	b.n	80083e0 <_dtoa_r+0x4e0>
 80085fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008600:	2a00      	cmp	r2, #0
 8008602:	f000 80db 	beq.w	80087bc <_dtoa_r+0x8bc>
 8008606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008608:	2a01      	cmp	r2, #1
 800860a:	f300 80bf 	bgt.w	800878c <_dtoa_r+0x88c>
 800860e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008610:	2a00      	cmp	r2, #0
 8008612:	f000 80b7 	beq.w	8008784 <_dtoa_r+0x884>
 8008616:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800861a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800861c:	4646      	mov	r6, r8
 800861e:	9a08      	ldr	r2, [sp, #32]
 8008620:	2101      	movs	r1, #1
 8008622:	441a      	add	r2, r3
 8008624:	4658      	mov	r0, fp
 8008626:	4498      	add	r8, r3
 8008628:	9208      	str	r2, [sp, #32]
 800862a:	f000 fc6b 	bl	8008f04 <__i2b>
 800862e:	4605      	mov	r5, r0
 8008630:	b15e      	cbz	r6, 800864a <_dtoa_r+0x74a>
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	2b00      	cmp	r3, #0
 8008636:	dd08      	ble.n	800864a <_dtoa_r+0x74a>
 8008638:	42b3      	cmp	r3, r6
 800863a:	9a08      	ldr	r2, [sp, #32]
 800863c:	bfa8      	it	ge
 800863e:	4633      	movge	r3, r6
 8008640:	eba8 0803 	sub.w	r8, r8, r3
 8008644:	1af6      	subs	r6, r6, r3
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800864c:	b1f3      	cbz	r3, 800868c <_dtoa_r+0x78c>
 800864e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80b7 	beq.w	80087c4 <_dtoa_r+0x8c4>
 8008656:	b18c      	cbz	r4, 800867c <_dtoa_r+0x77c>
 8008658:	4629      	mov	r1, r5
 800865a:	4622      	mov	r2, r4
 800865c:	4658      	mov	r0, fp
 800865e:	f000 fd11 	bl	8009084 <__pow5mult>
 8008662:	464a      	mov	r2, r9
 8008664:	4601      	mov	r1, r0
 8008666:	4605      	mov	r5, r0
 8008668:	4658      	mov	r0, fp
 800866a:	f000 fc61 	bl	8008f30 <__multiply>
 800866e:	4649      	mov	r1, r9
 8008670:	9004      	str	r0, [sp, #16]
 8008672:	4658      	mov	r0, fp
 8008674:	f000 fb48 	bl	8008d08 <_Bfree>
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	4699      	mov	r9, r3
 800867c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800867e:	1b1a      	subs	r2, r3, r4
 8008680:	d004      	beq.n	800868c <_dtoa_r+0x78c>
 8008682:	4649      	mov	r1, r9
 8008684:	4658      	mov	r0, fp
 8008686:	f000 fcfd 	bl	8009084 <__pow5mult>
 800868a:	4681      	mov	r9, r0
 800868c:	2101      	movs	r1, #1
 800868e:	4658      	mov	r0, fp
 8008690:	f000 fc38 	bl	8008f04 <__i2b>
 8008694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008696:	4604      	mov	r4, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 81cf 	beq.w	8008a3c <_dtoa_r+0xb3c>
 800869e:	461a      	mov	r2, r3
 80086a0:	4601      	mov	r1, r0
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 fcee 	bl	8009084 <__pow5mult>
 80086a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	4604      	mov	r4, r0
 80086ae:	f300 8095 	bgt.w	80087dc <_dtoa_r+0x8dc>
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 8087 	bne.w	80087c8 <_dtoa_r+0x8c8>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f040 8089 	bne.w	80087d8 <_dtoa_r+0x8d8>
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086cc:	0d1b      	lsrs	r3, r3, #20
 80086ce:	051b      	lsls	r3, r3, #20
 80086d0:	b12b      	cbz	r3, 80086de <_dtoa_r+0x7de>
 80086d2:	9b08      	ldr	r3, [sp, #32]
 80086d4:	3301      	adds	r3, #1
 80086d6:	9308      	str	r3, [sp, #32]
 80086d8:	f108 0801 	add.w	r8, r8, #1
 80086dc:	2301      	movs	r3, #1
 80086de:	930a      	str	r3, [sp, #40]	@ 0x28
 80086e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 81b0 	beq.w	8008a48 <_dtoa_r+0xb48>
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086ee:	6918      	ldr	r0, [r3, #16]
 80086f0:	f000 fbbc 	bl	8008e6c <__hi0bits>
 80086f4:	f1c0 0020 	rsb	r0, r0, #32
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	4418      	add	r0, r3
 80086fc:	f010 001f 	ands.w	r0, r0, #31
 8008700:	d077      	beq.n	80087f2 <_dtoa_r+0x8f2>
 8008702:	f1c0 0320 	rsb	r3, r0, #32
 8008706:	2b04      	cmp	r3, #4
 8008708:	dd6b      	ble.n	80087e2 <_dtoa_r+0x8e2>
 800870a:	9b08      	ldr	r3, [sp, #32]
 800870c:	f1c0 001c 	rsb	r0, r0, #28
 8008710:	4403      	add	r3, r0
 8008712:	4480      	add	r8, r0
 8008714:	4406      	add	r6, r0
 8008716:	9308      	str	r3, [sp, #32]
 8008718:	f1b8 0f00 	cmp.w	r8, #0
 800871c:	dd05      	ble.n	800872a <_dtoa_r+0x82a>
 800871e:	4649      	mov	r1, r9
 8008720:	4642      	mov	r2, r8
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fd08 	bl	8009138 <__lshift>
 8008728:	4681      	mov	r9, r0
 800872a:	9b08      	ldr	r3, [sp, #32]
 800872c:	2b00      	cmp	r3, #0
 800872e:	dd05      	ble.n	800873c <_dtoa_r+0x83c>
 8008730:	4621      	mov	r1, r4
 8008732:	461a      	mov	r2, r3
 8008734:	4658      	mov	r0, fp
 8008736:	f000 fcff 	bl	8009138 <__lshift>
 800873a:	4604      	mov	r4, r0
 800873c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800873e:	2b00      	cmp	r3, #0
 8008740:	d059      	beq.n	80087f6 <_dtoa_r+0x8f6>
 8008742:	4621      	mov	r1, r4
 8008744:	4648      	mov	r0, r9
 8008746:	f000 fd63 	bl	8009210 <__mcmp>
 800874a:	2800      	cmp	r0, #0
 800874c:	da53      	bge.n	80087f6 <_dtoa_r+0x8f6>
 800874e:	1e7b      	subs	r3, r7, #1
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	4649      	mov	r1, r9
 8008754:	2300      	movs	r3, #0
 8008756:	220a      	movs	r2, #10
 8008758:	4658      	mov	r0, fp
 800875a:	f000 faf7 	bl	8008d4c <__multadd>
 800875e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008760:	4681      	mov	r9, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 8172 	beq.w	8008a4c <_dtoa_r+0xb4c>
 8008768:	2300      	movs	r3, #0
 800876a:	4629      	mov	r1, r5
 800876c:	220a      	movs	r2, #10
 800876e:	4658      	mov	r0, fp
 8008770:	f000 faec 	bl	8008d4c <__multadd>
 8008774:	9b00      	ldr	r3, [sp, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	4605      	mov	r5, r0
 800877a:	dc67      	bgt.n	800884c <_dtoa_r+0x94c>
 800877c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877e:	2b02      	cmp	r3, #2
 8008780:	dc41      	bgt.n	8008806 <_dtoa_r+0x906>
 8008782:	e063      	b.n	800884c <_dtoa_r+0x94c>
 8008784:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008786:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800878a:	e746      	b.n	800861a <_dtoa_r+0x71a>
 800878c:	9b07      	ldr	r3, [sp, #28]
 800878e:	1e5c      	subs	r4, r3, #1
 8008790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008792:	42a3      	cmp	r3, r4
 8008794:	bfbf      	itttt	lt
 8008796:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008798:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800879a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800879c:	1ae3      	sublt	r3, r4, r3
 800879e:	bfb4      	ite	lt
 80087a0:	18d2      	addlt	r2, r2, r3
 80087a2:	1b1c      	subge	r4, r3, r4
 80087a4:	9b07      	ldr	r3, [sp, #28]
 80087a6:	bfbc      	itt	lt
 80087a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80087aa:	2400      	movlt	r4, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	bfb5      	itete	lt
 80087b0:	eba8 0603 	sublt.w	r6, r8, r3
 80087b4:	9b07      	ldrge	r3, [sp, #28]
 80087b6:	2300      	movlt	r3, #0
 80087b8:	4646      	movge	r6, r8
 80087ba:	e730      	b.n	800861e <_dtoa_r+0x71e>
 80087bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80087c0:	4646      	mov	r6, r8
 80087c2:	e735      	b.n	8008630 <_dtoa_r+0x730>
 80087c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087c6:	e75c      	b.n	8008682 <_dtoa_r+0x782>
 80087c8:	2300      	movs	r3, #0
 80087ca:	e788      	b.n	80086de <_dtoa_r+0x7de>
 80087cc:	3fe00000 	.word	0x3fe00000
 80087d0:	40240000 	.word	0x40240000
 80087d4:	40140000 	.word	0x40140000
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	e780      	b.n	80086de <_dtoa_r+0x7de>
 80087dc:	2300      	movs	r3, #0
 80087de:	930a      	str	r3, [sp, #40]	@ 0x28
 80087e0:	e782      	b.n	80086e8 <_dtoa_r+0x7e8>
 80087e2:	d099      	beq.n	8008718 <_dtoa_r+0x818>
 80087e4:	9a08      	ldr	r2, [sp, #32]
 80087e6:	331c      	adds	r3, #28
 80087e8:	441a      	add	r2, r3
 80087ea:	4498      	add	r8, r3
 80087ec:	441e      	add	r6, r3
 80087ee:	9208      	str	r2, [sp, #32]
 80087f0:	e792      	b.n	8008718 <_dtoa_r+0x818>
 80087f2:	4603      	mov	r3, r0
 80087f4:	e7f6      	b.n	80087e4 <_dtoa_r+0x8e4>
 80087f6:	9b07      	ldr	r3, [sp, #28]
 80087f8:	9704      	str	r7, [sp, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dc20      	bgt.n	8008840 <_dtoa_r+0x940>
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008802:	2b02      	cmp	r3, #2
 8008804:	dd1e      	ble.n	8008844 <_dtoa_r+0x944>
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f aec0 	bne.w	800858e <_dtoa_r+0x68e>
 800880e:	4621      	mov	r1, r4
 8008810:	2205      	movs	r2, #5
 8008812:	4658      	mov	r0, fp
 8008814:	f000 fa9a 	bl	8008d4c <__multadd>
 8008818:	4601      	mov	r1, r0
 800881a:	4604      	mov	r4, r0
 800881c:	4648      	mov	r0, r9
 800881e:	f000 fcf7 	bl	8009210 <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	f77f aeb3 	ble.w	800858e <_dtoa_r+0x68e>
 8008828:	4656      	mov	r6, sl
 800882a:	2331      	movs	r3, #49	@ 0x31
 800882c:	f806 3b01 	strb.w	r3, [r6], #1
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	3301      	adds	r3, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	e6ae      	b.n	8008596 <_dtoa_r+0x696>
 8008838:	9c07      	ldr	r4, [sp, #28]
 800883a:	9704      	str	r7, [sp, #16]
 800883c:	4625      	mov	r5, r4
 800883e:	e7f3      	b.n	8008828 <_dtoa_r+0x928>
 8008840:	9b07      	ldr	r3, [sp, #28]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 8104 	beq.w	8008a54 <_dtoa_r+0xb54>
 800884c:	2e00      	cmp	r6, #0
 800884e:	dd05      	ble.n	800885c <_dtoa_r+0x95c>
 8008850:	4629      	mov	r1, r5
 8008852:	4632      	mov	r2, r6
 8008854:	4658      	mov	r0, fp
 8008856:	f000 fc6f 	bl	8009138 <__lshift>
 800885a:	4605      	mov	r5, r0
 800885c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d05a      	beq.n	8008918 <_dtoa_r+0xa18>
 8008862:	6869      	ldr	r1, [r5, #4]
 8008864:	4658      	mov	r0, fp
 8008866:	f000 fa0f 	bl	8008c88 <_Balloc>
 800886a:	4606      	mov	r6, r0
 800886c:	b928      	cbnz	r0, 800887a <_dtoa_r+0x97a>
 800886e:	4b84      	ldr	r3, [pc, #528]	@ (8008a80 <_dtoa_r+0xb80>)
 8008870:	4602      	mov	r2, r0
 8008872:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008876:	f7ff bb5a 	b.w	8007f2e <_dtoa_r+0x2e>
 800887a:	692a      	ldr	r2, [r5, #16]
 800887c:	3202      	adds	r2, #2
 800887e:	0092      	lsls	r2, r2, #2
 8008880:	f105 010c 	add.w	r1, r5, #12
 8008884:	300c      	adds	r0, #12
 8008886:	f001 ff75 	bl	800a774 <memcpy>
 800888a:	2201      	movs	r2, #1
 800888c:	4631      	mov	r1, r6
 800888e:	4658      	mov	r0, fp
 8008890:	f000 fc52 	bl	8009138 <__lshift>
 8008894:	f10a 0301 	add.w	r3, sl, #1
 8008898:	9307      	str	r3, [sp, #28]
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	4453      	add	r3, sl
 800889e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088a0:	9b02      	ldr	r3, [sp, #8]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	462f      	mov	r7, r5
 80088a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088aa:	4605      	mov	r5, r0
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	4621      	mov	r1, r4
 80088b0:	3b01      	subs	r3, #1
 80088b2:	4648      	mov	r0, r9
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	f7ff fa9b 	bl	8007df0 <quorem>
 80088ba:	4639      	mov	r1, r7
 80088bc:	9002      	str	r0, [sp, #8]
 80088be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80088c2:	4648      	mov	r0, r9
 80088c4:	f000 fca4 	bl	8009210 <__mcmp>
 80088c8:	462a      	mov	r2, r5
 80088ca:	9008      	str	r0, [sp, #32]
 80088cc:	4621      	mov	r1, r4
 80088ce:	4658      	mov	r0, fp
 80088d0:	f000 fcba 	bl	8009248 <__mdiff>
 80088d4:	68c2      	ldr	r2, [r0, #12]
 80088d6:	4606      	mov	r6, r0
 80088d8:	bb02      	cbnz	r2, 800891c <_dtoa_r+0xa1c>
 80088da:	4601      	mov	r1, r0
 80088dc:	4648      	mov	r0, r9
 80088de:	f000 fc97 	bl	8009210 <__mcmp>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4631      	mov	r1, r6
 80088e6:	4658      	mov	r0, fp
 80088e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80088ea:	f000 fa0d 	bl	8008d08 <_Bfree>
 80088ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088f2:	9e07      	ldr	r6, [sp, #28]
 80088f4:	ea43 0102 	orr.w	r1, r3, r2
 80088f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088fa:	4319      	orrs	r1, r3
 80088fc:	d110      	bne.n	8008920 <_dtoa_r+0xa20>
 80088fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008902:	d029      	beq.n	8008958 <_dtoa_r+0xa58>
 8008904:	9b08      	ldr	r3, [sp, #32]
 8008906:	2b00      	cmp	r3, #0
 8008908:	dd02      	ble.n	8008910 <_dtoa_r+0xa10>
 800890a:	9b02      	ldr	r3, [sp, #8]
 800890c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	f883 8000 	strb.w	r8, [r3]
 8008916:	e63f      	b.n	8008598 <_dtoa_r+0x698>
 8008918:	4628      	mov	r0, r5
 800891a:	e7bb      	b.n	8008894 <_dtoa_r+0x994>
 800891c:	2201      	movs	r2, #1
 800891e:	e7e1      	b.n	80088e4 <_dtoa_r+0x9e4>
 8008920:	9b08      	ldr	r3, [sp, #32]
 8008922:	2b00      	cmp	r3, #0
 8008924:	db04      	blt.n	8008930 <_dtoa_r+0xa30>
 8008926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008928:	430b      	orrs	r3, r1
 800892a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800892c:	430b      	orrs	r3, r1
 800892e:	d120      	bne.n	8008972 <_dtoa_r+0xa72>
 8008930:	2a00      	cmp	r2, #0
 8008932:	dded      	ble.n	8008910 <_dtoa_r+0xa10>
 8008934:	4649      	mov	r1, r9
 8008936:	2201      	movs	r2, #1
 8008938:	4658      	mov	r0, fp
 800893a:	f000 fbfd 	bl	8009138 <__lshift>
 800893e:	4621      	mov	r1, r4
 8008940:	4681      	mov	r9, r0
 8008942:	f000 fc65 	bl	8009210 <__mcmp>
 8008946:	2800      	cmp	r0, #0
 8008948:	dc03      	bgt.n	8008952 <_dtoa_r+0xa52>
 800894a:	d1e1      	bne.n	8008910 <_dtoa_r+0xa10>
 800894c:	f018 0f01 	tst.w	r8, #1
 8008950:	d0de      	beq.n	8008910 <_dtoa_r+0xa10>
 8008952:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008956:	d1d8      	bne.n	800890a <_dtoa_r+0xa0a>
 8008958:	9a00      	ldr	r2, [sp, #0]
 800895a:	2339      	movs	r3, #57	@ 0x39
 800895c:	7013      	strb	r3, [r2, #0]
 800895e:	4633      	mov	r3, r6
 8008960:	461e      	mov	r6, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008968:	2a39      	cmp	r2, #57	@ 0x39
 800896a:	d052      	beq.n	8008a12 <_dtoa_r+0xb12>
 800896c:	3201      	adds	r2, #1
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	e612      	b.n	8008598 <_dtoa_r+0x698>
 8008972:	2a00      	cmp	r2, #0
 8008974:	dd07      	ble.n	8008986 <_dtoa_r+0xa86>
 8008976:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800897a:	d0ed      	beq.n	8008958 <_dtoa_r+0xa58>
 800897c:	9a00      	ldr	r2, [sp, #0]
 800897e:	f108 0301 	add.w	r3, r8, #1
 8008982:	7013      	strb	r3, [r2, #0]
 8008984:	e608      	b.n	8008598 <_dtoa_r+0x698>
 8008986:	9b07      	ldr	r3, [sp, #28]
 8008988:	9a07      	ldr	r2, [sp, #28]
 800898a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800898e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008990:	4293      	cmp	r3, r2
 8008992:	d028      	beq.n	80089e6 <_dtoa_r+0xae6>
 8008994:	4649      	mov	r1, r9
 8008996:	2300      	movs	r3, #0
 8008998:	220a      	movs	r2, #10
 800899a:	4658      	mov	r0, fp
 800899c:	f000 f9d6 	bl	8008d4c <__multadd>
 80089a0:	42af      	cmp	r7, r5
 80089a2:	4681      	mov	r9, r0
 80089a4:	f04f 0300 	mov.w	r3, #0
 80089a8:	f04f 020a 	mov.w	r2, #10
 80089ac:	4639      	mov	r1, r7
 80089ae:	4658      	mov	r0, fp
 80089b0:	d107      	bne.n	80089c2 <_dtoa_r+0xac2>
 80089b2:	f000 f9cb 	bl	8008d4c <__multadd>
 80089b6:	4607      	mov	r7, r0
 80089b8:	4605      	mov	r5, r0
 80089ba:	9b07      	ldr	r3, [sp, #28]
 80089bc:	3301      	adds	r3, #1
 80089be:	9307      	str	r3, [sp, #28]
 80089c0:	e774      	b.n	80088ac <_dtoa_r+0x9ac>
 80089c2:	f000 f9c3 	bl	8008d4c <__multadd>
 80089c6:	4629      	mov	r1, r5
 80089c8:	4607      	mov	r7, r0
 80089ca:	2300      	movs	r3, #0
 80089cc:	220a      	movs	r2, #10
 80089ce:	4658      	mov	r0, fp
 80089d0:	f000 f9bc 	bl	8008d4c <__multadd>
 80089d4:	4605      	mov	r5, r0
 80089d6:	e7f0      	b.n	80089ba <_dtoa_r+0xaba>
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bfcc      	ite	gt
 80089de:	461e      	movgt	r6, r3
 80089e0:	2601      	movle	r6, #1
 80089e2:	4456      	add	r6, sl
 80089e4:	2700      	movs	r7, #0
 80089e6:	4649      	mov	r1, r9
 80089e8:	2201      	movs	r2, #1
 80089ea:	4658      	mov	r0, fp
 80089ec:	f000 fba4 	bl	8009138 <__lshift>
 80089f0:	4621      	mov	r1, r4
 80089f2:	4681      	mov	r9, r0
 80089f4:	f000 fc0c 	bl	8009210 <__mcmp>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dcb0      	bgt.n	800895e <_dtoa_r+0xa5e>
 80089fc:	d102      	bne.n	8008a04 <_dtoa_r+0xb04>
 80089fe:	f018 0f01 	tst.w	r8, #1
 8008a02:	d1ac      	bne.n	800895e <_dtoa_r+0xa5e>
 8008a04:	4633      	mov	r3, r6
 8008a06:	461e      	mov	r6, r3
 8008a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a0c:	2a30      	cmp	r2, #48	@ 0x30
 8008a0e:	d0fa      	beq.n	8008a06 <_dtoa_r+0xb06>
 8008a10:	e5c2      	b.n	8008598 <_dtoa_r+0x698>
 8008a12:	459a      	cmp	sl, r3
 8008a14:	d1a4      	bne.n	8008960 <_dtoa_r+0xa60>
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	2331      	movs	r3, #49	@ 0x31
 8008a1e:	f88a 3000 	strb.w	r3, [sl]
 8008a22:	e5b9      	b.n	8008598 <_dtoa_r+0x698>
 8008a24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a84 <_dtoa_r+0xb84>
 8008a2a:	b11b      	cbz	r3, 8008a34 <_dtoa_r+0xb34>
 8008a2c:	f10a 0308 	add.w	r3, sl, #8
 8008a30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	4650      	mov	r0, sl
 8008a36:	b019      	add	sp, #100	@ 0x64
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	f77f ae37 	ble.w	80086b2 <_dtoa_r+0x7b2>
 8008a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a48:	2001      	movs	r0, #1
 8008a4a:	e655      	b.n	80086f8 <_dtoa_r+0x7f8>
 8008a4c:	9b00      	ldr	r3, [sp, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f77f aed6 	ble.w	8008800 <_dtoa_r+0x900>
 8008a54:	4656      	mov	r6, sl
 8008a56:	4621      	mov	r1, r4
 8008a58:	4648      	mov	r0, r9
 8008a5a:	f7ff f9c9 	bl	8007df0 <quorem>
 8008a5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a62:	f806 8b01 	strb.w	r8, [r6], #1
 8008a66:	9b00      	ldr	r3, [sp, #0]
 8008a68:	eba6 020a 	sub.w	r2, r6, sl
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	ddb3      	ble.n	80089d8 <_dtoa_r+0xad8>
 8008a70:	4649      	mov	r1, r9
 8008a72:	2300      	movs	r3, #0
 8008a74:	220a      	movs	r2, #10
 8008a76:	4658      	mov	r0, fp
 8008a78:	f000 f968 	bl	8008d4c <__multadd>
 8008a7c:	4681      	mov	r9, r0
 8008a7e:	e7ea      	b.n	8008a56 <_dtoa_r+0xb56>
 8008a80:	0800b5bd 	.word	0x0800b5bd
 8008a84:	0800b541 	.word	0x0800b541

08008a88 <_free_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d041      	beq.n	8008b14 <_free_r+0x8c>
 8008a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a94:	1f0c      	subs	r4, r1, #4
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfb8      	it	lt
 8008a9a:	18e4      	addlt	r4, r4, r3
 8008a9c:	f000 f8e8 	bl	8008c70 <__malloc_lock>
 8008aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b18 <_free_r+0x90>)
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	b933      	cbnz	r3, 8008ab4 <_free_r+0x2c>
 8008aa6:	6063      	str	r3, [r4, #4]
 8008aa8:	6014      	str	r4, [r2, #0]
 8008aaa:	4628      	mov	r0, r5
 8008aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ab0:	f000 b8e4 	b.w	8008c7c <__malloc_unlock>
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	d908      	bls.n	8008aca <_free_r+0x42>
 8008ab8:	6820      	ldr	r0, [r4, #0]
 8008aba:	1821      	adds	r1, r4, r0
 8008abc:	428b      	cmp	r3, r1
 8008abe:	bf01      	itttt	eq
 8008ac0:	6819      	ldreq	r1, [r3, #0]
 8008ac2:	685b      	ldreq	r3, [r3, #4]
 8008ac4:	1809      	addeq	r1, r1, r0
 8008ac6:	6021      	streq	r1, [r4, #0]
 8008ac8:	e7ed      	b.n	8008aa6 <_free_r+0x1e>
 8008aca:	461a      	mov	r2, r3
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	b10b      	cbz	r3, 8008ad4 <_free_r+0x4c>
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	d9fa      	bls.n	8008aca <_free_r+0x42>
 8008ad4:	6811      	ldr	r1, [r2, #0]
 8008ad6:	1850      	adds	r0, r2, r1
 8008ad8:	42a0      	cmp	r0, r4
 8008ada:	d10b      	bne.n	8008af4 <_free_r+0x6c>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	4401      	add	r1, r0
 8008ae0:	1850      	adds	r0, r2, r1
 8008ae2:	4283      	cmp	r3, r0
 8008ae4:	6011      	str	r1, [r2, #0]
 8008ae6:	d1e0      	bne.n	8008aaa <_free_r+0x22>
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	6053      	str	r3, [r2, #4]
 8008aee:	4408      	add	r0, r1
 8008af0:	6010      	str	r0, [r2, #0]
 8008af2:	e7da      	b.n	8008aaa <_free_r+0x22>
 8008af4:	d902      	bls.n	8008afc <_free_r+0x74>
 8008af6:	230c      	movs	r3, #12
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	e7d6      	b.n	8008aaa <_free_r+0x22>
 8008afc:	6820      	ldr	r0, [r4, #0]
 8008afe:	1821      	adds	r1, r4, r0
 8008b00:	428b      	cmp	r3, r1
 8008b02:	bf04      	itt	eq
 8008b04:	6819      	ldreq	r1, [r3, #0]
 8008b06:	685b      	ldreq	r3, [r3, #4]
 8008b08:	6063      	str	r3, [r4, #4]
 8008b0a:	bf04      	itt	eq
 8008b0c:	1809      	addeq	r1, r1, r0
 8008b0e:	6021      	streq	r1, [r4, #0]
 8008b10:	6054      	str	r4, [r2, #4]
 8008b12:	e7ca      	b.n	8008aaa <_free_r+0x22>
 8008b14:	bd38      	pop	{r3, r4, r5, pc}
 8008b16:	bf00      	nop
 8008b18:	200008a0 	.word	0x200008a0

08008b1c <malloc>:
 8008b1c:	4b02      	ldr	r3, [pc, #8]	@ (8008b28 <malloc+0xc>)
 8008b1e:	4601      	mov	r1, r0
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	f000 b825 	b.w	8008b70 <_malloc_r>
 8008b26:	bf00      	nop
 8008b28:	20000018 	.word	0x20000018

08008b2c <sbrk_aligned>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008b6c <sbrk_aligned+0x40>)
 8008b30:	460c      	mov	r4, r1
 8008b32:	6831      	ldr	r1, [r6, #0]
 8008b34:	4605      	mov	r5, r0
 8008b36:	b911      	cbnz	r1, 8008b3e <sbrk_aligned+0x12>
 8008b38:	f001 fe0c 	bl	800a754 <_sbrk_r>
 8008b3c:	6030      	str	r0, [r6, #0]
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f001 fe07 	bl	800a754 <_sbrk_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d103      	bne.n	8008b52 <sbrk_aligned+0x26>
 8008b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8008b4e:	4620      	mov	r0, r4
 8008b50:	bd70      	pop	{r4, r5, r6, pc}
 8008b52:	1cc4      	adds	r4, r0, #3
 8008b54:	f024 0403 	bic.w	r4, r4, #3
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d0f8      	beq.n	8008b4e <sbrk_aligned+0x22>
 8008b5c:	1a21      	subs	r1, r4, r0
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f001 fdf8 	bl	800a754 <_sbrk_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d1f2      	bne.n	8008b4e <sbrk_aligned+0x22>
 8008b68:	e7ef      	b.n	8008b4a <sbrk_aligned+0x1e>
 8008b6a:	bf00      	nop
 8008b6c:	2000089c 	.word	0x2000089c

08008b70 <_malloc_r>:
 8008b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b74:	1ccd      	adds	r5, r1, #3
 8008b76:	f025 0503 	bic.w	r5, r5, #3
 8008b7a:	3508      	adds	r5, #8
 8008b7c:	2d0c      	cmp	r5, #12
 8008b7e:	bf38      	it	cc
 8008b80:	250c      	movcc	r5, #12
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	4606      	mov	r6, r0
 8008b86:	db01      	blt.n	8008b8c <_malloc_r+0x1c>
 8008b88:	42a9      	cmp	r1, r5
 8008b8a:	d904      	bls.n	8008b96 <_malloc_r+0x26>
 8008b8c:	230c      	movs	r3, #12
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	2000      	movs	r0, #0
 8008b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c6c <_malloc_r+0xfc>
 8008b9a:	f000 f869 	bl	8008c70 <__malloc_lock>
 8008b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba2:	461c      	mov	r4, r3
 8008ba4:	bb44      	cbnz	r4, 8008bf8 <_malloc_r+0x88>
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ffbf 	bl	8008b2c <sbrk_aligned>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	d158      	bne.n	8008c66 <_malloc_r+0xf6>
 8008bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8008bb8:	4627      	mov	r7, r4
 8008bba:	2f00      	cmp	r7, #0
 8008bbc:	d143      	bne.n	8008c46 <_malloc_r+0xd6>
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	d04b      	beq.n	8008c5a <_malloc_r+0xea>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	eb04 0903 	add.w	r9, r4, r3
 8008bcc:	f001 fdc2 	bl	800a754 <_sbrk_r>
 8008bd0:	4581      	cmp	r9, r0
 8008bd2:	d142      	bne.n	8008c5a <_malloc_r+0xea>
 8008bd4:	6821      	ldr	r1, [r4, #0]
 8008bd6:	1a6d      	subs	r5, r5, r1
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ffa6 	bl	8008b2c <sbrk_aligned>
 8008be0:	3001      	adds	r0, #1
 8008be2:	d03a      	beq.n	8008c5a <_malloc_r+0xea>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	442b      	add	r3, r5
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	f8d8 3000 	ldr.w	r3, [r8]
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	bb62      	cbnz	r2, 8008c4c <_malloc_r+0xdc>
 8008bf2:	f8c8 7000 	str.w	r7, [r8]
 8008bf6:	e00f      	b.n	8008c18 <_malloc_r+0xa8>
 8008bf8:	6822      	ldr	r2, [r4, #0]
 8008bfa:	1b52      	subs	r2, r2, r5
 8008bfc:	d420      	bmi.n	8008c40 <_malloc_r+0xd0>
 8008bfe:	2a0b      	cmp	r2, #11
 8008c00:	d917      	bls.n	8008c32 <_malloc_r+0xc2>
 8008c02:	1961      	adds	r1, r4, r5
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	6025      	str	r5, [r4, #0]
 8008c08:	bf18      	it	ne
 8008c0a:	6059      	strne	r1, [r3, #4]
 8008c0c:	6863      	ldr	r3, [r4, #4]
 8008c0e:	bf08      	it	eq
 8008c10:	f8c8 1000 	streq.w	r1, [r8]
 8008c14:	5162      	str	r2, [r4, r5]
 8008c16:	604b      	str	r3, [r1, #4]
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f000 f82f 	bl	8008c7c <__malloc_unlock>
 8008c1e:	f104 000b 	add.w	r0, r4, #11
 8008c22:	1d23      	adds	r3, r4, #4
 8008c24:	f020 0007 	bic.w	r0, r0, #7
 8008c28:	1ac2      	subs	r2, r0, r3
 8008c2a:	bf1c      	itt	ne
 8008c2c:	1a1b      	subne	r3, r3, r0
 8008c2e:	50a3      	strne	r3, [r4, r2]
 8008c30:	e7af      	b.n	8008b92 <_malloc_r+0x22>
 8008c32:	6862      	ldr	r2, [r4, #4]
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	bf0c      	ite	eq
 8008c38:	f8c8 2000 	streq.w	r2, [r8]
 8008c3c:	605a      	strne	r2, [r3, #4]
 8008c3e:	e7eb      	b.n	8008c18 <_malloc_r+0xa8>
 8008c40:	4623      	mov	r3, r4
 8008c42:	6864      	ldr	r4, [r4, #4]
 8008c44:	e7ae      	b.n	8008ba4 <_malloc_r+0x34>
 8008c46:	463c      	mov	r4, r7
 8008c48:	687f      	ldr	r7, [r7, #4]
 8008c4a:	e7b6      	b.n	8008bba <_malloc_r+0x4a>
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	d1fb      	bne.n	8008c4c <_malloc_r+0xdc>
 8008c54:	2300      	movs	r3, #0
 8008c56:	6053      	str	r3, [r2, #4]
 8008c58:	e7de      	b.n	8008c18 <_malloc_r+0xa8>
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f000 f80c 	bl	8008c7c <__malloc_unlock>
 8008c64:	e794      	b.n	8008b90 <_malloc_r+0x20>
 8008c66:	6005      	str	r5, [r0, #0]
 8008c68:	e7d6      	b.n	8008c18 <_malloc_r+0xa8>
 8008c6a:	bf00      	nop
 8008c6c:	200008a0 	.word	0x200008a0

08008c70 <__malloc_lock>:
 8008c70:	4801      	ldr	r0, [pc, #4]	@ (8008c78 <__malloc_lock+0x8>)
 8008c72:	f7ff b8b4 	b.w	8007dde <__retarget_lock_acquire_recursive>
 8008c76:	bf00      	nop
 8008c78:	20000898 	.word	0x20000898

08008c7c <__malloc_unlock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	@ (8008c84 <__malloc_unlock+0x8>)
 8008c7e:	f7ff b8af 	b.w	8007de0 <__retarget_lock_release_recursive>
 8008c82:	bf00      	nop
 8008c84:	20000898 	.word	0x20000898

08008c88 <_Balloc>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	69c6      	ldr	r6, [r0, #28]
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	b976      	cbnz	r6, 8008cb0 <_Balloc+0x28>
 8008c92:	2010      	movs	r0, #16
 8008c94:	f7ff ff42 	bl	8008b1c <malloc>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	61e0      	str	r0, [r4, #28]
 8008c9c:	b920      	cbnz	r0, 8008ca8 <_Balloc+0x20>
 8008c9e:	4b18      	ldr	r3, [pc, #96]	@ (8008d00 <_Balloc+0x78>)
 8008ca0:	4818      	ldr	r0, [pc, #96]	@ (8008d04 <_Balloc+0x7c>)
 8008ca2:	216b      	movs	r1, #107	@ 0x6b
 8008ca4:	f001 fd7c 	bl	800a7a0 <__assert_func>
 8008ca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cac:	6006      	str	r6, [r0, #0]
 8008cae:	60c6      	str	r6, [r0, #12]
 8008cb0:	69e6      	ldr	r6, [r4, #28]
 8008cb2:	68f3      	ldr	r3, [r6, #12]
 8008cb4:	b183      	cbz	r3, 8008cd8 <_Balloc+0x50>
 8008cb6:	69e3      	ldr	r3, [r4, #28]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cbe:	b9b8      	cbnz	r0, 8008cf0 <_Balloc+0x68>
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	fa01 f605 	lsl.w	r6, r1, r5
 8008cc6:	1d72      	adds	r2, r6, #5
 8008cc8:	0092      	lsls	r2, r2, #2
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f001 fd86 	bl	800a7dc <_calloc_r>
 8008cd0:	b160      	cbz	r0, 8008cec <_Balloc+0x64>
 8008cd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cd6:	e00e      	b.n	8008cf6 <_Balloc+0x6e>
 8008cd8:	2221      	movs	r2, #33	@ 0x21
 8008cda:	2104      	movs	r1, #4
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f001 fd7d 	bl	800a7dc <_calloc_r>
 8008ce2:	69e3      	ldr	r3, [r4, #28]
 8008ce4:	60f0      	str	r0, [r6, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e4      	bne.n	8008cb6 <_Balloc+0x2e>
 8008cec:	2000      	movs	r0, #0
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	6802      	ldr	r2, [r0, #0]
 8008cf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cfc:	e7f7      	b.n	8008cee <_Balloc+0x66>
 8008cfe:	bf00      	nop
 8008d00:	0800b54e 	.word	0x0800b54e
 8008d04:	0800b5ce 	.word	0x0800b5ce

08008d08 <_Bfree>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	69c6      	ldr	r6, [r0, #28]
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b976      	cbnz	r6, 8008d30 <_Bfree+0x28>
 8008d12:	2010      	movs	r0, #16
 8008d14:	f7ff ff02 	bl	8008b1c <malloc>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	61e8      	str	r0, [r5, #28]
 8008d1c:	b920      	cbnz	r0, 8008d28 <_Bfree+0x20>
 8008d1e:	4b09      	ldr	r3, [pc, #36]	@ (8008d44 <_Bfree+0x3c>)
 8008d20:	4809      	ldr	r0, [pc, #36]	@ (8008d48 <_Bfree+0x40>)
 8008d22:	218f      	movs	r1, #143	@ 0x8f
 8008d24:	f001 fd3c 	bl	800a7a0 <__assert_func>
 8008d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d2c:	6006      	str	r6, [r0, #0]
 8008d2e:	60c6      	str	r6, [r0, #12]
 8008d30:	b13c      	cbz	r4, 8008d42 <_Bfree+0x3a>
 8008d32:	69eb      	ldr	r3, [r5, #28]
 8008d34:	6862      	ldr	r2, [r4, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d3c:	6021      	str	r1, [r4, #0]
 8008d3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	0800b54e 	.word	0x0800b54e
 8008d48:	0800b5ce 	.word	0x0800b5ce

08008d4c <__multadd>:
 8008d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d50:	690d      	ldr	r5, [r1, #16]
 8008d52:	4607      	mov	r7, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	461e      	mov	r6, r3
 8008d58:	f101 0c14 	add.w	ip, r1, #20
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d62:	b299      	uxth	r1, r3
 8008d64:	fb02 6101 	mla	r1, r2, r1, r6
 8008d68:	0c1e      	lsrs	r6, r3, #16
 8008d6a:	0c0b      	lsrs	r3, r1, #16
 8008d6c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d70:	b289      	uxth	r1, r1
 8008d72:	3001      	adds	r0, #1
 8008d74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d78:	4285      	cmp	r5, r0
 8008d7a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d82:	dcec      	bgt.n	8008d5e <__multadd+0x12>
 8008d84:	b30e      	cbz	r6, 8008dca <__multadd+0x7e>
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	42ab      	cmp	r3, r5
 8008d8a:	dc19      	bgt.n	8008dc0 <__multadd+0x74>
 8008d8c:	6861      	ldr	r1, [r4, #4]
 8008d8e:	4638      	mov	r0, r7
 8008d90:	3101      	adds	r1, #1
 8008d92:	f7ff ff79 	bl	8008c88 <_Balloc>
 8008d96:	4680      	mov	r8, r0
 8008d98:	b928      	cbnz	r0, 8008da6 <__multadd+0x5a>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd0 <__multadd+0x84>)
 8008d9e:	480d      	ldr	r0, [pc, #52]	@ (8008dd4 <__multadd+0x88>)
 8008da0:	21ba      	movs	r1, #186	@ 0xba
 8008da2:	f001 fcfd 	bl	800a7a0 <__assert_func>
 8008da6:	6922      	ldr	r2, [r4, #16]
 8008da8:	3202      	adds	r2, #2
 8008daa:	f104 010c 	add.w	r1, r4, #12
 8008dae:	0092      	lsls	r2, r2, #2
 8008db0:	300c      	adds	r0, #12
 8008db2:	f001 fcdf 	bl	800a774 <memcpy>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4638      	mov	r0, r7
 8008dba:	f7ff ffa5 	bl	8008d08 <_Bfree>
 8008dbe:	4644      	mov	r4, r8
 8008dc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dc4:	3501      	adds	r5, #1
 8008dc6:	615e      	str	r6, [r3, #20]
 8008dc8:	6125      	str	r5, [r4, #16]
 8008dca:	4620      	mov	r0, r4
 8008dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd0:	0800b5bd 	.word	0x0800b5bd
 8008dd4:	0800b5ce 	.word	0x0800b5ce

08008dd8 <__s2b>:
 8008dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	4615      	mov	r5, r2
 8008de0:	461f      	mov	r7, r3
 8008de2:	2209      	movs	r2, #9
 8008de4:	3308      	adds	r3, #8
 8008de6:	4606      	mov	r6, r0
 8008de8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dec:	2100      	movs	r1, #0
 8008dee:	2201      	movs	r2, #1
 8008df0:	429a      	cmp	r2, r3
 8008df2:	db09      	blt.n	8008e08 <__s2b+0x30>
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7ff ff47 	bl	8008c88 <_Balloc>
 8008dfa:	b940      	cbnz	r0, 8008e0e <__s2b+0x36>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	4b19      	ldr	r3, [pc, #100]	@ (8008e64 <__s2b+0x8c>)
 8008e00:	4819      	ldr	r0, [pc, #100]	@ (8008e68 <__s2b+0x90>)
 8008e02:	21d3      	movs	r1, #211	@ 0xd3
 8008e04:	f001 fccc 	bl	800a7a0 <__assert_func>
 8008e08:	0052      	lsls	r2, r2, #1
 8008e0a:	3101      	adds	r1, #1
 8008e0c:	e7f0      	b.n	8008df0 <__s2b+0x18>
 8008e0e:	9b08      	ldr	r3, [sp, #32]
 8008e10:	6143      	str	r3, [r0, #20]
 8008e12:	2d09      	cmp	r5, #9
 8008e14:	f04f 0301 	mov.w	r3, #1
 8008e18:	6103      	str	r3, [r0, #16]
 8008e1a:	dd16      	ble.n	8008e4a <__s2b+0x72>
 8008e1c:	f104 0909 	add.w	r9, r4, #9
 8008e20:	46c8      	mov	r8, r9
 8008e22:	442c      	add	r4, r5
 8008e24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e28:	4601      	mov	r1, r0
 8008e2a:	3b30      	subs	r3, #48	@ 0x30
 8008e2c:	220a      	movs	r2, #10
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7ff ff8c 	bl	8008d4c <__multadd>
 8008e34:	45a0      	cmp	r8, r4
 8008e36:	d1f5      	bne.n	8008e24 <__s2b+0x4c>
 8008e38:	f1a5 0408 	sub.w	r4, r5, #8
 8008e3c:	444c      	add	r4, r9
 8008e3e:	1b2d      	subs	r5, r5, r4
 8008e40:	1963      	adds	r3, r4, r5
 8008e42:	42bb      	cmp	r3, r7
 8008e44:	db04      	blt.n	8008e50 <__s2b+0x78>
 8008e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e4a:	340a      	adds	r4, #10
 8008e4c:	2509      	movs	r5, #9
 8008e4e:	e7f6      	b.n	8008e3e <__s2b+0x66>
 8008e50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e54:	4601      	mov	r1, r0
 8008e56:	3b30      	subs	r3, #48	@ 0x30
 8008e58:	220a      	movs	r2, #10
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff ff76 	bl	8008d4c <__multadd>
 8008e60:	e7ee      	b.n	8008e40 <__s2b+0x68>
 8008e62:	bf00      	nop
 8008e64:	0800b5bd 	.word	0x0800b5bd
 8008e68:	0800b5ce 	.word	0x0800b5ce

08008e6c <__hi0bits>:
 8008e6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e70:	4603      	mov	r3, r0
 8008e72:	bf36      	itet	cc
 8008e74:	0403      	lslcc	r3, r0, #16
 8008e76:	2000      	movcs	r0, #0
 8008e78:	2010      	movcc	r0, #16
 8008e7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e7e:	bf3c      	itt	cc
 8008e80:	021b      	lslcc	r3, r3, #8
 8008e82:	3008      	addcc	r0, #8
 8008e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e88:	bf3c      	itt	cc
 8008e8a:	011b      	lslcc	r3, r3, #4
 8008e8c:	3004      	addcc	r0, #4
 8008e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e92:	bf3c      	itt	cc
 8008e94:	009b      	lslcc	r3, r3, #2
 8008e96:	3002      	addcc	r0, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	db05      	blt.n	8008ea8 <__hi0bits+0x3c>
 8008e9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ea0:	f100 0001 	add.w	r0, r0, #1
 8008ea4:	bf08      	it	eq
 8008ea6:	2020      	moveq	r0, #32
 8008ea8:	4770      	bx	lr

08008eaa <__lo0bits>:
 8008eaa:	6803      	ldr	r3, [r0, #0]
 8008eac:	4602      	mov	r2, r0
 8008eae:	f013 0007 	ands.w	r0, r3, #7
 8008eb2:	d00b      	beq.n	8008ecc <__lo0bits+0x22>
 8008eb4:	07d9      	lsls	r1, r3, #31
 8008eb6:	d421      	bmi.n	8008efc <__lo0bits+0x52>
 8008eb8:	0798      	lsls	r0, r3, #30
 8008eba:	bf49      	itett	mi
 8008ebc:	085b      	lsrmi	r3, r3, #1
 8008ebe:	089b      	lsrpl	r3, r3, #2
 8008ec0:	2001      	movmi	r0, #1
 8008ec2:	6013      	strmi	r3, [r2, #0]
 8008ec4:	bf5c      	itt	pl
 8008ec6:	6013      	strpl	r3, [r2, #0]
 8008ec8:	2002      	movpl	r0, #2
 8008eca:	4770      	bx	lr
 8008ecc:	b299      	uxth	r1, r3
 8008ece:	b909      	cbnz	r1, 8008ed4 <__lo0bits+0x2a>
 8008ed0:	0c1b      	lsrs	r3, r3, #16
 8008ed2:	2010      	movs	r0, #16
 8008ed4:	b2d9      	uxtb	r1, r3
 8008ed6:	b909      	cbnz	r1, 8008edc <__lo0bits+0x32>
 8008ed8:	3008      	adds	r0, #8
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	0719      	lsls	r1, r3, #28
 8008ede:	bf04      	itt	eq
 8008ee0:	091b      	lsreq	r3, r3, #4
 8008ee2:	3004      	addeq	r0, #4
 8008ee4:	0799      	lsls	r1, r3, #30
 8008ee6:	bf04      	itt	eq
 8008ee8:	089b      	lsreq	r3, r3, #2
 8008eea:	3002      	addeq	r0, #2
 8008eec:	07d9      	lsls	r1, r3, #31
 8008eee:	d403      	bmi.n	8008ef8 <__lo0bits+0x4e>
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	f100 0001 	add.w	r0, r0, #1
 8008ef6:	d003      	beq.n	8008f00 <__lo0bits+0x56>
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	4770      	bx	lr
 8008efc:	2000      	movs	r0, #0
 8008efe:	4770      	bx	lr
 8008f00:	2020      	movs	r0, #32
 8008f02:	4770      	bx	lr

08008f04 <__i2b>:
 8008f04:	b510      	push	{r4, lr}
 8008f06:	460c      	mov	r4, r1
 8008f08:	2101      	movs	r1, #1
 8008f0a:	f7ff febd 	bl	8008c88 <_Balloc>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	b928      	cbnz	r0, 8008f1e <__i2b+0x1a>
 8008f12:	4b05      	ldr	r3, [pc, #20]	@ (8008f28 <__i2b+0x24>)
 8008f14:	4805      	ldr	r0, [pc, #20]	@ (8008f2c <__i2b+0x28>)
 8008f16:	f240 1145 	movw	r1, #325	@ 0x145
 8008f1a:	f001 fc41 	bl	800a7a0 <__assert_func>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	6144      	str	r4, [r0, #20]
 8008f22:	6103      	str	r3, [r0, #16]
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	bf00      	nop
 8008f28:	0800b5bd 	.word	0x0800b5bd
 8008f2c:	0800b5ce 	.word	0x0800b5ce

08008f30 <__multiply>:
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	4614      	mov	r4, r2
 8008f36:	690a      	ldr	r2, [r1, #16]
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	bfa8      	it	ge
 8008f3e:	4623      	movge	r3, r4
 8008f40:	460f      	mov	r7, r1
 8008f42:	bfa4      	itt	ge
 8008f44:	460c      	movge	r4, r1
 8008f46:	461f      	movge	r7, r3
 8008f48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	6861      	ldr	r1, [r4, #4]
 8008f54:	eb0a 0609 	add.w	r6, sl, r9
 8008f58:	42b3      	cmp	r3, r6
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	bfb8      	it	lt
 8008f5e:	3101      	addlt	r1, #1
 8008f60:	f7ff fe92 	bl	8008c88 <_Balloc>
 8008f64:	b930      	cbnz	r0, 8008f74 <__multiply+0x44>
 8008f66:	4602      	mov	r2, r0
 8008f68:	4b44      	ldr	r3, [pc, #272]	@ (800907c <__multiply+0x14c>)
 8008f6a:	4845      	ldr	r0, [pc, #276]	@ (8009080 <__multiply+0x150>)
 8008f6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f70:	f001 fc16 	bl	800a7a0 <__assert_func>
 8008f74:	f100 0514 	add.w	r5, r0, #20
 8008f78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	2200      	movs	r2, #0
 8008f80:	4543      	cmp	r3, r8
 8008f82:	d321      	bcc.n	8008fc8 <__multiply+0x98>
 8008f84:	f107 0114 	add.w	r1, r7, #20
 8008f88:	f104 0214 	add.w	r2, r4, #20
 8008f8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008f94:	9302      	str	r3, [sp, #8]
 8008f96:	1b13      	subs	r3, r2, r4
 8008f98:	3b15      	subs	r3, #21
 8008f9a:	f023 0303 	bic.w	r3, r3, #3
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	f104 0715 	add.w	r7, r4, #21
 8008fa4:	42ba      	cmp	r2, r7
 8008fa6:	bf38      	it	cc
 8008fa8:	2304      	movcc	r3, #4
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	9b02      	ldr	r3, [sp, #8]
 8008fae:	9103      	str	r1, [sp, #12]
 8008fb0:	428b      	cmp	r3, r1
 8008fb2:	d80c      	bhi.n	8008fce <__multiply+0x9e>
 8008fb4:	2e00      	cmp	r6, #0
 8008fb6:	dd03      	ble.n	8008fc0 <__multiply+0x90>
 8008fb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05b      	beq.n	8009078 <__multiply+0x148>
 8008fc0:	6106      	str	r6, [r0, #16]
 8008fc2:	b005      	add	sp, #20
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc8:	f843 2b04 	str.w	r2, [r3], #4
 8008fcc:	e7d8      	b.n	8008f80 <__multiply+0x50>
 8008fce:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fd2:	f1ba 0f00 	cmp.w	sl, #0
 8008fd6:	d024      	beq.n	8009022 <__multiply+0xf2>
 8008fd8:	f104 0e14 	add.w	lr, r4, #20
 8008fdc:	46a9      	mov	r9, r5
 8008fde:	f04f 0c00 	mov.w	ip, #0
 8008fe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fe6:	f8d9 3000 	ldr.w	r3, [r9]
 8008fea:	fa1f fb87 	uxth.w	fp, r7
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ff4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ff8:	f8d9 7000 	ldr.w	r7, [r9]
 8008ffc:	4463      	add	r3, ip
 8008ffe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009002:	fb0a c70b 	mla	r7, sl, fp, ip
 8009006:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800900a:	b29b      	uxth	r3, r3
 800900c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009010:	4572      	cmp	r2, lr
 8009012:	f849 3b04 	str.w	r3, [r9], #4
 8009016:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800901a:	d8e2      	bhi.n	8008fe2 <__multiply+0xb2>
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	f845 c003 	str.w	ip, [r5, r3]
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009028:	3104      	adds	r1, #4
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	d021      	beq.n	8009074 <__multiply+0x144>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	f104 0c14 	add.w	ip, r4, #20
 8009036:	46ae      	mov	lr, r5
 8009038:	f04f 0a00 	mov.w	sl, #0
 800903c:	f8bc b000 	ldrh.w	fp, [ip]
 8009040:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009044:	fb09 770b 	mla	r7, r9, fp, r7
 8009048:	4457      	add	r7, sl
 800904a:	b29b      	uxth	r3, r3
 800904c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009050:	f84e 3b04 	str.w	r3, [lr], #4
 8009054:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009058:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800905c:	f8be 3000 	ldrh.w	r3, [lr]
 8009060:	fb09 330a 	mla	r3, r9, sl, r3
 8009064:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009068:	4562      	cmp	r2, ip
 800906a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800906e:	d8e5      	bhi.n	800903c <__multiply+0x10c>
 8009070:	9f01      	ldr	r7, [sp, #4]
 8009072:	51eb      	str	r3, [r5, r7]
 8009074:	3504      	adds	r5, #4
 8009076:	e799      	b.n	8008fac <__multiply+0x7c>
 8009078:	3e01      	subs	r6, #1
 800907a:	e79b      	b.n	8008fb4 <__multiply+0x84>
 800907c:	0800b5bd 	.word	0x0800b5bd
 8009080:	0800b5ce 	.word	0x0800b5ce

08009084 <__pow5mult>:
 8009084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009088:	4615      	mov	r5, r2
 800908a:	f012 0203 	ands.w	r2, r2, #3
 800908e:	4607      	mov	r7, r0
 8009090:	460e      	mov	r6, r1
 8009092:	d007      	beq.n	80090a4 <__pow5mult+0x20>
 8009094:	4c25      	ldr	r4, [pc, #148]	@ (800912c <__pow5mult+0xa8>)
 8009096:	3a01      	subs	r2, #1
 8009098:	2300      	movs	r3, #0
 800909a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800909e:	f7ff fe55 	bl	8008d4c <__multadd>
 80090a2:	4606      	mov	r6, r0
 80090a4:	10ad      	asrs	r5, r5, #2
 80090a6:	d03d      	beq.n	8009124 <__pow5mult+0xa0>
 80090a8:	69fc      	ldr	r4, [r7, #28]
 80090aa:	b97c      	cbnz	r4, 80090cc <__pow5mult+0x48>
 80090ac:	2010      	movs	r0, #16
 80090ae:	f7ff fd35 	bl	8008b1c <malloc>
 80090b2:	4602      	mov	r2, r0
 80090b4:	61f8      	str	r0, [r7, #28]
 80090b6:	b928      	cbnz	r0, 80090c4 <__pow5mult+0x40>
 80090b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009130 <__pow5mult+0xac>)
 80090ba:	481e      	ldr	r0, [pc, #120]	@ (8009134 <__pow5mult+0xb0>)
 80090bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090c0:	f001 fb6e 	bl	800a7a0 <__assert_func>
 80090c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090c8:	6004      	str	r4, [r0, #0]
 80090ca:	60c4      	str	r4, [r0, #12]
 80090cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090d4:	b94c      	cbnz	r4, 80090ea <__pow5mult+0x66>
 80090d6:	f240 2171 	movw	r1, #625	@ 0x271
 80090da:	4638      	mov	r0, r7
 80090dc:	f7ff ff12 	bl	8008f04 <__i2b>
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80090e6:	4604      	mov	r4, r0
 80090e8:	6003      	str	r3, [r0, #0]
 80090ea:	f04f 0900 	mov.w	r9, #0
 80090ee:	07eb      	lsls	r3, r5, #31
 80090f0:	d50a      	bpl.n	8009108 <__pow5mult+0x84>
 80090f2:	4631      	mov	r1, r6
 80090f4:	4622      	mov	r2, r4
 80090f6:	4638      	mov	r0, r7
 80090f8:	f7ff ff1a 	bl	8008f30 <__multiply>
 80090fc:	4631      	mov	r1, r6
 80090fe:	4680      	mov	r8, r0
 8009100:	4638      	mov	r0, r7
 8009102:	f7ff fe01 	bl	8008d08 <_Bfree>
 8009106:	4646      	mov	r6, r8
 8009108:	106d      	asrs	r5, r5, #1
 800910a:	d00b      	beq.n	8009124 <__pow5mult+0xa0>
 800910c:	6820      	ldr	r0, [r4, #0]
 800910e:	b938      	cbnz	r0, 8009120 <__pow5mult+0x9c>
 8009110:	4622      	mov	r2, r4
 8009112:	4621      	mov	r1, r4
 8009114:	4638      	mov	r0, r7
 8009116:	f7ff ff0b 	bl	8008f30 <__multiply>
 800911a:	6020      	str	r0, [r4, #0]
 800911c:	f8c0 9000 	str.w	r9, [r0]
 8009120:	4604      	mov	r4, r0
 8009122:	e7e4      	b.n	80090ee <__pow5mult+0x6a>
 8009124:	4630      	mov	r0, r6
 8009126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800912a:	bf00      	nop
 800912c:	0800b628 	.word	0x0800b628
 8009130:	0800b54e 	.word	0x0800b54e
 8009134:	0800b5ce 	.word	0x0800b5ce

08009138 <__lshift>:
 8009138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800913c:	460c      	mov	r4, r1
 800913e:	6849      	ldr	r1, [r1, #4]
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009146:	68a3      	ldr	r3, [r4, #8]
 8009148:	4607      	mov	r7, r0
 800914a:	4691      	mov	r9, r2
 800914c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009150:	f108 0601 	add.w	r6, r8, #1
 8009154:	42b3      	cmp	r3, r6
 8009156:	db0b      	blt.n	8009170 <__lshift+0x38>
 8009158:	4638      	mov	r0, r7
 800915a:	f7ff fd95 	bl	8008c88 <_Balloc>
 800915e:	4605      	mov	r5, r0
 8009160:	b948      	cbnz	r0, 8009176 <__lshift+0x3e>
 8009162:	4602      	mov	r2, r0
 8009164:	4b28      	ldr	r3, [pc, #160]	@ (8009208 <__lshift+0xd0>)
 8009166:	4829      	ldr	r0, [pc, #164]	@ (800920c <__lshift+0xd4>)
 8009168:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800916c:	f001 fb18 	bl	800a7a0 <__assert_func>
 8009170:	3101      	adds	r1, #1
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	e7ee      	b.n	8009154 <__lshift+0x1c>
 8009176:	2300      	movs	r3, #0
 8009178:	f100 0114 	add.w	r1, r0, #20
 800917c:	f100 0210 	add.w	r2, r0, #16
 8009180:	4618      	mov	r0, r3
 8009182:	4553      	cmp	r3, sl
 8009184:	db33      	blt.n	80091ee <__lshift+0xb6>
 8009186:	6920      	ldr	r0, [r4, #16]
 8009188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800918c:	f104 0314 	add.w	r3, r4, #20
 8009190:	f019 091f 	ands.w	r9, r9, #31
 8009194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800919c:	d02b      	beq.n	80091f6 <__lshift+0xbe>
 800919e:	f1c9 0e20 	rsb	lr, r9, #32
 80091a2:	468a      	mov	sl, r1
 80091a4:	2200      	movs	r2, #0
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	fa00 f009 	lsl.w	r0, r0, r9
 80091ac:	4310      	orrs	r0, r2
 80091ae:	f84a 0b04 	str.w	r0, [sl], #4
 80091b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b6:	459c      	cmp	ip, r3
 80091b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80091bc:	d8f3      	bhi.n	80091a6 <__lshift+0x6e>
 80091be:	ebac 0304 	sub.w	r3, ip, r4
 80091c2:	3b15      	subs	r3, #21
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	3304      	adds	r3, #4
 80091ca:	f104 0015 	add.w	r0, r4, #21
 80091ce:	4584      	cmp	ip, r0
 80091d0:	bf38      	it	cc
 80091d2:	2304      	movcc	r3, #4
 80091d4:	50ca      	str	r2, [r1, r3]
 80091d6:	b10a      	cbz	r2, 80091dc <__lshift+0xa4>
 80091d8:	f108 0602 	add.w	r6, r8, #2
 80091dc:	3e01      	subs	r6, #1
 80091de:	4638      	mov	r0, r7
 80091e0:	612e      	str	r6, [r5, #16]
 80091e2:	4621      	mov	r1, r4
 80091e4:	f7ff fd90 	bl	8008d08 <_Bfree>
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80091f2:	3301      	adds	r3, #1
 80091f4:	e7c5      	b.n	8009182 <__lshift+0x4a>
 80091f6:	3904      	subs	r1, #4
 80091f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009200:	459c      	cmp	ip, r3
 8009202:	d8f9      	bhi.n	80091f8 <__lshift+0xc0>
 8009204:	e7ea      	b.n	80091dc <__lshift+0xa4>
 8009206:	bf00      	nop
 8009208:	0800b5bd 	.word	0x0800b5bd
 800920c:	0800b5ce 	.word	0x0800b5ce

08009210 <__mcmp>:
 8009210:	690a      	ldr	r2, [r1, #16]
 8009212:	4603      	mov	r3, r0
 8009214:	6900      	ldr	r0, [r0, #16]
 8009216:	1a80      	subs	r0, r0, r2
 8009218:	b530      	push	{r4, r5, lr}
 800921a:	d10e      	bne.n	800923a <__mcmp+0x2a>
 800921c:	3314      	adds	r3, #20
 800921e:	3114      	adds	r1, #20
 8009220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800922c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009230:	4295      	cmp	r5, r2
 8009232:	d003      	beq.n	800923c <__mcmp+0x2c>
 8009234:	d205      	bcs.n	8009242 <__mcmp+0x32>
 8009236:	f04f 30ff 	mov.w	r0, #4294967295
 800923a:	bd30      	pop	{r4, r5, pc}
 800923c:	42a3      	cmp	r3, r4
 800923e:	d3f3      	bcc.n	8009228 <__mcmp+0x18>
 8009240:	e7fb      	b.n	800923a <__mcmp+0x2a>
 8009242:	2001      	movs	r0, #1
 8009244:	e7f9      	b.n	800923a <__mcmp+0x2a>
	...

08009248 <__mdiff>:
 8009248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	4689      	mov	r9, r1
 800924e:	4606      	mov	r6, r0
 8009250:	4611      	mov	r1, r2
 8009252:	4648      	mov	r0, r9
 8009254:	4614      	mov	r4, r2
 8009256:	f7ff ffdb 	bl	8009210 <__mcmp>
 800925a:	1e05      	subs	r5, r0, #0
 800925c:	d112      	bne.n	8009284 <__mdiff+0x3c>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff fd11 	bl	8008c88 <_Balloc>
 8009266:	4602      	mov	r2, r0
 8009268:	b928      	cbnz	r0, 8009276 <__mdiff+0x2e>
 800926a:	4b3f      	ldr	r3, [pc, #252]	@ (8009368 <__mdiff+0x120>)
 800926c:	f240 2137 	movw	r1, #567	@ 0x237
 8009270:	483e      	ldr	r0, [pc, #248]	@ (800936c <__mdiff+0x124>)
 8009272:	f001 fa95 	bl	800a7a0 <__assert_func>
 8009276:	2301      	movs	r3, #1
 8009278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800927c:	4610      	mov	r0, r2
 800927e:	b003      	add	sp, #12
 8009280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009284:	bfbc      	itt	lt
 8009286:	464b      	movlt	r3, r9
 8009288:	46a1      	movlt	r9, r4
 800928a:	4630      	mov	r0, r6
 800928c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009290:	bfba      	itte	lt
 8009292:	461c      	movlt	r4, r3
 8009294:	2501      	movlt	r5, #1
 8009296:	2500      	movge	r5, #0
 8009298:	f7ff fcf6 	bl	8008c88 <_Balloc>
 800929c:	4602      	mov	r2, r0
 800929e:	b918      	cbnz	r0, 80092a8 <__mdiff+0x60>
 80092a0:	4b31      	ldr	r3, [pc, #196]	@ (8009368 <__mdiff+0x120>)
 80092a2:	f240 2145 	movw	r1, #581	@ 0x245
 80092a6:	e7e3      	b.n	8009270 <__mdiff+0x28>
 80092a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092ac:	6926      	ldr	r6, [r4, #16]
 80092ae:	60c5      	str	r5, [r0, #12]
 80092b0:	f109 0310 	add.w	r3, r9, #16
 80092b4:	f109 0514 	add.w	r5, r9, #20
 80092b8:	f104 0e14 	add.w	lr, r4, #20
 80092bc:	f100 0b14 	add.w	fp, r0, #20
 80092c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	46d9      	mov	r9, fp
 80092cc:	f04f 0c00 	mov.w	ip, #0
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	fa1f f38a 	uxth.w	r3, sl
 80092e0:	4619      	mov	r1, r3
 80092e2:	b283      	uxth	r3, r0
 80092e4:	1acb      	subs	r3, r1, r3
 80092e6:	0c00      	lsrs	r0, r0, #16
 80092e8:	4463      	add	r3, ip
 80092ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092f8:	4576      	cmp	r6, lr
 80092fa:	f849 3b04 	str.w	r3, [r9], #4
 80092fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009302:	d8e5      	bhi.n	80092d0 <__mdiff+0x88>
 8009304:	1b33      	subs	r3, r6, r4
 8009306:	3b15      	subs	r3, #21
 8009308:	f023 0303 	bic.w	r3, r3, #3
 800930c:	3415      	adds	r4, #21
 800930e:	3304      	adds	r3, #4
 8009310:	42a6      	cmp	r6, r4
 8009312:	bf38      	it	cc
 8009314:	2304      	movcc	r3, #4
 8009316:	441d      	add	r5, r3
 8009318:	445b      	add	r3, fp
 800931a:	461e      	mov	r6, r3
 800931c:	462c      	mov	r4, r5
 800931e:	4544      	cmp	r4, r8
 8009320:	d30e      	bcc.n	8009340 <__mdiff+0xf8>
 8009322:	f108 0103 	add.w	r1, r8, #3
 8009326:	1b49      	subs	r1, r1, r5
 8009328:	f021 0103 	bic.w	r1, r1, #3
 800932c:	3d03      	subs	r5, #3
 800932e:	45a8      	cmp	r8, r5
 8009330:	bf38      	it	cc
 8009332:	2100      	movcc	r1, #0
 8009334:	440b      	add	r3, r1
 8009336:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800933a:	b191      	cbz	r1, 8009362 <__mdiff+0x11a>
 800933c:	6117      	str	r7, [r2, #16]
 800933e:	e79d      	b.n	800927c <__mdiff+0x34>
 8009340:	f854 1b04 	ldr.w	r1, [r4], #4
 8009344:	46e6      	mov	lr, ip
 8009346:	0c08      	lsrs	r0, r1, #16
 8009348:	fa1c fc81 	uxtah	ip, ip, r1
 800934c:	4471      	add	r1, lr
 800934e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009352:	b289      	uxth	r1, r1
 8009354:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009358:	f846 1b04 	str.w	r1, [r6], #4
 800935c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009360:	e7dd      	b.n	800931e <__mdiff+0xd6>
 8009362:	3f01      	subs	r7, #1
 8009364:	e7e7      	b.n	8009336 <__mdiff+0xee>
 8009366:	bf00      	nop
 8009368:	0800b5bd 	.word	0x0800b5bd
 800936c:	0800b5ce 	.word	0x0800b5ce

08009370 <__ulp>:
 8009370:	b082      	sub	sp, #8
 8009372:	ed8d 0b00 	vstr	d0, [sp]
 8009376:	9a01      	ldr	r2, [sp, #4]
 8009378:	4b0f      	ldr	r3, [pc, #60]	@ (80093b8 <__ulp+0x48>)
 800937a:	4013      	ands	r3, r2
 800937c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009380:	2b00      	cmp	r3, #0
 8009382:	dc08      	bgt.n	8009396 <__ulp+0x26>
 8009384:	425b      	negs	r3, r3
 8009386:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800938a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800938e:	da04      	bge.n	800939a <__ulp+0x2a>
 8009390:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009394:	4113      	asrs	r3, r2
 8009396:	2200      	movs	r2, #0
 8009398:	e008      	b.n	80093ac <__ulp+0x3c>
 800939a:	f1a2 0314 	sub.w	r3, r2, #20
 800939e:	2b1e      	cmp	r3, #30
 80093a0:	bfda      	itte	le
 80093a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80093a6:	40da      	lsrle	r2, r3
 80093a8:	2201      	movgt	r2, #1
 80093aa:	2300      	movs	r3, #0
 80093ac:	4619      	mov	r1, r3
 80093ae:	4610      	mov	r0, r2
 80093b0:	ec41 0b10 	vmov	d0, r0, r1
 80093b4:	b002      	add	sp, #8
 80093b6:	4770      	bx	lr
 80093b8:	7ff00000 	.word	0x7ff00000

080093bc <__b2d>:
 80093bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c0:	6906      	ldr	r6, [r0, #16]
 80093c2:	f100 0814 	add.w	r8, r0, #20
 80093c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80093ca:	1f37      	subs	r7, r6, #4
 80093cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7ff fd4b 	bl	8008e6c <__hi0bits>
 80093d6:	f1c0 0320 	rsb	r3, r0, #32
 80093da:	280a      	cmp	r0, #10
 80093dc:	600b      	str	r3, [r1, #0]
 80093de:	491b      	ldr	r1, [pc, #108]	@ (800944c <__b2d+0x90>)
 80093e0:	dc15      	bgt.n	800940e <__b2d+0x52>
 80093e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80093e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80093ea:	45b8      	cmp	r8, r7
 80093ec:	ea43 0501 	orr.w	r5, r3, r1
 80093f0:	bf34      	ite	cc
 80093f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093f6:	2300      	movcs	r3, #0
 80093f8:	3015      	adds	r0, #21
 80093fa:	fa02 f000 	lsl.w	r0, r2, r0
 80093fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8009402:	4303      	orrs	r3, r0
 8009404:	461c      	mov	r4, r3
 8009406:	ec45 4b10 	vmov	d0, r4, r5
 800940a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940e:	45b8      	cmp	r8, r7
 8009410:	bf3a      	itte	cc
 8009412:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009416:	f1a6 0708 	subcc.w	r7, r6, #8
 800941a:	2300      	movcs	r3, #0
 800941c:	380b      	subs	r0, #11
 800941e:	d012      	beq.n	8009446 <__b2d+0x8a>
 8009420:	f1c0 0120 	rsb	r1, r0, #32
 8009424:	fa23 f401 	lsr.w	r4, r3, r1
 8009428:	4082      	lsls	r2, r0
 800942a:	4322      	orrs	r2, r4
 800942c:	4547      	cmp	r7, r8
 800942e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009432:	bf8c      	ite	hi
 8009434:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009438:	2200      	movls	r2, #0
 800943a:	4083      	lsls	r3, r0
 800943c:	40ca      	lsrs	r2, r1
 800943e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009442:	4313      	orrs	r3, r2
 8009444:	e7de      	b.n	8009404 <__b2d+0x48>
 8009446:	ea42 0501 	orr.w	r5, r2, r1
 800944a:	e7db      	b.n	8009404 <__b2d+0x48>
 800944c:	3ff00000 	.word	0x3ff00000

08009450 <__d2b>:
 8009450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009454:	460f      	mov	r7, r1
 8009456:	2101      	movs	r1, #1
 8009458:	ec59 8b10 	vmov	r8, r9, d0
 800945c:	4616      	mov	r6, r2
 800945e:	f7ff fc13 	bl	8008c88 <_Balloc>
 8009462:	4604      	mov	r4, r0
 8009464:	b930      	cbnz	r0, 8009474 <__d2b+0x24>
 8009466:	4602      	mov	r2, r0
 8009468:	4b23      	ldr	r3, [pc, #140]	@ (80094f8 <__d2b+0xa8>)
 800946a:	4824      	ldr	r0, [pc, #144]	@ (80094fc <__d2b+0xac>)
 800946c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009470:	f001 f996 	bl	800a7a0 <__assert_func>
 8009474:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800947c:	b10d      	cbz	r5, 8009482 <__d2b+0x32>
 800947e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	f1b8 0300 	subs.w	r3, r8, #0
 8009488:	d023      	beq.n	80094d2 <__d2b+0x82>
 800948a:	4668      	mov	r0, sp
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	f7ff fd0c 	bl	8008eaa <__lo0bits>
 8009492:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009496:	b1d0      	cbz	r0, 80094ce <__d2b+0x7e>
 8009498:	f1c0 0320 	rsb	r3, r0, #32
 800949c:	fa02 f303 	lsl.w	r3, r2, r3
 80094a0:	430b      	orrs	r3, r1
 80094a2:	40c2      	lsrs	r2, r0
 80094a4:	6163      	str	r3, [r4, #20]
 80094a6:	9201      	str	r2, [sp, #4]
 80094a8:	9b01      	ldr	r3, [sp, #4]
 80094aa:	61a3      	str	r3, [r4, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bf0c      	ite	eq
 80094b0:	2201      	moveq	r2, #1
 80094b2:	2202      	movne	r2, #2
 80094b4:	6122      	str	r2, [r4, #16]
 80094b6:	b1a5      	cbz	r5, 80094e2 <__d2b+0x92>
 80094b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094bc:	4405      	add	r5, r0
 80094be:	603d      	str	r5, [r7, #0]
 80094c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094c4:	6030      	str	r0, [r6, #0]
 80094c6:	4620      	mov	r0, r4
 80094c8:	b003      	add	sp, #12
 80094ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ce:	6161      	str	r1, [r4, #20]
 80094d0:	e7ea      	b.n	80094a8 <__d2b+0x58>
 80094d2:	a801      	add	r0, sp, #4
 80094d4:	f7ff fce9 	bl	8008eaa <__lo0bits>
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	6163      	str	r3, [r4, #20]
 80094dc:	3020      	adds	r0, #32
 80094de:	2201      	movs	r2, #1
 80094e0:	e7e8      	b.n	80094b4 <__d2b+0x64>
 80094e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094ea:	6038      	str	r0, [r7, #0]
 80094ec:	6918      	ldr	r0, [r3, #16]
 80094ee:	f7ff fcbd 	bl	8008e6c <__hi0bits>
 80094f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094f6:	e7e5      	b.n	80094c4 <__d2b+0x74>
 80094f8:	0800b5bd 	.word	0x0800b5bd
 80094fc:	0800b5ce 	.word	0x0800b5ce

08009500 <__ratio>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	b085      	sub	sp, #20
 8009506:	e9cd 1000 	strd	r1, r0, [sp]
 800950a:	a902      	add	r1, sp, #8
 800950c:	f7ff ff56 	bl	80093bc <__b2d>
 8009510:	9800      	ldr	r0, [sp, #0]
 8009512:	a903      	add	r1, sp, #12
 8009514:	ec55 4b10 	vmov	r4, r5, d0
 8009518:	f7ff ff50 	bl	80093bc <__b2d>
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	6919      	ldr	r1, [r3, #16]
 8009520:	9b00      	ldr	r3, [sp, #0]
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	1ac9      	subs	r1, r1, r3
 8009526:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	ec5b ab10 	vmov	sl, fp, d0
 8009530:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfce      	itee	gt
 8009538:	462a      	movgt	r2, r5
 800953a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800953e:	465a      	movle	r2, fp
 8009540:	462f      	mov	r7, r5
 8009542:	46d9      	mov	r9, fp
 8009544:	bfcc      	ite	gt
 8009546:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800954a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800954e:	464b      	mov	r3, r9
 8009550:	4652      	mov	r2, sl
 8009552:	4620      	mov	r0, r4
 8009554:	4639      	mov	r1, r7
 8009556:	f7f7 f979 	bl	800084c <__aeabi_ddiv>
 800955a:	ec41 0b10 	vmov	d0, r0, r1
 800955e:	b005      	add	sp, #20
 8009560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009564 <__copybits>:
 8009564:	3901      	subs	r1, #1
 8009566:	b570      	push	{r4, r5, r6, lr}
 8009568:	1149      	asrs	r1, r1, #5
 800956a:	6914      	ldr	r4, [r2, #16]
 800956c:	3101      	adds	r1, #1
 800956e:	f102 0314 	add.w	r3, r2, #20
 8009572:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009576:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800957a:	1f05      	subs	r5, r0, #4
 800957c:	42a3      	cmp	r3, r4
 800957e:	d30c      	bcc.n	800959a <__copybits+0x36>
 8009580:	1aa3      	subs	r3, r4, r2
 8009582:	3b11      	subs	r3, #17
 8009584:	f023 0303 	bic.w	r3, r3, #3
 8009588:	3211      	adds	r2, #17
 800958a:	42a2      	cmp	r2, r4
 800958c:	bf88      	it	hi
 800958e:	2300      	movhi	r3, #0
 8009590:	4418      	add	r0, r3
 8009592:	2300      	movs	r3, #0
 8009594:	4288      	cmp	r0, r1
 8009596:	d305      	bcc.n	80095a4 <__copybits+0x40>
 8009598:	bd70      	pop	{r4, r5, r6, pc}
 800959a:	f853 6b04 	ldr.w	r6, [r3], #4
 800959e:	f845 6f04 	str.w	r6, [r5, #4]!
 80095a2:	e7eb      	b.n	800957c <__copybits+0x18>
 80095a4:	f840 3b04 	str.w	r3, [r0], #4
 80095a8:	e7f4      	b.n	8009594 <__copybits+0x30>

080095aa <__any_on>:
 80095aa:	f100 0214 	add.w	r2, r0, #20
 80095ae:	6900      	ldr	r0, [r0, #16]
 80095b0:	114b      	asrs	r3, r1, #5
 80095b2:	4298      	cmp	r0, r3
 80095b4:	b510      	push	{r4, lr}
 80095b6:	db11      	blt.n	80095dc <__any_on+0x32>
 80095b8:	dd0a      	ble.n	80095d0 <__any_on+0x26>
 80095ba:	f011 011f 	ands.w	r1, r1, #31
 80095be:	d007      	beq.n	80095d0 <__any_on+0x26>
 80095c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095c4:	fa24 f001 	lsr.w	r0, r4, r1
 80095c8:	fa00 f101 	lsl.w	r1, r0, r1
 80095cc:	428c      	cmp	r4, r1
 80095ce:	d10b      	bne.n	80095e8 <__any_on+0x3e>
 80095d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d803      	bhi.n	80095e0 <__any_on+0x36>
 80095d8:	2000      	movs	r0, #0
 80095da:	bd10      	pop	{r4, pc}
 80095dc:	4603      	mov	r3, r0
 80095de:	e7f7      	b.n	80095d0 <__any_on+0x26>
 80095e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095e4:	2900      	cmp	r1, #0
 80095e6:	d0f5      	beq.n	80095d4 <__any_on+0x2a>
 80095e8:	2001      	movs	r0, #1
 80095ea:	e7f6      	b.n	80095da <__any_on+0x30>

080095ec <sulp>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4604      	mov	r4, r0
 80095f0:	460d      	mov	r5, r1
 80095f2:	ec45 4b10 	vmov	d0, r4, r5
 80095f6:	4616      	mov	r6, r2
 80095f8:	f7ff feba 	bl	8009370 <__ulp>
 80095fc:	ec51 0b10 	vmov	r0, r1, d0
 8009600:	b17e      	cbz	r6, 8009622 <sulp+0x36>
 8009602:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009606:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800960a:	2b00      	cmp	r3, #0
 800960c:	dd09      	ble.n	8009622 <sulp+0x36>
 800960e:	051b      	lsls	r3, r3, #20
 8009610:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009614:	2400      	movs	r4, #0
 8009616:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800961a:	4622      	mov	r2, r4
 800961c:	462b      	mov	r3, r5
 800961e:	f7f6 ffeb 	bl	80005f8 <__aeabi_dmul>
 8009622:	ec41 0b10 	vmov	d0, r0, r1
 8009626:	bd70      	pop	{r4, r5, r6, pc}

08009628 <_strtod_l>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	b09f      	sub	sp, #124	@ 0x7c
 800962e:	460c      	mov	r4, r1
 8009630:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009632:	2200      	movs	r2, #0
 8009634:	921a      	str	r2, [sp, #104]	@ 0x68
 8009636:	9005      	str	r0, [sp, #20]
 8009638:	f04f 0a00 	mov.w	sl, #0
 800963c:	f04f 0b00 	mov.w	fp, #0
 8009640:	460a      	mov	r2, r1
 8009642:	9219      	str	r2, [sp, #100]	@ 0x64
 8009644:	7811      	ldrb	r1, [r2, #0]
 8009646:	292b      	cmp	r1, #43	@ 0x2b
 8009648:	d04a      	beq.n	80096e0 <_strtod_l+0xb8>
 800964a:	d838      	bhi.n	80096be <_strtod_l+0x96>
 800964c:	290d      	cmp	r1, #13
 800964e:	d832      	bhi.n	80096b6 <_strtod_l+0x8e>
 8009650:	2908      	cmp	r1, #8
 8009652:	d832      	bhi.n	80096ba <_strtod_l+0x92>
 8009654:	2900      	cmp	r1, #0
 8009656:	d03b      	beq.n	80096d0 <_strtod_l+0xa8>
 8009658:	2200      	movs	r2, #0
 800965a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800965c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800965e:	782a      	ldrb	r2, [r5, #0]
 8009660:	2a30      	cmp	r2, #48	@ 0x30
 8009662:	f040 80b3 	bne.w	80097cc <_strtod_l+0x1a4>
 8009666:	786a      	ldrb	r2, [r5, #1]
 8009668:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800966c:	2a58      	cmp	r2, #88	@ 0x58
 800966e:	d16e      	bne.n	800974e <_strtod_l+0x126>
 8009670:	9302      	str	r3, [sp, #8]
 8009672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	ab1a      	add	r3, sp, #104	@ 0x68
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	4a8e      	ldr	r2, [pc, #568]	@ (80098b4 <_strtod_l+0x28c>)
 800967c:	9805      	ldr	r0, [sp, #20]
 800967e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009680:	a919      	add	r1, sp, #100	@ 0x64
 8009682:	f001 f927 	bl	800a8d4 <__gethex>
 8009686:	f010 060f 	ands.w	r6, r0, #15
 800968a:	4604      	mov	r4, r0
 800968c:	d005      	beq.n	800969a <_strtod_l+0x72>
 800968e:	2e06      	cmp	r6, #6
 8009690:	d128      	bne.n	80096e4 <_strtod_l+0xbc>
 8009692:	3501      	adds	r5, #1
 8009694:	2300      	movs	r3, #0
 8009696:	9519      	str	r5, [sp, #100]	@ 0x64
 8009698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800969a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 858e 	bne.w	800a1be <_strtod_l+0xb96>
 80096a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a4:	b1cb      	cbz	r3, 80096da <_strtod_l+0xb2>
 80096a6:	4652      	mov	r2, sl
 80096a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80096ac:	ec43 2b10 	vmov	d0, r2, r3
 80096b0:	b01f      	add	sp, #124	@ 0x7c
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	2920      	cmp	r1, #32
 80096b8:	d1ce      	bne.n	8009658 <_strtod_l+0x30>
 80096ba:	3201      	adds	r2, #1
 80096bc:	e7c1      	b.n	8009642 <_strtod_l+0x1a>
 80096be:	292d      	cmp	r1, #45	@ 0x2d
 80096c0:	d1ca      	bne.n	8009658 <_strtod_l+0x30>
 80096c2:	2101      	movs	r1, #1
 80096c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096c6:	1c51      	adds	r1, r2, #1
 80096c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80096ca:	7852      	ldrb	r2, [r2, #1]
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	d1c5      	bne.n	800965c <_strtod_l+0x34>
 80096d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f040 8570 	bne.w	800a1ba <_strtod_l+0xb92>
 80096da:	4652      	mov	r2, sl
 80096dc:	465b      	mov	r3, fp
 80096de:	e7e5      	b.n	80096ac <_strtod_l+0x84>
 80096e0:	2100      	movs	r1, #0
 80096e2:	e7ef      	b.n	80096c4 <_strtod_l+0x9c>
 80096e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096e6:	b13a      	cbz	r2, 80096f8 <_strtod_l+0xd0>
 80096e8:	2135      	movs	r1, #53	@ 0x35
 80096ea:	a81c      	add	r0, sp, #112	@ 0x70
 80096ec:	f7ff ff3a 	bl	8009564 <__copybits>
 80096f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096f2:	9805      	ldr	r0, [sp, #20]
 80096f4:	f7ff fb08 	bl	8008d08 <_Bfree>
 80096f8:	3e01      	subs	r6, #1
 80096fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80096fc:	2e04      	cmp	r6, #4
 80096fe:	d806      	bhi.n	800970e <_strtod_l+0xe6>
 8009700:	e8df f006 	tbb	[pc, r6]
 8009704:	201d0314 	.word	0x201d0314
 8009708:	14          	.byte	0x14
 8009709:	00          	.byte	0x00
 800970a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800970e:	05e1      	lsls	r1, r4, #23
 8009710:	bf48      	it	mi
 8009712:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009716:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800971a:	0d1b      	lsrs	r3, r3, #20
 800971c:	051b      	lsls	r3, r3, #20
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1bb      	bne.n	800969a <_strtod_l+0x72>
 8009722:	f7fe fb31 	bl	8007d88 <__errno>
 8009726:	2322      	movs	r3, #34	@ 0x22
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	e7b6      	b.n	800969a <_strtod_l+0x72>
 800972c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009730:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009734:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009738:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800973c:	e7e7      	b.n	800970e <_strtod_l+0xe6>
 800973e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80098bc <_strtod_l+0x294>
 8009742:	e7e4      	b.n	800970e <_strtod_l+0xe6>
 8009744:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009748:	f04f 3aff 	mov.w	sl, #4294967295
 800974c:	e7df      	b.n	800970e <_strtod_l+0xe6>
 800974e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	9219      	str	r2, [sp, #100]	@ 0x64
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	2b30      	cmp	r3, #48	@ 0x30
 8009758:	d0f9      	beq.n	800974e <_strtod_l+0x126>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d09d      	beq.n	800969a <_strtod_l+0x72>
 800975e:	2301      	movs	r3, #1
 8009760:	9309      	str	r3, [sp, #36]	@ 0x24
 8009762:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009764:	930c      	str	r3, [sp, #48]	@ 0x30
 8009766:	2300      	movs	r3, #0
 8009768:	9308      	str	r3, [sp, #32]
 800976a:	930a      	str	r3, [sp, #40]	@ 0x28
 800976c:	461f      	mov	r7, r3
 800976e:	220a      	movs	r2, #10
 8009770:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009772:	7805      	ldrb	r5, [r0, #0]
 8009774:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009778:	b2d9      	uxtb	r1, r3
 800977a:	2909      	cmp	r1, #9
 800977c:	d928      	bls.n	80097d0 <_strtod_l+0x1a8>
 800977e:	494e      	ldr	r1, [pc, #312]	@ (80098b8 <_strtod_l+0x290>)
 8009780:	2201      	movs	r2, #1
 8009782:	f000 ffd5 	bl	800a730 <strncmp>
 8009786:	2800      	cmp	r0, #0
 8009788:	d032      	beq.n	80097f0 <_strtod_l+0x1c8>
 800978a:	2000      	movs	r0, #0
 800978c:	462a      	mov	r2, r5
 800978e:	4681      	mov	r9, r0
 8009790:	463d      	mov	r5, r7
 8009792:	4603      	mov	r3, r0
 8009794:	2a65      	cmp	r2, #101	@ 0x65
 8009796:	d001      	beq.n	800979c <_strtod_l+0x174>
 8009798:	2a45      	cmp	r2, #69	@ 0x45
 800979a:	d114      	bne.n	80097c6 <_strtod_l+0x19e>
 800979c:	b91d      	cbnz	r5, 80097a6 <_strtod_l+0x17e>
 800979e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097a0:	4302      	orrs	r2, r0
 80097a2:	d095      	beq.n	80096d0 <_strtod_l+0xa8>
 80097a4:	2500      	movs	r5, #0
 80097a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80097a8:	1c62      	adds	r2, r4, #1
 80097aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80097ac:	7862      	ldrb	r2, [r4, #1]
 80097ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80097b0:	d077      	beq.n	80098a2 <_strtod_l+0x27a>
 80097b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80097b4:	d07b      	beq.n	80098ae <_strtod_l+0x286>
 80097b6:	f04f 0c00 	mov.w	ip, #0
 80097ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80097be:	2909      	cmp	r1, #9
 80097c0:	f240 8082 	bls.w	80098c8 <_strtod_l+0x2a0>
 80097c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80097c6:	f04f 0800 	mov.w	r8, #0
 80097ca:	e0a2      	b.n	8009912 <_strtod_l+0x2ea>
 80097cc:	2300      	movs	r3, #0
 80097ce:	e7c7      	b.n	8009760 <_strtod_l+0x138>
 80097d0:	2f08      	cmp	r7, #8
 80097d2:	bfd5      	itete	le
 80097d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80097d6:	9908      	ldrgt	r1, [sp, #32]
 80097d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80097dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097e0:	f100 0001 	add.w	r0, r0, #1
 80097e4:	bfd4      	ite	le
 80097e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80097e8:	9308      	strgt	r3, [sp, #32]
 80097ea:	3701      	adds	r7, #1
 80097ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80097ee:	e7bf      	b.n	8009770 <_strtod_l+0x148>
 80097f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80097f6:	785a      	ldrb	r2, [r3, #1]
 80097f8:	b37f      	cbz	r7, 800985a <_strtod_l+0x232>
 80097fa:	4681      	mov	r9, r0
 80097fc:	463d      	mov	r5, r7
 80097fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009802:	2b09      	cmp	r3, #9
 8009804:	d912      	bls.n	800982c <_strtod_l+0x204>
 8009806:	2301      	movs	r3, #1
 8009808:	e7c4      	b.n	8009794 <_strtod_l+0x16c>
 800980a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009810:	785a      	ldrb	r2, [r3, #1]
 8009812:	3001      	adds	r0, #1
 8009814:	2a30      	cmp	r2, #48	@ 0x30
 8009816:	d0f8      	beq.n	800980a <_strtod_l+0x1e2>
 8009818:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800981c:	2b08      	cmp	r3, #8
 800981e:	f200 84d3 	bhi.w	800a1c8 <_strtod_l+0xba0>
 8009822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009824:	930c      	str	r3, [sp, #48]	@ 0x30
 8009826:	4681      	mov	r9, r0
 8009828:	2000      	movs	r0, #0
 800982a:	4605      	mov	r5, r0
 800982c:	3a30      	subs	r2, #48	@ 0x30
 800982e:	f100 0301 	add.w	r3, r0, #1
 8009832:	d02a      	beq.n	800988a <_strtod_l+0x262>
 8009834:	4499      	add	r9, r3
 8009836:	eb00 0c05 	add.w	ip, r0, r5
 800983a:	462b      	mov	r3, r5
 800983c:	210a      	movs	r1, #10
 800983e:	4563      	cmp	r3, ip
 8009840:	d10d      	bne.n	800985e <_strtod_l+0x236>
 8009842:	1c69      	adds	r1, r5, #1
 8009844:	4401      	add	r1, r0
 8009846:	4428      	add	r0, r5
 8009848:	2808      	cmp	r0, #8
 800984a:	dc16      	bgt.n	800987a <_strtod_l+0x252>
 800984c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800984e:	230a      	movs	r3, #10
 8009850:	fb03 2300 	mla	r3, r3, r0, r2
 8009854:	930a      	str	r3, [sp, #40]	@ 0x28
 8009856:	2300      	movs	r3, #0
 8009858:	e018      	b.n	800988c <_strtod_l+0x264>
 800985a:	4638      	mov	r0, r7
 800985c:	e7da      	b.n	8009814 <_strtod_l+0x1ec>
 800985e:	2b08      	cmp	r3, #8
 8009860:	f103 0301 	add.w	r3, r3, #1
 8009864:	dc03      	bgt.n	800986e <_strtod_l+0x246>
 8009866:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009868:	434e      	muls	r6, r1
 800986a:	960a      	str	r6, [sp, #40]	@ 0x28
 800986c:	e7e7      	b.n	800983e <_strtod_l+0x216>
 800986e:	2b10      	cmp	r3, #16
 8009870:	bfde      	ittt	le
 8009872:	9e08      	ldrle	r6, [sp, #32]
 8009874:	434e      	mulle	r6, r1
 8009876:	9608      	strle	r6, [sp, #32]
 8009878:	e7e1      	b.n	800983e <_strtod_l+0x216>
 800987a:	280f      	cmp	r0, #15
 800987c:	dceb      	bgt.n	8009856 <_strtod_l+0x22e>
 800987e:	9808      	ldr	r0, [sp, #32]
 8009880:	230a      	movs	r3, #10
 8009882:	fb03 2300 	mla	r3, r3, r0, r2
 8009886:	9308      	str	r3, [sp, #32]
 8009888:	e7e5      	b.n	8009856 <_strtod_l+0x22e>
 800988a:	4629      	mov	r1, r5
 800988c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800988e:	1c50      	adds	r0, r2, #1
 8009890:	9019      	str	r0, [sp, #100]	@ 0x64
 8009892:	7852      	ldrb	r2, [r2, #1]
 8009894:	4618      	mov	r0, r3
 8009896:	460d      	mov	r5, r1
 8009898:	e7b1      	b.n	80097fe <_strtod_l+0x1d6>
 800989a:	f04f 0900 	mov.w	r9, #0
 800989e:	2301      	movs	r3, #1
 80098a0:	e77d      	b.n	800979e <_strtod_l+0x176>
 80098a2:	f04f 0c00 	mov.w	ip, #0
 80098a6:	1ca2      	adds	r2, r4, #2
 80098a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80098aa:	78a2      	ldrb	r2, [r4, #2]
 80098ac:	e785      	b.n	80097ba <_strtod_l+0x192>
 80098ae:	f04f 0c01 	mov.w	ip, #1
 80098b2:	e7f8      	b.n	80098a6 <_strtod_l+0x27e>
 80098b4:	0800b740 	.word	0x0800b740
 80098b8:	0800b728 	.word	0x0800b728
 80098bc:	7ff00000 	.word	0x7ff00000
 80098c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098c2:	1c51      	adds	r1, r2, #1
 80098c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80098c6:	7852      	ldrb	r2, [r2, #1]
 80098c8:	2a30      	cmp	r2, #48	@ 0x30
 80098ca:	d0f9      	beq.n	80098c0 <_strtod_l+0x298>
 80098cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80098d0:	2908      	cmp	r1, #8
 80098d2:	f63f af78 	bhi.w	80097c6 <_strtod_l+0x19e>
 80098d6:	3a30      	subs	r2, #48	@ 0x30
 80098d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80098da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80098de:	f04f 080a 	mov.w	r8, #10
 80098e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098e4:	1c56      	adds	r6, r2, #1
 80098e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80098e8:	7852      	ldrb	r2, [r2, #1]
 80098ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80098ee:	f1be 0f09 	cmp.w	lr, #9
 80098f2:	d939      	bls.n	8009968 <_strtod_l+0x340>
 80098f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098f6:	1a76      	subs	r6, r6, r1
 80098f8:	2e08      	cmp	r6, #8
 80098fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80098fe:	dc03      	bgt.n	8009908 <_strtod_l+0x2e0>
 8009900:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009902:	4588      	cmp	r8, r1
 8009904:	bfa8      	it	ge
 8009906:	4688      	movge	r8, r1
 8009908:	f1bc 0f00 	cmp.w	ip, #0
 800990c:	d001      	beq.n	8009912 <_strtod_l+0x2ea>
 800990e:	f1c8 0800 	rsb	r8, r8, #0
 8009912:	2d00      	cmp	r5, #0
 8009914:	d14e      	bne.n	80099b4 <_strtod_l+0x38c>
 8009916:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009918:	4308      	orrs	r0, r1
 800991a:	f47f aebe 	bne.w	800969a <_strtod_l+0x72>
 800991e:	2b00      	cmp	r3, #0
 8009920:	f47f aed6 	bne.w	80096d0 <_strtod_l+0xa8>
 8009924:	2a69      	cmp	r2, #105	@ 0x69
 8009926:	d028      	beq.n	800997a <_strtod_l+0x352>
 8009928:	dc25      	bgt.n	8009976 <_strtod_l+0x34e>
 800992a:	2a49      	cmp	r2, #73	@ 0x49
 800992c:	d025      	beq.n	800997a <_strtod_l+0x352>
 800992e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009930:	f47f aece 	bne.w	80096d0 <_strtod_l+0xa8>
 8009934:	499b      	ldr	r1, [pc, #620]	@ (8009ba4 <_strtod_l+0x57c>)
 8009936:	a819      	add	r0, sp, #100	@ 0x64
 8009938:	f001 f9ee 	bl	800ad18 <__match>
 800993c:	2800      	cmp	r0, #0
 800993e:	f43f aec7 	beq.w	80096d0 <_strtod_l+0xa8>
 8009942:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b28      	cmp	r3, #40	@ 0x28
 8009948:	d12e      	bne.n	80099a8 <_strtod_l+0x380>
 800994a:	4997      	ldr	r1, [pc, #604]	@ (8009ba8 <_strtod_l+0x580>)
 800994c:	aa1c      	add	r2, sp, #112	@ 0x70
 800994e:	a819      	add	r0, sp, #100	@ 0x64
 8009950:	f001 f9f6 	bl	800ad40 <__hexnan>
 8009954:	2805      	cmp	r0, #5
 8009956:	d127      	bne.n	80099a8 <_strtod_l+0x380>
 8009958:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800995a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800995e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009962:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009966:	e698      	b.n	800969a <_strtod_l+0x72>
 8009968:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800996a:	fb08 2101 	mla	r1, r8, r1, r2
 800996e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009972:	920e      	str	r2, [sp, #56]	@ 0x38
 8009974:	e7b5      	b.n	80098e2 <_strtod_l+0x2ba>
 8009976:	2a6e      	cmp	r2, #110	@ 0x6e
 8009978:	e7da      	b.n	8009930 <_strtod_l+0x308>
 800997a:	498c      	ldr	r1, [pc, #560]	@ (8009bac <_strtod_l+0x584>)
 800997c:	a819      	add	r0, sp, #100	@ 0x64
 800997e:	f001 f9cb 	bl	800ad18 <__match>
 8009982:	2800      	cmp	r0, #0
 8009984:	f43f aea4 	beq.w	80096d0 <_strtod_l+0xa8>
 8009988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800998a:	4989      	ldr	r1, [pc, #548]	@ (8009bb0 <_strtod_l+0x588>)
 800998c:	3b01      	subs	r3, #1
 800998e:	a819      	add	r0, sp, #100	@ 0x64
 8009990:	9319      	str	r3, [sp, #100]	@ 0x64
 8009992:	f001 f9c1 	bl	800ad18 <__match>
 8009996:	b910      	cbnz	r0, 800999e <_strtod_l+0x376>
 8009998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800999a:	3301      	adds	r3, #1
 800999c:	9319      	str	r3, [sp, #100]	@ 0x64
 800999e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009bc0 <_strtod_l+0x598>
 80099a2:	f04f 0a00 	mov.w	sl, #0
 80099a6:	e678      	b.n	800969a <_strtod_l+0x72>
 80099a8:	4882      	ldr	r0, [pc, #520]	@ (8009bb4 <_strtod_l+0x58c>)
 80099aa:	f000 fef1 	bl	800a790 <nan>
 80099ae:	ec5b ab10 	vmov	sl, fp, d0
 80099b2:	e672      	b.n	800969a <_strtod_l+0x72>
 80099b4:	eba8 0309 	sub.w	r3, r8, r9
 80099b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80099bc:	2f00      	cmp	r7, #0
 80099be:	bf08      	it	eq
 80099c0:	462f      	moveq	r7, r5
 80099c2:	2d10      	cmp	r5, #16
 80099c4:	462c      	mov	r4, r5
 80099c6:	bfa8      	it	ge
 80099c8:	2410      	movge	r4, #16
 80099ca:	f7f6 fd9b 	bl	8000504 <__aeabi_ui2d>
 80099ce:	2d09      	cmp	r5, #9
 80099d0:	4682      	mov	sl, r0
 80099d2:	468b      	mov	fp, r1
 80099d4:	dc13      	bgt.n	80099fe <_strtod_l+0x3d6>
 80099d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f43f ae5e 	beq.w	800969a <_strtod_l+0x72>
 80099de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e0:	dd78      	ble.n	8009ad4 <_strtod_l+0x4ac>
 80099e2:	2b16      	cmp	r3, #22
 80099e4:	dc5f      	bgt.n	8009aa6 <_strtod_l+0x47e>
 80099e6:	4974      	ldr	r1, [pc, #464]	@ (8009bb8 <_strtod_l+0x590>)
 80099e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099f0:	4652      	mov	r2, sl
 80099f2:	465b      	mov	r3, fp
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	4682      	mov	sl, r0
 80099fa:	468b      	mov	fp, r1
 80099fc:	e64d      	b.n	800969a <_strtod_l+0x72>
 80099fe:	4b6e      	ldr	r3, [pc, #440]	@ (8009bb8 <_strtod_l+0x590>)
 8009a00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009a08:	f7f6 fdf6 	bl	80005f8 <__aeabi_dmul>
 8009a0c:	4682      	mov	sl, r0
 8009a0e:	9808      	ldr	r0, [sp, #32]
 8009a10:	468b      	mov	fp, r1
 8009a12:	f7f6 fd77 	bl	8000504 <__aeabi_ui2d>
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4650      	mov	r0, sl
 8009a1c:	4659      	mov	r1, fp
 8009a1e:	f7f6 fc35 	bl	800028c <__adddf3>
 8009a22:	2d0f      	cmp	r5, #15
 8009a24:	4682      	mov	sl, r0
 8009a26:	468b      	mov	fp, r1
 8009a28:	ddd5      	ble.n	80099d6 <_strtod_l+0x3ae>
 8009a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2c:	1b2c      	subs	r4, r5, r4
 8009a2e:	441c      	add	r4, r3
 8009a30:	2c00      	cmp	r4, #0
 8009a32:	f340 8096 	ble.w	8009b62 <_strtod_l+0x53a>
 8009a36:	f014 030f 	ands.w	r3, r4, #15
 8009a3a:	d00a      	beq.n	8009a52 <_strtod_l+0x42a>
 8009a3c:	495e      	ldr	r1, [pc, #376]	@ (8009bb8 <_strtod_l+0x590>)
 8009a3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a42:	4652      	mov	r2, sl
 8009a44:	465b      	mov	r3, fp
 8009a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a4a:	f7f6 fdd5 	bl	80005f8 <__aeabi_dmul>
 8009a4e:	4682      	mov	sl, r0
 8009a50:	468b      	mov	fp, r1
 8009a52:	f034 040f 	bics.w	r4, r4, #15
 8009a56:	d073      	beq.n	8009b40 <_strtod_l+0x518>
 8009a58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009a5c:	dd48      	ble.n	8009af0 <_strtod_l+0x4c8>
 8009a5e:	2400      	movs	r4, #0
 8009a60:	46a0      	mov	r8, r4
 8009a62:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a64:	46a1      	mov	r9, r4
 8009a66:	9a05      	ldr	r2, [sp, #20]
 8009a68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009bc0 <_strtod_l+0x598>
 8009a6c:	2322      	movs	r3, #34	@ 0x22
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	f04f 0a00 	mov.w	sl, #0
 8009a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f43f ae0f 	beq.w	800969a <_strtod_l+0x72>
 8009a7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a7e:	9805      	ldr	r0, [sp, #20]
 8009a80:	f7ff f942 	bl	8008d08 <_Bfree>
 8009a84:	9805      	ldr	r0, [sp, #20]
 8009a86:	4649      	mov	r1, r9
 8009a88:	f7ff f93e 	bl	8008d08 <_Bfree>
 8009a8c:	9805      	ldr	r0, [sp, #20]
 8009a8e:	4641      	mov	r1, r8
 8009a90:	f7ff f93a 	bl	8008d08 <_Bfree>
 8009a94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a96:	9805      	ldr	r0, [sp, #20]
 8009a98:	f7ff f936 	bl	8008d08 <_Bfree>
 8009a9c:	9805      	ldr	r0, [sp, #20]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	f7ff f932 	bl	8008d08 <_Bfree>
 8009aa4:	e5f9      	b.n	800969a <_strtod_l+0x72>
 8009aa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aa8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009aac:	4293      	cmp	r3, r2
 8009aae:	dbbc      	blt.n	8009a2a <_strtod_l+0x402>
 8009ab0:	4c41      	ldr	r4, [pc, #260]	@ (8009bb8 <_strtod_l+0x590>)
 8009ab2:	f1c5 050f 	rsb	r5, r5, #15
 8009ab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009aba:	4652      	mov	r2, sl
 8009abc:	465b      	mov	r3, fp
 8009abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac2:	f7f6 fd99 	bl	80005f8 <__aeabi_dmul>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac8:	1b5d      	subs	r5, r3, r5
 8009aca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ace:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ad2:	e78f      	b.n	80099f4 <_strtod_l+0x3cc>
 8009ad4:	3316      	adds	r3, #22
 8009ad6:	dba8      	blt.n	8009a2a <_strtod_l+0x402>
 8009ad8:	4b37      	ldr	r3, [pc, #220]	@ (8009bb8 <_strtod_l+0x590>)
 8009ada:	eba9 0808 	sub.w	r8, r9, r8
 8009ade:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009ae2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	4659      	mov	r1, fp
 8009aea:	f7f6 feaf 	bl	800084c <__aeabi_ddiv>
 8009aee:	e783      	b.n	80099f8 <_strtod_l+0x3d0>
 8009af0:	4b32      	ldr	r3, [pc, #200]	@ (8009bbc <_strtod_l+0x594>)
 8009af2:	9308      	str	r3, [sp, #32]
 8009af4:	2300      	movs	r3, #0
 8009af6:	1124      	asrs	r4, r4, #4
 8009af8:	4650      	mov	r0, sl
 8009afa:	4659      	mov	r1, fp
 8009afc:	461e      	mov	r6, r3
 8009afe:	2c01      	cmp	r4, #1
 8009b00:	dc21      	bgt.n	8009b46 <_strtod_l+0x51e>
 8009b02:	b10b      	cbz	r3, 8009b08 <_strtod_l+0x4e0>
 8009b04:	4682      	mov	sl, r0
 8009b06:	468b      	mov	fp, r1
 8009b08:	492c      	ldr	r1, [pc, #176]	@ (8009bbc <_strtod_l+0x594>)
 8009b0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009b0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009b12:	4652      	mov	r2, sl
 8009b14:	465b      	mov	r3, fp
 8009b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b1a:	f7f6 fd6d 	bl	80005f8 <__aeabi_dmul>
 8009b1e:	4b28      	ldr	r3, [pc, #160]	@ (8009bc0 <_strtod_l+0x598>)
 8009b20:	460a      	mov	r2, r1
 8009b22:	400b      	ands	r3, r1
 8009b24:	4927      	ldr	r1, [pc, #156]	@ (8009bc4 <_strtod_l+0x59c>)
 8009b26:	428b      	cmp	r3, r1
 8009b28:	4682      	mov	sl, r0
 8009b2a:	d898      	bhi.n	8009a5e <_strtod_l+0x436>
 8009b2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009b30:	428b      	cmp	r3, r1
 8009b32:	bf86      	itte	hi
 8009b34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009bc8 <_strtod_l+0x5a0>
 8009b38:	f04f 3aff 	movhi.w	sl, #4294967295
 8009b3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009b40:	2300      	movs	r3, #0
 8009b42:	9308      	str	r3, [sp, #32]
 8009b44:	e07a      	b.n	8009c3c <_strtod_l+0x614>
 8009b46:	07e2      	lsls	r2, r4, #31
 8009b48:	d505      	bpl.n	8009b56 <_strtod_l+0x52e>
 8009b4a:	9b08      	ldr	r3, [sp, #32]
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f7f6 fd52 	bl	80005f8 <__aeabi_dmul>
 8009b54:	2301      	movs	r3, #1
 8009b56:	9a08      	ldr	r2, [sp, #32]
 8009b58:	3208      	adds	r2, #8
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	1064      	asrs	r4, r4, #1
 8009b5e:	9208      	str	r2, [sp, #32]
 8009b60:	e7cd      	b.n	8009afe <_strtod_l+0x4d6>
 8009b62:	d0ed      	beq.n	8009b40 <_strtod_l+0x518>
 8009b64:	4264      	negs	r4, r4
 8009b66:	f014 020f 	ands.w	r2, r4, #15
 8009b6a:	d00a      	beq.n	8009b82 <_strtod_l+0x55a>
 8009b6c:	4b12      	ldr	r3, [pc, #72]	@ (8009bb8 <_strtod_l+0x590>)
 8009b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b72:	4650      	mov	r0, sl
 8009b74:	4659      	mov	r1, fp
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fe67 	bl	800084c <__aeabi_ddiv>
 8009b7e:	4682      	mov	sl, r0
 8009b80:	468b      	mov	fp, r1
 8009b82:	1124      	asrs	r4, r4, #4
 8009b84:	d0dc      	beq.n	8009b40 <_strtod_l+0x518>
 8009b86:	2c1f      	cmp	r4, #31
 8009b88:	dd20      	ble.n	8009bcc <_strtod_l+0x5a4>
 8009b8a:	2400      	movs	r4, #0
 8009b8c:	46a0      	mov	r8, r4
 8009b8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b90:	46a1      	mov	r9, r4
 8009b92:	9a05      	ldr	r2, [sp, #20]
 8009b94:	2322      	movs	r3, #34	@ 0x22
 8009b96:	f04f 0a00 	mov.w	sl, #0
 8009b9a:	f04f 0b00 	mov.w	fp, #0
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	e768      	b.n	8009a74 <_strtod_l+0x44c>
 8009ba2:	bf00      	nop
 8009ba4:	0800b515 	.word	0x0800b515
 8009ba8:	0800b72c 	.word	0x0800b72c
 8009bac:	0800b50d 	.word	0x0800b50d
 8009bb0:	0800b544 	.word	0x0800b544
 8009bb4:	0800b8d5 	.word	0x0800b8d5
 8009bb8:	0800b660 	.word	0x0800b660
 8009bbc:	0800b638 	.word	0x0800b638
 8009bc0:	7ff00000 	.word	0x7ff00000
 8009bc4:	7ca00000 	.word	0x7ca00000
 8009bc8:	7fefffff 	.word	0x7fefffff
 8009bcc:	f014 0310 	ands.w	r3, r4, #16
 8009bd0:	bf18      	it	ne
 8009bd2:	236a      	movne	r3, #106	@ 0x6a
 8009bd4:	4ea9      	ldr	r6, [pc, #676]	@ (8009e7c <_strtod_l+0x854>)
 8009bd6:	9308      	str	r3, [sp, #32]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	2300      	movs	r3, #0
 8009bde:	07e2      	lsls	r2, r4, #31
 8009be0:	d504      	bpl.n	8009bec <_strtod_l+0x5c4>
 8009be2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009be6:	f7f6 fd07 	bl	80005f8 <__aeabi_dmul>
 8009bea:	2301      	movs	r3, #1
 8009bec:	1064      	asrs	r4, r4, #1
 8009bee:	f106 0608 	add.w	r6, r6, #8
 8009bf2:	d1f4      	bne.n	8009bde <_strtod_l+0x5b6>
 8009bf4:	b10b      	cbz	r3, 8009bfa <_strtod_l+0x5d2>
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	9b08      	ldr	r3, [sp, #32]
 8009bfc:	b1b3      	cbz	r3, 8009c2c <_strtod_l+0x604>
 8009bfe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	4659      	mov	r1, fp
 8009c0a:	dd0f      	ble.n	8009c2c <_strtod_l+0x604>
 8009c0c:	2b1f      	cmp	r3, #31
 8009c0e:	dd55      	ble.n	8009cbc <_strtod_l+0x694>
 8009c10:	2b34      	cmp	r3, #52	@ 0x34
 8009c12:	bfde      	ittt	le
 8009c14:	f04f 33ff 	movle.w	r3, #4294967295
 8009c18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009c1c:	4093      	lslle	r3, r2
 8009c1e:	f04f 0a00 	mov.w	sl, #0
 8009c22:	bfcc      	ite	gt
 8009c24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009c28:	ea03 0b01 	andle.w	fp, r3, r1
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2300      	movs	r3, #0
 8009c30:	4650      	mov	r0, sl
 8009c32:	4659      	mov	r1, fp
 8009c34:	f7f6 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d1a6      	bne.n	8009b8a <_strtod_l+0x562>
 8009c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c42:	9805      	ldr	r0, [sp, #20]
 8009c44:	462b      	mov	r3, r5
 8009c46:	463a      	mov	r2, r7
 8009c48:	f7ff f8c6 	bl	8008dd8 <__s2b>
 8009c4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f43f af05 	beq.w	8009a5e <_strtod_l+0x436>
 8009c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	eba9 0308 	sub.w	r3, r9, r8
 8009c5c:	bfa8      	it	ge
 8009c5e:	2300      	movge	r3, #0
 8009c60:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c62:	2400      	movs	r4, #0
 8009c64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c68:	9316      	str	r3, [sp, #88]	@ 0x58
 8009c6a:	46a0      	mov	r8, r4
 8009c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c6e:	9805      	ldr	r0, [sp, #20]
 8009c70:	6859      	ldr	r1, [r3, #4]
 8009c72:	f7ff f809 	bl	8008c88 <_Balloc>
 8009c76:	4681      	mov	r9, r0
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	f43f aef4 	beq.w	8009a66 <_strtod_l+0x43e>
 8009c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c80:	691a      	ldr	r2, [r3, #16]
 8009c82:	3202      	adds	r2, #2
 8009c84:	f103 010c 	add.w	r1, r3, #12
 8009c88:	0092      	lsls	r2, r2, #2
 8009c8a:	300c      	adds	r0, #12
 8009c8c:	f000 fd72 	bl	800a774 <memcpy>
 8009c90:	ec4b ab10 	vmov	d0, sl, fp
 8009c94:	9805      	ldr	r0, [sp, #20]
 8009c96:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c98:	a91b      	add	r1, sp, #108	@ 0x6c
 8009c9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009c9e:	f7ff fbd7 	bl	8009450 <__d2b>
 8009ca2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f43f aede 	beq.w	8009a66 <_strtod_l+0x43e>
 8009caa:	9805      	ldr	r0, [sp, #20]
 8009cac:	2101      	movs	r1, #1
 8009cae:	f7ff f929 	bl	8008f04 <__i2b>
 8009cb2:	4680      	mov	r8, r0
 8009cb4:	b948      	cbnz	r0, 8009cca <_strtod_l+0x6a2>
 8009cb6:	f04f 0800 	mov.w	r8, #0
 8009cba:	e6d4      	b.n	8009a66 <_strtod_l+0x43e>
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	ea03 0a0a 	and.w	sl, r3, sl
 8009cc8:	e7b0      	b.n	8009c2c <_strtod_l+0x604>
 8009cca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009ccc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	bfab      	itete	ge
 8009cd2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009cd4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009cd6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009cd8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009cda:	bfac      	ite	ge
 8009cdc:	18ef      	addge	r7, r5, r3
 8009cde:	1b5e      	sublt	r6, r3, r5
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	1aed      	subs	r5, r5, r3
 8009ce4:	4415      	add	r5, r2
 8009ce6:	4b66      	ldr	r3, [pc, #408]	@ (8009e80 <_strtod_l+0x858>)
 8009ce8:	3d01      	subs	r5, #1
 8009cea:	429d      	cmp	r5, r3
 8009cec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009cf0:	da50      	bge.n	8009d94 <_strtod_l+0x76c>
 8009cf2:	1b5b      	subs	r3, r3, r5
 8009cf4:	2b1f      	cmp	r3, #31
 8009cf6:	eba2 0203 	sub.w	r2, r2, r3
 8009cfa:	f04f 0101 	mov.w	r1, #1
 8009cfe:	dc3d      	bgt.n	8009d7c <_strtod_l+0x754>
 8009d00:	fa01 f303 	lsl.w	r3, r1, r3
 8009d04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d06:	2300      	movs	r3, #0
 8009d08:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d0a:	18bd      	adds	r5, r7, r2
 8009d0c:	9b08      	ldr	r3, [sp, #32]
 8009d0e:	42af      	cmp	r7, r5
 8009d10:	4416      	add	r6, r2
 8009d12:	441e      	add	r6, r3
 8009d14:	463b      	mov	r3, r7
 8009d16:	bfa8      	it	ge
 8009d18:	462b      	movge	r3, r5
 8009d1a:	42b3      	cmp	r3, r6
 8009d1c:	bfa8      	it	ge
 8009d1e:	4633      	movge	r3, r6
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bfc2      	ittt	gt
 8009d24:	1aed      	subgt	r5, r5, r3
 8009d26:	1af6      	subgt	r6, r6, r3
 8009d28:	1aff      	subgt	r7, r7, r3
 8009d2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dd16      	ble.n	8009d5e <_strtod_l+0x736>
 8009d30:	4641      	mov	r1, r8
 8009d32:	9805      	ldr	r0, [sp, #20]
 8009d34:	461a      	mov	r2, r3
 8009d36:	f7ff f9a5 	bl	8009084 <__pow5mult>
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d0ba      	beq.n	8009cb6 <_strtod_l+0x68e>
 8009d40:	4601      	mov	r1, r0
 8009d42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d44:	9805      	ldr	r0, [sp, #20]
 8009d46:	f7ff f8f3 	bl	8008f30 <__multiply>
 8009d4a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	f43f ae8a 	beq.w	8009a66 <_strtod_l+0x43e>
 8009d52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d54:	9805      	ldr	r0, [sp, #20]
 8009d56:	f7fe ffd7 	bl	8008d08 <_Bfree>
 8009d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d5e:	2d00      	cmp	r5, #0
 8009d60:	dc1d      	bgt.n	8009d9e <_strtod_l+0x776>
 8009d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd23      	ble.n	8009db0 <_strtod_l+0x788>
 8009d68:	4649      	mov	r1, r9
 8009d6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d6c:	9805      	ldr	r0, [sp, #20]
 8009d6e:	f7ff f989 	bl	8009084 <__pow5mult>
 8009d72:	4681      	mov	r9, r0
 8009d74:	b9e0      	cbnz	r0, 8009db0 <_strtod_l+0x788>
 8009d76:	f04f 0900 	mov.w	r9, #0
 8009d7a:	e674      	b.n	8009a66 <_strtod_l+0x43e>
 8009d7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009d80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009d84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009d88:	35e2      	adds	r5, #226	@ 0xe2
 8009d8a:	fa01 f305 	lsl.w	r3, r1, r5
 8009d8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d90:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009d92:	e7ba      	b.n	8009d0a <_strtod_l+0x6e2>
 8009d94:	2300      	movs	r3, #0
 8009d96:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d98:	2301      	movs	r3, #1
 8009d9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d9c:	e7b5      	b.n	8009d0a <_strtod_l+0x6e2>
 8009d9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009da0:	9805      	ldr	r0, [sp, #20]
 8009da2:	462a      	mov	r2, r5
 8009da4:	f7ff f9c8 	bl	8009138 <__lshift>
 8009da8:	901a      	str	r0, [sp, #104]	@ 0x68
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d1d9      	bne.n	8009d62 <_strtod_l+0x73a>
 8009dae:	e65a      	b.n	8009a66 <_strtod_l+0x43e>
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	dd07      	ble.n	8009dc4 <_strtod_l+0x79c>
 8009db4:	4649      	mov	r1, r9
 8009db6:	9805      	ldr	r0, [sp, #20]
 8009db8:	4632      	mov	r2, r6
 8009dba:	f7ff f9bd 	bl	8009138 <__lshift>
 8009dbe:	4681      	mov	r9, r0
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d0d8      	beq.n	8009d76 <_strtod_l+0x74e>
 8009dc4:	2f00      	cmp	r7, #0
 8009dc6:	dd08      	ble.n	8009dda <_strtod_l+0x7b2>
 8009dc8:	4641      	mov	r1, r8
 8009dca:	9805      	ldr	r0, [sp, #20]
 8009dcc:	463a      	mov	r2, r7
 8009dce:	f7ff f9b3 	bl	8009138 <__lshift>
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f ae46 	beq.w	8009a66 <_strtod_l+0x43e>
 8009dda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	464a      	mov	r2, r9
 8009de0:	f7ff fa32 	bl	8009248 <__mdiff>
 8009de4:	4604      	mov	r4, r0
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f43f ae3d 	beq.w	8009a66 <_strtod_l+0x43e>
 8009dec:	68c3      	ldr	r3, [r0, #12]
 8009dee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009df0:	2300      	movs	r3, #0
 8009df2:	60c3      	str	r3, [r0, #12]
 8009df4:	4641      	mov	r1, r8
 8009df6:	f7ff fa0b 	bl	8009210 <__mcmp>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	da46      	bge.n	8009e8c <_strtod_l+0x864>
 8009dfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e00:	ea53 030a 	orrs.w	r3, r3, sl
 8009e04:	d16c      	bne.n	8009ee0 <_strtod_l+0x8b8>
 8009e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d168      	bne.n	8009ee0 <_strtod_l+0x8b8>
 8009e0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e12:	0d1b      	lsrs	r3, r3, #20
 8009e14:	051b      	lsls	r3, r3, #20
 8009e16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e1a:	d961      	bls.n	8009ee0 <_strtod_l+0x8b8>
 8009e1c:	6963      	ldr	r3, [r4, #20]
 8009e1e:	b913      	cbnz	r3, 8009e26 <_strtod_l+0x7fe>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	dd5c      	ble.n	8009ee0 <_strtod_l+0x8b8>
 8009e26:	4621      	mov	r1, r4
 8009e28:	2201      	movs	r2, #1
 8009e2a:	9805      	ldr	r0, [sp, #20]
 8009e2c:	f7ff f984 	bl	8009138 <__lshift>
 8009e30:	4641      	mov	r1, r8
 8009e32:	4604      	mov	r4, r0
 8009e34:	f7ff f9ec 	bl	8009210 <__mcmp>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	dd51      	ble.n	8009ee0 <_strtod_l+0x8b8>
 8009e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e40:	9a08      	ldr	r2, [sp, #32]
 8009e42:	0d1b      	lsrs	r3, r3, #20
 8009e44:	051b      	lsls	r3, r3, #20
 8009e46:	2a00      	cmp	r2, #0
 8009e48:	d06b      	beq.n	8009f22 <_strtod_l+0x8fa>
 8009e4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e4e:	d868      	bhi.n	8009f22 <_strtod_l+0x8fa>
 8009e50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e54:	f67f ae9d 	bls.w	8009b92 <_strtod_l+0x56a>
 8009e58:	4b0a      	ldr	r3, [pc, #40]	@ (8009e84 <_strtod_l+0x85c>)
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	4659      	mov	r1, fp
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f7f6 fbca 	bl	80005f8 <__aeabi_dmul>
 8009e64:	4b08      	ldr	r3, [pc, #32]	@ (8009e88 <_strtod_l+0x860>)
 8009e66:	400b      	ands	r3, r1
 8009e68:	4682      	mov	sl, r0
 8009e6a:	468b      	mov	fp, r1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f47f ae05 	bne.w	8009a7c <_strtod_l+0x454>
 8009e72:	9a05      	ldr	r2, [sp, #20]
 8009e74:	2322      	movs	r3, #34	@ 0x22
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	e600      	b.n	8009a7c <_strtod_l+0x454>
 8009e7a:	bf00      	nop
 8009e7c:	0800b758 	.word	0x0800b758
 8009e80:	fffffc02 	.word	0xfffffc02
 8009e84:	39500000 	.word	0x39500000
 8009e88:	7ff00000 	.word	0x7ff00000
 8009e8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e90:	d165      	bne.n	8009f5e <_strtod_l+0x936>
 8009e92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e98:	b35a      	cbz	r2, 8009ef2 <_strtod_l+0x8ca>
 8009e9a:	4a9f      	ldr	r2, [pc, #636]	@ (800a118 <_strtod_l+0xaf0>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d12b      	bne.n	8009ef8 <_strtod_l+0x8d0>
 8009ea0:	9b08      	ldr	r3, [sp, #32]
 8009ea2:	4651      	mov	r1, sl
 8009ea4:	b303      	cbz	r3, 8009ee8 <_strtod_l+0x8c0>
 8009ea6:	4b9d      	ldr	r3, [pc, #628]	@ (800a11c <_strtod_l+0xaf4>)
 8009ea8:	465a      	mov	r2, fp
 8009eaa:	4013      	ands	r3, r2
 8009eac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb4:	d81b      	bhi.n	8009eee <_strtod_l+0x8c6>
 8009eb6:	0d1b      	lsrs	r3, r3, #20
 8009eb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec0:	4299      	cmp	r1, r3
 8009ec2:	d119      	bne.n	8009ef8 <_strtod_l+0x8d0>
 8009ec4:	4b96      	ldr	r3, [pc, #600]	@ (800a120 <_strtod_l+0xaf8>)
 8009ec6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d102      	bne.n	8009ed2 <_strtod_l+0x8aa>
 8009ecc:	3101      	adds	r1, #1
 8009ece:	f43f adca 	beq.w	8009a66 <_strtod_l+0x43e>
 8009ed2:	4b92      	ldr	r3, [pc, #584]	@ (800a11c <_strtod_l+0xaf4>)
 8009ed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ed6:	401a      	ands	r2, r3
 8009ed8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009edc:	f04f 0a00 	mov.w	sl, #0
 8009ee0:	9b08      	ldr	r3, [sp, #32]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1b8      	bne.n	8009e58 <_strtod_l+0x830>
 8009ee6:	e5c9      	b.n	8009a7c <_strtod_l+0x454>
 8009ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eec:	e7e8      	b.n	8009ec0 <_strtod_l+0x898>
 8009eee:	4613      	mov	r3, r2
 8009ef0:	e7e6      	b.n	8009ec0 <_strtod_l+0x898>
 8009ef2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ef6:	d0a1      	beq.n	8009e3c <_strtod_l+0x814>
 8009ef8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009efa:	b1db      	cbz	r3, 8009f34 <_strtod_l+0x90c>
 8009efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009efe:	4213      	tst	r3, r2
 8009f00:	d0ee      	beq.n	8009ee0 <_strtod_l+0x8b8>
 8009f02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f04:	9a08      	ldr	r2, [sp, #32]
 8009f06:	4650      	mov	r0, sl
 8009f08:	4659      	mov	r1, fp
 8009f0a:	b1bb      	cbz	r3, 8009f3c <_strtod_l+0x914>
 8009f0c:	f7ff fb6e 	bl	80095ec <sulp>
 8009f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f14:	ec53 2b10 	vmov	r2, r3, d0
 8009f18:	f7f6 f9b8 	bl	800028c <__adddf3>
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	468b      	mov	fp, r1
 8009f20:	e7de      	b.n	8009ee0 <_strtod_l+0x8b8>
 8009f22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009f26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f2e:	f04f 3aff 	mov.w	sl, #4294967295
 8009f32:	e7d5      	b.n	8009ee0 <_strtod_l+0x8b8>
 8009f34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f36:	ea13 0f0a 	tst.w	r3, sl
 8009f3a:	e7e1      	b.n	8009f00 <_strtod_l+0x8d8>
 8009f3c:	f7ff fb56 	bl	80095ec <sulp>
 8009f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f44:	ec53 2b10 	vmov	r2, r3, d0
 8009f48:	f7f6 f99e 	bl	8000288 <__aeabi_dsub>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4682      	mov	sl, r0
 8009f52:	468b      	mov	fp, r1
 8009f54:	f7f6 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d0c1      	beq.n	8009ee0 <_strtod_l+0x8b8>
 8009f5c:	e619      	b.n	8009b92 <_strtod_l+0x56a>
 8009f5e:	4641      	mov	r1, r8
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7ff facd 	bl	8009500 <__ratio>
 8009f66:	ec57 6b10 	vmov	r6, r7, d0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 fdbc 	bl	8000af0 <__aeabi_dcmple>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d06f      	beq.n	800a05c <_strtod_l+0xa34>
 8009f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d17a      	bne.n	800a078 <_strtod_l+0xa50>
 8009f82:	f1ba 0f00 	cmp.w	sl, #0
 8009f86:	d158      	bne.n	800a03a <_strtod_l+0xa12>
 8009f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d15a      	bne.n	800a048 <_strtod_l+0xa20>
 8009f92:	4b64      	ldr	r3, [pc, #400]	@ (800a124 <_strtod_l+0xafc>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 fd9f 	bl	8000adc <__aeabi_dcmplt>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d159      	bne.n	800a056 <_strtod_l+0xa2e>
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	4b60      	ldr	r3, [pc, #384]	@ (800a128 <_strtod_l+0xb00>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f7f6 fb25 	bl	80005f8 <__aeabi_dmul>
 8009fae:	4606      	mov	r6, r0
 8009fb0:	460f      	mov	r7, r1
 8009fb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009fb6:	9606      	str	r6, [sp, #24]
 8009fb8:	9307      	str	r3, [sp, #28]
 8009fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fbe:	4d57      	ldr	r5, [pc, #348]	@ (800a11c <_strtod_l+0xaf4>)
 8009fc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fc6:	401d      	ands	r5, r3
 8009fc8:	4b58      	ldr	r3, [pc, #352]	@ (800a12c <_strtod_l+0xb04>)
 8009fca:	429d      	cmp	r5, r3
 8009fcc:	f040 80b2 	bne.w	800a134 <_strtod_l+0xb0c>
 8009fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009fd6:	ec4b ab10 	vmov	d0, sl, fp
 8009fda:	f7ff f9c9 	bl	8009370 <__ulp>
 8009fde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fe2:	ec51 0b10 	vmov	r0, r1, d0
 8009fe6:	f7f6 fb07 	bl	80005f8 <__aeabi_dmul>
 8009fea:	4652      	mov	r2, sl
 8009fec:	465b      	mov	r3, fp
 8009fee:	f7f6 f94d 	bl	800028c <__adddf3>
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4949      	ldr	r1, [pc, #292]	@ (800a11c <_strtod_l+0xaf4>)
 8009ff6:	4a4e      	ldr	r2, [pc, #312]	@ (800a130 <_strtod_l+0xb08>)
 8009ff8:	4019      	ands	r1, r3
 8009ffa:	4291      	cmp	r1, r2
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	d942      	bls.n	800a086 <_strtod_l+0xa5e>
 800a000:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a002:	4b47      	ldr	r3, [pc, #284]	@ (800a120 <_strtod_l+0xaf8>)
 800a004:	429a      	cmp	r2, r3
 800a006:	d103      	bne.n	800a010 <_strtod_l+0x9e8>
 800a008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a00a:	3301      	adds	r3, #1
 800a00c:	f43f ad2b 	beq.w	8009a66 <_strtod_l+0x43e>
 800a010:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a120 <_strtod_l+0xaf8>
 800a014:	f04f 3aff 	mov.w	sl, #4294967295
 800a018:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a01a:	9805      	ldr	r0, [sp, #20]
 800a01c:	f7fe fe74 	bl	8008d08 <_Bfree>
 800a020:	9805      	ldr	r0, [sp, #20]
 800a022:	4649      	mov	r1, r9
 800a024:	f7fe fe70 	bl	8008d08 <_Bfree>
 800a028:	9805      	ldr	r0, [sp, #20]
 800a02a:	4641      	mov	r1, r8
 800a02c:	f7fe fe6c 	bl	8008d08 <_Bfree>
 800a030:	9805      	ldr	r0, [sp, #20]
 800a032:	4621      	mov	r1, r4
 800a034:	f7fe fe68 	bl	8008d08 <_Bfree>
 800a038:	e618      	b.n	8009c6c <_strtod_l+0x644>
 800a03a:	f1ba 0f01 	cmp.w	sl, #1
 800a03e:	d103      	bne.n	800a048 <_strtod_l+0xa20>
 800a040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a042:	2b00      	cmp	r3, #0
 800a044:	f43f ada5 	beq.w	8009b92 <_strtod_l+0x56a>
 800a048:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a0f8 <_strtod_l+0xad0>
 800a04c:	4f35      	ldr	r7, [pc, #212]	@ (800a124 <_strtod_l+0xafc>)
 800a04e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a052:	2600      	movs	r6, #0
 800a054:	e7b1      	b.n	8009fba <_strtod_l+0x992>
 800a056:	4f34      	ldr	r7, [pc, #208]	@ (800a128 <_strtod_l+0xb00>)
 800a058:	2600      	movs	r6, #0
 800a05a:	e7aa      	b.n	8009fb2 <_strtod_l+0x98a>
 800a05c:	4b32      	ldr	r3, [pc, #200]	@ (800a128 <_strtod_l+0xb00>)
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	2200      	movs	r2, #0
 800a064:	f7f6 fac8 	bl	80005f8 <__aeabi_dmul>
 800a068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a06a:	4606      	mov	r6, r0
 800a06c:	460f      	mov	r7, r1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d09f      	beq.n	8009fb2 <_strtod_l+0x98a>
 800a072:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a076:	e7a0      	b.n	8009fba <_strtod_l+0x992>
 800a078:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a100 <_strtod_l+0xad8>
 800a07c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a080:	ec57 6b17 	vmov	r6, r7, d7
 800a084:	e799      	b.n	8009fba <_strtod_l+0x992>
 800a086:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1c1      	bne.n	800a018 <_strtod_l+0x9f0>
 800a094:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a098:	0d1b      	lsrs	r3, r3, #20
 800a09a:	051b      	lsls	r3, r3, #20
 800a09c:	429d      	cmp	r5, r3
 800a09e:	d1bb      	bne.n	800a018 <_strtod_l+0x9f0>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 fe08 	bl	8000cb8 <__aeabi_d2lz>
 800a0a8:	f7f6 fa78 	bl	800059c <__aeabi_l2d>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 f8e8 	bl	8000288 <__aeabi_dsub>
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a0c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0c6:	ea46 060a 	orr.w	r6, r6, sl
 800a0ca:	431e      	orrs	r6, r3
 800a0cc:	d06f      	beq.n	800a1ae <_strtod_l+0xb86>
 800a0ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a108 <_strtod_l+0xae0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fd02 	bl	8000adc <__aeabi_dcmplt>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f47f accf 	bne.w	8009a7c <_strtod_l+0x454>
 800a0de:	a30c      	add	r3, pc, #48	@ (adr r3, 800a110 <_strtod_l+0xae8>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0e8:	f7f6 fd16 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d093      	beq.n	800a018 <_strtod_l+0x9f0>
 800a0f0:	e4c4      	b.n	8009a7c <_strtod_l+0x454>
 800a0f2:	bf00      	nop
 800a0f4:	f3af 8000 	nop.w
 800a0f8:	00000000 	.word	0x00000000
 800a0fc:	bff00000 	.word	0xbff00000
 800a100:	00000000 	.word	0x00000000
 800a104:	3ff00000 	.word	0x3ff00000
 800a108:	94a03595 	.word	0x94a03595
 800a10c:	3fdfffff 	.word	0x3fdfffff
 800a110:	35afe535 	.word	0x35afe535
 800a114:	3fe00000 	.word	0x3fe00000
 800a118:	000fffff 	.word	0x000fffff
 800a11c:	7ff00000 	.word	0x7ff00000
 800a120:	7fefffff 	.word	0x7fefffff
 800a124:	3ff00000 	.word	0x3ff00000
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	7fe00000 	.word	0x7fe00000
 800a130:	7c9fffff 	.word	0x7c9fffff
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	b323      	cbz	r3, 800a182 <_strtod_l+0xb5a>
 800a138:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a13c:	d821      	bhi.n	800a182 <_strtod_l+0xb5a>
 800a13e:	a328      	add	r3, pc, #160	@ (adr r3, 800a1e0 <_strtod_l+0xbb8>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	4630      	mov	r0, r6
 800a146:	4639      	mov	r1, r7
 800a148:	f7f6 fcd2 	bl	8000af0 <__aeabi_dcmple>
 800a14c:	b1a0      	cbz	r0, 800a178 <_strtod_l+0xb50>
 800a14e:	4639      	mov	r1, r7
 800a150:	4630      	mov	r0, r6
 800a152:	f7f6 fd29 	bl	8000ba8 <__aeabi_d2uiz>
 800a156:	2801      	cmp	r0, #1
 800a158:	bf38      	it	cc
 800a15a:	2001      	movcc	r0, #1
 800a15c:	f7f6 f9d2 	bl	8000504 <__aeabi_ui2d>
 800a160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	b9fb      	cbnz	r3, 800a1a8 <_strtod_l+0xb80>
 800a168:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a16c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a16e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a170:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a174:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a178:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a17a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a17e:	1b5b      	subs	r3, r3, r5
 800a180:	9311      	str	r3, [sp, #68]	@ 0x44
 800a182:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a186:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a18a:	f7ff f8f1 	bl	8009370 <__ulp>
 800a18e:	4650      	mov	r0, sl
 800a190:	ec53 2b10 	vmov	r2, r3, d0
 800a194:	4659      	mov	r1, fp
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a19e:	f7f6 f875 	bl	800028c <__adddf3>
 800a1a2:	4682      	mov	sl, r0
 800a1a4:	468b      	mov	fp, r1
 800a1a6:	e770      	b.n	800a08a <_strtod_l+0xa62>
 800a1a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a1ac:	e7e0      	b.n	800a170 <_strtod_l+0xb48>
 800a1ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800a1e8 <_strtod_l+0xbc0>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7f6 fc92 	bl	8000adc <__aeabi_dcmplt>
 800a1b8:	e798      	b.n	800a0ec <_strtod_l+0xac4>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a1c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	f7ff ba6d 	b.w	80096a2 <_strtod_l+0x7a>
 800a1c8:	2a65      	cmp	r2, #101	@ 0x65
 800a1ca:	f43f ab66 	beq.w	800989a <_strtod_l+0x272>
 800a1ce:	2a45      	cmp	r2, #69	@ 0x45
 800a1d0:	f43f ab63 	beq.w	800989a <_strtod_l+0x272>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f7ff bb9e 	b.w	8009916 <_strtod_l+0x2ee>
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	ffc00000 	.word	0xffc00000
 800a1e4:	41dfffff 	.word	0x41dfffff
 800a1e8:	94a03595 	.word	0x94a03595
 800a1ec:	3fcfffff 	.word	0x3fcfffff

0800a1f0 <_strtod_r>:
 800a1f0:	4b01      	ldr	r3, [pc, #4]	@ (800a1f8 <_strtod_r+0x8>)
 800a1f2:	f7ff ba19 	b.w	8009628 <_strtod_l>
 800a1f6:	bf00      	nop
 800a1f8:	20000068 	.word	0x20000068

0800a1fc <_strtol_l.constprop.0>:
 800a1fc:	2b24      	cmp	r3, #36	@ 0x24
 800a1fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a202:	4686      	mov	lr, r0
 800a204:	4690      	mov	r8, r2
 800a206:	d801      	bhi.n	800a20c <_strtol_l.constprop.0+0x10>
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d106      	bne.n	800a21a <_strtol_l.constprop.0+0x1e>
 800a20c:	f7fd fdbc 	bl	8007d88 <__errno>
 800a210:	2316      	movs	r3, #22
 800a212:	6003      	str	r3, [r0, #0]
 800a214:	2000      	movs	r0, #0
 800a216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a21a:	4834      	ldr	r0, [pc, #208]	@ (800a2ec <_strtol_l.constprop.0+0xf0>)
 800a21c:	460d      	mov	r5, r1
 800a21e:	462a      	mov	r2, r5
 800a220:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a224:	5d06      	ldrb	r6, [r0, r4]
 800a226:	f016 0608 	ands.w	r6, r6, #8
 800a22a:	d1f8      	bne.n	800a21e <_strtol_l.constprop.0+0x22>
 800a22c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a22e:	d12d      	bne.n	800a28c <_strtol_l.constprop.0+0x90>
 800a230:	782c      	ldrb	r4, [r5, #0]
 800a232:	2601      	movs	r6, #1
 800a234:	1c95      	adds	r5, r2, #2
 800a236:	f033 0210 	bics.w	r2, r3, #16
 800a23a:	d109      	bne.n	800a250 <_strtol_l.constprop.0+0x54>
 800a23c:	2c30      	cmp	r4, #48	@ 0x30
 800a23e:	d12a      	bne.n	800a296 <_strtol_l.constprop.0+0x9a>
 800a240:	782a      	ldrb	r2, [r5, #0]
 800a242:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a246:	2a58      	cmp	r2, #88	@ 0x58
 800a248:	d125      	bne.n	800a296 <_strtol_l.constprop.0+0x9a>
 800a24a:	786c      	ldrb	r4, [r5, #1]
 800a24c:	2310      	movs	r3, #16
 800a24e:	3502      	adds	r5, #2
 800a250:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a254:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a258:	2200      	movs	r2, #0
 800a25a:	fbbc f9f3 	udiv	r9, ip, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	fb03 ca19 	mls	sl, r3, r9, ip
 800a264:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a268:	2f09      	cmp	r7, #9
 800a26a:	d81b      	bhi.n	800a2a4 <_strtol_l.constprop.0+0xa8>
 800a26c:	463c      	mov	r4, r7
 800a26e:	42a3      	cmp	r3, r4
 800a270:	dd27      	ble.n	800a2c2 <_strtol_l.constprop.0+0xc6>
 800a272:	1c57      	adds	r7, r2, #1
 800a274:	d007      	beq.n	800a286 <_strtol_l.constprop.0+0x8a>
 800a276:	4581      	cmp	r9, r0
 800a278:	d320      	bcc.n	800a2bc <_strtol_l.constprop.0+0xc0>
 800a27a:	d101      	bne.n	800a280 <_strtol_l.constprop.0+0x84>
 800a27c:	45a2      	cmp	sl, r4
 800a27e:	db1d      	blt.n	800a2bc <_strtol_l.constprop.0+0xc0>
 800a280:	fb00 4003 	mla	r0, r0, r3, r4
 800a284:	2201      	movs	r2, #1
 800a286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a28a:	e7eb      	b.n	800a264 <_strtol_l.constprop.0+0x68>
 800a28c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a28e:	bf04      	itt	eq
 800a290:	782c      	ldrbeq	r4, [r5, #0]
 800a292:	1c95      	addeq	r5, r2, #2
 800a294:	e7cf      	b.n	800a236 <_strtol_l.constprop.0+0x3a>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1da      	bne.n	800a250 <_strtol_l.constprop.0+0x54>
 800a29a:	2c30      	cmp	r4, #48	@ 0x30
 800a29c:	bf0c      	ite	eq
 800a29e:	2308      	moveq	r3, #8
 800a2a0:	230a      	movne	r3, #10
 800a2a2:	e7d5      	b.n	800a250 <_strtol_l.constprop.0+0x54>
 800a2a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a2a8:	2f19      	cmp	r7, #25
 800a2aa:	d801      	bhi.n	800a2b0 <_strtol_l.constprop.0+0xb4>
 800a2ac:	3c37      	subs	r4, #55	@ 0x37
 800a2ae:	e7de      	b.n	800a26e <_strtol_l.constprop.0+0x72>
 800a2b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a2b4:	2f19      	cmp	r7, #25
 800a2b6:	d804      	bhi.n	800a2c2 <_strtol_l.constprop.0+0xc6>
 800a2b8:	3c57      	subs	r4, #87	@ 0x57
 800a2ba:	e7d8      	b.n	800a26e <_strtol_l.constprop.0+0x72>
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	e7e1      	b.n	800a286 <_strtol_l.constprop.0+0x8a>
 800a2c2:	1c53      	adds	r3, r2, #1
 800a2c4:	d108      	bne.n	800a2d8 <_strtol_l.constprop.0+0xdc>
 800a2c6:	2322      	movs	r3, #34	@ 0x22
 800a2c8:	f8ce 3000 	str.w	r3, [lr]
 800a2cc:	4660      	mov	r0, ip
 800a2ce:	f1b8 0f00 	cmp.w	r8, #0
 800a2d2:	d0a0      	beq.n	800a216 <_strtol_l.constprop.0+0x1a>
 800a2d4:	1e69      	subs	r1, r5, #1
 800a2d6:	e006      	b.n	800a2e6 <_strtol_l.constprop.0+0xea>
 800a2d8:	b106      	cbz	r6, 800a2dc <_strtol_l.constprop.0+0xe0>
 800a2da:	4240      	negs	r0, r0
 800a2dc:	f1b8 0f00 	cmp.w	r8, #0
 800a2e0:	d099      	beq.n	800a216 <_strtol_l.constprop.0+0x1a>
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d1f6      	bne.n	800a2d4 <_strtol_l.constprop.0+0xd8>
 800a2e6:	f8c8 1000 	str.w	r1, [r8]
 800a2ea:	e794      	b.n	800a216 <_strtol_l.constprop.0+0x1a>
 800a2ec:	0800b781 	.word	0x0800b781

0800a2f0 <_strtol_r>:
 800a2f0:	f7ff bf84 	b.w	800a1fc <_strtol_l.constprop.0>

0800a2f4 <__ssputs_r>:
 800a2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f8:	688e      	ldr	r6, [r1, #8]
 800a2fa:	461f      	mov	r7, r3
 800a2fc:	42be      	cmp	r6, r7
 800a2fe:	680b      	ldr	r3, [r1, #0]
 800a300:	4682      	mov	sl, r0
 800a302:	460c      	mov	r4, r1
 800a304:	4690      	mov	r8, r2
 800a306:	d82d      	bhi.n	800a364 <__ssputs_r+0x70>
 800a308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a30c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a310:	d026      	beq.n	800a360 <__ssputs_r+0x6c>
 800a312:	6965      	ldr	r5, [r4, #20]
 800a314:	6909      	ldr	r1, [r1, #16]
 800a316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a31a:	eba3 0901 	sub.w	r9, r3, r1
 800a31e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a322:	1c7b      	adds	r3, r7, #1
 800a324:	444b      	add	r3, r9
 800a326:	106d      	asrs	r5, r5, #1
 800a328:	429d      	cmp	r5, r3
 800a32a:	bf38      	it	cc
 800a32c:	461d      	movcc	r5, r3
 800a32e:	0553      	lsls	r3, r2, #21
 800a330:	d527      	bpl.n	800a382 <__ssputs_r+0x8e>
 800a332:	4629      	mov	r1, r5
 800a334:	f7fe fc1c 	bl	8008b70 <_malloc_r>
 800a338:	4606      	mov	r6, r0
 800a33a:	b360      	cbz	r0, 800a396 <__ssputs_r+0xa2>
 800a33c:	6921      	ldr	r1, [r4, #16]
 800a33e:	464a      	mov	r2, r9
 800a340:	f000 fa18 	bl	800a774 <memcpy>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	6126      	str	r6, [r4, #16]
 800a352:	6165      	str	r5, [r4, #20]
 800a354:	444e      	add	r6, r9
 800a356:	eba5 0509 	sub.w	r5, r5, r9
 800a35a:	6026      	str	r6, [r4, #0]
 800a35c:	60a5      	str	r5, [r4, #8]
 800a35e:	463e      	mov	r6, r7
 800a360:	42be      	cmp	r6, r7
 800a362:	d900      	bls.n	800a366 <__ssputs_r+0x72>
 800a364:	463e      	mov	r6, r7
 800a366:	6820      	ldr	r0, [r4, #0]
 800a368:	4632      	mov	r2, r6
 800a36a:	4641      	mov	r1, r8
 800a36c:	f000 f9c6 	bl	800a6fc <memmove>
 800a370:	68a3      	ldr	r3, [r4, #8]
 800a372:	1b9b      	subs	r3, r3, r6
 800a374:	60a3      	str	r3, [r4, #8]
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	4433      	add	r3, r6
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	2000      	movs	r0, #0
 800a37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a382:	462a      	mov	r2, r5
 800a384:	f000 fd89 	bl	800ae9a <_realloc_r>
 800a388:	4606      	mov	r6, r0
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d1e0      	bne.n	800a350 <__ssputs_r+0x5c>
 800a38e:	6921      	ldr	r1, [r4, #16]
 800a390:	4650      	mov	r0, sl
 800a392:	f7fe fb79 	bl	8008a88 <_free_r>
 800a396:	230c      	movs	r3, #12
 800a398:	f8ca 3000 	str.w	r3, [sl]
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	e7e9      	b.n	800a37e <__ssputs_r+0x8a>
	...

0800a3ac <_svfiprintf_r>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	4698      	mov	r8, r3
 800a3b2:	898b      	ldrh	r3, [r1, #12]
 800a3b4:	061b      	lsls	r3, r3, #24
 800a3b6:	b09d      	sub	sp, #116	@ 0x74
 800a3b8:	4607      	mov	r7, r0
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	4614      	mov	r4, r2
 800a3be:	d510      	bpl.n	800a3e2 <_svfiprintf_r+0x36>
 800a3c0:	690b      	ldr	r3, [r1, #16]
 800a3c2:	b973      	cbnz	r3, 800a3e2 <_svfiprintf_r+0x36>
 800a3c4:	2140      	movs	r1, #64	@ 0x40
 800a3c6:	f7fe fbd3 	bl	8008b70 <_malloc_r>
 800a3ca:	6028      	str	r0, [r5, #0]
 800a3cc:	6128      	str	r0, [r5, #16]
 800a3ce:	b930      	cbnz	r0, 800a3de <_svfiprintf_r+0x32>
 800a3d0:	230c      	movs	r3, #12
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	b01d      	add	sp, #116	@ 0x74
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3de:	2340      	movs	r3, #64	@ 0x40
 800a3e0:	616b      	str	r3, [r5, #20]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e6:	2320      	movs	r3, #32
 800a3e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f0:	2330      	movs	r3, #48	@ 0x30
 800a3f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a590 <_svfiprintf_r+0x1e4>
 800a3f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3fa:	f04f 0901 	mov.w	r9, #1
 800a3fe:	4623      	mov	r3, r4
 800a400:	469a      	mov	sl, r3
 800a402:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a406:	b10a      	cbz	r2, 800a40c <_svfiprintf_r+0x60>
 800a408:	2a25      	cmp	r2, #37	@ 0x25
 800a40a:	d1f9      	bne.n	800a400 <_svfiprintf_r+0x54>
 800a40c:	ebba 0b04 	subs.w	fp, sl, r4
 800a410:	d00b      	beq.n	800a42a <_svfiprintf_r+0x7e>
 800a412:	465b      	mov	r3, fp
 800a414:	4622      	mov	r2, r4
 800a416:	4629      	mov	r1, r5
 800a418:	4638      	mov	r0, r7
 800a41a:	f7ff ff6b 	bl	800a2f4 <__ssputs_r>
 800a41e:	3001      	adds	r0, #1
 800a420:	f000 80a7 	beq.w	800a572 <_svfiprintf_r+0x1c6>
 800a424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a426:	445a      	add	r2, fp
 800a428:	9209      	str	r2, [sp, #36]	@ 0x24
 800a42a:	f89a 3000 	ldrb.w	r3, [sl]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 809f 	beq.w	800a572 <_svfiprintf_r+0x1c6>
 800a434:	2300      	movs	r3, #0
 800a436:	f04f 32ff 	mov.w	r2, #4294967295
 800a43a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a43e:	f10a 0a01 	add.w	sl, sl, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	9307      	str	r3, [sp, #28]
 800a446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a44a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a44c:	4654      	mov	r4, sl
 800a44e:	2205      	movs	r2, #5
 800a450:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a454:	484e      	ldr	r0, [pc, #312]	@ (800a590 <_svfiprintf_r+0x1e4>)
 800a456:	f7f5 febb 	bl	80001d0 <memchr>
 800a45a:	9a04      	ldr	r2, [sp, #16]
 800a45c:	b9d8      	cbnz	r0, 800a496 <_svfiprintf_r+0xea>
 800a45e:	06d0      	lsls	r0, r2, #27
 800a460:	bf44      	itt	mi
 800a462:	2320      	movmi	r3, #32
 800a464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a468:	0711      	lsls	r1, r2, #28
 800a46a:	bf44      	itt	mi
 800a46c:	232b      	movmi	r3, #43	@ 0x2b
 800a46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a472:	f89a 3000 	ldrb.w	r3, [sl]
 800a476:	2b2a      	cmp	r3, #42	@ 0x2a
 800a478:	d015      	beq.n	800a4a6 <_svfiprintf_r+0xfa>
 800a47a:	9a07      	ldr	r2, [sp, #28]
 800a47c:	4654      	mov	r4, sl
 800a47e:	2000      	movs	r0, #0
 800a480:	f04f 0c0a 	mov.w	ip, #10
 800a484:	4621      	mov	r1, r4
 800a486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a48a:	3b30      	subs	r3, #48	@ 0x30
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	d94b      	bls.n	800a528 <_svfiprintf_r+0x17c>
 800a490:	b1b0      	cbz	r0, 800a4c0 <_svfiprintf_r+0x114>
 800a492:	9207      	str	r2, [sp, #28]
 800a494:	e014      	b.n	800a4c0 <_svfiprintf_r+0x114>
 800a496:	eba0 0308 	sub.w	r3, r0, r8
 800a49a:	fa09 f303 	lsl.w	r3, r9, r3
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	46a2      	mov	sl, r4
 800a4a4:	e7d2      	b.n	800a44c <_svfiprintf_r+0xa0>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	1d19      	adds	r1, r3, #4
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	9103      	str	r1, [sp, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bfbb      	ittet	lt
 800a4b2:	425b      	neglt	r3, r3
 800a4b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b8:	9307      	strge	r3, [sp, #28]
 800a4ba:	9307      	strlt	r3, [sp, #28]
 800a4bc:	bfb8      	it	lt
 800a4be:	9204      	strlt	r2, [sp, #16]
 800a4c0:	7823      	ldrb	r3, [r4, #0]
 800a4c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4c4:	d10a      	bne.n	800a4dc <_svfiprintf_r+0x130>
 800a4c6:	7863      	ldrb	r3, [r4, #1]
 800a4c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ca:	d132      	bne.n	800a532 <_svfiprintf_r+0x186>
 800a4cc:	9b03      	ldr	r3, [sp, #12]
 800a4ce:	1d1a      	adds	r2, r3, #4
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	9203      	str	r2, [sp, #12]
 800a4d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4d8:	3402      	adds	r4, #2
 800a4da:	9305      	str	r3, [sp, #20]
 800a4dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a5a0 <_svfiprintf_r+0x1f4>
 800a4e0:	7821      	ldrb	r1, [r4, #0]
 800a4e2:	2203      	movs	r2, #3
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	f7f5 fe73 	bl	80001d0 <memchr>
 800a4ea:	b138      	cbz	r0, 800a4fc <_svfiprintf_r+0x150>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	eba0 000a 	sub.w	r0, r0, sl
 800a4f2:	2240      	movs	r2, #64	@ 0x40
 800a4f4:	4082      	lsls	r2, r0
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	4824      	ldr	r0, [pc, #144]	@ (800a594 <_svfiprintf_r+0x1e8>)
 800a502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a506:	2206      	movs	r2, #6
 800a508:	f7f5 fe62 	bl	80001d0 <memchr>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d036      	beq.n	800a57e <_svfiprintf_r+0x1d2>
 800a510:	4b21      	ldr	r3, [pc, #132]	@ (800a598 <_svfiprintf_r+0x1ec>)
 800a512:	bb1b      	cbnz	r3, 800a55c <_svfiprintf_r+0x1b0>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	3307      	adds	r3, #7
 800a518:	f023 0307 	bic.w	r3, r3, #7
 800a51c:	3308      	adds	r3, #8
 800a51e:	9303      	str	r3, [sp, #12]
 800a520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a522:	4433      	add	r3, r6
 800a524:	9309      	str	r3, [sp, #36]	@ 0x24
 800a526:	e76a      	b.n	800a3fe <_svfiprintf_r+0x52>
 800a528:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52c:	460c      	mov	r4, r1
 800a52e:	2001      	movs	r0, #1
 800a530:	e7a8      	b.n	800a484 <_svfiprintf_r+0xd8>
 800a532:	2300      	movs	r3, #0
 800a534:	3401      	adds	r4, #1
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	4619      	mov	r1, r3
 800a53a:	f04f 0c0a 	mov.w	ip, #10
 800a53e:	4620      	mov	r0, r4
 800a540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a544:	3a30      	subs	r2, #48	@ 0x30
 800a546:	2a09      	cmp	r2, #9
 800a548:	d903      	bls.n	800a552 <_svfiprintf_r+0x1a6>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c6      	beq.n	800a4dc <_svfiprintf_r+0x130>
 800a54e:	9105      	str	r1, [sp, #20]
 800a550:	e7c4      	b.n	800a4dc <_svfiprintf_r+0x130>
 800a552:	fb0c 2101 	mla	r1, ip, r1, r2
 800a556:	4604      	mov	r4, r0
 800a558:	2301      	movs	r3, #1
 800a55a:	e7f0      	b.n	800a53e <_svfiprintf_r+0x192>
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	462a      	mov	r2, r5
 800a562:	4b0e      	ldr	r3, [pc, #56]	@ (800a59c <_svfiprintf_r+0x1f0>)
 800a564:	a904      	add	r1, sp, #16
 800a566:	4638      	mov	r0, r7
 800a568:	f7fc fcca 	bl	8006f00 <_printf_float>
 800a56c:	1c42      	adds	r2, r0, #1
 800a56e:	4606      	mov	r6, r0
 800a570:	d1d6      	bne.n	800a520 <_svfiprintf_r+0x174>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	065b      	lsls	r3, r3, #25
 800a576:	f53f af2d 	bmi.w	800a3d4 <_svfiprintf_r+0x28>
 800a57a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a57c:	e72c      	b.n	800a3d8 <_svfiprintf_r+0x2c>
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	462a      	mov	r2, r5
 800a584:	4b05      	ldr	r3, [pc, #20]	@ (800a59c <_svfiprintf_r+0x1f0>)
 800a586:	a904      	add	r1, sp, #16
 800a588:	4638      	mov	r0, r7
 800a58a:	f7fc ff51 	bl	8007430 <_printf_i>
 800a58e:	e7ed      	b.n	800a56c <_svfiprintf_r+0x1c0>
 800a590:	0800b881 	.word	0x0800b881
 800a594:	0800b88b 	.word	0x0800b88b
 800a598:	08006f01 	.word	0x08006f01
 800a59c:	0800a2f5 	.word	0x0800a2f5
 800a5a0:	0800b887 	.word	0x0800b887

0800a5a4 <__sflush_r>:
 800a5a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ac:	0716      	lsls	r6, r2, #28
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	d454      	bmi.n	800a65e <__sflush_r+0xba>
 800a5b4:	684b      	ldr	r3, [r1, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dc02      	bgt.n	800a5c0 <__sflush_r+0x1c>
 800a5ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	dd48      	ble.n	800a652 <__sflush_r+0xae>
 800a5c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5c2:	2e00      	cmp	r6, #0
 800a5c4:	d045      	beq.n	800a652 <__sflush_r+0xae>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5cc:	682f      	ldr	r7, [r5, #0]
 800a5ce:	6a21      	ldr	r1, [r4, #32]
 800a5d0:	602b      	str	r3, [r5, #0]
 800a5d2:	d030      	beq.n	800a636 <__sflush_r+0x92>
 800a5d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	0759      	lsls	r1, r3, #29
 800a5da:	d505      	bpl.n	800a5e8 <__sflush_r+0x44>
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5e2:	b10b      	cbz	r3, 800a5e8 <__sflush_r+0x44>
 800a5e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5ec:	6a21      	ldr	r1, [r4, #32]
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	47b0      	blx	r6
 800a5f2:	1c43      	adds	r3, r0, #1
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	d106      	bne.n	800a606 <__sflush_r+0x62>
 800a5f8:	6829      	ldr	r1, [r5, #0]
 800a5fa:	291d      	cmp	r1, #29
 800a5fc:	d82b      	bhi.n	800a656 <__sflush_r+0xb2>
 800a5fe:	4a2a      	ldr	r2, [pc, #168]	@ (800a6a8 <__sflush_r+0x104>)
 800a600:	410a      	asrs	r2, r1
 800a602:	07d6      	lsls	r6, r2, #31
 800a604:	d427      	bmi.n	800a656 <__sflush_r+0xb2>
 800a606:	2200      	movs	r2, #0
 800a608:	6062      	str	r2, [r4, #4]
 800a60a:	04d9      	lsls	r1, r3, #19
 800a60c:	6922      	ldr	r2, [r4, #16]
 800a60e:	6022      	str	r2, [r4, #0]
 800a610:	d504      	bpl.n	800a61c <__sflush_r+0x78>
 800a612:	1c42      	adds	r2, r0, #1
 800a614:	d101      	bne.n	800a61a <__sflush_r+0x76>
 800a616:	682b      	ldr	r3, [r5, #0]
 800a618:	b903      	cbnz	r3, 800a61c <__sflush_r+0x78>
 800a61a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a61e:	602f      	str	r7, [r5, #0]
 800a620:	b1b9      	cbz	r1, 800a652 <__sflush_r+0xae>
 800a622:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a626:	4299      	cmp	r1, r3
 800a628:	d002      	beq.n	800a630 <__sflush_r+0x8c>
 800a62a:	4628      	mov	r0, r5
 800a62c:	f7fe fa2c 	bl	8008a88 <_free_r>
 800a630:	2300      	movs	r3, #0
 800a632:	6363      	str	r3, [r4, #52]	@ 0x34
 800a634:	e00d      	b.n	800a652 <__sflush_r+0xae>
 800a636:	2301      	movs	r3, #1
 800a638:	4628      	mov	r0, r5
 800a63a:	47b0      	blx	r6
 800a63c:	4602      	mov	r2, r0
 800a63e:	1c50      	adds	r0, r2, #1
 800a640:	d1c9      	bne.n	800a5d6 <__sflush_r+0x32>
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0c6      	beq.n	800a5d6 <__sflush_r+0x32>
 800a648:	2b1d      	cmp	r3, #29
 800a64a:	d001      	beq.n	800a650 <__sflush_r+0xac>
 800a64c:	2b16      	cmp	r3, #22
 800a64e:	d11e      	bne.n	800a68e <__sflush_r+0xea>
 800a650:	602f      	str	r7, [r5, #0]
 800a652:	2000      	movs	r0, #0
 800a654:	e022      	b.n	800a69c <__sflush_r+0xf8>
 800a656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a65a:	b21b      	sxth	r3, r3
 800a65c:	e01b      	b.n	800a696 <__sflush_r+0xf2>
 800a65e:	690f      	ldr	r7, [r1, #16]
 800a660:	2f00      	cmp	r7, #0
 800a662:	d0f6      	beq.n	800a652 <__sflush_r+0xae>
 800a664:	0793      	lsls	r3, r2, #30
 800a666:	680e      	ldr	r6, [r1, #0]
 800a668:	bf08      	it	eq
 800a66a:	694b      	ldreq	r3, [r1, #20]
 800a66c:	600f      	str	r7, [r1, #0]
 800a66e:	bf18      	it	ne
 800a670:	2300      	movne	r3, #0
 800a672:	eba6 0807 	sub.w	r8, r6, r7
 800a676:	608b      	str	r3, [r1, #8]
 800a678:	f1b8 0f00 	cmp.w	r8, #0
 800a67c:	dde9      	ble.n	800a652 <__sflush_r+0xae>
 800a67e:	6a21      	ldr	r1, [r4, #32]
 800a680:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a682:	4643      	mov	r3, r8
 800a684:	463a      	mov	r2, r7
 800a686:	4628      	mov	r0, r5
 800a688:	47b0      	blx	r6
 800a68a:	2800      	cmp	r0, #0
 800a68c:	dc08      	bgt.n	800a6a0 <__sflush_r+0xfc>
 800a68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a0:	4407      	add	r7, r0
 800a6a2:	eba8 0800 	sub.w	r8, r8, r0
 800a6a6:	e7e7      	b.n	800a678 <__sflush_r+0xd4>
 800a6a8:	dfbffffe 	.word	0xdfbffffe

0800a6ac <_fflush_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	690b      	ldr	r3, [r1, #16]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	b913      	cbnz	r3, 800a6bc <_fflush_r+0x10>
 800a6b6:	2500      	movs	r5, #0
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	b118      	cbz	r0, 800a6c6 <_fflush_r+0x1a>
 800a6be:	6a03      	ldr	r3, [r0, #32]
 800a6c0:	b90b      	cbnz	r3, 800a6c6 <_fflush_r+0x1a>
 800a6c2:	f7fd fa75 	bl	8007bb0 <__sinit>
 800a6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0f3      	beq.n	800a6b6 <_fflush_r+0xa>
 800a6ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6d0:	07d0      	lsls	r0, r2, #31
 800a6d2:	d404      	bmi.n	800a6de <_fflush_r+0x32>
 800a6d4:	0599      	lsls	r1, r3, #22
 800a6d6:	d402      	bmi.n	800a6de <_fflush_r+0x32>
 800a6d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6da:	f7fd fb80 	bl	8007dde <__retarget_lock_acquire_recursive>
 800a6de:	4628      	mov	r0, r5
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	f7ff ff5f 	bl	800a5a4 <__sflush_r>
 800a6e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6e8:	07da      	lsls	r2, r3, #31
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	d4e4      	bmi.n	800a6b8 <_fflush_r+0xc>
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	059b      	lsls	r3, r3, #22
 800a6f2:	d4e1      	bmi.n	800a6b8 <_fflush_r+0xc>
 800a6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6f6:	f7fd fb73 	bl	8007de0 <__retarget_lock_release_recursive>
 800a6fa:	e7dd      	b.n	800a6b8 <_fflush_r+0xc>

0800a6fc <memmove>:
 800a6fc:	4288      	cmp	r0, r1
 800a6fe:	b510      	push	{r4, lr}
 800a700:	eb01 0402 	add.w	r4, r1, r2
 800a704:	d902      	bls.n	800a70c <memmove+0x10>
 800a706:	4284      	cmp	r4, r0
 800a708:	4623      	mov	r3, r4
 800a70a:	d807      	bhi.n	800a71c <memmove+0x20>
 800a70c:	1e43      	subs	r3, r0, #1
 800a70e:	42a1      	cmp	r1, r4
 800a710:	d008      	beq.n	800a724 <memmove+0x28>
 800a712:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a71a:	e7f8      	b.n	800a70e <memmove+0x12>
 800a71c:	4402      	add	r2, r0
 800a71e:	4601      	mov	r1, r0
 800a720:	428a      	cmp	r2, r1
 800a722:	d100      	bne.n	800a726 <memmove+0x2a>
 800a724:	bd10      	pop	{r4, pc}
 800a726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a72a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a72e:	e7f7      	b.n	800a720 <memmove+0x24>

0800a730 <strncmp>:
 800a730:	b510      	push	{r4, lr}
 800a732:	b16a      	cbz	r2, 800a750 <strncmp+0x20>
 800a734:	3901      	subs	r1, #1
 800a736:	1884      	adds	r4, r0, r2
 800a738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a73c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a740:	429a      	cmp	r2, r3
 800a742:	d103      	bne.n	800a74c <strncmp+0x1c>
 800a744:	42a0      	cmp	r0, r4
 800a746:	d001      	beq.n	800a74c <strncmp+0x1c>
 800a748:	2a00      	cmp	r2, #0
 800a74a:	d1f5      	bne.n	800a738 <strncmp+0x8>
 800a74c:	1ad0      	subs	r0, r2, r3
 800a74e:	bd10      	pop	{r4, pc}
 800a750:	4610      	mov	r0, r2
 800a752:	e7fc      	b.n	800a74e <strncmp+0x1e>

0800a754 <_sbrk_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4d06      	ldr	r5, [pc, #24]	@ (800a770 <_sbrk_r+0x1c>)
 800a758:	2300      	movs	r3, #0
 800a75a:	4604      	mov	r4, r0
 800a75c:	4608      	mov	r0, r1
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	f7f7 fd2e 	bl	80021c0 <_sbrk>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d102      	bne.n	800a76e <_sbrk_r+0x1a>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b103      	cbz	r3, 800a76e <_sbrk_r+0x1a>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	20000894 	.word	0x20000894

0800a774 <memcpy>:
 800a774:	440a      	add	r2, r1
 800a776:	4291      	cmp	r1, r2
 800a778:	f100 33ff 	add.w	r3, r0, #4294967295
 800a77c:	d100      	bne.n	800a780 <memcpy+0xc>
 800a77e:	4770      	bx	lr
 800a780:	b510      	push	{r4, lr}
 800a782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a78a:	4291      	cmp	r1, r2
 800a78c:	d1f9      	bne.n	800a782 <memcpy+0xe>
 800a78e:	bd10      	pop	{r4, pc}

0800a790 <nan>:
 800a790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a798 <nan+0x8>
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	00000000 	.word	0x00000000
 800a79c:	7ff80000 	.word	0x7ff80000

0800a7a0 <__assert_func>:
 800a7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b09      	ldr	r3, [pc, #36]	@ (800a7cc <__assert_func+0x2c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	68d8      	ldr	r0, [r3, #12]
 800a7ae:	b954      	cbnz	r4, 800a7c6 <__assert_func+0x26>
 800a7b0:	4b07      	ldr	r3, [pc, #28]	@ (800a7d0 <__assert_func+0x30>)
 800a7b2:	461c      	mov	r4, r3
 800a7b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7b8:	9100      	str	r1, [sp, #0]
 800a7ba:	462b      	mov	r3, r5
 800a7bc:	4905      	ldr	r1, [pc, #20]	@ (800a7d4 <__assert_func+0x34>)
 800a7be:	f000 fba7 	bl	800af10 <fiprintf>
 800a7c2:	f000 fbb7 	bl	800af34 <abort>
 800a7c6:	4b04      	ldr	r3, [pc, #16]	@ (800a7d8 <__assert_func+0x38>)
 800a7c8:	e7f4      	b.n	800a7b4 <__assert_func+0x14>
 800a7ca:	bf00      	nop
 800a7cc:	20000018 	.word	0x20000018
 800a7d0:	0800b8d5 	.word	0x0800b8d5
 800a7d4:	0800b8a7 	.word	0x0800b8a7
 800a7d8:	0800b89a 	.word	0x0800b89a

0800a7dc <_calloc_r>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	fba1 5402 	umull	r5, r4, r1, r2
 800a7e2:	b93c      	cbnz	r4, 800a7f4 <_calloc_r+0x18>
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	f7fe f9c3 	bl	8008b70 <_malloc_r>
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <_calloc_r+0x1e>
 800a7ee:	2600      	movs	r6, #0
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	220c      	movs	r2, #12
 800a7f6:	6002      	str	r2, [r0, #0]
 800a7f8:	e7f9      	b.n	800a7ee <_calloc_r+0x12>
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	f7fd fa70 	bl	8007ce2 <memset>
 800a802:	e7f5      	b.n	800a7f0 <_calloc_r+0x14>

0800a804 <rshift>:
 800a804:	6903      	ldr	r3, [r0, #16]
 800a806:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a80a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a80e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a812:	f100 0414 	add.w	r4, r0, #20
 800a816:	dd45      	ble.n	800a8a4 <rshift+0xa0>
 800a818:	f011 011f 	ands.w	r1, r1, #31
 800a81c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a824:	d10c      	bne.n	800a840 <rshift+0x3c>
 800a826:	f100 0710 	add.w	r7, r0, #16
 800a82a:	4629      	mov	r1, r5
 800a82c:	42b1      	cmp	r1, r6
 800a82e:	d334      	bcc.n	800a89a <rshift+0x96>
 800a830:	1a9b      	subs	r3, r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	1eea      	subs	r2, r5, #3
 800a836:	4296      	cmp	r6, r2
 800a838:	bf38      	it	cc
 800a83a:	2300      	movcc	r3, #0
 800a83c:	4423      	add	r3, r4
 800a83e:	e015      	b.n	800a86c <rshift+0x68>
 800a840:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a844:	f1c1 0820 	rsb	r8, r1, #32
 800a848:	40cf      	lsrs	r7, r1
 800a84a:	f105 0e04 	add.w	lr, r5, #4
 800a84e:	46a1      	mov	r9, r4
 800a850:	4576      	cmp	r6, lr
 800a852:	46f4      	mov	ip, lr
 800a854:	d815      	bhi.n	800a882 <rshift+0x7e>
 800a856:	1a9a      	subs	r2, r3, r2
 800a858:	0092      	lsls	r2, r2, #2
 800a85a:	3a04      	subs	r2, #4
 800a85c:	3501      	adds	r5, #1
 800a85e:	42ae      	cmp	r6, r5
 800a860:	bf38      	it	cc
 800a862:	2200      	movcc	r2, #0
 800a864:	18a3      	adds	r3, r4, r2
 800a866:	50a7      	str	r7, [r4, r2]
 800a868:	b107      	cbz	r7, 800a86c <rshift+0x68>
 800a86a:	3304      	adds	r3, #4
 800a86c:	1b1a      	subs	r2, r3, r4
 800a86e:	42a3      	cmp	r3, r4
 800a870:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a874:	bf08      	it	eq
 800a876:	2300      	moveq	r3, #0
 800a878:	6102      	str	r2, [r0, #16]
 800a87a:	bf08      	it	eq
 800a87c:	6143      	streq	r3, [r0, #20]
 800a87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a882:	f8dc c000 	ldr.w	ip, [ip]
 800a886:	fa0c fc08 	lsl.w	ip, ip, r8
 800a88a:	ea4c 0707 	orr.w	r7, ip, r7
 800a88e:	f849 7b04 	str.w	r7, [r9], #4
 800a892:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a896:	40cf      	lsrs	r7, r1
 800a898:	e7da      	b.n	800a850 <rshift+0x4c>
 800a89a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a89e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8a2:	e7c3      	b.n	800a82c <rshift+0x28>
 800a8a4:	4623      	mov	r3, r4
 800a8a6:	e7e1      	b.n	800a86c <rshift+0x68>

0800a8a8 <__hexdig_fun>:
 800a8a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	d802      	bhi.n	800a8b6 <__hexdig_fun+0xe>
 800a8b0:	3820      	subs	r0, #32
 800a8b2:	b2c0      	uxtb	r0, r0
 800a8b4:	4770      	bx	lr
 800a8b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a8ba:	2b05      	cmp	r3, #5
 800a8bc:	d801      	bhi.n	800a8c2 <__hexdig_fun+0x1a>
 800a8be:	3847      	subs	r0, #71	@ 0x47
 800a8c0:	e7f7      	b.n	800a8b2 <__hexdig_fun+0xa>
 800a8c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a8c6:	2b05      	cmp	r3, #5
 800a8c8:	d801      	bhi.n	800a8ce <__hexdig_fun+0x26>
 800a8ca:	3827      	subs	r0, #39	@ 0x27
 800a8cc:	e7f1      	b.n	800a8b2 <__hexdig_fun+0xa>
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <__gethex>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	468a      	mov	sl, r1
 800a8dc:	9302      	str	r3, [sp, #8]
 800a8de:	680b      	ldr	r3, [r1, #0]
 800a8e0:	9001      	str	r0, [sp, #4]
 800a8e2:	4690      	mov	r8, r2
 800a8e4:	1c9c      	adds	r4, r3, #2
 800a8e6:	46a1      	mov	r9, r4
 800a8e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a8ec:	2830      	cmp	r0, #48	@ 0x30
 800a8ee:	d0fa      	beq.n	800a8e6 <__gethex+0x12>
 800a8f0:	eba9 0303 	sub.w	r3, r9, r3
 800a8f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a8f8:	f7ff ffd6 	bl	800a8a8 <__hexdig_fun>
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d168      	bne.n	800a9d4 <__gethex+0x100>
 800a902:	49a0      	ldr	r1, [pc, #640]	@ (800ab84 <__gethex+0x2b0>)
 800a904:	2201      	movs	r2, #1
 800a906:	4648      	mov	r0, r9
 800a908:	f7ff ff12 	bl	800a730 <strncmp>
 800a90c:	4607      	mov	r7, r0
 800a90e:	2800      	cmp	r0, #0
 800a910:	d167      	bne.n	800a9e2 <__gethex+0x10e>
 800a912:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a916:	4626      	mov	r6, r4
 800a918:	f7ff ffc6 	bl	800a8a8 <__hexdig_fun>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d062      	beq.n	800a9e6 <__gethex+0x112>
 800a920:	4623      	mov	r3, r4
 800a922:	7818      	ldrb	r0, [r3, #0]
 800a924:	2830      	cmp	r0, #48	@ 0x30
 800a926:	4699      	mov	r9, r3
 800a928:	f103 0301 	add.w	r3, r3, #1
 800a92c:	d0f9      	beq.n	800a922 <__gethex+0x4e>
 800a92e:	f7ff ffbb 	bl	800a8a8 <__hexdig_fun>
 800a932:	fab0 f580 	clz	r5, r0
 800a936:	096d      	lsrs	r5, r5, #5
 800a938:	f04f 0b01 	mov.w	fp, #1
 800a93c:	464a      	mov	r2, r9
 800a93e:	4616      	mov	r6, r2
 800a940:	3201      	adds	r2, #1
 800a942:	7830      	ldrb	r0, [r6, #0]
 800a944:	f7ff ffb0 	bl	800a8a8 <__hexdig_fun>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d1f8      	bne.n	800a93e <__gethex+0x6a>
 800a94c:	498d      	ldr	r1, [pc, #564]	@ (800ab84 <__gethex+0x2b0>)
 800a94e:	2201      	movs	r2, #1
 800a950:	4630      	mov	r0, r6
 800a952:	f7ff feed 	bl	800a730 <strncmp>
 800a956:	2800      	cmp	r0, #0
 800a958:	d13f      	bne.n	800a9da <__gethex+0x106>
 800a95a:	b944      	cbnz	r4, 800a96e <__gethex+0x9a>
 800a95c:	1c74      	adds	r4, r6, #1
 800a95e:	4622      	mov	r2, r4
 800a960:	4616      	mov	r6, r2
 800a962:	3201      	adds	r2, #1
 800a964:	7830      	ldrb	r0, [r6, #0]
 800a966:	f7ff ff9f 	bl	800a8a8 <__hexdig_fun>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d1f8      	bne.n	800a960 <__gethex+0x8c>
 800a96e:	1ba4      	subs	r4, r4, r6
 800a970:	00a7      	lsls	r7, r4, #2
 800a972:	7833      	ldrb	r3, [r6, #0]
 800a974:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a978:	2b50      	cmp	r3, #80	@ 0x50
 800a97a:	d13e      	bne.n	800a9fa <__gethex+0x126>
 800a97c:	7873      	ldrb	r3, [r6, #1]
 800a97e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a980:	d033      	beq.n	800a9ea <__gethex+0x116>
 800a982:	2b2d      	cmp	r3, #45	@ 0x2d
 800a984:	d034      	beq.n	800a9f0 <__gethex+0x11c>
 800a986:	1c71      	adds	r1, r6, #1
 800a988:	2400      	movs	r4, #0
 800a98a:	7808      	ldrb	r0, [r1, #0]
 800a98c:	f7ff ff8c 	bl	800a8a8 <__hexdig_fun>
 800a990:	1e43      	subs	r3, r0, #1
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b18      	cmp	r3, #24
 800a996:	d830      	bhi.n	800a9fa <__gethex+0x126>
 800a998:	f1a0 0210 	sub.w	r2, r0, #16
 800a99c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9a0:	f7ff ff82 	bl	800a8a8 <__hexdig_fun>
 800a9a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a9a8:	fa5f fc8c 	uxtb.w	ip, ip
 800a9ac:	f1bc 0f18 	cmp.w	ip, #24
 800a9b0:	f04f 030a 	mov.w	r3, #10
 800a9b4:	d91e      	bls.n	800a9f4 <__gethex+0x120>
 800a9b6:	b104      	cbz	r4, 800a9ba <__gethex+0xe6>
 800a9b8:	4252      	negs	r2, r2
 800a9ba:	4417      	add	r7, r2
 800a9bc:	f8ca 1000 	str.w	r1, [sl]
 800a9c0:	b1ed      	cbz	r5, 800a9fe <__gethex+0x12a>
 800a9c2:	f1bb 0f00 	cmp.w	fp, #0
 800a9c6:	bf0c      	ite	eq
 800a9c8:	2506      	moveq	r5, #6
 800a9ca:	2500      	movne	r5, #0
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	b005      	add	sp, #20
 800a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d4:	2500      	movs	r5, #0
 800a9d6:	462c      	mov	r4, r5
 800a9d8:	e7b0      	b.n	800a93c <__gethex+0x68>
 800a9da:	2c00      	cmp	r4, #0
 800a9dc:	d1c7      	bne.n	800a96e <__gethex+0x9a>
 800a9de:	4627      	mov	r7, r4
 800a9e0:	e7c7      	b.n	800a972 <__gethex+0x9e>
 800a9e2:	464e      	mov	r6, r9
 800a9e4:	462f      	mov	r7, r5
 800a9e6:	2501      	movs	r5, #1
 800a9e8:	e7c3      	b.n	800a972 <__gethex+0x9e>
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	1cb1      	adds	r1, r6, #2
 800a9ee:	e7cc      	b.n	800a98a <__gethex+0xb6>
 800a9f0:	2401      	movs	r4, #1
 800a9f2:	e7fb      	b.n	800a9ec <__gethex+0x118>
 800a9f4:	fb03 0002 	mla	r0, r3, r2, r0
 800a9f8:	e7ce      	b.n	800a998 <__gethex+0xc4>
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	e7de      	b.n	800a9bc <__gethex+0xe8>
 800a9fe:	eba6 0309 	sub.w	r3, r6, r9
 800aa02:	3b01      	subs	r3, #1
 800aa04:	4629      	mov	r1, r5
 800aa06:	2b07      	cmp	r3, #7
 800aa08:	dc0a      	bgt.n	800aa20 <__gethex+0x14c>
 800aa0a:	9801      	ldr	r0, [sp, #4]
 800aa0c:	f7fe f93c 	bl	8008c88 <_Balloc>
 800aa10:	4604      	mov	r4, r0
 800aa12:	b940      	cbnz	r0, 800aa26 <__gethex+0x152>
 800aa14:	4b5c      	ldr	r3, [pc, #368]	@ (800ab88 <__gethex+0x2b4>)
 800aa16:	4602      	mov	r2, r0
 800aa18:	21e4      	movs	r1, #228	@ 0xe4
 800aa1a:	485c      	ldr	r0, [pc, #368]	@ (800ab8c <__gethex+0x2b8>)
 800aa1c:	f7ff fec0 	bl	800a7a0 <__assert_func>
 800aa20:	3101      	adds	r1, #1
 800aa22:	105b      	asrs	r3, r3, #1
 800aa24:	e7ef      	b.n	800aa06 <__gethex+0x132>
 800aa26:	f100 0a14 	add.w	sl, r0, #20
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4655      	mov	r5, sl
 800aa2e:	469b      	mov	fp, r3
 800aa30:	45b1      	cmp	r9, r6
 800aa32:	d337      	bcc.n	800aaa4 <__gethex+0x1d0>
 800aa34:	f845 bb04 	str.w	fp, [r5], #4
 800aa38:	eba5 050a 	sub.w	r5, r5, sl
 800aa3c:	10ad      	asrs	r5, r5, #2
 800aa3e:	6125      	str	r5, [r4, #16]
 800aa40:	4658      	mov	r0, fp
 800aa42:	f7fe fa13 	bl	8008e6c <__hi0bits>
 800aa46:	016d      	lsls	r5, r5, #5
 800aa48:	f8d8 6000 	ldr.w	r6, [r8]
 800aa4c:	1a2d      	subs	r5, r5, r0
 800aa4e:	42b5      	cmp	r5, r6
 800aa50:	dd54      	ble.n	800aafc <__gethex+0x228>
 800aa52:	1bad      	subs	r5, r5, r6
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7fe fda7 	bl	80095aa <__any_on>
 800aa5c:	4681      	mov	r9, r0
 800aa5e:	b178      	cbz	r0, 800aa80 <__gethex+0x1ac>
 800aa60:	1e6b      	subs	r3, r5, #1
 800aa62:	1159      	asrs	r1, r3, #5
 800aa64:	f003 021f 	and.w	r2, r3, #31
 800aa68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa6c:	f04f 0901 	mov.w	r9, #1
 800aa70:	fa09 f202 	lsl.w	r2, r9, r2
 800aa74:	420a      	tst	r2, r1
 800aa76:	d003      	beq.n	800aa80 <__gethex+0x1ac>
 800aa78:	454b      	cmp	r3, r9
 800aa7a:	dc36      	bgt.n	800aaea <__gethex+0x216>
 800aa7c:	f04f 0902 	mov.w	r9, #2
 800aa80:	4629      	mov	r1, r5
 800aa82:	4620      	mov	r0, r4
 800aa84:	f7ff febe 	bl	800a804 <rshift>
 800aa88:	442f      	add	r7, r5
 800aa8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa8e:	42bb      	cmp	r3, r7
 800aa90:	da42      	bge.n	800ab18 <__gethex+0x244>
 800aa92:	9801      	ldr	r0, [sp, #4]
 800aa94:	4621      	mov	r1, r4
 800aa96:	f7fe f937 	bl	8008d08 <_Bfree>
 800aa9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	25a3      	movs	r5, #163	@ 0xa3
 800aaa2:	e793      	b.n	800a9cc <__gethex+0xf8>
 800aaa4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aaa8:	2a2e      	cmp	r2, #46	@ 0x2e
 800aaaa:	d012      	beq.n	800aad2 <__gethex+0x1fe>
 800aaac:	2b20      	cmp	r3, #32
 800aaae:	d104      	bne.n	800aaba <__gethex+0x1e6>
 800aab0:	f845 bb04 	str.w	fp, [r5], #4
 800aab4:	f04f 0b00 	mov.w	fp, #0
 800aab8:	465b      	mov	r3, fp
 800aaba:	7830      	ldrb	r0, [r6, #0]
 800aabc:	9303      	str	r3, [sp, #12]
 800aabe:	f7ff fef3 	bl	800a8a8 <__hexdig_fun>
 800aac2:	9b03      	ldr	r3, [sp, #12]
 800aac4:	f000 000f 	and.w	r0, r0, #15
 800aac8:	4098      	lsls	r0, r3
 800aaca:	ea4b 0b00 	orr.w	fp, fp, r0
 800aace:	3304      	adds	r3, #4
 800aad0:	e7ae      	b.n	800aa30 <__gethex+0x15c>
 800aad2:	45b1      	cmp	r9, r6
 800aad4:	d8ea      	bhi.n	800aaac <__gethex+0x1d8>
 800aad6:	492b      	ldr	r1, [pc, #172]	@ (800ab84 <__gethex+0x2b0>)
 800aad8:	9303      	str	r3, [sp, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	4630      	mov	r0, r6
 800aade:	f7ff fe27 	bl	800a730 <strncmp>
 800aae2:	9b03      	ldr	r3, [sp, #12]
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d1e1      	bne.n	800aaac <__gethex+0x1d8>
 800aae8:	e7a2      	b.n	800aa30 <__gethex+0x15c>
 800aaea:	1ea9      	subs	r1, r5, #2
 800aaec:	4620      	mov	r0, r4
 800aaee:	f7fe fd5c 	bl	80095aa <__any_on>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d0c2      	beq.n	800aa7c <__gethex+0x1a8>
 800aaf6:	f04f 0903 	mov.w	r9, #3
 800aafa:	e7c1      	b.n	800aa80 <__gethex+0x1ac>
 800aafc:	da09      	bge.n	800ab12 <__gethex+0x23e>
 800aafe:	1b75      	subs	r5, r6, r5
 800ab00:	4621      	mov	r1, r4
 800ab02:	9801      	ldr	r0, [sp, #4]
 800ab04:	462a      	mov	r2, r5
 800ab06:	f7fe fb17 	bl	8009138 <__lshift>
 800ab0a:	1b7f      	subs	r7, r7, r5
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	f100 0a14 	add.w	sl, r0, #20
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	e7b8      	b.n	800aa8a <__gethex+0x1b6>
 800ab18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab1c:	42bd      	cmp	r5, r7
 800ab1e:	dd6f      	ble.n	800ac00 <__gethex+0x32c>
 800ab20:	1bed      	subs	r5, r5, r7
 800ab22:	42ae      	cmp	r6, r5
 800ab24:	dc34      	bgt.n	800ab90 <__gethex+0x2bc>
 800ab26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d022      	beq.n	800ab74 <__gethex+0x2a0>
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d024      	beq.n	800ab7c <__gethex+0x2a8>
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d115      	bne.n	800ab62 <__gethex+0x28e>
 800ab36:	42ae      	cmp	r6, r5
 800ab38:	d113      	bne.n	800ab62 <__gethex+0x28e>
 800ab3a:	2e01      	cmp	r6, #1
 800ab3c:	d10b      	bne.n	800ab56 <__gethex+0x282>
 800ab3e:	9a02      	ldr	r2, [sp, #8]
 800ab40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	2301      	movs	r3, #1
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	f8ca 3000 	str.w	r3, [sl]
 800ab4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab50:	2562      	movs	r5, #98	@ 0x62
 800ab52:	601c      	str	r4, [r3, #0]
 800ab54:	e73a      	b.n	800a9cc <__gethex+0xf8>
 800ab56:	1e71      	subs	r1, r6, #1
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f7fe fd26 	bl	80095aa <__any_on>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d1ed      	bne.n	800ab3e <__gethex+0x26a>
 800ab62:	9801      	ldr	r0, [sp, #4]
 800ab64:	4621      	mov	r1, r4
 800ab66:	f7fe f8cf 	bl	8008d08 <_Bfree>
 800ab6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	2550      	movs	r5, #80	@ 0x50
 800ab72:	e72b      	b.n	800a9cc <__gethex+0xf8>
 800ab74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1f3      	bne.n	800ab62 <__gethex+0x28e>
 800ab7a:	e7e0      	b.n	800ab3e <__gethex+0x26a>
 800ab7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1dd      	bne.n	800ab3e <__gethex+0x26a>
 800ab82:	e7ee      	b.n	800ab62 <__gethex+0x28e>
 800ab84:	0800b728 	.word	0x0800b728
 800ab88:	0800b5bd 	.word	0x0800b5bd
 800ab8c:	0800b8d6 	.word	0x0800b8d6
 800ab90:	1e6f      	subs	r7, r5, #1
 800ab92:	f1b9 0f00 	cmp.w	r9, #0
 800ab96:	d130      	bne.n	800abfa <__gethex+0x326>
 800ab98:	b127      	cbz	r7, 800aba4 <__gethex+0x2d0>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7fe fd04 	bl	80095aa <__any_on>
 800aba2:	4681      	mov	r9, r0
 800aba4:	117a      	asrs	r2, r7, #5
 800aba6:	2301      	movs	r3, #1
 800aba8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800abac:	f007 071f 	and.w	r7, r7, #31
 800abb0:	40bb      	lsls	r3, r7
 800abb2:	4213      	tst	r3, r2
 800abb4:	4629      	mov	r1, r5
 800abb6:	4620      	mov	r0, r4
 800abb8:	bf18      	it	ne
 800abba:	f049 0902 	orrne.w	r9, r9, #2
 800abbe:	f7ff fe21 	bl	800a804 <rshift>
 800abc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800abc6:	1b76      	subs	r6, r6, r5
 800abc8:	2502      	movs	r5, #2
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	d047      	beq.n	800ac60 <__gethex+0x38c>
 800abd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d015      	beq.n	800ac04 <__gethex+0x330>
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d017      	beq.n	800ac0c <__gethex+0x338>
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d109      	bne.n	800abf4 <__gethex+0x320>
 800abe0:	f019 0f02 	tst.w	r9, #2
 800abe4:	d006      	beq.n	800abf4 <__gethex+0x320>
 800abe6:	f8da 3000 	ldr.w	r3, [sl]
 800abea:	ea49 0903 	orr.w	r9, r9, r3
 800abee:	f019 0f01 	tst.w	r9, #1
 800abf2:	d10e      	bne.n	800ac12 <__gethex+0x33e>
 800abf4:	f045 0510 	orr.w	r5, r5, #16
 800abf8:	e032      	b.n	800ac60 <__gethex+0x38c>
 800abfa:	f04f 0901 	mov.w	r9, #1
 800abfe:	e7d1      	b.n	800aba4 <__gethex+0x2d0>
 800ac00:	2501      	movs	r5, #1
 800ac02:	e7e2      	b.n	800abca <__gethex+0x2f6>
 800ac04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac06:	f1c3 0301 	rsb	r3, r3, #1
 800ac0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0f0      	beq.n	800abf4 <__gethex+0x320>
 800ac12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac16:	f104 0314 	add.w	r3, r4, #20
 800ac1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac22:	f04f 0c00 	mov.w	ip, #0
 800ac26:	4618      	mov	r0, r3
 800ac28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac30:	d01b      	beq.n	800ac6a <__gethex+0x396>
 800ac32:	3201      	adds	r2, #1
 800ac34:	6002      	str	r2, [r0, #0]
 800ac36:	2d02      	cmp	r5, #2
 800ac38:	f104 0314 	add.w	r3, r4, #20
 800ac3c:	d13c      	bne.n	800acb8 <__gethex+0x3e4>
 800ac3e:	f8d8 2000 	ldr.w	r2, [r8]
 800ac42:	3a01      	subs	r2, #1
 800ac44:	42b2      	cmp	r2, r6
 800ac46:	d109      	bne.n	800ac5c <__gethex+0x388>
 800ac48:	1171      	asrs	r1, r6, #5
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac50:	f006 061f 	and.w	r6, r6, #31
 800ac54:	fa02 f606 	lsl.w	r6, r2, r6
 800ac58:	421e      	tst	r6, r3
 800ac5a:	d13a      	bne.n	800acd2 <__gethex+0x3fe>
 800ac5c:	f045 0520 	orr.w	r5, r5, #32
 800ac60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac62:	601c      	str	r4, [r3, #0]
 800ac64:	9b02      	ldr	r3, [sp, #8]
 800ac66:	601f      	str	r7, [r3, #0]
 800ac68:	e6b0      	b.n	800a9cc <__gethex+0xf8>
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac70:	d8d9      	bhi.n	800ac26 <__gethex+0x352>
 800ac72:	68a3      	ldr	r3, [r4, #8]
 800ac74:	459b      	cmp	fp, r3
 800ac76:	db17      	blt.n	800aca8 <__gethex+0x3d4>
 800ac78:	6861      	ldr	r1, [r4, #4]
 800ac7a:	9801      	ldr	r0, [sp, #4]
 800ac7c:	3101      	adds	r1, #1
 800ac7e:	f7fe f803 	bl	8008c88 <_Balloc>
 800ac82:	4681      	mov	r9, r0
 800ac84:	b918      	cbnz	r0, 800ac8e <__gethex+0x3ba>
 800ac86:	4b1a      	ldr	r3, [pc, #104]	@ (800acf0 <__gethex+0x41c>)
 800ac88:	4602      	mov	r2, r0
 800ac8a:	2184      	movs	r1, #132	@ 0x84
 800ac8c:	e6c5      	b.n	800aa1a <__gethex+0x146>
 800ac8e:	6922      	ldr	r2, [r4, #16]
 800ac90:	3202      	adds	r2, #2
 800ac92:	f104 010c 	add.w	r1, r4, #12
 800ac96:	0092      	lsls	r2, r2, #2
 800ac98:	300c      	adds	r0, #12
 800ac9a:	f7ff fd6b 	bl	800a774 <memcpy>
 800ac9e:	4621      	mov	r1, r4
 800aca0:	9801      	ldr	r0, [sp, #4]
 800aca2:	f7fe f831 	bl	8008d08 <_Bfree>
 800aca6:	464c      	mov	r4, r9
 800aca8:	6923      	ldr	r3, [r4, #16]
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acb0:	6122      	str	r2, [r4, #16]
 800acb2:	2201      	movs	r2, #1
 800acb4:	615a      	str	r2, [r3, #20]
 800acb6:	e7be      	b.n	800ac36 <__gethex+0x362>
 800acb8:	6922      	ldr	r2, [r4, #16]
 800acba:	455a      	cmp	r2, fp
 800acbc:	dd0b      	ble.n	800acd6 <__gethex+0x402>
 800acbe:	2101      	movs	r1, #1
 800acc0:	4620      	mov	r0, r4
 800acc2:	f7ff fd9f 	bl	800a804 <rshift>
 800acc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acca:	3701      	adds	r7, #1
 800accc:	42bb      	cmp	r3, r7
 800acce:	f6ff aee0 	blt.w	800aa92 <__gethex+0x1be>
 800acd2:	2501      	movs	r5, #1
 800acd4:	e7c2      	b.n	800ac5c <__gethex+0x388>
 800acd6:	f016 061f 	ands.w	r6, r6, #31
 800acda:	d0fa      	beq.n	800acd2 <__gethex+0x3fe>
 800acdc:	4453      	add	r3, sl
 800acde:	f1c6 0620 	rsb	r6, r6, #32
 800ace2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ace6:	f7fe f8c1 	bl	8008e6c <__hi0bits>
 800acea:	42b0      	cmp	r0, r6
 800acec:	dbe7      	blt.n	800acbe <__gethex+0x3ea>
 800acee:	e7f0      	b.n	800acd2 <__gethex+0x3fe>
 800acf0:	0800b5bd 	.word	0x0800b5bd

0800acf4 <L_shift>:
 800acf4:	f1c2 0208 	rsb	r2, r2, #8
 800acf8:	0092      	lsls	r2, r2, #2
 800acfa:	b570      	push	{r4, r5, r6, lr}
 800acfc:	f1c2 0620 	rsb	r6, r2, #32
 800ad00:	6843      	ldr	r3, [r0, #4]
 800ad02:	6804      	ldr	r4, [r0, #0]
 800ad04:	fa03 f506 	lsl.w	r5, r3, r6
 800ad08:	432c      	orrs	r4, r5
 800ad0a:	40d3      	lsrs	r3, r2
 800ad0c:	6004      	str	r4, [r0, #0]
 800ad0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad12:	4288      	cmp	r0, r1
 800ad14:	d3f4      	bcc.n	800ad00 <L_shift+0xc>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}

0800ad18 <__match>:
 800ad18:	b530      	push	{r4, r5, lr}
 800ad1a:	6803      	ldr	r3, [r0, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad22:	b914      	cbnz	r4, 800ad2a <__match+0x12>
 800ad24:	6003      	str	r3, [r0, #0]
 800ad26:	2001      	movs	r0, #1
 800ad28:	bd30      	pop	{r4, r5, pc}
 800ad2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ad32:	2d19      	cmp	r5, #25
 800ad34:	bf98      	it	ls
 800ad36:	3220      	addls	r2, #32
 800ad38:	42a2      	cmp	r2, r4
 800ad3a:	d0f0      	beq.n	800ad1e <__match+0x6>
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e7f3      	b.n	800ad28 <__match+0x10>

0800ad40 <__hexnan>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	680b      	ldr	r3, [r1, #0]
 800ad46:	6801      	ldr	r1, [r0, #0]
 800ad48:	115e      	asrs	r6, r3, #5
 800ad4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad4e:	f013 031f 	ands.w	r3, r3, #31
 800ad52:	b087      	sub	sp, #28
 800ad54:	bf18      	it	ne
 800ad56:	3604      	addne	r6, #4
 800ad58:	2500      	movs	r5, #0
 800ad5a:	1f37      	subs	r7, r6, #4
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	4690      	mov	r8, r2
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad66:	46b9      	mov	r9, r7
 800ad68:	463c      	mov	r4, r7
 800ad6a:	9502      	str	r5, [sp, #8]
 800ad6c:	46ab      	mov	fp, r5
 800ad6e:	784a      	ldrb	r2, [r1, #1]
 800ad70:	1c4b      	adds	r3, r1, #1
 800ad72:	9303      	str	r3, [sp, #12]
 800ad74:	b342      	cbz	r2, 800adc8 <__hexnan+0x88>
 800ad76:	4610      	mov	r0, r2
 800ad78:	9105      	str	r1, [sp, #20]
 800ad7a:	9204      	str	r2, [sp, #16]
 800ad7c:	f7ff fd94 	bl	800a8a8 <__hexdig_fun>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d151      	bne.n	800ae28 <__hexnan+0xe8>
 800ad84:	9a04      	ldr	r2, [sp, #16]
 800ad86:	9905      	ldr	r1, [sp, #20]
 800ad88:	2a20      	cmp	r2, #32
 800ad8a:	d818      	bhi.n	800adbe <__hexnan+0x7e>
 800ad8c:	9b02      	ldr	r3, [sp, #8]
 800ad8e:	459b      	cmp	fp, r3
 800ad90:	dd13      	ble.n	800adba <__hexnan+0x7a>
 800ad92:	454c      	cmp	r4, r9
 800ad94:	d206      	bcs.n	800ada4 <__hexnan+0x64>
 800ad96:	2d07      	cmp	r5, #7
 800ad98:	dc04      	bgt.n	800ada4 <__hexnan+0x64>
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7ff ffa8 	bl	800acf4 <L_shift>
 800ada4:	4544      	cmp	r4, r8
 800ada6:	d952      	bls.n	800ae4e <__hexnan+0x10e>
 800ada8:	2300      	movs	r3, #0
 800adaa:	f1a4 0904 	sub.w	r9, r4, #4
 800adae:	f844 3c04 	str.w	r3, [r4, #-4]
 800adb2:	f8cd b008 	str.w	fp, [sp, #8]
 800adb6:	464c      	mov	r4, r9
 800adb8:	461d      	mov	r5, r3
 800adba:	9903      	ldr	r1, [sp, #12]
 800adbc:	e7d7      	b.n	800ad6e <__hexnan+0x2e>
 800adbe:	2a29      	cmp	r2, #41	@ 0x29
 800adc0:	d157      	bne.n	800ae72 <__hexnan+0x132>
 800adc2:	3102      	adds	r1, #2
 800adc4:	f8ca 1000 	str.w	r1, [sl]
 800adc8:	f1bb 0f00 	cmp.w	fp, #0
 800adcc:	d051      	beq.n	800ae72 <__hexnan+0x132>
 800adce:	454c      	cmp	r4, r9
 800add0:	d206      	bcs.n	800ade0 <__hexnan+0xa0>
 800add2:	2d07      	cmp	r5, #7
 800add4:	dc04      	bgt.n	800ade0 <__hexnan+0xa0>
 800add6:	462a      	mov	r2, r5
 800add8:	4649      	mov	r1, r9
 800adda:	4620      	mov	r0, r4
 800addc:	f7ff ff8a 	bl	800acf4 <L_shift>
 800ade0:	4544      	cmp	r4, r8
 800ade2:	d936      	bls.n	800ae52 <__hexnan+0x112>
 800ade4:	f1a8 0204 	sub.w	r2, r8, #4
 800ade8:	4623      	mov	r3, r4
 800adea:	f853 1b04 	ldr.w	r1, [r3], #4
 800adee:	f842 1f04 	str.w	r1, [r2, #4]!
 800adf2:	429f      	cmp	r7, r3
 800adf4:	d2f9      	bcs.n	800adea <__hexnan+0xaa>
 800adf6:	1b3b      	subs	r3, r7, r4
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	3304      	adds	r3, #4
 800adfe:	3401      	adds	r4, #1
 800ae00:	3e03      	subs	r6, #3
 800ae02:	42b4      	cmp	r4, r6
 800ae04:	bf88      	it	hi
 800ae06:	2304      	movhi	r3, #4
 800ae08:	4443      	add	r3, r8
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f843 2b04 	str.w	r2, [r3], #4
 800ae10:	429f      	cmp	r7, r3
 800ae12:	d2fb      	bcs.n	800ae0c <__hexnan+0xcc>
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	b91b      	cbnz	r3, 800ae20 <__hexnan+0xe0>
 800ae18:	4547      	cmp	r7, r8
 800ae1a:	d128      	bne.n	800ae6e <__hexnan+0x12e>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	603b      	str	r3, [r7, #0]
 800ae20:	2005      	movs	r0, #5
 800ae22:	b007      	add	sp, #28
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	3501      	adds	r5, #1
 800ae2a:	2d08      	cmp	r5, #8
 800ae2c:	f10b 0b01 	add.w	fp, fp, #1
 800ae30:	dd06      	ble.n	800ae40 <__hexnan+0x100>
 800ae32:	4544      	cmp	r4, r8
 800ae34:	d9c1      	bls.n	800adba <__hexnan+0x7a>
 800ae36:	2300      	movs	r3, #0
 800ae38:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae3c:	2501      	movs	r5, #1
 800ae3e:	3c04      	subs	r4, #4
 800ae40:	6822      	ldr	r2, [r4, #0]
 800ae42:	f000 000f 	and.w	r0, r0, #15
 800ae46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae4a:	6020      	str	r0, [r4, #0]
 800ae4c:	e7b5      	b.n	800adba <__hexnan+0x7a>
 800ae4e:	2508      	movs	r5, #8
 800ae50:	e7b3      	b.n	800adba <__hexnan+0x7a>
 800ae52:	9b01      	ldr	r3, [sp, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0dd      	beq.n	800ae14 <__hexnan+0xd4>
 800ae58:	f1c3 0320 	rsb	r3, r3, #32
 800ae5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae60:	40da      	lsrs	r2, r3
 800ae62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae66:	4013      	ands	r3, r2
 800ae68:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae6c:	e7d2      	b.n	800ae14 <__hexnan+0xd4>
 800ae6e:	3f04      	subs	r7, #4
 800ae70:	e7d0      	b.n	800ae14 <__hexnan+0xd4>
 800ae72:	2004      	movs	r0, #4
 800ae74:	e7d5      	b.n	800ae22 <__hexnan+0xe2>

0800ae76 <__ascii_mbtowc>:
 800ae76:	b082      	sub	sp, #8
 800ae78:	b901      	cbnz	r1, 800ae7c <__ascii_mbtowc+0x6>
 800ae7a:	a901      	add	r1, sp, #4
 800ae7c:	b142      	cbz	r2, 800ae90 <__ascii_mbtowc+0x1a>
 800ae7e:	b14b      	cbz	r3, 800ae94 <__ascii_mbtowc+0x1e>
 800ae80:	7813      	ldrb	r3, [r2, #0]
 800ae82:	600b      	str	r3, [r1, #0]
 800ae84:	7812      	ldrb	r2, [r2, #0]
 800ae86:	1e10      	subs	r0, r2, #0
 800ae88:	bf18      	it	ne
 800ae8a:	2001      	movne	r0, #1
 800ae8c:	b002      	add	sp, #8
 800ae8e:	4770      	bx	lr
 800ae90:	4610      	mov	r0, r2
 800ae92:	e7fb      	b.n	800ae8c <__ascii_mbtowc+0x16>
 800ae94:	f06f 0001 	mvn.w	r0, #1
 800ae98:	e7f8      	b.n	800ae8c <__ascii_mbtowc+0x16>

0800ae9a <_realloc_r>:
 800ae9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9e:	4680      	mov	r8, r0
 800aea0:	4615      	mov	r5, r2
 800aea2:	460c      	mov	r4, r1
 800aea4:	b921      	cbnz	r1, 800aeb0 <_realloc_r+0x16>
 800aea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeaa:	4611      	mov	r1, r2
 800aeac:	f7fd be60 	b.w	8008b70 <_malloc_r>
 800aeb0:	b92a      	cbnz	r2, 800aebe <_realloc_r+0x24>
 800aeb2:	f7fd fde9 	bl	8008a88 <_free_r>
 800aeb6:	2400      	movs	r4, #0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aebe:	f000 f840 	bl	800af42 <_malloc_usable_size_r>
 800aec2:	4285      	cmp	r5, r0
 800aec4:	4606      	mov	r6, r0
 800aec6:	d802      	bhi.n	800aece <_realloc_r+0x34>
 800aec8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aecc:	d8f4      	bhi.n	800aeb8 <_realloc_r+0x1e>
 800aece:	4629      	mov	r1, r5
 800aed0:	4640      	mov	r0, r8
 800aed2:	f7fd fe4d 	bl	8008b70 <_malloc_r>
 800aed6:	4607      	mov	r7, r0
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d0ec      	beq.n	800aeb6 <_realloc_r+0x1c>
 800aedc:	42b5      	cmp	r5, r6
 800aede:	462a      	mov	r2, r5
 800aee0:	4621      	mov	r1, r4
 800aee2:	bf28      	it	cs
 800aee4:	4632      	movcs	r2, r6
 800aee6:	f7ff fc45 	bl	800a774 <memcpy>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4640      	mov	r0, r8
 800aeee:	f7fd fdcb 	bl	8008a88 <_free_r>
 800aef2:	463c      	mov	r4, r7
 800aef4:	e7e0      	b.n	800aeb8 <_realloc_r+0x1e>

0800aef6 <__ascii_wctomb>:
 800aef6:	4603      	mov	r3, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	b141      	cbz	r1, 800af0e <__ascii_wctomb+0x18>
 800aefc:	2aff      	cmp	r2, #255	@ 0xff
 800aefe:	d904      	bls.n	800af0a <__ascii_wctomb+0x14>
 800af00:	228a      	movs	r2, #138	@ 0x8a
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	4770      	bx	lr
 800af0a:	700a      	strb	r2, [r1, #0]
 800af0c:	2001      	movs	r0, #1
 800af0e:	4770      	bx	lr

0800af10 <fiprintf>:
 800af10:	b40e      	push	{r1, r2, r3}
 800af12:	b503      	push	{r0, r1, lr}
 800af14:	4601      	mov	r1, r0
 800af16:	ab03      	add	r3, sp, #12
 800af18:	4805      	ldr	r0, [pc, #20]	@ (800af30 <fiprintf+0x20>)
 800af1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af1e:	6800      	ldr	r0, [r0, #0]
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	f000 f83f 	bl	800afa4 <_vfiprintf_r>
 800af26:	b002      	add	sp, #8
 800af28:	f85d eb04 	ldr.w	lr, [sp], #4
 800af2c:	b003      	add	sp, #12
 800af2e:	4770      	bx	lr
 800af30:	20000018 	.word	0x20000018

0800af34 <abort>:
 800af34:	b508      	push	{r3, lr}
 800af36:	2006      	movs	r0, #6
 800af38:	f000 fa08 	bl	800b34c <raise>
 800af3c:	2001      	movs	r0, #1
 800af3e:	f7f7 f8c7 	bl	80020d0 <_exit>

0800af42 <_malloc_usable_size_r>:
 800af42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af46:	1f18      	subs	r0, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfbc      	itt	lt
 800af4c:	580b      	ldrlt	r3, [r1, r0]
 800af4e:	18c0      	addlt	r0, r0, r3
 800af50:	4770      	bx	lr

0800af52 <__sfputc_r>:
 800af52:	6893      	ldr	r3, [r2, #8]
 800af54:	3b01      	subs	r3, #1
 800af56:	2b00      	cmp	r3, #0
 800af58:	b410      	push	{r4}
 800af5a:	6093      	str	r3, [r2, #8]
 800af5c:	da08      	bge.n	800af70 <__sfputc_r+0x1e>
 800af5e:	6994      	ldr	r4, [r2, #24]
 800af60:	42a3      	cmp	r3, r4
 800af62:	db01      	blt.n	800af68 <__sfputc_r+0x16>
 800af64:	290a      	cmp	r1, #10
 800af66:	d103      	bne.n	800af70 <__sfputc_r+0x1e>
 800af68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af6c:	f000 b932 	b.w	800b1d4 <__swbuf_r>
 800af70:	6813      	ldr	r3, [r2, #0]
 800af72:	1c58      	adds	r0, r3, #1
 800af74:	6010      	str	r0, [r2, #0]
 800af76:	7019      	strb	r1, [r3, #0]
 800af78:	4608      	mov	r0, r1
 800af7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <__sfputs_r>:
 800af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af82:	4606      	mov	r6, r0
 800af84:	460f      	mov	r7, r1
 800af86:	4614      	mov	r4, r2
 800af88:	18d5      	adds	r5, r2, r3
 800af8a:	42ac      	cmp	r4, r5
 800af8c:	d101      	bne.n	800af92 <__sfputs_r+0x12>
 800af8e:	2000      	movs	r0, #0
 800af90:	e007      	b.n	800afa2 <__sfputs_r+0x22>
 800af92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af96:	463a      	mov	r2, r7
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff ffda 	bl	800af52 <__sfputc_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d1f3      	bne.n	800af8a <__sfputs_r+0xa>
 800afa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afa4 <_vfiprintf_r>:
 800afa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa8:	460d      	mov	r5, r1
 800afaa:	b09d      	sub	sp, #116	@ 0x74
 800afac:	4614      	mov	r4, r2
 800afae:	4698      	mov	r8, r3
 800afb0:	4606      	mov	r6, r0
 800afb2:	b118      	cbz	r0, 800afbc <_vfiprintf_r+0x18>
 800afb4:	6a03      	ldr	r3, [r0, #32]
 800afb6:	b90b      	cbnz	r3, 800afbc <_vfiprintf_r+0x18>
 800afb8:	f7fc fdfa 	bl	8007bb0 <__sinit>
 800afbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afbe:	07d9      	lsls	r1, r3, #31
 800afc0:	d405      	bmi.n	800afce <_vfiprintf_r+0x2a>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	059a      	lsls	r2, r3, #22
 800afc6:	d402      	bmi.n	800afce <_vfiprintf_r+0x2a>
 800afc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afca:	f7fc ff08 	bl	8007dde <__retarget_lock_acquire_recursive>
 800afce:	89ab      	ldrh	r3, [r5, #12]
 800afd0:	071b      	lsls	r3, r3, #28
 800afd2:	d501      	bpl.n	800afd8 <_vfiprintf_r+0x34>
 800afd4:	692b      	ldr	r3, [r5, #16]
 800afd6:	b99b      	cbnz	r3, 800b000 <_vfiprintf_r+0x5c>
 800afd8:	4629      	mov	r1, r5
 800afda:	4630      	mov	r0, r6
 800afdc:	f000 f938 	bl	800b250 <__swsetup_r>
 800afe0:	b170      	cbz	r0, 800b000 <_vfiprintf_r+0x5c>
 800afe2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afe4:	07dc      	lsls	r4, r3, #31
 800afe6:	d504      	bpl.n	800aff2 <_vfiprintf_r+0x4e>
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	b01d      	add	sp, #116	@ 0x74
 800afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	0598      	lsls	r0, r3, #22
 800aff6:	d4f7      	bmi.n	800afe8 <_vfiprintf_r+0x44>
 800aff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800affa:	f7fc fef1 	bl	8007de0 <__retarget_lock_release_recursive>
 800affe:	e7f3      	b.n	800afe8 <_vfiprintf_r+0x44>
 800b000:	2300      	movs	r3, #0
 800b002:	9309      	str	r3, [sp, #36]	@ 0x24
 800b004:	2320      	movs	r3, #32
 800b006:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b00a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b00e:	2330      	movs	r3, #48	@ 0x30
 800b010:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1c0 <_vfiprintf_r+0x21c>
 800b014:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b018:	f04f 0901 	mov.w	r9, #1
 800b01c:	4623      	mov	r3, r4
 800b01e:	469a      	mov	sl, r3
 800b020:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b024:	b10a      	cbz	r2, 800b02a <_vfiprintf_r+0x86>
 800b026:	2a25      	cmp	r2, #37	@ 0x25
 800b028:	d1f9      	bne.n	800b01e <_vfiprintf_r+0x7a>
 800b02a:	ebba 0b04 	subs.w	fp, sl, r4
 800b02e:	d00b      	beq.n	800b048 <_vfiprintf_r+0xa4>
 800b030:	465b      	mov	r3, fp
 800b032:	4622      	mov	r2, r4
 800b034:	4629      	mov	r1, r5
 800b036:	4630      	mov	r0, r6
 800b038:	f7ff ffa2 	bl	800af80 <__sfputs_r>
 800b03c:	3001      	adds	r0, #1
 800b03e:	f000 80a7 	beq.w	800b190 <_vfiprintf_r+0x1ec>
 800b042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b044:	445a      	add	r2, fp
 800b046:	9209      	str	r2, [sp, #36]	@ 0x24
 800b048:	f89a 3000 	ldrb.w	r3, [sl]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 809f 	beq.w	800b190 <_vfiprintf_r+0x1ec>
 800b052:	2300      	movs	r3, #0
 800b054:	f04f 32ff 	mov.w	r2, #4294967295
 800b058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b05c:	f10a 0a01 	add.w	sl, sl, #1
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b068:	931a      	str	r3, [sp, #104]	@ 0x68
 800b06a:	4654      	mov	r4, sl
 800b06c:	2205      	movs	r2, #5
 800b06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b072:	4853      	ldr	r0, [pc, #332]	@ (800b1c0 <_vfiprintf_r+0x21c>)
 800b074:	f7f5 f8ac 	bl	80001d0 <memchr>
 800b078:	9a04      	ldr	r2, [sp, #16]
 800b07a:	b9d8      	cbnz	r0, 800b0b4 <_vfiprintf_r+0x110>
 800b07c:	06d1      	lsls	r1, r2, #27
 800b07e:	bf44      	itt	mi
 800b080:	2320      	movmi	r3, #32
 800b082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b086:	0713      	lsls	r3, r2, #28
 800b088:	bf44      	itt	mi
 800b08a:	232b      	movmi	r3, #43	@ 0x2b
 800b08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b090:	f89a 3000 	ldrb.w	r3, [sl]
 800b094:	2b2a      	cmp	r3, #42	@ 0x2a
 800b096:	d015      	beq.n	800b0c4 <_vfiprintf_r+0x120>
 800b098:	9a07      	ldr	r2, [sp, #28]
 800b09a:	4654      	mov	r4, sl
 800b09c:	2000      	movs	r0, #0
 800b09e:	f04f 0c0a 	mov.w	ip, #10
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a8:	3b30      	subs	r3, #48	@ 0x30
 800b0aa:	2b09      	cmp	r3, #9
 800b0ac:	d94b      	bls.n	800b146 <_vfiprintf_r+0x1a2>
 800b0ae:	b1b0      	cbz	r0, 800b0de <_vfiprintf_r+0x13a>
 800b0b0:	9207      	str	r2, [sp, #28]
 800b0b2:	e014      	b.n	800b0de <_vfiprintf_r+0x13a>
 800b0b4:	eba0 0308 	sub.w	r3, r0, r8
 800b0b8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	9304      	str	r3, [sp, #16]
 800b0c0:	46a2      	mov	sl, r4
 800b0c2:	e7d2      	b.n	800b06a <_vfiprintf_r+0xc6>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	1d19      	adds	r1, r3, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	9103      	str	r1, [sp, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bfbb      	ittet	lt
 800b0d0:	425b      	neglt	r3, r3
 800b0d2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0d6:	9307      	strge	r3, [sp, #28]
 800b0d8:	9307      	strlt	r3, [sp, #28]
 800b0da:	bfb8      	it	lt
 800b0dc:	9204      	strlt	r2, [sp, #16]
 800b0de:	7823      	ldrb	r3, [r4, #0]
 800b0e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0e2:	d10a      	bne.n	800b0fa <_vfiprintf_r+0x156>
 800b0e4:	7863      	ldrb	r3, [r4, #1]
 800b0e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0e8:	d132      	bne.n	800b150 <_vfiprintf_r+0x1ac>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	1d1a      	adds	r2, r3, #4
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	9203      	str	r2, [sp, #12]
 800b0f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0f6:	3402      	adds	r4, #2
 800b0f8:	9305      	str	r3, [sp, #20]
 800b0fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b1d0 <_vfiprintf_r+0x22c>
 800b0fe:	7821      	ldrb	r1, [r4, #0]
 800b100:	2203      	movs	r2, #3
 800b102:	4650      	mov	r0, sl
 800b104:	f7f5 f864 	bl	80001d0 <memchr>
 800b108:	b138      	cbz	r0, 800b11a <_vfiprintf_r+0x176>
 800b10a:	9b04      	ldr	r3, [sp, #16]
 800b10c:	eba0 000a 	sub.w	r0, r0, sl
 800b110:	2240      	movs	r2, #64	@ 0x40
 800b112:	4082      	lsls	r2, r0
 800b114:	4313      	orrs	r3, r2
 800b116:	3401      	adds	r4, #1
 800b118:	9304      	str	r3, [sp, #16]
 800b11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11e:	4829      	ldr	r0, [pc, #164]	@ (800b1c4 <_vfiprintf_r+0x220>)
 800b120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b124:	2206      	movs	r2, #6
 800b126:	f7f5 f853 	bl	80001d0 <memchr>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d03f      	beq.n	800b1ae <_vfiprintf_r+0x20a>
 800b12e:	4b26      	ldr	r3, [pc, #152]	@ (800b1c8 <_vfiprintf_r+0x224>)
 800b130:	bb1b      	cbnz	r3, 800b17a <_vfiprintf_r+0x1d6>
 800b132:	9b03      	ldr	r3, [sp, #12]
 800b134:	3307      	adds	r3, #7
 800b136:	f023 0307 	bic.w	r3, r3, #7
 800b13a:	3308      	adds	r3, #8
 800b13c:	9303      	str	r3, [sp, #12]
 800b13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b140:	443b      	add	r3, r7
 800b142:	9309      	str	r3, [sp, #36]	@ 0x24
 800b144:	e76a      	b.n	800b01c <_vfiprintf_r+0x78>
 800b146:	fb0c 3202 	mla	r2, ip, r2, r3
 800b14a:	460c      	mov	r4, r1
 800b14c:	2001      	movs	r0, #1
 800b14e:	e7a8      	b.n	800b0a2 <_vfiprintf_r+0xfe>
 800b150:	2300      	movs	r3, #0
 800b152:	3401      	adds	r4, #1
 800b154:	9305      	str	r3, [sp, #20]
 800b156:	4619      	mov	r1, r3
 800b158:	f04f 0c0a 	mov.w	ip, #10
 800b15c:	4620      	mov	r0, r4
 800b15e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b162:	3a30      	subs	r2, #48	@ 0x30
 800b164:	2a09      	cmp	r2, #9
 800b166:	d903      	bls.n	800b170 <_vfiprintf_r+0x1cc>
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0c6      	beq.n	800b0fa <_vfiprintf_r+0x156>
 800b16c:	9105      	str	r1, [sp, #20]
 800b16e:	e7c4      	b.n	800b0fa <_vfiprintf_r+0x156>
 800b170:	fb0c 2101 	mla	r1, ip, r1, r2
 800b174:	4604      	mov	r4, r0
 800b176:	2301      	movs	r3, #1
 800b178:	e7f0      	b.n	800b15c <_vfiprintf_r+0x1b8>
 800b17a:	ab03      	add	r3, sp, #12
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	462a      	mov	r2, r5
 800b180:	4b12      	ldr	r3, [pc, #72]	@ (800b1cc <_vfiprintf_r+0x228>)
 800b182:	a904      	add	r1, sp, #16
 800b184:	4630      	mov	r0, r6
 800b186:	f7fb febb 	bl	8006f00 <_printf_float>
 800b18a:	4607      	mov	r7, r0
 800b18c:	1c78      	adds	r0, r7, #1
 800b18e:	d1d6      	bne.n	800b13e <_vfiprintf_r+0x19a>
 800b190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b192:	07d9      	lsls	r1, r3, #31
 800b194:	d405      	bmi.n	800b1a2 <_vfiprintf_r+0x1fe>
 800b196:	89ab      	ldrh	r3, [r5, #12]
 800b198:	059a      	lsls	r2, r3, #22
 800b19a:	d402      	bmi.n	800b1a2 <_vfiprintf_r+0x1fe>
 800b19c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b19e:	f7fc fe1f 	bl	8007de0 <__retarget_lock_release_recursive>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	065b      	lsls	r3, r3, #25
 800b1a6:	f53f af1f 	bmi.w	800afe8 <_vfiprintf_r+0x44>
 800b1aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1ac:	e71e      	b.n	800afec <_vfiprintf_r+0x48>
 800b1ae:	ab03      	add	r3, sp, #12
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	4b05      	ldr	r3, [pc, #20]	@ (800b1cc <_vfiprintf_r+0x228>)
 800b1b6:	a904      	add	r1, sp, #16
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7fc f939 	bl	8007430 <_printf_i>
 800b1be:	e7e4      	b.n	800b18a <_vfiprintf_r+0x1e6>
 800b1c0:	0800b881 	.word	0x0800b881
 800b1c4:	0800b88b 	.word	0x0800b88b
 800b1c8:	08006f01 	.word	0x08006f01
 800b1cc:	0800af81 	.word	0x0800af81
 800b1d0:	0800b887 	.word	0x0800b887

0800b1d4 <__swbuf_r>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	460e      	mov	r6, r1
 800b1d8:	4614      	mov	r4, r2
 800b1da:	4605      	mov	r5, r0
 800b1dc:	b118      	cbz	r0, 800b1e6 <__swbuf_r+0x12>
 800b1de:	6a03      	ldr	r3, [r0, #32]
 800b1e0:	b90b      	cbnz	r3, 800b1e6 <__swbuf_r+0x12>
 800b1e2:	f7fc fce5 	bl	8007bb0 <__sinit>
 800b1e6:	69a3      	ldr	r3, [r4, #24]
 800b1e8:	60a3      	str	r3, [r4, #8]
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	071a      	lsls	r2, r3, #28
 800b1ee:	d501      	bpl.n	800b1f4 <__swbuf_r+0x20>
 800b1f0:	6923      	ldr	r3, [r4, #16]
 800b1f2:	b943      	cbnz	r3, 800b206 <__swbuf_r+0x32>
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	f000 f82a 	bl	800b250 <__swsetup_r>
 800b1fc:	b118      	cbz	r0, 800b206 <__swbuf_r+0x32>
 800b1fe:	f04f 37ff 	mov.w	r7, #4294967295
 800b202:	4638      	mov	r0, r7
 800b204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	6922      	ldr	r2, [r4, #16]
 800b20a:	1a98      	subs	r0, r3, r2
 800b20c:	6963      	ldr	r3, [r4, #20]
 800b20e:	b2f6      	uxtb	r6, r6
 800b210:	4283      	cmp	r3, r0
 800b212:	4637      	mov	r7, r6
 800b214:	dc05      	bgt.n	800b222 <__swbuf_r+0x4e>
 800b216:	4621      	mov	r1, r4
 800b218:	4628      	mov	r0, r5
 800b21a:	f7ff fa47 	bl	800a6ac <_fflush_r>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d1ed      	bne.n	800b1fe <__swbuf_r+0x2a>
 800b222:	68a3      	ldr	r3, [r4, #8]
 800b224:	3b01      	subs	r3, #1
 800b226:	60a3      	str	r3, [r4, #8]
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	701e      	strb	r6, [r3, #0]
 800b230:	6962      	ldr	r2, [r4, #20]
 800b232:	1c43      	adds	r3, r0, #1
 800b234:	429a      	cmp	r2, r3
 800b236:	d004      	beq.n	800b242 <__swbuf_r+0x6e>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	07db      	lsls	r3, r3, #31
 800b23c:	d5e1      	bpl.n	800b202 <__swbuf_r+0x2e>
 800b23e:	2e0a      	cmp	r6, #10
 800b240:	d1df      	bne.n	800b202 <__swbuf_r+0x2e>
 800b242:	4621      	mov	r1, r4
 800b244:	4628      	mov	r0, r5
 800b246:	f7ff fa31 	bl	800a6ac <_fflush_r>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d0d9      	beq.n	800b202 <__swbuf_r+0x2e>
 800b24e:	e7d6      	b.n	800b1fe <__swbuf_r+0x2a>

0800b250 <__swsetup_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4b29      	ldr	r3, [pc, #164]	@ (800b2f8 <__swsetup_r+0xa8>)
 800b254:	4605      	mov	r5, r0
 800b256:	6818      	ldr	r0, [r3, #0]
 800b258:	460c      	mov	r4, r1
 800b25a:	b118      	cbz	r0, 800b264 <__swsetup_r+0x14>
 800b25c:	6a03      	ldr	r3, [r0, #32]
 800b25e:	b90b      	cbnz	r3, 800b264 <__swsetup_r+0x14>
 800b260:	f7fc fca6 	bl	8007bb0 <__sinit>
 800b264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b268:	0719      	lsls	r1, r3, #28
 800b26a:	d422      	bmi.n	800b2b2 <__swsetup_r+0x62>
 800b26c:	06da      	lsls	r2, r3, #27
 800b26e:	d407      	bmi.n	800b280 <__swsetup_r+0x30>
 800b270:	2209      	movs	r2, #9
 800b272:	602a      	str	r2, [r5, #0]
 800b274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b278:	81a3      	strh	r3, [r4, #12]
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
 800b27e:	e033      	b.n	800b2e8 <__swsetup_r+0x98>
 800b280:	0758      	lsls	r0, r3, #29
 800b282:	d512      	bpl.n	800b2aa <__swsetup_r+0x5a>
 800b284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b286:	b141      	cbz	r1, 800b29a <__swsetup_r+0x4a>
 800b288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b28c:	4299      	cmp	r1, r3
 800b28e:	d002      	beq.n	800b296 <__swsetup_r+0x46>
 800b290:	4628      	mov	r0, r5
 800b292:	f7fd fbf9 	bl	8008a88 <_free_r>
 800b296:	2300      	movs	r3, #0
 800b298:	6363      	str	r3, [r4, #52]	@ 0x34
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2a0:	81a3      	strh	r3, [r4, #12]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6063      	str	r3, [r4, #4]
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	f043 0308 	orr.w	r3, r3, #8
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	b94b      	cbnz	r3, 800b2ca <__swsetup_r+0x7a>
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2c0:	d003      	beq.n	800b2ca <__swsetup_r+0x7a>
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f000 f883 	bl	800b3d0 <__smakebuf_r>
 800b2ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ce:	f013 0201 	ands.w	r2, r3, #1
 800b2d2:	d00a      	beq.n	800b2ea <__swsetup_r+0x9a>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	60a2      	str	r2, [r4, #8]
 800b2d8:	6962      	ldr	r2, [r4, #20]
 800b2da:	4252      	negs	r2, r2
 800b2dc:	61a2      	str	r2, [r4, #24]
 800b2de:	6922      	ldr	r2, [r4, #16]
 800b2e0:	b942      	cbnz	r2, 800b2f4 <__swsetup_r+0xa4>
 800b2e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2e6:	d1c5      	bne.n	800b274 <__swsetup_r+0x24>
 800b2e8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ea:	0799      	lsls	r1, r3, #30
 800b2ec:	bf58      	it	pl
 800b2ee:	6962      	ldrpl	r2, [r4, #20]
 800b2f0:	60a2      	str	r2, [r4, #8]
 800b2f2:	e7f4      	b.n	800b2de <__swsetup_r+0x8e>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e7f7      	b.n	800b2e8 <__swsetup_r+0x98>
 800b2f8:	20000018 	.word	0x20000018

0800b2fc <_raise_r>:
 800b2fc:	291f      	cmp	r1, #31
 800b2fe:	b538      	push	{r3, r4, r5, lr}
 800b300:	4605      	mov	r5, r0
 800b302:	460c      	mov	r4, r1
 800b304:	d904      	bls.n	800b310 <_raise_r+0x14>
 800b306:	2316      	movs	r3, #22
 800b308:	6003      	str	r3, [r0, #0]
 800b30a:	f04f 30ff 	mov.w	r0, #4294967295
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b312:	b112      	cbz	r2, 800b31a <_raise_r+0x1e>
 800b314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b318:	b94b      	cbnz	r3, 800b32e <_raise_r+0x32>
 800b31a:	4628      	mov	r0, r5
 800b31c:	f000 f830 	bl	800b380 <_getpid_r>
 800b320:	4622      	mov	r2, r4
 800b322:	4601      	mov	r1, r0
 800b324:	4628      	mov	r0, r5
 800b326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b32a:	f000 b817 	b.w	800b35c <_kill_r>
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d00a      	beq.n	800b348 <_raise_r+0x4c>
 800b332:	1c59      	adds	r1, r3, #1
 800b334:	d103      	bne.n	800b33e <_raise_r+0x42>
 800b336:	2316      	movs	r3, #22
 800b338:	6003      	str	r3, [r0, #0]
 800b33a:	2001      	movs	r0, #1
 800b33c:	e7e7      	b.n	800b30e <_raise_r+0x12>
 800b33e:	2100      	movs	r1, #0
 800b340:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b344:	4620      	mov	r0, r4
 800b346:	4798      	blx	r3
 800b348:	2000      	movs	r0, #0
 800b34a:	e7e0      	b.n	800b30e <_raise_r+0x12>

0800b34c <raise>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	@ (800b358 <raise+0xc>)
 800b34e:	4601      	mov	r1, r0
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f7ff bfd3 	b.w	800b2fc <_raise_r>
 800b356:	bf00      	nop
 800b358:	20000018 	.word	0x20000018

0800b35c <_kill_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d07      	ldr	r5, [pc, #28]	@ (800b37c <_kill_r+0x20>)
 800b360:	2300      	movs	r3, #0
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	602b      	str	r3, [r5, #0]
 800b36a:	f7f6 fea1 	bl	80020b0 <_kill>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	d102      	bne.n	800b378 <_kill_r+0x1c>
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	b103      	cbz	r3, 800b378 <_kill_r+0x1c>
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	bd38      	pop	{r3, r4, r5, pc}
 800b37a:	bf00      	nop
 800b37c:	20000894 	.word	0x20000894

0800b380 <_getpid_r>:
 800b380:	f7f6 be8e 	b.w	80020a0 <_getpid>

0800b384 <__swhatbuf_r>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	460c      	mov	r4, r1
 800b388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38c:	2900      	cmp	r1, #0
 800b38e:	b096      	sub	sp, #88	@ 0x58
 800b390:	4615      	mov	r5, r2
 800b392:	461e      	mov	r6, r3
 800b394:	da0d      	bge.n	800b3b2 <__swhatbuf_r+0x2e>
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b39c:	f04f 0100 	mov.w	r1, #0
 800b3a0:	bf14      	ite	ne
 800b3a2:	2340      	movne	r3, #64	@ 0x40
 800b3a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	6031      	str	r1, [r6, #0]
 800b3ac:	602b      	str	r3, [r5, #0]
 800b3ae:	b016      	add	sp, #88	@ 0x58
 800b3b0:	bd70      	pop	{r4, r5, r6, pc}
 800b3b2:	466a      	mov	r2, sp
 800b3b4:	f000 f848 	bl	800b448 <_fstat_r>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	dbec      	blt.n	800b396 <__swhatbuf_r+0x12>
 800b3bc:	9901      	ldr	r1, [sp, #4]
 800b3be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3c6:	4259      	negs	r1, r3
 800b3c8:	4159      	adcs	r1, r3
 800b3ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3ce:	e7eb      	b.n	800b3a8 <__swhatbuf_r+0x24>

0800b3d0 <__smakebuf_r>:
 800b3d0:	898b      	ldrh	r3, [r1, #12]
 800b3d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3d4:	079d      	lsls	r5, r3, #30
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	460c      	mov	r4, r1
 800b3da:	d507      	bpl.n	800b3ec <__smakebuf_r+0x1c>
 800b3dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	6123      	str	r3, [r4, #16]
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	6163      	str	r3, [r4, #20]
 800b3e8:	b003      	add	sp, #12
 800b3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ec:	ab01      	add	r3, sp, #4
 800b3ee:	466a      	mov	r2, sp
 800b3f0:	f7ff ffc8 	bl	800b384 <__swhatbuf_r>
 800b3f4:	9f00      	ldr	r7, [sp, #0]
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	4639      	mov	r1, r7
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f7fd fbb8 	bl	8008b70 <_malloc_r>
 800b400:	b948      	cbnz	r0, 800b416 <__smakebuf_r+0x46>
 800b402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b406:	059a      	lsls	r2, r3, #22
 800b408:	d4ee      	bmi.n	800b3e8 <__smakebuf_r+0x18>
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	f043 0302 	orr.w	r3, r3, #2
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	e7e2      	b.n	800b3dc <__smakebuf_r+0xc>
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	6020      	str	r0, [r4, #0]
 800b41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b41e:	81a3      	strh	r3, [r4, #12]
 800b420:	9b01      	ldr	r3, [sp, #4]
 800b422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b426:	b15b      	cbz	r3, 800b440 <__smakebuf_r+0x70>
 800b428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b42c:	4630      	mov	r0, r6
 800b42e:	f000 f81d 	bl	800b46c <_isatty_r>
 800b432:	b128      	cbz	r0, 800b440 <__smakebuf_r+0x70>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	f023 0303 	bic.w	r3, r3, #3
 800b43a:	f043 0301 	orr.w	r3, r3, #1
 800b43e:	81a3      	strh	r3, [r4, #12]
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	431d      	orrs	r5, r3
 800b444:	81a5      	strh	r5, [r4, #12]
 800b446:	e7cf      	b.n	800b3e8 <__smakebuf_r+0x18>

0800b448 <_fstat_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d07      	ldr	r5, [pc, #28]	@ (800b468 <_fstat_r+0x20>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	4611      	mov	r1, r2
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	f7f6 fe8b 	bl	8002170 <_fstat>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	d102      	bne.n	800b464 <_fstat_r+0x1c>
 800b45e:	682b      	ldr	r3, [r5, #0]
 800b460:	b103      	cbz	r3, 800b464 <_fstat_r+0x1c>
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	bd38      	pop	{r3, r4, r5, pc}
 800b466:	bf00      	nop
 800b468:	20000894 	.word	0x20000894

0800b46c <_isatty_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4d06      	ldr	r5, [pc, #24]	@ (800b488 <_isatty_r+0x1c>)
 800b470:	2300      	movs	r3, #0
 800b472:	4604      	mov	r4, r0
 800b474:	4608      	mov	r0, r1
 800b476:	602b      	str	r3, [r5, #0]
 800b478:	f7f6 fe8a 	bl	8002190 <_isatty>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_isatty_r+0x1a>
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	b103      	cbz	r3, 800b486 <_isatty_r+0x1a>
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	20000894 	.word	0x20000894

0800b48c <_init>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr

0800b498 <_fini>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr
