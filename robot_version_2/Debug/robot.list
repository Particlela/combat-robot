
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b734  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b8c8  0800b8c8  0000c8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd58  0800bd58  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd58  0800bd58  0000cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd60  0800bd60  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd60  0800bd60  0000cd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd64  0800bd64  0000cd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bd68  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000006d4  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a8  200008a8  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107e6  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000299b  00000000  00000000  0001d9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00020388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbf  00000000  00000000  000212c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002303e  00000000  00000000  00021e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136c7  00000000  00000000  00044ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce408  00000000  00000000  00058584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012698c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052bc  00000000  00000000  001269d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  0012bc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8ac 	.word	0x0800b8ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b8ac 	.word	0x0800b8ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ff4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <MX_DMA_Init+0x6c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	200c      	movs	r0, #12
 800100c:	f002 fb2f 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001010:	200c      	movs	r0, #12
 8001012:	f002 fb48 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	200e      	movs	r0, #14
 800101c:	f002 fb27 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001020:	200e      	movs	r0, #14
 8001022:	f002 fb40 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2010      	movs	r0, #16
 800102c:	f002 fb1f 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001030:	2010      	movs	r0, #16
 8001032:	f002 fb38 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2011      	movs	r0, #17
 800103c:	f002 fb17 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001040:	2011      	movs	r0, #17
 8001042:	f002 fb30 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <Motor_Position>:
//舵机角度控制函数
//position:0 折叠； 1 收拢； 2 展开
//delay确保已转换完成

void Motor_Position(int position)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(position == 0)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d103      	bne.n	800106a <Motor_Position+0x16>
	{
		Motor_Control(250);
 8001062:	20fa      	movs	r0, #250	@ 0xfa
 8001064:	f001 f880 	bl	8002168 <Motor_Control>
 8001068:	e00c      	b.n	8001084 <Motor_Position+0x30>
	}
	else if(position == 1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d103      	bne.n	8001078 <Motor_Position+0x24>
	{
		Motor_Control(195);
 8001070:	20c3      	movs	r0, #195	@ 0xc3
 8001072:	f001 f879 	bl	8002168 <Motor_Control>
 8001076:	e005      	b.n	8001084 <Motor_Position+0x30>
	}
	else if(position == 2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d102      	bne.n	8001084 <Motor_Position+0x30>
	{
		Motor_Control(170);
 800107e:	20aa      	movs	r0, #170	@ 0xaa
 8001080:	f001 f872 	bl	8002168 <Motor_Control>
	}

	HAL_Delay(800);
 8001084:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001088:	f002 f9f2 	bl	8003470 <HAL_Delay>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Move_Turn>:
//控制电机直角转弯函数
//direction：1 前进； 2 后退
//Delay:560 空载90度左右；650 2物块90度左右

void Move_Turn(int direction)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	int Left_In = -67, Left_Out = 70;	//左初始速度
 800109c:	f06f 0342 	mvn.w	r3, #66	@ 0x42
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	2346      	movs	r3, #70	@ 0x46
 80010a4:	613b      	str	r3, [r7, #16]
	int Right_In = -67, Right_Out = 70;	//右初始速度
 80010a6:	f06f 0342 	mvn.w	r3, #66	@ 0x42
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	2346      	movs	r3, #70	@ 0x46
 80010ae:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;//实际转化参数
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]

    Move_Twin_Wheels(-70, -70);
 80010b8:	f06f 0145 	mvn.w	r1, #69	@ 0x45
 80010bc:	f06f 0045 	mvn.w	r0, #69	@ 0x45
 80010c0:	f000 ffac 	bl	800201c <Move_Twin_Wheels>
	HAL_Delay(70);//310
 80010c4:	2046      	movs	r0, #70	@ 0x46
 80010c6:	f002 f9d3 	bl	8003470 <HAL_Delay>
	Move_Twin_Wheels(0, 0);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f000 ffa5 	bl	800201c <Move_Twin_Wheels>
	HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	@ 0x64
 80010d4:	f002 f9cc 	bl	8003470 <HAL_Delay>

	Motor_Position(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff ffbb 	bl	8001054 <Motor_Position>
    if(direction == 1 || direction == 2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d002      	beq.n	80010ea <Move_Turn+0x56>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d132      	bne.n	8001150 <Move_Turn+0xbc>
    {
	if(direction == 1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d104      	bne.n	80010fa <Move_Turn+0x66>
	{
		Left_Speed = Left_In;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_Out;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	e006      	b.n	8001108 <Move_Turn+0x74>
	}
	else if(direction == 2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d103      	bne.n	8001108 <Move_Turn+0x74>
	{
		Left_Speed = Left_Out;
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_In;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	61bb      	str	r3, [r7, #24]
	}

	if(Left_Speed > 100)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b64      	cmp	r3, #100	@ 0x64
 800110c:	dd02      	ble.n	8001114 <Move_Turn+0x80>
		Left_Speed = 100;
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e014      	b.n	800113e <Move_Turn+0xaa>
	else if (Left_Speed < -100)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800111a:	da03      	bge.n	8001124 <Move_Turn+0x90>
		Left_Speed = -100;
 800111c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e00c      	b.n	800113e <Move_Turn+0xaa>
	else if(Right_Speed > 100)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	dd02      	ble.n	8001130 <Move_Turn+0x9c>
		Right_Speed = 100;
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	e006      	b.n	800113e <Move_Turn+0xaa>
	else if (Right_Speed < -100)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001136:	da02      	bge.n	800113e <Move_Turn+0xaa>
		Right_Speed = -100;
 8001138:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800113c:	61bb      	str	r3, [r7, #24]

	Move_Twin_Wheels(Left_Speed, Right_Speed);
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	69f8      	ldr	r0, [r7, #28]
 8001142:	f000 ff6b 	bl	800201c <Move_Twin_Wheels>
	HAL_Delay(300);//620
 8001146:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800114a:	f002 f991 	bl	8003470 <HAL_Delay>
 800114e:	e029      	b.n	80011a4 <Move_Turn+0x110>
    }
    else if(direction == 3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d126      	bne.n	80011a4 <Move_Turn+0x110>
    {
		Left_Speed = Left_In;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	61fb      	str	r3, [r7, #28]
		Right_Speed = Right_Out;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	61bb      	str	r3, [r7, #24]

		if(Left_Speed > 100)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	2b64      	cmp	r3, #100	@ 0x64
 8001162:	dd02      	ble.n	800116a <Move_Turn+0xd6>
			Left_Speed = 100;
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	e014      	b.n	8001194 <Move_Turn+0x100>
		else if (Left_Speed < -100)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001170:	da03      	bge.n	800117a <Move_Turn+0xe6>
			Left_Speed = -100;
 8001172:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	e00c      	b.n	8001194 <Move_Turn+0x100>
		else if(Right_Speed > 100)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b64      	cmp	r3, #100	@ 0x64
 800117e:	dd02      	ble.n	8001186 <Move_Turn+0xf2>
			Right_Speed = 100;
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	e006      	b.n	8001194 <Move_Turn+0x100>
		else if (Right_Speed < -100)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800118c:	da02      	bge.n	8001194 <Move_Turn+0x100>
			Right_Speed = -100;
 800118e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001192:	61bb      	str	r3, [r7, #24]

		Move_Twin_Wheels(Left_Speed, Right_Speed);
 8001194:	69b9      	ldr	r1, [r7, #24]
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f000 ff40 	bl	800201c <Move_Twin_Wheels>
		HAL_Delay(1800);//620
 800119c:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 80011a0:	f002 f966 	bl	8003470 <HAL_Delay>
    }
	Move_Twin_Wheels(0, 0);
 80011a4:	2100      	movs	r1, #0
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 ff38 	bl	800201c <Move_Twin_Wheels>
	HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	@ 0x64
 80011ae:	f002 f95f 	bl	8003470 <HAL_Delay>

}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <Position_Adj>:
//转弯姿态调整函数
//direction：1 左； 2 右； 3 掉头；
//基准速度设定60， 可带动3物块

void Position_Adj(int direction)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	int Adj_cnt = 0;		//计数值，确定调整时长
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int Left_Turn = 60;		//左基准初始速度
 80011c8:	233c      	movs	r3, #60	@ 0x3c
 80011ca:	617b      	str	r3, [r7, #20]
	int Right_Turn = 60;	//右基准初始速度
 80011cc:	233c      	movs	r3, #60	@ 0x3c
 80011ce:	613b      	str	r3, [r7, #16]
	int TurnLeft_adj = 1;	//左调整值
 80011d0:	2301      	movs	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
	int TurnRight_adj = 1;	//右调整值
 80011d4:	2301      	movs	r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
	int turn = 0, error = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]

	if(direction == 1){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d105      	bne.n	80011fa <Position_Adj+0x3e>
		turn = -1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	623b      	str	r3, [r7, #32]
		Adj_cnt = 100;
 80011f4:	2364      	movs	r3, #100	@ 0x64
 80011f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011f8:	e00e      	b.n	8001218 <Position_Adj+0x5c>
	}else if(direction == 2){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d104      	bne.n	800120a <Position_Adj+0x4e>
		turn = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
		Adj_cnt = 100;
 8001204:	2364      	movs	r3, #100	@ 0x64
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001208:	e006      	b.n	8001218 <Position_Adj+0x5c>
	}else if(direction == 3){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d103      	bne.n	8001218 <Position_Adj+0x5c>
		turn = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
		Adj_cnt = 250;
 8001214:	23fa      	movs	r3, #250	@ 0xfa
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	for(int i = 0; i < Adj_cnt; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e0aa      	b.n	8001374 <Position_Adj+0x1b8>
	{
		if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == OUT)
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <Position_Adj+0x1d8>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10a      	bne.n	800123c <Position_Adj+0x80>
 8001226:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <Position_Adj+0x1d8>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d106      	bne.n	800123c <Position_Adj+0x80>
 800122e:	4b59      	ldr	r3, [pc, #356]	@ (8001394 <Position_Adj+0x1d8>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d102      	bne.n	800123c <Position_Adj+0x80>
		{
			error = 3;
 8001236:	2303      	movs	r3, #3
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e061      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT)
 800123c:	4b55      	ldr	r3, [pc, #340]	@ (8001394 <Position_Adj+0x1d8>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10d      	bne.n	8001260 <Position_Adj+0xa4>
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <Position_Adj+0x1d8>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d109      	bne.n	8001260 <Position_Adj+0xa4>
 800124c:	4b51      	ldr	r3, [pc, #324]	@ (8001394 <Position_Adj+0x1d8>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d105      	bne.n	8001260 <Position_Adj+0xa4>
		{
			error = 2;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
			turn = -1;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	623b      	str	r3, [r7, #32]
 800125e:	e04f      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 8001260:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <Position_Adj+0x1d8>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <Position_Adj+0xc8>
 8001268:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <Position_Adj+0x1d8>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <Position_Adj+0xc8>
 8001270:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <Position_Adj+0x1d8>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d105      	bne.n	8001284 <Position_Adj+0xc8>
		{
			error = 1;
 8001278:	2301      	movs	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
			turn = -1;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	e03d      	b.n	8001300 <Position_Adj+0x144>
		}
		else if((GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == OUT) || (GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN))
 8001284:	4b43      	ldr	r3, [pc, #268]	@ (8001394 <Position_Adj+0x1d8>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d107      	bne.n	800129c <Position_Adj+0xe0>
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <Position_Adj+0x1d8>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <Position_Adj+0xe0>
 8001294:	4b3f      	ldr	r3, [pc, #252]	@ (8001394 <Position_Adj+0x1d8>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d00b      	beq.n	80012b4 <Position_Adj+0xf8>
 800129c:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <Position_Adj+0x1d8>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10c      	bne.n	80012be <Position_Adj+0x102>
 80012a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <Position_Adj+0x1d8>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d108      	bne.n	80012be <Position_Adj+0x102>
 80012ac:	4b39      	ldr	r3, [pc, #228]	@ (8001394 <Position_Adj+0x1d8>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d104      	bne.n	80012be <Position_Adj+0x102>
		{
			error = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
			turn = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	e020      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 80012be:	4b35      	ldr	r3, [pc, #212]	@ (8001394 <Position_Adj+0x1d8>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10c      	bne.n	80012e0 <Position_Adj+0x124>
 80012c6:	4b33      	ldr	r3, [pc, #204]	@ (8001394 <Position_Adj+0x1d8>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d108      	bne.n	80012e0 <Position_Adj+0x124>
 80012ce:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <Position_Adj+0x1d8>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <Position_Adj+0x124>
		{
			error = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
			turn = 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	e00f      	b.n	8001300 <Position_Adj+0x144>
		}
		else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN)
 80012e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <Position_Adj+0x1d8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d10b      	bne.n	8001300 <Position_Adj+0x144>
 80012e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <Position_Adj+0x1d8>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <Position_Adj+0x144>
 80012f0:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <Position_Adj+0x1d8>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d103      	bne.n	8001300 <Position_Adj+0x144>
		{
			error = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61fb      	str	r3, [r7, #28]
			turn = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
		}
		Left_Speed = turn * (Left_Turn + error * TurnLeft_adj);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	fb03 f202 	mul.w	r2, r3, r2
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	441a      	add	r2, r3
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
		Right_Speed = (-1) * turn * (Right_Turn + error * TurnRight_adj);
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	425b      	negs	r3, r3
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	fb02 f101 	mul.w	r1, r2, r1
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	440a      	add	r2, r1
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24

		if(Left_Speed > 100)
 800132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132c:	2b64      	cmp	r3, #100	@ 0x64
 800132e:	dd02      	ble.n	8001336 <Position_Adj+0x17a>
				Left_Speed = 100;
 8001330:	2364      	movs	r3, #100	@ 0x64
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001334:	e014      	b.n	8001360 <Position_Adj+0x1a4>
		else if (Left_Speed < -100)
 8001336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001338:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800133c:	da03      	bge.n	8001346 <Position_Adj+0x18a>
			Left_Speed = -100;
 800133e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001344:	e00c      	b.n	8001360 <Position_Adj+0x1a4>
		else if(Right_Speed > 100)
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	2b64      	cmp	r3, #100	@ 0x64
 800134a:	dd02      	ble.n	8001352 <Position_Adj+0x196>
			Right_Speed = 100;
 800134c:	2364      	movs	r3, #100	@ 0x64
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001350:	e006      	b.n	8001360 <Position_Adj+0x1a4>
		else if (Right_Speed < -100)
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001358:	da02      	bge.n	8001360 <Position_Adj+0x1a4>
			Right_Speed = -100;
 800135a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24

		Move_Twin_Wheels(Left_Speed, Right_Speed);
 8001360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001364:	f000 fe5a 	bl	800201c <Move_Twin_Wheels>
 		HAL_Delay(10); //是否延时由调试情况决定
 8001368:	200a      	movs	r0, #10
 800136a:	f002 f881 	bl	8003470 <HAL_Delay>
	for(int i = 0; i < Adj_cnt; i++)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	3301      	adds	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	f6ff af50 	blt.w	800121e <Position_Adj+0x62>
	}
	Move_Twin_Wheels(0, 0);
 800137e:	2100      	movs	r1, #0
 8001380:	2000      	movs	r0, #0
 8001382:	f000 fe4b 	bl	800201c <Move_Twin_Wheels>
	HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	@ 0x64
 8001388:	f002 f872 	bl	8003470 <HAL_Delay>
}
 800138c:	bf00      	nop
 800138e:	3730      	adds	r7, #48	@ 0x30
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200002cc 	.word	0x200002cc

08001398 <Move_Straight>:

//电机直行控制函数
//direction：1 前进； 2 后退

void Move_Straight(int direction)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	@ 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	int Left_ori = 88;		//左初始值
 80013a0:	2358      	movs	r3, #88	@ 0x58
 80013a2:	617b      	str	r3, [r7, #20]
	int Right_ori = 88;		//右初始值
 80013a4:	2358      	movs	r3, #88	@ 0x58
 80013a6:	613b      	str	r3, [r7, #16]
	int GoLeft_adj = 1;		//左调整值
 80013a8:	2301      	movs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
	int GoRight_adj = 1;		//右调整值
 80013ac:	2301      	movs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
	int Left_Speed = 0, Right_Speed = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	int Left_Times = 1, Right_Times = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80013bc:	2301      	movs	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
	int turn = 0, error = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]

	if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == OUT)
 80013c8:	4b60      	ldr	r3, [pc, #384]	@ (800154c <Move_Straight+0x1b4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10a      	bne.n	80013e6 <Move_Straight+0x4e>
 80013d0:	4b5e      	ldr	r3, [pc, #376]	@ (800154c <Move_Straight+0x1b4>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <Move_Straight+0x4e>
 80013d8:	4b5c      	ldr	r3, [pc, #368]	@ (800154c <Move_Straight+0x1b4>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d102      	bne.n	80013e6 <Move_Straight+0x4e>
	{
		error = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	e061      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == IN && GrayData[2] == OUT && GrayData[3] == OUT)
 80013e6:	4b59      	ldr	r3, [pc, #356]	@ (800154c <Move_Straight+0x1b4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <Move_Straight+0x72>
 80013ee:	4b57      	ldr	r3, [pc, #348]	@ (800154c <Move_Straight+0x1b4>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d109      	bne.n	800140a <Move_Straight+0x72>
 80013f6:	4b55      	ldr	r3, [pc, #340]	@ (800154c <Move_Straight+0x1b4>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d105      	bne.n	800140a <Move_Straight+0x72>
	{
		error = 2;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
		turn = -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e04f      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == OUT)
 800140a:	4b50      	ldr	r3, [pc, #320]	@ (800154c <Move_Straight+0x1b4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <Move_Straight+0x96>
 8001412:	4b4e      	ldr	r3, [pc, #312]	@ (800154c <Move_Straight+0x1b4>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <Move_Straight+0x96>
 800141a:	4b4c      	ldr	r3, [pc, #304]	@ (800154c <Move_Straight+0x1b4>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <Move_Straight+0x96>
	{
		error = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
		turn = -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	e03d      	b.n	80014aa <Move_Straight+0x112>
	}
	else if((GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == OUT) || (GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN))
 800142e:	4b47      	ldr	r3, [pc, #284]	@ (800154c <Move_Straight+0x1b4>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <Move_Straight+0xae>
 8001436:	4b45      	ldr	r3, [pc, #276]	@ (800154c <Move_Straight+0x1b4>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <Move_Straight+0xae>
 800143e:	4b43      	ldr	r3, [pc, #268]	@ (800154c <Move_Straight+0x1b4>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d00b      	beq.n	800145e <Move_Straight+0xc6>
 8001446:	4b41      	ldr	r3, [pc, #260]	@ (800154c <Move_Straight+0x1b4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <Move_Straight+0xd0>
 800144e:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <Move_Straight+0x1b4>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d108      	bne.n	8001468 <Move_Straight+0xd0>
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <Move_Straight+0x1b4>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d104      	bne.n	8001468 <Move_Straight+0xd0>
	{
		error = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
		turn = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e020      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == OUT && GrayData[2] == IN && GrayData[3] == IN)
 8001468:	4b38      	ldr	r3, [pc, #224]	@ (800154c <Move_Straight+0x1b4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10c      	bne.n	800148a <Move_Straight+0xf2>
 8001470:	4b36      	ldr	r3, [pc, #216]	@ (800154c <Move_Straight+0x1b4>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d108      	bne.n	800148a <Move_Straight+0xf2>
 8001478:	4b34      	ldr	r3, [pc, #208]	@ (800154c <Move_Straight+0x1b4>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d104      	bne.n	800148a <Move_Straight+0xf2>
	{
		error = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
		turn = 1;
 8001484:	2301      	movs	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	e00f      	b.n	80014aa <Move_Straight+0x112>
	}
	else if(GrayData[1] == OUT && GrayData[2] == OUT && GrayData[3] == IN)
 800148a:	4b30      	ldr	r3, [pc, #192]	@ (800154c <Move_Straight+0x1b4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10b      	bne.n	80014aa <Move_Straight+0x112>
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <Move_Straight+0x1b4>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <Move_Straight+0x112>
 800149a:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <Move_Straight+0x1b4>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d103      	bne.n	80014aa <Move_Straight+0x112>
	{
		error = 2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
		turn = 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
//	{
//		error = 2;
//		turn = 1;
//	}

	if(turn == -1){
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d104      	bne.n	80014bc <Move_Straight+0x124>
		Left_Times = 2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
		Right_Times = 3;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	e006      	b.n	80014ca <Move_Straight+0x132>
	}else if(turn == 1){
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d103      	bne.n	80014ca <Move_Straight+0x132>
		Left_Times = 3;
 80014c2:	2303      	movs	r3, #3
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
		Right_Times = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	623b      	str	r3, [r7, #32]
	}

	Left_Speed = Left_ori + Left_Times * turn * error * GoLeft_adj;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4413      	add	r3, r2
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Right_Speed = Right_ori - Right_Times * turn * error * GoRight_adj;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(Left_Speed > 100)
 80014fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001500:	2b64      	cmp	r3, #100	@ 0x64
 8001502:	dd02      	ble.n	800150a <Move_Straight+0x172>
		Left_Speed = 100;
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001508:	e014      	b.n	8001534 <Move_Straight+0x19c>
	else if (Left_Speed < -100)
 800150a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800150c:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001510:	da03      	bge.n	800151a <Move_Straight+0x182>
		Left_Speed = -100;
 8001512:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001518:	e00c      	b.n	8001534 <Move_Straight+0x19c>
	else if(Right_Speed > 100)
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	2b64      	cmp	r3, #100	@ 0x64
 800151e:	dd02      	ble.n	8001526 <Move_Straight+0x18e>
		Right_Speed = 100;
 8001520:	2364      	movs	r3, #100	@ 0x64
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001524:	e006      	b.n	8001534 <Move_Straight+0x19c>
	else if (Right_Speed < -100)
 8001526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001528:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800152c:	da02      	bge.n	8001534 <Move_Straight+0x19c>
		Right_Speed = -100;
 800152e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28

	Move_Twin_Wheels(Left_Speed, Right_Speed);
 8001534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001538:	f000 fd70 	bl	800201c <Move_Twin_Wheels>
	HAL_Delay(10); //是否延时由调试情况决定
 800153c:	200a      	movs	r0, #10
 800153e:	f001 ff97 	bl	8003470 <HAL_Delay>
}
 8001542:	bf00      	nop
 8001544:	3730      	adds	r7, #48	@ 0x30
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002cc 	.word	0x200002cc

08001550 <Judge_cross>:

//岔路口判断
//return：0 非；1 是

int Judge_cross(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	if(GrayData[0] == IN && GrayData[1] == IN && GrayData[2] == IN && GrayData[3] == IN && GrayData[4] == IN)
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <Judge_cross+0x3c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <Judge_cross+0x30>
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <Judge_cross+0x3c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10d      	bne.n	8001580 <Judge_cross+0x30>
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <Judge_cross+0x3c>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <Judge_cross+0x30>
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <Judge_cross+0x3c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <Judge_cross+0x30>
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <Judge_cross+0x3c>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <Judge_cross+0x30>
	{
		return 1;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <Judge_cross+0x32>
	}
	return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	200002cc 	.word	0x200002cc

08001590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	@ 0x30
 8001594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4b57      	ldr	r3, [pc, #348]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a56      	ldr	r2, [pc, #344]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b54      	ldr	r3, [pc, #336]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a4f      	ldr	r2, [pc, #316]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b49      	ldr	r3, [pc, #292]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a48      	ldr	r2, [pc, #288]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <MX_GPIO_Init+0x178>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b42      	ldr	r3, [pc, #264]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a41      	ldr	r2, [pc, #260]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <MX_GPIO_Init+0x178>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <MX_GPIO_Init+0x178>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a3a      	ldr	r2, [pc, #232]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a33      	ldr	r2, [pc, #204]	@ (8001708 <MX_GPIO_Init+0x178>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_GPIO_Init+0x178>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	210f      	movs	r1, #15
 8001652:	482e      	ldr	r0, [pc, #184]	@ (800170c <MX_GPIO_Init+0x17c>)
 8001654:	f002 fdf8 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001658:	2308      	movs	r3, #8
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800165c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4828      	ldr	r0, [pc, #160]	@ (8001710 <MX_GPIO_Init+0x180>)
 800166e:	f002 fc37 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001672:	2310      	movs	r3, #16
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4822      	ldr	r0, [pc, #136]	@ (8001710 <MX_GPIO_Init+0x180>)
 8001686:	f002 fc2b 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Engine_Right_Yellow_Pin|Engine_Right_Green_Pin;
 800168a:	2303      	movs	r3, #3
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	481d      	ldr	r0, [pc, #116]	@ (8001714 <MX_GPIO_Init+0x184>)
 800169e:	f002 fc1f 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = Gray_R2_Pin|Gray_R1_Pin|Gray_M_Pin|Gray_L1_Pin
 80016a2:	f44f 6378 	mov.w	r3, #3968	@ 0xf80
 80016a6:	61fb      	str	r3, [r7, #28]
                          |Gray_L2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4816      	ldr	r0, [pc, #88]	@ (8001710 <MX_GPIO_Init+0x180>)
 80016b8:	f002 fc12 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Engine_Right2_Pin|Engine_Right1_Pin|Engine_Left2_Pin|Engine_Left1_Pin;
 80016bc:	230f      	movs	r3, #15
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	480e      	ldr	r0, [pc, #56]	@ (800170c <MX_GPIO_Init+0x17c>)
 80016d4:	f002 fc04 	bl	8003ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Engine_Left_Green_Pin|Engine_Left_Yellow_Pin;
 80016d8:	2328      	movs	r3, #40	@ 0x28
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	480b      	ldr	r0, [pc, #44]	@ (8001718 <MX_GPIO_Init+0x188>)
 80016ec:	f002 fbf8 	bl	8003ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 12, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	210c      	movs	r1, #12
 80016f4:	2009      	movs	r0, #9
 80016f6:	f001 ffba 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016fa:	2009      	movs	r0, #9
 80016fc:	f001 ffd3 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	@ 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40020800 	.word	0x40020800
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af04      	add	r7, sp, #16
 8001722:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim5.Instance) // 确认是正确的定时�????
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d123      	bne.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x5c>
    {
        MotorData = Motor_angel;
 8001730:	4b80      	ldr	r3, [pc, #512]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a80      	ldr	r2, [pc, #512]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001736:	6013      	str	r3, [r2, #0]

    	sprintf((char*)TransmitData, "灰度传感器：%d %d %d %d %d \n 已经经过%d个路口\n ", GrayData[0],GrayData[1],GrayData[2],GrayData[3],GrayData[4],cross_cnt);
 8001738:	4b80      	ldr	r3, [pc, #512]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800173a:	681c      	ldr	r4, [r3, #0]
 800173c:	4b7f      	ldr	r3, [pc, #508]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800173e:	685d      	ldr	r5, [r3, #4]
 8001740:	4b7e      	ldr	r3, [pc, #504]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	4a7d      	ldr	r2, [pc, #500]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001746:	68d2      	ldr	r2, [r2, #12]
 8001748:	497c      	ldr	r1, [pc, #496]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800174a:	6909      	ldr	r1, [r1, #16]
 800174c:	487c      	ldr	r0, [pc, #496]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800174e:	6800      	ldr	r0, [r0, #0]
 8001750:	9003      	str	r0, [sp, #12]
 8001752:	9102      	str	r1, [sp, #8]
 8001754:	9201      	str	r2, [sp, #4]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	462b      	mov	r3, r5
 800175a:	4622      	mov	r2, r4
 800175c:	4979      	ldr	r1, [pc, #484]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800175e:	487a      	ldr	r0, [pc, #488]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001760:	f006 fc6a 	bl	8008038 <siprintf>
    	HAL_UART_Transmit_DMA(&huart2, TransmitData, sizeof(TransmitData));//蓝牙
 8001764:	22c8      	movs	r2, #200	@ 0xc8
 8001766:	4978      	ldr	r1, [pc, #480]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001768:	4878      	ldr	r0, [pc, #480]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x230>)
 800176a:	f004 fd23 	bl	80061b4 <HAL_UART_Transmit_DMA>
    	HAL_UART_Transmit_DMA(&huart3, TransmitData, sizeof(TransmitData));//传输信息
 800176e:	22c8      	movs	r2, #200	@ 0xc8
 8001770:	4975      	ldr	r1, [pc, #468]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001772:	4877      	ldr	r0, [pc, #476]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001774:	f004 fd1e 	bl	80061b4 <HAL_UART_Transmit_DMA>
    }//此为TIM5触发的中�???? 1s�????�????

    if(htim->Instance == htim6.Instance)		              //10ms中断
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b75      	ldr	r3, [pc, #468]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8088 	bne.w	8001896 <HAL_TIM_PeriodElapsedCallback+0x17a>
    {
        EngineData[0] = Read_Rotational_Speed(0);         //0为左,转�?�单位为RPM
 8001786:	2000      	movs	r0, #0
 8001788:	f000 fc58 	bl	800203c <Read_Rotational_Speed>
 800178c:	eef0 7a40 	vmov.f32	s15, s0
 8001790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001794:	ee17 2a90 	vmov	r2, s15
 8001798:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800179a:	601a      	str	r2, [r3, #0]
        EngineData[1] = Read_Rotational_Speed(1);         //1为右，转速单位为RPM
 800179c:	2001      	movs	r0, #1
 800179e:	f000 fc4d 	bl	800203c <Read_Rotational_Speed>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
 80017a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017aa:	ee17 2a90 	vmov	r2, s15
 80017ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017b0:	605a      	str	r2, [r3, #4]
        if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_SET)
 80017b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017b6:	4869      	ldr	r0, [pc, #420]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017b8:	f002 fd2e 	bl	8004218 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d103      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0xae>
        {
        	GrayData[0] = 1;
 80017c2:	4b5e      	ldr	r3, [pc, #376]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e00a      	b.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0xc4>
        }
        else if(HAL_GPIO_ReadPin(Gray_L2_GPIO_Port, Gray_L2_Pin) == GPIO_PIN_RESET)
 80017ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ce:	4863      	ldr	r0, [pc, #396]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017d0:	f002 fd22 	bl	8004218 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0xc4>
        {
        	GrayData[0] = 0;
 80017da:	4b58      	ldr	r3, [pc, #352]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
        }
        if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_SET)
 80017e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017e4:	485d      	ldr	r0, [pc, #372]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017e6:	f002 fd17 	bl	8004218 <HAL_GPIO_ReadPin>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d103      	bne.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0xdc>
        {
        	GrayData[1] = 1;
 80017f0:	4b52      	ldr	r3, [pc, #328]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	e00a      	b.n	800180e <HAL_TIM_PeriodElapsedCallback+0xf2>
        }
        else if(HAL_GPIO_ReadPin(Gray_L1_GPIO_Port, Gray_L1_Pin) == GPIO_PIN_RESET)
 80017f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017fc:	4857      	ldr	r0, [pc, #348]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017fe:	f002 fd0b 	bl	8004218 <HAL_GPIO_ReadPin>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <HAL_TIM_PeriodElapsedCallback+0xf2>
        {
        	GrayData[1] = 0;
 8001808:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
        }
        if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_SET)
 800180e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001812:	4852      	ldr	r0, [pc, #328]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001814:	f002 fd00 	bl	8004218 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	2b01      	cmp	r3, #1
 800181c:	d103      	bne.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x10a>
        {
        	GrayData[2] = 1;
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001820:	2201      	movs	r2, #1
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e00a      	b.n	800183c <HAL_TIM_PeriodElapsedCallback+0x120>
        }
        else if(HAL_GPIO_ReadPin(Gray_M_GPIO_Port, Gray_M_Pin) == GPIO_PIN_RESET)
 8001826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800182a:	484c      	ldr	r0, [pc, #304]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800182c:	f002 fcf4 	bl	8004218 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <HAL_TIM_PeriodElapsedCallback+0x120>
        {
        	GrayData[2] = 0;
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
        }
        if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_SET)
 800183c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001840:	4846      	ldr	r0, [pc, #280]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001842:	f002 fce9 	bl	8004218 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d103      	bne.n	8001854 <HAL_TIM_PeriodElapsedCallback+0x138>
        {
        	GrayData[3] = 1;
 800184c:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800184e:	2201      	movs	r2, #1
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	e00a      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0x14e>
        }
        else if(HAL_GPIO_ReadPin(Gray_R1_GPIO_Port, Gray_R1_Pin) == GPIO_PIN_RESET)
 8001854:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001858:	4840      	ldr	r0, [pc, #256]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800185a:	f002 fcdd 	bl	8004218 <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <HAL_TIM_PeriodElapsedCallback+0x14e>
        {
        	GrayData[3] = 0;
 8001864:	4b35      	ldr	r3, [pc, #212]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
        }
        if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_SET)
 800186a:	2180      	movs	r1, #128	@ 0x80
 800186c:	483b      	ldr	r0, [pc, #236]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800186e:	f002 fcd3 	bl	8004218 <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b01      	cmp	r3, #1
 8001876:	d103      	bne.n	8001880 <HAL_TIM_PeriodElapsedCallback+0x164>
        {
        	GrayData[4] = 1;
 8001878:	4b30      	ldr	r3, [pc, #192]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800187a:	2201      	movs	r2, #1
 800187c:	611a      	str	r2, [r3, #16]
	{
		if(COUNTERNUMRIGHT < 10000)	EngineRight.loopNum++;         //向上计数超过10000，正溢出+1
		else if(COUNTERNUMRIGHT > 10000)	EngineRight.loopNum--;     //向下计数小于0，负溢出+1
		__HAL_TIM_SetCounter(&htim8, 10000);             //重新设定初始�????
	}
}
 800187e:	e053      	b.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
        else if(HAL_GPIO_ReadPin(Gray_R2_GPIO_Port, Gray_R2_Pin) == GPIO_PIN_RESET)
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	4836      	ldr	r0, [pc, #216]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001884:	f002 fcc8 	bl	8004218 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d14c      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
        	GrayData[4] = 0;
 800188e:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
}
 8001894:	e048      	b.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
	else if(htim->Instance == htim1.Instance)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11e      	bne.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		if(COUNTERNUMLEFT < 10000)	EngineLeft.loopNum++;         //向上计数超过10000，正溢出+1
 80018a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d805      	bhi.n	80018bc <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018b8:	6093      	str	r3, [r2, #8]
 80018ba:	e00b      	b.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		else if(COUNTERNUMLEFT > 10000)	EngineLeft.loopNum--;     //向下计数小于0，负溢出+1
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d904      	bls.n	80018d4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80018ca:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	4a24      	ldr	r2, [pc, #144]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80018d2:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SetCounter(&htim1, 10000);             //重新设定初始�????
 80018d4:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80018de:	e023      	b.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
	else if(htim->Instance == htim8.Instance)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d11d      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x20c>
		if(COUNTERNUMRIGHT < 10000)	EngineRight.loopNum++;         //向上计数超过10000，正溢出+1
 80018ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d805      	bhi.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001902:	6093      	str	r3, [r2, #8]
 8001904:	e00b      	b.n	800191e <HAL_TIM_PeriodElapsedCallback+0x202>
		else if(COUNTERNUMRIGHT > 10000)	EngineRight.loopNum--;     //向下计数小于0，负溢出+1
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001910:	4293      	cmp	r3, r2
 8001912:	d904      	bls.n	800191e <HAL_TIM_PeriodElapsedCallback+0x202>
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	4a14      	ldr	r2, [pc, #80]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800191c:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SetCounter(&htim8, 10000);             //重新设定初始�????
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bdb0      	pop	{r4, r5, r7, pc}
 8001930:	20000428 	.word	0x20000428
 8001934:	200002e0 	.word	0x200002e0
 8001938:	200002b8 	.word	0x200002b8
 800193c:	200002cc 	.word	0x200002cc
 8001940:	200002c4 	.word	0x200002c4
 8001944:	0800b8c8 	.word	0x0800b8c8
 8001948:	200001f0 	.word	0x200001f0
 800194c:	20000548 	.word	0x20000548
 8001950:	20000590 	.word	0x20000590
 8001954:	20000470 	.word	0x20000470
 8001958:	200002bc 	.word	0x200002bc
 800195c:	40021000 	.word	0x40021000
 8001960:	20000308 	.word	0x20000308
 8001964:	200002e4 	.word	0x200002e4
 8001968:	200004b8 	.word	0x200004b8
 800196c:	200002f4 	.word	0x200002f4

08001970 <HAL_GPIO_EXTI_Callback>:
//TIM5每秒溢出触发回调函数向计算机发�?�参�????

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET)
 800197a:	2108      	movs	r1, #8
 800197c:	4812      	ldr	r0, [pc, #72]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0x58>)
 800197e:	f002 fc4b 	bl	8004218 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11a      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
	{
		HAL_Delay(50);
 8001988:	2032      	movs	r0, #50	@ 0x32
 800198a:	f001 fd71 	bl	8003470 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET)
 800198e:	2108      	movs	r1, #8
 8001990:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001992:	f002 fc41 	bl	8004218 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d110      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
		{
			if(path_selection <= 3)
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	dc05      	bgt.n	80019b0 <HAL_GPIO_EXTI_Callback+0x40>
			path_selection++;
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019ac:	6013      	str	r3, [r2, #0]
			else if(path_selection == 4)
			path_selection = 0;
		}
	}
}
 80019ae:	e006      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
			else if(path_selection == 4)
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d102      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x4e>
			path_selection = 0;
 80019b8:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	200002c8 	.word	0x200002c8

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d8:	f001 fcd8 	bl	800338c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019dc:	f000 fa4e 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f7ff fdd6 	bl	8001590 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e4:	f7ff fafe 	bl	8000fe4 <MX_DMA_Init>
  MX_TIM9_Init();
 80019e8:	f001 f8c0 	bl	8002b6c <MX_TIM9_Init>
  MX_TIM2_Init();
 80019ec:	f000 fe7e 	bl	80026ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80019f0:	f000 fec8 	bl	8002784 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019f4:	f000 ff52 	bl	800289c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80019f8:	f001 faf2 	bl	8002fe0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80019fc:	f000 ffda 	bl	80029b4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001a00:	f000 fe1c 	bl	800263c <MX_TIM1_Init>
  MX_TIM6_Init();
 8001a04:	f001 f824 	bl	8002a50 <MX_TIM6_Init>
  MX_TIM8_Init();
 8001a08:	f001 f858 	bl	8002abc <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001a0c:	f001 fb12 	bl	8003034 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Engine_Init();
 8001a10:	f000 fbe4 	bl	80021dc <Engine_Init>
  Motor_Init();
 8001a14:	f000 fc2c 	bl	8002270 <Motor_Init>
  GraySensor_Init();
 8001a18:	f000 fc40 	bl	800229c <GraySensor_Init>
  HAL_TIM_Base_Start_IT(&htim5);//初始化TIM5，用于发送非阻塞信息
 8001a1c:	48e2      	ldr	r0, [pc, #904]	@ (8001da8 <main+0x3d8>)
 8001a1e:	f003 f945 	bl	8004cac <HAL_TIM_Base_Start_IT>

  HAL_Delay(3000);
 8001a22:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001a26:	f001 fd23 	bl	8003470 <HAL_Delay>
  Motor_Position(2);
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f7ff fb12 	bl	8001054 <Motor_Position>

  int path[5][30] = { {3,3,4,0}, {3,3,2,3,3,1,1,0}, {3,3,2,3,3,1,3,3,3,4,3,2,3,3,0}, {3,3,2,0}, {3,3,2,3,3,1,3,3,3,3,3,1,3,1,3,2,3,0} };
 8001a30:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a34:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2100      	movs	r1, #0
 8001a42:	f006 fb5c 	bl	80080fe <memset>
 8001a46:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a4a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a4e:	2203      	movs	r2, #3
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a56:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a62:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a66:	2204      	movs	r2, #4
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a6e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a72:	2203      	movs	r2, #3
 8001a74:	679a      	str	r2, [r3, #120]	@ 0x78
 8001a76:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a7a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a7e:	2203      	movs	r2, #3
 8001a80:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a82:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a86:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a90:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001a94:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001a9e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001aa2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8001aac:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001ab0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8001aba:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001abe:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001ac8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001acc:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001ad6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001ada:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001ade:	2203      	movs	r2, #3
 8001ae0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001ae4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001ae8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001aec:	2202      	movs	r2, #2
 8001aee:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001af2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001af6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001afa:	2203      	movs	r2, #3
 8001afc:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8001b00:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b04:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b08:	2203      	movs	r2, #3
 8001b0a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001b0e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b12:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b16:	2201      	movs	r2, #1
 8001b18:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8001b1c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b20:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b24:	2203      	movs	r2, #3
 8001b26:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8001b2a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b2e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b32:	2203      	movs	r2, #3
 8001b34:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8001b38:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b3c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b40:	2203      	movs	r2, #3
 8001b42:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8001b46:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b4a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b4e:	2204      	movs	r2, #4
 8001b50:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8001b54:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b58:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
 8001b62:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b66:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8001b70:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b74:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b78:	2203      	movs	r2, #3
 8001b7a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
 8001b7e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b82:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b86:	2203      	movs	r2, #3
 8001b88:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
 8001b8c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b90:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001b94:	2203      	movs	r2, #3
 8001b96:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
 8001b9a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001b9e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8001ba8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bac:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
 8001bb6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bba:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8001bc4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bc8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001bcc:	2203      	movs	r2, #3
 8001bce:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
 8001bd2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bd6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
 8001be0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001be4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001be8:	2203      	movs	r2, #3
 8001bea:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
 8001bee:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bf2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
 8001bfc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c00:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c04:	2201      	movs	r2, #1
 8001c06:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
 8001c0a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c0e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c12:	2203      	movs	r2, #3
 8001c14:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
 8001c18:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c1c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c20:	2203      	movs	r2, #3
 8001c22:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
 8001c26:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c2a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001c34:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c38:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001c42:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c46:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8001c50:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c54:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001c5e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c62:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c66:	2203      	movs	r2, #3
 8001c68:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 8001c6c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c70:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c74:	2201      	movs	r2, #1
 8001c76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c7a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c7e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c82:	2203      	movs	r2, #3
 8001c84:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8001c88:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c8c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c90:	2202      	movs	r2, #2
 8001c92:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 8001c96:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c9a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(path[path_selection][cross_cnt] == 0){
 8001ca4:	4b41      	ldr	r3, [pc, #260]	@ (8001dac <main+0x3dc>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b41      	ldr	r3, [pc, #260]	@ (8001db0 <main+0x3e0>)
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001cb0:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4403      	add	r3, r0
 8001cbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10f      	bne.n	8001ce6 <main+0x316>
		  Move_Twin_Wheels(-70, -70);
 8001cc6:	f06f 0145 	mvn.w	r1, #69	@ 0x45
 8001cca:	f06f 0045 	mvn.w	r0, #69	@ 0x45
 8001cce:	f000 f9a5 	bl	800201c <Move_Twin_Wheels>
	      HAL_Delay(310);
 8001cd2:	f44f 709b 	mov.w	r0, #310	@ 0x136
 8001cd6:	f001 fbcb 	bl	8003470 <HAL_Delay>
		  Move_Twin_Wheels(0, 0);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f000 f99d 	bl	800201c <Move_Twin_Wheels>
		  while(1);
 8001ce2:	bf00      	nop
 8001ce4:	e7fd      	b.n	8001ce2 <main+0x312>
	  }else if(path[path_selection][cross_cnt] == 1){
 8001ce6:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <main+0x3dc>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b31      	ldr	r3, [pc, #196]	@ (8001db0 <main+0x3e0>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001cf2:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4403      	add	r3, r0
 8001d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d11e      	bne.n	8001d46 <main+0x376>
		  Move_Turn(1);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff f9c3 	bl	8001094 <Move_Turn>
		  Position_Adj(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff fa54 	bl	80011bc <Position_Adj>
		  Motor_Position(2);
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7ff f99d 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <main+0x3e0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a23      	ldr	r2, [pc, #140]	@ (8001db0 <main+0x3e0>)
 8001d22:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < 20; i++){
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8001d2a:	e007      	b.n	8001d3c <main+0x36c>
			  Move_Straight(1);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff fb33 	bl	8001398 <Move_Straight>
		  for(int i = 0; i < 20; i++){
 8001d32:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001d36:	3301      	adds	r3, #1
 8001d38:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8001d3c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001d40:	2b13      	cmp	r3, #19
 8001d42:	ddf3      	ble.n	8001d2c <main+0x35c>
 8001d44:	e06a      	b.n	8001e1c <main+0x44c>
		  }
	  }else if(path[path_selection][cross_cnt] == 2){
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <main+0x3dc>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <main+0x3e0>)
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d52:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4403      	add	r3, r0
 8001d60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d125      	bne.n	8001db4 <main+0x3e4>
		  Move_Turn(2);
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f7ff f993 	bl	8001094 <Move_Turn>
		  Position_Adj(2);
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f7ff fa24 	bl	80011bc <Position_Adj>
		  Motor_Position(2);
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7ff f96d 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <main+0x3e0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <main+0x3e0>)
 8001d82:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < 20; i++){
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001d8a:	e007      	b.n	8001d9c <main+0x3cc>
			  Move_Straight(1);
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f7ff fb03 	bl	8001398 <Move_Straight>
		  for(int i = 0; i < 20; i++){
 8001d92:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8001d96:	3301      	adds	r3, #1
 8001d98:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001d9c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8001da0:	2b13      	cmp	r3, #19
 8001da2:	ddf3      	ble.n	8001d8c <main+0x3bc>
 8001da4:	e03a      	b.n	8001e1c <main+0x44c>
 8001da6:	bf00      	nop
 8001da8:	20000428 	.word	0x20000428
 8001dac:	200002c8 	.word	0x200002c8
 8001db0:	200002c4 	.word	0x200002c4
		  }
	  }else if(path[path_selection][cross_cnt] == 3){
 8001db4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <main+0x4a0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <main+0x4a4>)
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001dc0:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4403      	add	r3, r0
 8001dce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d103      	bne.n	8001dde <main+0x40e>
		  Move_Straight(1);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7ff fade 	bl	8001398 <Move_Straight>
 8001ddc:	e01e      	b.n	8001e1c <main+0x44c>
	  }
	  else if(path[path_selection][cross_cnt] == 4){
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <main+0x4a0>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <main+0x4a4>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001dea:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001dee:	4613      	mov	r3, r2
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4403      	add	r3, r0
 8001df8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d10d      	bne.n	8001e1c <main+0x44c>
		  Move_Turn(3);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f7ff f947 	bl	8001094 <Move_Turn>
		  Position_Adj(3);
 8001e06:	2003      	movs	r0, #3
 8001e08:	f7ff f9d8 	bl	80011bc <Position_Adj>
		  Motor_Position(1);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff f921 	bl	8001054 <Motor_Position>

		  cross_cnt++;
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <main+0x4a4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a16      	ldr	r2, [pc, #88]	@ (8001e74 <main+0x4a4>)
 8001e1a:	6013      	str	r3, [r2, #0]
//		  for(int i = 0; i < 20; i++){
//			  Move_Straight(1);
//		  }
	  }

	  if(Judge_cross() == 1){
 8001e1c:	f7ff fb98 	bl	8001550 <Judge_cross>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <main+0x466>
		  cross_cnt++;
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <main+0x4a4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <main+0x4a4>)
 8001e2e:	6013      	str	r3, [r2, #0]
          HAL_Delay(100);
 8001e30:	2064      	movs	r0, #100	@ 0x64
 8001e32:	f001 fb1d 	bl	8003470 <HAL_Delay>
	  }

	    if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // �????测到按键按下
 8001e36:	2110      	movs	r1, #16
 8001e38:	480f      	ldr	r0, [pc, #60]	@ (8001e78 <main+0x4a8>)
 8001e3a:	f002 f9ed 	bl	8004218 <HAL_GPIO_ReadPin>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f af2f 	bne.w	8001ca4 <main+0x2d4>
	    {
	        HAL_Delay(50); // �????单延迟，以便于消�????
 8001e46:	2032      	movs	r0, #50	@ 0x32
 8001e48:	f001 fb12 	bl	8003470 <HAL_Delay>
	        if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == GPIO_PIN_RESET) // 再次确认按键确实被按�????
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <main+0x4a8>)
 8001e50:	f002 f9e2 	bl	8004218 <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f47f af24 	bne.w	8001ca4 <main+0x2d4>
	        {
	      	  HAL_PWR_EnterSTANDBYMode();
 8001e5c:	f002 fa26 	bl	80042ac <HAL_PWR_EnterSTANDBYMode>
	      	  break;
 8001e60:	bf00      	nop
 8001e62:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200002c8 	.word	0x200002c8
 8001e74:	200002c4 	.word	0x200002c4
 8001e78:	40021000 	.word	0x40021000

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	@ 0x50
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 0320 	add.w	r3, r7, #32
 8001e86:	2230      	movs	r2, #48	@ 0x30
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f006 f937 	bl	80080fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b28      	ldr	r3, [pc, #160]	@ (8001f48 <SystemClock_Config+0xcc>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	4a27      	ldr	r2, [pc, #156]	@ (8001f48 <SystemClock_Config+0xcc>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <SystemClock_Config+0xcc>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <SystemClock_Config+0xd0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <SystemClock_Config+0xd0>)
 8001ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <SystemClock_Config+0xd0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001edc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eec:	2308      	movs	r3, #8
 8001eee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ef0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001efa:	2304      	movs	r3, #4
 8001efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 f9ea 	bl	80042dc <HAL_RCC_OscConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f0e:	f000 f81f 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f12:	230f      	movs	r3, #15
 8001f14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f16:	2302      	movs	r3, #2
 8001f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2105      	movs	r1, #5
 8001f30:	4618      	mov	r0, r3
 8001f32:	f002 fc4b 	bl	80047cc <HAL_RCC_ClockConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f3c:	f000 f808 	bl	8001f50 <Error_Handler>
  }
}
 8001f40:	bf00      	nop
 8001f42:	3750      	adds	r7, #80	@ 0x50
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <Error_Handler+0x8>

08001f5c <Move_Left>:
Engine EngineLeft;
Engine EngineRight;

//TIM3左轮 TIM4右轮
void Move_Left(int velocity)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0e      	blt.n	8001f88 <Move_Left+0x2c>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	4811      	ldr	r0, [pc, #68]	@ (8001fb4 <Move_Left+0x58>)
 8001f70:	f002 f96a 	bl	8004248 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2104      	movs	r1, #4
 8001f78:	480e      	ldr	r0, [pc, #56]	@ (8001fb4 <Move_Left+0x58>)
 8001f7a:	f002 f965 	bl	8004248 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, velocity);
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <Move_Left+0x5c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
		}
}
 8001f86:	e011      	b.n	8001fac <Move_Left+0x50>
		else if(velocity < 0){
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da0e      	bge.n	8001fac <Move_Left+0x50>
			HAL_GPIO_WritePin(Engine_Left1_GPIO_Port, Engine_Left1_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2108      	movs	r1, #8
 8001f92:	4808      	ldr	r0, [pc, #32]	@ (8001fb4 <Move_Left+0x58>)
 8001f94:	f002 f958 	bl	8004248 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Left2_GPIO_Port, Engine_Left2_Pin, GPIO_PIN_SET);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <Move_Left+0x58>)
 8001f9e:	f002 f953 	bl	8004248 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -1*velocity);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	425a      	negs	r2, r3
 8001fa6:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <Move_Left+0x5c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	20000398 	.word	0x20000398

08001fbc <Move_Right>:

void Move_Right(int velocity)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
		if(velocity >= 0){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0e      	blt.n	8001fe8 <Move_Right+0x2c>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2102      	movs	r1, #2
 8001fce:	4811      	ldr	r0, [pc, #68]	@ (8002014 <Move_Right+0x58>)
 8001fd0:	f002 f93a 	bl	8004248 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	480e      	ldr	r0, [pc, #56]	@ (8002014 <Move_Right+0x58>)
 8001fda:	f002 f935 	bl	8004248 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, velocity);
 8001fde:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <Move_Right+0x5c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(velocity < 0){
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
		}
}
 8001fe6:	e011      	b.n	800200c <Move_Right+0x50>
		else if(velocity < 0){
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da0e      	bge.n	800200c <Move_Right+0x50>
			HAL_GPIO_WritePin(Engine_Right1_GPIO_Port, Engine_Right1_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	4808      	ldr	r0, [pc, #32]	@ (8002014 <Move_Right+0x58>)
 8001ff4:	f002 f928 	bl	8004248 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine_Right2_GPIO_Port, Engine_Right2_Pin, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4805      	ldr	r0, [pc, #20]	@ (8002014 <Move_Right+0x58>)
 8001ffe:	f002 f923 	bl	8004248 <HAL_GPIO_WritePin>
		    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, -1*velocity);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	425a      	negs	r2, r3
 8002006:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <Move_Right+0x5c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40020c00 	.word	0x40020c00
 8002018:	200003e0 	.word	0x200003e0

0800201c <Move_Twin_Wheels>:
//分别控制左右轮 velocity 范围 -100 - -50  50 - 100

void Move_Twin_Wheels(int velocity_1 ,int velocity_2)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	Move_Left(velocity_2);
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f7ff ff98 	bl	8001f5c <Move_Left>
	Move_Right(velocity_1);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffc5 	bl	8001fbc <Move_Right>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <Read_Rotational_Speed>:
//velocity_1 是左轮， velocity_2 是右轮
//这里存在错误！Left Right 反了！但是上面那行注释正确
//65， 63几乎直行（偏右）

float Read_Rotational_Speed(int n)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	float rotational_speed = 0;
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
	if(n == 0)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d137      	bne.n	80020c0 <Read_Rotational_Speed+0x84>
	{
		int16_t pluse = COUNTERNUMLEFT - RELOADVALUELEFT/2;
 8002050:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <Read_Rotational_Speed+0x110>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b3c      	ldr	r3, [pc, #240]	@ (800214c <Read_Rotational_Speed+0x110>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	b29b      	uxth	r3, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	813b      	strh	r3, [r7, #8]
        //从开始到现在当前10ms的总脉冲数
		EngineLeft.totalAngle = pluse + EngineLeft.loopNum * RELOADVALUELEFT/2;
 8002068:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800206c:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <Read_Rotational_Speed+0x114>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4619      	mov	r1, r3
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <Read_Rotational_Speed+0x110>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <Read_Rotational_Speed+0x114>)
 8002084:	605a      	str	r2, [r3, #4]
        //进行速度计算,4倍频,编码器11位,减速比56,再乘以6000即为每分钟输出轴多少转
        //motor.totalAngle - motor.lastAngle为当前10ms内的增量，即脉冲数
		EngineLeft.speed = (float)(EngineLeft.totalAngle - EngineLeft.lastAngle)/(4*11*RR)*6000;
 8002086:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <Read_Rotational_Speed+0x114>)
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <Read_Rotational_Speed+0x114>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002098:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8002154 <Read_Rotational_Speed+0x118>
 800209c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a0:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002158 <Read_Rotational_Speed+0x11c>
 80020a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a8:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <Read_Rotational_Speed+0x114>)
 80020aa:	edc3 7a03 	vstr	s15, [r3, #12]
		rotational_speed = EngineLeft.speed;
 80020ae:	4b28      	ldr	r3, [pc, #160]	@ (8002150 <Read_Rotational_Speed+0x114>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	60fb      	str	r3, [r7, #12]
		EngineLeft.lastAngle = EngineLeft.totalAngle;              //更新转过的圈数
 80020b4:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <Read_Rotational_Speed+0x114>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a25      	ldr	r2, [pc, #148]	@ (8002150 <Read_Rotational_Speed+0x114>)
 80020ba:	6013      	str	r3, [r2, #0]
		return rotational_speed;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	e03c      	b.n	800213a <Read_Rotational_Speed+0xfe>
	}

    //如果是编码器更新中断,即10ms内,脉冲数超过了计数范围,需要进行处理
	else if(n == 1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d137      	bne.n	8002136 <Read_Rotational_Speed+0xfa>
	{
		int16_t pluse = COUNTERNUMRIGHT - RELOADVALUERIGHT/2;
 80020c6:	4b25      	ldr	r3, [pc, #148]	@ (800215c <Read_Rotational_Speed+0x120>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <Read_Rotational_Speed+0x120>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	b29b      	uxth	r3, r3
 80020dc:	817b      	strh	r3, [r7, #10]
        //从开始到现在当前10ms的总脉冲数
		EngineRight.totalAngle = pluse + EngineRight.loopNum * RELOADVALUERIGHT/2;
 80020de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <Read_Rotational_Speed+0x124>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4619      	mov	r1, r3
 80020e8:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <Read_Rotational_Speed+0x120>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <Read_Rotational_Speed+0x124>)
 80020fa:	605a      	str	r2, [r3, #4]
        //进行速度计算,4倍频,编码器11位,减速比56,再乘以6000即为每分钟输出轴多少转
        //motor.totalAngle - motor.lastAngle为当前10ms内的增量，即脉冲数
		EngineRight.speed = (float)(EngineRight.totalAngle - EngineRight.lastAngle)/(4*11*RR)*6000;
 80020fc:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <Read_Rotational_Speed+0x124>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <Read_Rotational_Speed+0x124>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002154 <Read_Rotational_Speed+0x118>
 8002112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002116:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002158 <Read_Rotational_Speed+0x11c>
 800211a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <Read_Rotational_Speed+0x124>)
 8002120:	edc3 7a03 	vstr	s15, [r3, #12]
		rotational_speed = EngineRight.speed;
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <Read_Rotational_Speed+0x124>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60fb      	str	r3, [r7, #12]
		EngineRight.lastAngle = EngineRight.totalAngle;              //更新转过的圈数
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <Read_Rotational_Speed+0x124>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a0c      	ldr	r2, [pc, #48]	@ (8002160 <Read_Rotational_Speed+0x124>)
 8002130:	6013      	str	r3, [r2, #0]
		return rotational_speed;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	e001      	b.n	800213a <Read_Rotational_Speed+0xfe>
	}
	else
		return 0;
 8002136:	f04f 0300 	mov.w	r3, #0
}
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	20000308 	.word	0x20000308
 8002150:	200002e4 	.word	0x200002e4
 8002154:	451a0000 	.word	0x451a0000
 8002158:	45bb8000 	.word	0x45bb8000
 800215c:	200004b8 	.word	0x200004b8
 8002160:	200002f4 	.word	0x200002f4
 8002164:	00000000 	.word	0x00000000

08002168 <Motor_Control>:
//n=0读左轮转速，n=1读右轮转速


void Motor_Control(int duty_cycle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    // 舵机控制占空比范围2.5% ~ 12.5%
    // Counter Period设置的是2000，因此占空比设置范围是50 ~ 250
	Motor_angel = duty_cycle * 0.9 - 45;
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7fe f9d7 	bl	8000524 <__aeabi_i2d>
 8002176:	a317      	add	r3, pc, #92	@ (adr r3, 80021d4 <Motor_Control+0x6c>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fa3c 	bl	80005f8 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <Motor_Control+0x60>)
 800218e:	f7fe f87b 	bl	8000288 <__aeabi_dsub>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fd25 	bl	8000be8 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <Motor_Control+0x64>)
 80021a2:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 50 + duty_cycle);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <Motor_Control+0x68>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 250 - duty_cycle);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1c3 02fa 	rsb	r2, r3, #250	@ 0xfa
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <Motor_Control+0x68>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	f3af 8000 	nop.w
 80021c8:	40468000 	.word	0x40468000
 80021cc:	200002e0 	.word	0x200002e0
 80021d0:	20000500 	.word	0x20000500
 80021d4:	cccccccd 	.word	0xcccccccd
 80021d8:	3feccccc 	.word	0x3feccccc

080021dc <Engine_Init>:

//第二版
//195为推物块状态,250为完全收缩状态，170为让物块进来前的状态

void Engine_Init()
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);      //开启编码器定时器
 80021e0:	213c      	movs	r1, #60	@ 0x3c
 80021e2:	481c      	ldr	r0, [pc, #112]	@ (8002254 <Engine_Init+0x78>)
 80021e4:	f002 ffe8 	bl	80051b8 <HAL_TIM_Encoder_Start>
    __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_UPDATE);           //开启编码器定时器更新中断,防溢出处理
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <Engine_Init+0x78>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <Engine_Init+0x78>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80021f8:	213c      	movs	r1, #60	@ 0x3c
 80021fa:	4817      	ldr	r0, [pc, #92]	@ (8002258 <Engine_Init+0x7c>)
 80021fc:	f002 ffdc 	bl	80051b8 <HAL_TIM_Encoder_Start>
    __HAL_TIM_ENABLE_IT(&htim8,TIM_IT_UPDATE);
 8002200:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <Engine_Init+0x7c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <Engine_Init+0x7c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);                       //开启10ms定时器中断
 8002210:	4812      	ldr	r0, [pc, #72]	@ (800225c <Engine_Init+0x80>)
 8002212:	f002 fd4b 	bl	8004cac <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002216:	2100      	movs	r1, #0
 8002218:	4811      	ldr	r0, [pc, #68]	@ (8002260 <Engine_Init+0x84>)
 800221a:	f002 fe11 	bl	8004e40 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800221e:	2100      	movs	r1, #0
 8002220:	4810      	ldr	r0, [pc, #64]	@ (8002264 <Engine_Init+0x88>)
 8002222:	f002 fe0d 	bl	8004e40 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 10000);
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <Engine_Init+0x78>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim8, 10000);
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <Engine_Init+0x7c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24
	EngineLeft.loopNum = 0;
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <Engine_Init+0x8c>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
	EngineRight.loopNum = 0;
 8002240:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <Engine_Init+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
	Move_Twin_Wheels(0, 0);
 8002246:	2100      	movs	r1, #0
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff fee7 	bl	800201c <Move_Twin_Wheels>
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000308 	.word	0x20000308
 8002258:	200004b8 	.word	0x200004b8
 800225c:	20000470 	.word	0x20000470
 8002260:	20000398 	.word	0x20000398
 8002264:	200003e0 	.word	0x200003e0
 8002268:	200002e4 	.word	0x200002e4
 800226c:	200002f4 	.word	0x200002f4

08002270 <Motor_Init>:


void Motor_Init()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
 8002274:	2100      	movs	r1, #0
 8002276:	4808      	ldr	r0, [pc, #32]	@ (8002298 <Motor_Init+0x28>)
 8002278:	f002 fde2 	bl	8004e40 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_2);
 800227c:	2104      	movs	r1, #4
 800227e:	4806      	ldr	r0, [pc, #24]	@ (8002298 <Motor_Init+0x28>)
 8002280:	f002 fdde 	bl	8004e40 <HAL_TIM_PWM_Start_IT>
	Motor_Control(50);
 8002284:	2032      	movs	r0, #50	@ 0x32
 8002286:	f7ff ff6f 	bl	8002168 <Motor_Control>
	HAL_Delay(1000);
 800228a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800228e:	f001 f8ef 	bl	8003470 <HAL_Delay>
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000500 	.word	0x20000500

0800229c <GraySensor_Init>:
//延时0.8s保证姿态调整正常

void GraySensor_Init()
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
	GrayData[0] = 0;
 80022a0:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <GraySensor_Init+0x2c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
	GrayData[1] = 0;
 80022a6:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <GraySensor_Init+0x2c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
	GrayData[2] = 0;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <GraySensor_Init+0x2c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
	GrayData[3] = 0;
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <GraySensor_Init+0x2c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
	GrayData[4] = 0;
 80022b8:	4b03      	ldr	r3, [pc, #12]	@ (80022c8 <GraySensor_Init+0x2c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	200002cc 	.word	0x200002cc

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a0f      	ldr	r2, [pc, #60]	@ (8002318 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <NMI_Handler+0x4>

08002324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <HardFault_Handler+0x4>

0800232c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <MemManage_Handler+0x4>

08002334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <BusFault_Handler+0x4>

0800233c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <UsageFault_Handler+0x4>

08002344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002372:	f001 f85d 	bl	8003430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800237e:	2008      	movs	r0, #8
 8002380:	f001 ff7c 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <DMA1_Stream1_IRQHandler+0x10>)
 800238e:	f001 fb3d 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000698 	.word	0x20000698

0800239c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <DMA1_Stream3_IRQHandler+0x10>)
 80023a2:	f001 fb33 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200006f8 	.word	0x200006f8

080023b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <DMA1_Stream5_IRQHandler+0x10>)
 80023b6:	f001 fb29 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200005d8 	.word	0x200005d8

080023c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023c8:	4802      	ldr	r0, [pc, #8]	@ (80023d4 <DMA1_Stream6_IRQHandler+0x10>)
 80023ca:	f001 fb1f 	bl	8003a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000638 	.word	0x20000638

080023d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023dc:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023de:	f002 ff79 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000308 	.word	0x20000308

080023ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <TIM2_IRQHandler+0x10>)
 80023f2:	f002 ff6f 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000350 	.word	0x20000350

08002400 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <TIM3_IRQHandler+0x10>)
 8002406:	f002 ff65 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000398 	.word	0x20000398

08002414 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <TIM4_IRQHandler+0x10>)
 800241a:	f002 ff5b 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200003e0 	.word	0x200003e0

08002428 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <USART2_IRQHandler+0x10>)
 800242e:	f003 ff31 	bl	8006294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000548 	.word	0x20000548

0800243c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <USART3_IRQHandler+0x10>)
 8002442:	f003 ff27 	bl	8006294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000590 	.word	0x20000590

08002450 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002456:	f002 ff3d 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200004b8 	.word	0x200004b8

08002464 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <TIM5_IRQHandler+0x10>)
 800246a:	f002 ff33 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000428 	.word	0x20000428

08002478 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <TIM6_DAC_IRQHandler+0x10>)
 800247e:	f002 ff29 	bl	80052d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000470 	.word	0x20000470

0800248c <_getpid>:
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
 8002490:	2301      	movs	r3, #1
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_kill>:
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	f005 fe7d 	bl	80081a4 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2216      	movs	r2, #22
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_exit>:
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffe7 	bl	800249c <_kill>
 80024ce:	bf00      	nop
 80024d0:	e7fd      	b.n	80024ce <_exit+0x12>

080024d2 <_read>:
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	e00a      	b.n	80024fa <_read+0x28>
 80024e4:	f3af 8000 	nop.w
 80024e8:	4601      	mov	r1, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	b2ca      	uxtb	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	dbf0      	blt.n	80024e4 <_read+0x12>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_write>:
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	e009      	b.n	8002532 <_write+0x26>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	60ba      	str	r2, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f3af 8000 	nop.w
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	dbf1      	blt.n	800251e <_write+0x12>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_close>:
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_fstat>:
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	2300      	movs	r3, #0
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_isatty>:
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	2301      	movs	r3, #1
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_lseek>:
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	2300      	movs	r3, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <_sbrk>:
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	4a14      	ldr	r2, [pc, #80]	@ (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
 80025dc:	f005 fde2 	bl	80081a4 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20020000 	.word	0x20020000
 800260c:	00000400 	.word	0x00000400
 8002610:	20000304 	.word	0x20000304
 8002614:	200008a8 	.word	0x200008a8

08002618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	@ 0x30
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	2224      	movs	r2, #36	@ 0x24
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f005 fd57 	bl	80080fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002658:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 800265a:	4a23      	ldr	r2, [pc, #140]	@ (80026e8 <MX_TIM1_Init+0xac>)
 800265c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	4b1f      	ldr	r3, [pc, #124]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800266a:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 800266c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 800267a:	2200      	movs	r2, #0
 800267c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267e:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002684:	2301      	movs	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800268c:	2301      	movs	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800269c:	2301      	movs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	4619      	mov	r1, r3
 80026ae:	480d      	ldr	r0, [pc, #52]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 80026b0:	f002 fcdc 	bl	800506c <HAL_TIM_Encoder_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80026ba:	f7ff fc49 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4806      	ldr	r0, [pc, #24]	@ (80026e4 <MX_TIM1_Init+0xa8>)
 80026cc:	f003 fc92 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80026d6:	f7ff fc3b 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	3730      	adds	r7, #48	@ 0x30
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000308 	.word	0x20000308
 80026e8:	40010000 	.word	0x40010000

080026ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002708:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <MX_TIM2_Init+0x94>)
 800270a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800270e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <MX_TIM2_Init+0x94>)
 8002712:	2253      	movs	r2, #83	@ 0x53
 8002714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002716:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <MX_TIM2_Init+0x94>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <MX_TIM2_Init+0x94>)
 800271e:	2263      	movs	r2, #99	@ 0x63
 8002720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002722:	4b17      	ldr	r3, [pc, #92]	@ (8002780 <MX_TIM2_Init+0x94>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <MX_TIM2_Init+0x94>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800272e:	4814      	ldr	r0, [pc, #80]	@ (8002780 <MX_TIM2_Init+0x94>)
 8002730:	f002 fa6c 	bl	8004c0c <HAL_TIM_Base_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800273a:	f7ff fc09 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	4619      	mov	r1, r3
 800274a:	480d      	ldr	r0, [pc, #52]	@ (8002780 <MX_TIM2_Init+0x94>)
 800274c:	f002 ff74 	bl	8005638 <HAL_TIM_ConfigClockSource>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002756:	f7ff fbfb 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002762:	463b      	mov	r3, r7
 8002764:	4619      	mov	r1, r3
 8002766:	4806      	ldr	r0, [pc, #24]	@ (8002780 <MX_TIM2_Init+0x94>)
 8002768:	f003 fc44 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002772:	f7ff fbed 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000350 	.word	0x20000350

08002784 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b092      	sub	sp, #72	@ 0x48
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b2:	463b      	mov	r3, r7
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	615a      	str	r2, [r3, #20]
 80027c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027c4:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <MX_TIM3_Init+0x110>)
 80027c6:	4a34      	ldr	r2, [pc, #208]	@ (8002898 <MX_TIM3_Init+0x114>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80027ca:	4b32      	ldr	r3, [pc, #200]	@ (8002894 <MX_TIM3_Init+0x110>)
 80027cc:	2253      	movs	r2, #83	@ 0x53
 80027ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b30      	ldr	r3, [pc, #192]	@ (8002894 <MX_TIM3_Init+0x110>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80027d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002894 <MX_TIM3_Init+0x110>)
 80027d8:	2263      	movs	r2, #99	@ 0x63
 80027da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002894 <MX_TIM3_Init+0x110>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <MX_TIM3_Init+0x110>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027e8:	482a      	ldr	r0, [pc, #168]	@ (8002894 <MX_TIM3_Init+0x110>)
 80027ea:	f002 fa0f 	bl	8004c0c <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80027f4:	f7ff fbac 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002802:	4619      	mov	r1, r3
 8002804:	4823      	ldr	r0, [pc, #140]	@ (8002894 <MX_TIM3_Init+0x110>)
 8002806:	f002 ff17 	bl	8005638 <HAL_TIM_ConfigClockSource>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002810:	f7ff fb9e 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002814:	481f      	ldr	r0, [pc, #124]	@ (8002894 <MX_TIM3_Init+0x110>)
 8002816:	f002 fab9 	bl	8004d8c <HAL_TIM_PWM_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002820:	f7ff fb96 	bl	8001f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002828:	2310      	movs	r3, #16
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800282c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	4818      	ldr	r0, [pc, #96]	@ (8002894 <MX_TIM3_Init+0x110>)
 8002834:	f002 ffc7 	bl	80057c6 <HAL_TIM_SlaveConfigSynchro>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 800283e:	f7ff fb87 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002842:	2320      	movs	r3, #32
 8002844:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	4810      	ldr	r0, [pc, #64]	@ (8002894 <MX_TIM3_Init+0x110>)
 8002852:	f003 fbcf 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800285c:	f7ff fb78 	bl	8001f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002860:	2360      	movs	r3, #96	@ 0x60
 8002862:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	4807      	ldr	r0, [pc, #28]	@ (8002894 <MX_TIM3_Init+0x110>)
 8002878:	f002 fe1c 	bl	80054b4 <HAL_TIM_PWM_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002882:	f7ff fb65 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002886:	4803      	ldr	r0, [pc, #12]	@ (8002894 <MX_TIM3_Init+0x110>)
 8002888:	f000 fb20 	bl	8002ecc <HAL_TIM_MspPostInit>

}
 800288c:	bf00      	nop
 800288e:	3748      	adds	r7, #72	@ 0x48
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000398 	.word	0x20000398
 8002898:	40000400 	.word	0x40000400

0800289c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b092      	sub	sp, #72	@ 0x48
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ca:	463b      	mov	r3, r7
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
 80028d8:	615a      	str	r2, [r3, #20]
 80028da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <MX_TIM4_Init+0x110>)
 80028de:	4a34      	ldr	r2, [pc, #208]	@ (80029b0 <MX_TIM4_Init+0x114>)
 80028e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80028e2:	4b32      	ldr	r3, [pc, #200]	@ (80029ac <MX_TIM4_Init+0x110>)
 80028e4:	2253      	movs	r2, #83	@ 0x53
 80028e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e8:	4b30      	ldr	r3, [pc, #192]	@ (80029ac <MX_TIM4_Init+0x110>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80028ee:	4b2f      	ldr	r3, [pc, #188]	@ (80029ac <MX_TIM4_Init+0x110>)
 80028f0:	2263      	movs	r2, #99	@ 0x63
 80028f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b2d      	ldr	r3, [pc, #180]	@ (80029ac <MX_TIM4_Init+0x110>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b2c      	ldr	r3, [pc, #176]	@ (80029ac <MX_TIM4_Init+0x110>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002900:	482a      	ldr	r0, [pc, #168]	@ (80029ac <MX_TIM4_Init+0x110>)
 8002902:	f002 f983 	bl	8004c0c <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800290c:	f7ff fb20 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002914:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002916:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800291a:	4619      	mov	r1, r3
 800291c:	4823      	ldr	r0, [pc, #140]	@ (80029ac <MX_TIM4_Init+0x110>)
 800291e:	f002 fe8b 	bl	8005638 <HAL_TIM_ConfigClockSource>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002928:	f7ff fb12 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800292c:	481f      	ldr	r0, [pc, #124]	@ (80029ac <MX_TIM4_Init+0x110>)
 800292e:	f002 fa2d 	bl	8004d8c <HAL_TIM_PWM_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002938:	f7ff fb0a 	bl	8001f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002940:	2310      	movs	r3, #16
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002948:	4619      	mov	r1, r3
 800294a:	4818      	ldr	r0, [pc, #96]	@ (80029ac <MX_TIM4_Init+0x110>)
 800294c:	f002 ff3b 	bl	80057c6 <HAL_TIM_SlaveConfigSynchro>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8002956:	f7ff fafb 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	4619      	mov	r1, r3
 8002968:	4810      	ldr	r0, [pc, #64]	@ (80029ac <MX_TIM4_Init+0x110>)
 800296a:	f003 fb43 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8002974:	f7ff faec 	bl	8001f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002978:	2360      	movs	r3, #96	@ 0x60
 800297a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002988:	463b      	mov	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	4619      	mov	r1, r3
 800298e:	4807      	ldr	r0, [pc, #28]	@ (80029ac <MX_TIM4_Init+0x110>)
 8002990:	f002 fd90 	bl	80054b4 <HAL_TIM_PWM_ConfigChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800299a:	f7ff fad9 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800299e:	4803      	ldr	r0, [pc, #12]	@ (80029ac <MX_TIM4_Init+0x110>)
 80029a0:	f000 fa94 	bl	8002ecc <HAL_TIM_MspPostInit>

}
 80029a4:	bf00      	nop
 80029a6:	3748      	adds	r7, #72	@ 0x48
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200003e0 	.word	0x200003e0
 80029b0:	40000800 	.word	0x40000800

080029b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	463b      	mov	r3, r7
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <MX_TIM5_Init+0x94>)
 80029d2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a4c <MX_TIM5_Init+0x98>)
 80029d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a48 <MX_TIM5_Init+0x94>)
 80029d8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80029dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <MX_TIM5_Init+0x94>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 80029e4:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <MX_TIM5_Init+0x94>)
 80029e6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80029ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <MX_TIM5_Init+0x94>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <MX_TIM5_Init+0x94>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80029f8:	4813      	ldr	r0, [pc, #76]	@ (8002a48 <MX_TIM5_Init+0x94>)
 80029fa:	f002 f907 	bl	8004c0c <HAL_TIM_Base_Init>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002a04:	f7ff faa4 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	4619      	mov	r1, r3
 8002a14:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <MX_TIM5_Init+0x94>)
 8002a16:	f002 fe0f 	bl	8005638 <HAL_TIM_ConfigClockSource>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002a20:	f7ff fa96 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <MX_TIM5_Init+0x94>)
 8002a32:	f003 fadf 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002a3c:	f7ff fa88 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000428 	.word	0x20000428
 8002a4c:	40000c00 	.word	0x40000c00

08002a50 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a56:	463b      	mov	r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a5e:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <MX_TIM6_Init+0x64>)
 8002a60:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <MX_TIM6_Init+0x68>)
 8002a62:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <MX_TIM6_Init+0x64>)
 8002a66:	2253      	movs	r2, #83	@ 0x53
 8002a68:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <MX_TIM6_Init+0x64>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <MX_TIM6_Init+0x64>)
 8002a72:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002a76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <MX_TIM6_Init+0x64>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a7e:	480d      	ldr	r0, [pc, #52]	@ (8002ab4 <MX_TIM6_Init+0x64>)
 8002a80:	f002 f8c4 	bl	8004c0c <HAL_TIM_Base_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002a8a:	f7ff fa61 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4806      	ldr	r0, [pc, #24]	@ (8002ab4 <MX_TIM6_Init+0x64>)
 8002a9c:	f003 faaa 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002aa6:	f7ff fa53 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000470 	.word	0x20000470
 8002ab8:	40001000 	.word	0x40001000

08002abc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	@ 0x30
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	2224      	movs	r2, #36	@ 0x24
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f005 fb17 	bl	80080fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ad8:	4b22      	ldr	r3, [pc, #136]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002ada:	4a23      	ldr	r2, [pc, #140]	@ (8002b68 <MX_TIM8_Init+0xac>)
 8002adc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ade:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20000;
 8002aea:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002aec:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002af0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002af8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afe:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	480d      	ldr	r0, [pc, #52]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002b30:	f002 fa9c 	bl	800506c <HAL_TIM_Encoder_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002b3a:	f7ff fa09 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4806      	ldr	r0, [pc, #24]	@ (8002b64 <MX_TIM8_Init+0xa8>)
 8002b4c:	f003 fa52 	bl	8005ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002b56:	f7ff f9fb 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	3730      	adds	r7, #48	@ 0x30
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200004b8 	.word	0x200004b8
 8002b68:	40010400 	.word	0x40010400

08002b6c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	@ 0x30
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b72:	f107 0320 	add.w	r3, r7, #32
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	611a      	str	r2, [r3, #16]
 8002b8e:	615a      	str	r2, [r3, #20]
 8002b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002b92:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002b94:	4a2b      	ldr	r2, [pc, #172]	@ (8002c44 <MX_TIM9_Init+0xd8>)
 8002b96:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1680-1;
 8002b98:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002b9a:	f240 628f 	movw	r2, #1679	@ 0x68f
 8002b9e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 8002ba6:	4b26      	ldr	r3, [pc, #152]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002ba8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002bac:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	4b22      	ldr	r3, [pc, #136]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002bba:	4821      	ldr	r0, [pc, #132]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002bbc:	f002 f826 	bl	8004c0c <HAL_TIM_Base_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8002bc6:	f7ff f9c3 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bce:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002bd0:	f107 0320 	add.w	r3, r7, #32
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	481a      	ldr	r0, [pc, #104]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002bd8:	f002 fd2e 	bl	8005638 <HAL_TIM_ConfigClockSource>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8002be2:	f7ff f9b5 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002be6:	4816      	ldr	r0, [pc, #88]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002be8:	f002 f8d0 	bl	8004d8c <HAL_TIM_PWM_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002bf2:	f7ff f9ad 	bl	8001f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf6:	2360      	movs	r3, #96	@ 0x60
 8002bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480c      	ldr	r0, [pc, #48]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002c0e:	f002 fc51 	bl	80054b4 <HAL_TIM_PWM_ConfigChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002c18:	f7ff f99a 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	2204      	movs	r2, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	4807      	ldr	r0, [pc, #28]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002c24:	f002 fc46 	bl	80054b4 <HAL_TIM_PWM_ConfigChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 8002c2e:	f7ff f98f 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002c32:	4803      	ldr	r0, [pc, #12]	@ (8002c40 <MX_TIM9_Init+0xd4>)
 8002c34:	f000 f94a 	bl	8002ecc <HAL_TIM_MspPostInit>

}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	@ 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000500 	.word	0x20000500
 8002c44:	40014000 	.word	0x40014000

08002c48 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	@ 0x30
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3a      	ldr	r2, [pc, #232]	@ (8002d50 <HAL_TIM_Encoder_MspInit+0x108>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d135      	bne.n	8002cd6 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	4b39      	ldr	r3, [pc, #228]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a38      	ldr	r2, [pc, #224]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7a:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	4b32      	ldr	r3, [pc, #200]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a31      	ldr	r2, [pc, #196]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b2f      	ldr	r3, [pc, #188]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Engine_Leftcode1_Pin|Engine_Leftcode2_Pin;
 8002ca2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4826      	ldr	r0, [pc, #152]	@ (8002d58 <HAL_TIM_Encoder_MspInit+0x110>)
 8002cc0:	f001 f90e 	bl	8003ee0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 4, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	2019      	movs	r0, #25
 8002cca:	f000 fcd0 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cce:	2019      	movs	r0, #25
 8002cd0:	f000 fce9 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002cd4:	e038      	b.n	8002d48 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM8)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a20      	ldr	r2, [pc, #128]	@ (8002d5c <HAL_TIM_Encoder_MspInit+0x114>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d133      	bne.n	8002d48 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002cea:	f043 0302 	orr.w	r3, r3, #2
 8002cee:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf0:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d06:	f043 0304 	orr.w	r3, r3, #4
 8002d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0c:	4b11      	ldr	r3, [pc, #68]	@ (8002d54 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Engine_Rightcode1_Pin|Engine_Rightcode2_Pin;
 8002d18:	23c0      	movs	r3, #192	@ 0xc0
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2c:	f107 031c 	add.w	r3, r7, #28
 8002d30:	4619      	mov	r1, r3
 8002d32:	480b      	ldr	r0, [pc, #44]	@ (8002d60 <HAL_TIM_Encoder_MspInit+0x118>)
 8002d34:	f001 f8d4 	bl	8003ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 4, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	202c      	movs	r0, #44	@ 0x2c
 8002d3e:	f000 fc96 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002d42:	202c      	movs	r0, #44	@ 0x2c
 8002d44:	f000 fcaf 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002d48:	bf00      	nop
 8002d4a:	3730      	adds	r7, #48	@ 0x30
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40010400 	.word	0x40010400
 8002d60:	40020800 	.word	0x40020800

08002d64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d74:	d116      	bne.n	8002da4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d86:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2101      	movs	r1, #1
 8002d96:	201c      	movs	r0, #28
 8002d98:	f000 fc69 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d9c:	201c      	movs	r0, #28
 8002d9e:	f000 fc82 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002da2:	e082      	b.n	8002eaa <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a43      	ldr	r2, [pc, #268]	@ (8002eb8 <HAL_TIM_Base_MspInit+0x154>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d116      	bne.n	8002ddc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	4b40      	ldr	r3, [pc, #256]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a3f      	ldr	r2, [pc, #252]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002db8:	f043 0302 	orr.w	r3, r3, #2
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2103      	movs	r1, #3
 8002dce:	201d      	movs	r0, #29
 8002dd0:	f000 fc4d 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dd4:	201d      	movs	r0, #29
 8002dd6:	f000 fc66 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002dda:	e066      	b.n	8002eaa <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM4)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a36      	ldr	r2, [pc, #216]	@ (8002ebc <HAL_TIM_Base_MspInit+0x158>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d116      	bne.n	8002e14 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	4a31      	ldr	r2, [pc, #196]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df6:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2103      	movs	r1, #3
 8002e06:	201e      	movs	r0, #30
 8002e08:	f000 fc31 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e0c:	201e      	movs	r0, #30
 8002e0e:	f000 fc4a 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002e12:	e04a      	b.n	8002eaa <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM5)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a29      	ldr	r2, [pc, #164]	@ (8002ec0 <HAL_TIM_Base_MspInit+0x15c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d116      	bne.n	8002e4c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2e:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2105      	movs	r1, #5
 8002e3e:	2032      	movs	r0, #50	@ 0x32
 8002e40:	f000 fc15 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e44:	2032      	movs	r0, #50	@ 0x32
 8002e46:	f000 fc2e 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002e4a:	e02e      	b.n	8002eaa <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM6)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <HAL_TIM_Base_MspInit+0x160>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d116      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a15      	ldr	r2, [pc, #84]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e60:	f043 0310 	orr.w	r3, r3, #16
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 7, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2107      	movs	r1, #7
 8002e76:	2036      	movs	r0, #54	@ 0x36
 8002e78:	f000 fbf9 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e7c:	2036      	movs	r0, #54	@ 0x36
 8002e7e:	f000 fc12 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 8002e82:	e012      	b.n	8002eaa <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec8 <HAL_TIM_Base_MspInit+0x164>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10d      	bne.n	8002eaa <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	4a07      	ldr	r2, [pc, #28]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e9e:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_TIM_Base_MspInit+0x150>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40000400 	.word	0x40000400
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	40000c00 	.word	0x40000c00
 8002ec4:	40001000 	.word	0x40001000
 8002ec8:	40014000 	.word	0x40014000

08002ecc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	@ 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a36      	ldr	r2, [pc, #216]	@ (8002fc4 <HAL_TIM_MspPostInit+0xf8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d11e      	bne.n	8002f2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	4b35      	ldr	r3, [pc, #212]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	4a34      	ldr	r2, [pc, #208]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efe:	4b32      	ldr	r3, [pc, #200]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Engine_PWM_Left_Pin;
 8002f0a:	2340      	movs	r3, #64	@ 0x40
 8002f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Left_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	4619      	mov	r1, r3
 8002f24:	4829      	ldr	r0, [pc, #164]	@ (8002fcc <HAL_TIM_MspPostInit+0x100>)
 8002f26:	f000 ffdb 	bl	8003ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002f2a:	e047      	b.n	8002fbc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a27      	ldr	r2, [pc, #156]	@ (8002fd0 <HAL_TIM_MspPostInit+0x104>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d11f      	bne.n	8002f76 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	4a22      	ldr	r2, [pc, #136]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002f40:	f043 0308 	orr.w	r3, r3, #8
 8002f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f46:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Engine_PWM_Right_Pin;
 8002f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f64:	2302      	movs	r3, #2
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Engine_PWM_Right_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4819      	ldr	r0, [pc, #100]	@ (8002fd4 <HAL_TIM_MspPostInit+0x108>)
 8002f70:	f000 ffb6 	bl	8003ee0 <HAL_GPIO_Init>
}
 8002f74:	e022      	b.n	8002fbc <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM9)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a17      	ldr	r2, [pc, #92]	@ (8002fd8 <HAL_TIM_MspPostInit+0x10c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d11d      	bne.n	8002fbc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002f8a:	f043 0310 	orr.w	r3, r3, #16
 8002f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f90:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <HAL_TIM_MspPostInit+0xfc>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_PWM_TIM9_CH1_Pin|Motor_PWM_TIM9_CH2_Pin;
 8002f9c:	2360      	movs	r3, #96	@ 0x60
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002fac:	2303      	movs	r3, #3
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4809      	ldr	r0, [pc, #36]	@ (8002fdc <HAL_TIM_MspPostInit+0x110>)
 8002fb8:	f000 ff92 	bl	8003ee0 <HAL_GPIO_Init>
}
 8002fbc:	bf00      	nop
 8002fbe:	3728      	adds	r7, #40	@ 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	40020c00 	.word	0x40020c00
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8002fe6:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <MX_USART2_UART_Init+0x50>)
 8002fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002fea:	4b10      	ldr	r3, [pc, #64]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8002fec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003004:	4b09      	ldr	r3, [pc, #36]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8003006:	220c      	movs	r2, #12
 8003008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003016:	4805      	ldr	r0, [pc, #20]	@ (800302c <MX_USART2_UART_Init+0x4c>)
 8003018:	f003 f87c 	bl	8006114 <HAL_UART_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003022:	f7fe ff95 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000548 	.word	0x20000548
 8003030:	40004400 	.word	0x40004400

08003034 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 800303a:	4a12      	ldr	r2, [pc, #72]	@ (8003084 <MX_USART3_UART_Init+0x50>)
 800303c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 8003040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003044:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003046:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003052:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 800305a:	220c      	movs	r2, #12
 800305c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800306a:	4805      	ldr	r0, [pc, #20]	@ (8003080 <MX_USART3_UART_Init+0x4c>)
 800306c:	f003 f852 	bl	8006114 <HAL_UART_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003076:	f7fe ff6b 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000590 	.word	0x20000590
 8003084:	40004800 	.word	0x40004800

08003088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	@ 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 031c 	add.w	r3, r7, #28
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a97      	ldr	r2, [pc, #604]	@ (8003304 <HAL_UART_MspInit+0x27c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	f040 8091 	bne.w	80031ce <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	4b95      	ldr	r3, [pc, #596]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	4a94      	ldr	r2, [pc, #592]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80030b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80030bc:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	4a8d      	ldr	r2, [pc, #564]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d8:	4b8b      	ldr	r3, [pc, #556]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BLE_TX_Pin|BLE_RX_Pin;
 80030e4:	230c      	movs	r3, #12
 80030e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030f4:	2307      	movs	r3, #7
 80030f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	4883      	ldr	r0, [pc, #524]	@ (800330c <HAL_UART_MspInit+0x284>)
 8003100:	f000 feee 	bl	8003ee0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003104:	4b82      	ldr	r3, [pc, #520]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003106:	4a83      	ldr	r2, [pc, #524]	@ (8003314 <HAL_UART_MspInit+0x28c>)
 8003108:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800310a:	4b81      	ldr	r3, [pc, #516]	@ (8003310 <HAL_UART_MspInit+0x288>)
 800310c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003110:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003112:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003118:	4b7d      	ldr	r3, [pc, #500]	@ (8003310 <HAL_UART_MspInit+0x288>)
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800311e:	4b7c      	ldr	r3, [pc, #496]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003120:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003124:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003126:	4b7a      	ldr	r3, [pc, #488]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003128:	2200      	movs	r2, #0
 800312a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800312c:	4b78      	ldr	r3, [pc, #480]	@ (8003310 <HAL_UART_MspInit+0x288>)
 800312e:	2200      	movs	r2, #0
 8003130:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003132:	4b77      	ldr	r3, [pc, #476]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003134:	2200      	movs	r2, #0
 8003136:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003138:	4b75      	ldr	r3, [pc, #468]	@ (8003310 <HAL_UART_MspInit+0x288>)
 800313a:	2200      	movs	r2, #0
 800313c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800313e:	4b74      	ldr	r3, [pc, #464]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003140:	2200      	movs	r2, #0
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003144:	4872      	ldr	r0, [pc, #456]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003146:	f000 fac9 	bl	80036dc <HAL_DMA_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003150:	f7fe fefe 	bl	8001f50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a6e      	ldr	r2, [pc, #440]	@ (8003310 <HAL_UART_MspInit+0x288>)
 8003158:	63da      	str	r2, [r3, #60]	@ 0x3c
 800315a:	4a6d      	ldr	r2, [pc, #436]	@ (8003310 <HAL_UART_MspInit+0x288>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003160:	4b6d      	ldr	r3, [pc, #436]	@ (8003318 <HAL_UART_MspInit+0x290>)
 8003162:	4a6e      	ldr	r2, [pc, #440]	@ (800331c <HAL_UART_MspInit+0x294>)
 8003164:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003166:	4b6c      	ldr	r3, [pc, #432]	@ (8003318 <HAL_UART_MspInit+0x290>)
 8003168:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800316c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800316e:	4b6a      	ldr	r3, [pc, #424]	@ (8003318 <HAL_UART_MspInit+0x290>)
 8003170:	2240      	movs	r2, #64	@ 0x40
 8003172:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003174:	4b68      	ldr	r3, [pc, #416]	@ (8003318 <HAL_UART_MspInit+0x290>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800317a:	4b67      	ldr	r3, [pc, #412]	@ (8003318 <HAL_UART_MspInit+0x290>)
 800317c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003180:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003182:	4b65      	ldr	r3, [pc, #404]	@ (8003318 <HAL_UART_MspInit+0x290>)
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003188:	4b63      	ldr	r3, [pc, #396]	@ (8003318 <HAL_UART_MspInit+0x290>)
 800318a:	2200      	movs	r2, #0
 800318c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800318e:	4b62      	ldr	r3, [pc, #392]	@ (8003318 <HAL_UART_MspInit+0x290>)
 8003190:	2200      	movs	r2, #0
 8003192:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003194:	4b60      	ldr	r3, [pc, #384]	@ (8003318 <HAL_UART_MspInit+0x290>)
 8003196:	2200      	movs	r2, #0
 8003198:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800319a:	4b5f      	ldr	r3, [pc, #380]	@ (8003318 <HAL_UART_MspInit+0x290>)
 800319c:	2200      	movs	r2, #0
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031a0:	485d      	ldr	r0, [pc, #372]	@ (8003318 <HAL_UART_MspInit+0x290>)
 80031a2:	f000 fa9b 	bl	80036dc <HAL_DMA_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80031ac:	f7fe fed0 	bl	8001f50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a59      	ldr	r2, [pc, #356]	@ (8003318 <HAL_UART_MspInit+0x290>)
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80031b6:	4a58      	ldr	r2, [pc, #352]	@ (8003318 <HAL_UART_MspInit+0x290>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2106      	movs	r1, #6
 80031c0:	2026      	movs	r0, #38	@ 0x26
 80031c2:	f000 fa54 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031c6:	2026      	movs	r0, #38	@ 0x26
 80031c8:	f000 fa6d 	bl	80036a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031cc:	e096      	b.n	80032fc <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a53      	ldr	r2, [pc, #332]	@ (8003320 <HAL_UART_MspInit+0x298>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	f040 8091 	bne.w	80032fc <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	4b4a      	ldr	r3, [pc, #296]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	4a49      	ldr	r2, [pc, #292]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ea:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_UART_MspInit+0x280>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_UART_MspInit+0x280>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <HAL_UART_MspInit+0x280>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003212:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003220:	2303      	movs	r3, #3
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003224:	2307      	movs	r3, #7
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	4619      	mov	r1, r3
 800322e:	483d      	ldr	r0, [pc, #244]	@ (8003324 <HAL_UART_MspInit+0x29c>)
 8003230:	f000 fe56 	bl	8003ee0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003234:	4b3c      	ldr	r3, [pc, #240]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003236:	4a3d      	ldr	r2, [pc, #244]	@ (800332c <HAL_UART_MspInit+0x2a4>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800323a:	4b3b      	ldr	r3, [pc, #236]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 800323c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003240:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003242:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003248:	4b37      	ldr	r3, [pc, #220]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800324e:	4b36      	ldr	r3, [pc, #216]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003250:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003254:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003256:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800325c:	4b32      	ldr	r3, [pc, #200]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 800325e:	2200      	movs	r2, #0
 8003260:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003262:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003264:	2200      	movs	r2, #0
 8003266:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003268:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 800326a:	2200      	movs	r2, #0
 800326c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800326e:	4b2e      	ldr	r3, [pc, #184]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003270:	2200      	movs	r2, #0
 8003272:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003274:	482c      	ldr	r0, [pc, #176]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003276:	f000 fa31 	bl	80036dc <HAL_DMA_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8003280:	f7fe fe66 	bl	8001f50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a28      	ldr	r2, [pc, #160]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 8003288:	63da      	str	r2, [r3, #60]	@ 0x3c
 800328a:	4a27      	ldr	r2, [pc, #156]	@ (8003328 <HAL_UART_MspInit+0x2a0>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003290:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 8003292:	4a28      	ldr	r2, [pc, #160]	@ (8003334 <HAL_UART_MspInit+0x2ac>)
 8003294:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003296:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 8003298:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800329c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800329e:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032a0:	2240      	movs	r2, #64	@ 0x40
 80032a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a4:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032aa:	4b21      	ldr	r3, [pc, #132]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80032be:	4b1c      	ldr	r3, [pc, #112]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80032d0:	4817      	ldr	r0, [pc, #92]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032d2:	f000 fa03 	bl	80036dc <HAL_DMA_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80032dc:	f7fe fe38 	bl	8001f50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a13      	ldr	r2, [pc, #76]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80032e6:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <HAL_UART_MspInit+0x2a8>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	2027      	movs	r0, #39	@ 0x27
 80032f2:	f000 f9bc 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032f6:	2027      	movs	r0, #39	@ 0x27
 80032f8:	f000 f9d5 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 80032fc:	bf00      	nop
 80032fe:	3730      	adds	r7, #48	@ 0x30
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40004400 	.word	0x40004400
 8003308:	40023800 	.word	0x40023800
 800330c:	40020000 	.word	0x40020000
 8003310:	200005d8 	.word	0x200005d8
 8003314:	40026088 	.word	0x40026088
 8003318:	20000638 	.word	0x20000638
 800331c:	400260a0 	.word	0x400260a0
 8003320:	40004800 	.word	0x40004800
 8003324:	40020400 	.word	0x40020400
 8003328:	20000698 	.word	0x20000698
 800332c:	40026028 	.word	0x40026028
 8003330:	200006f8 	.word	0x200006f8
 8003334:	40026058 	.word	0x40026058

08003338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003338:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003370 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800333c:	f7ff f96c 	bl	8002618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003340:	480c      	ldr	r0, [pc, #48]	@ (8003374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003342:	490d      	ldr	r1, [pc, #52]	@ (8003378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003344:	4a0d      	ldr	r2, [pc, #52]	@ (800337c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003348:	e002      	b.n	8003350 <LoopCopyDataInit>

0800334a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800334a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800334c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334e:	3304      	adds	r3, #4

08003350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003354:	d3f9      	bcc.n	800334a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003356:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003358:	4c0a      	ldr	r4, [pc, #40]	@ (8003384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800335c:	e001      	b.n	8003362 <LoopFillZerobss>

0800335e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003360:	3204      	adds	r2, #4

08003362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003364:	d3fb      	bcc.n	800335e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003366:	f004 ff23 	bl	80081b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800336a:	f7fe fb31 	bl	80019d0 <main>
  bx  lr    
 800336e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003378:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800337c:	0800bd68 	.word	0x0800bd68
  ldr r2, =_sbss
 8003380:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003384:	200008a8 	.word	0x200008a8

08003388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003388:	e7fe      	b.n	8003388 <ADC_IRQHandler>
	...

0800338c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <HAL_Init+0x40>)
 8003396:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800339a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <HAL_Init+0x40>)
 80033a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a8:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <HAL_Init+0x40>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a07      	ldr	r2, [pc, #28]	@ (80033cc <HAL_Init+0x40>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b4:	2003      	movs	r0, #3
 80033b6:	f000 f94f 	bl	8003658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ba:	200a      	movs	r0, #10
 80033bc:	f000 f808 	bl	80033d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c0:	f7fe ff84 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00

080033d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033d8:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <HAL_InitTick+0x54>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <HAL_InitTick+0x58>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f967 	bl	80036c2 <HAL_SYSTICK_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00e      	b.n	800341c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d80a      	bhi.n	800341a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003404:	2200      	movs	r2, #0
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	f000 f92f 	bl	800366e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003410:	4a06      	ldr	r2, [pc, #24]	@ (800342c <HAL_InitTick+0x5c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000000 	.word	0x20000000
 8003428:	20000008 	.word	0x20000008
 800342c:	20000004 	.word	0x20000004

08003430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003434:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <HAL_IncTick+0x20>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_IncTick+0x24>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4413      	add	r3, r2
 8003440:	4a04      	ldr	r2, [pc, #16]	@ (8003454 <HAL_IncTick+0x24>)
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000008 	.word	0x20000008
 8003454:	20000758 	.word	0x20000758

08003458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return uwTick;
 800345c:	4b03      	ldr	r3, [pc, #12]	@ (800346c <HAL_GetTick+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000758 	.word	0x20000758

08003470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7ff ffee 	bl	8003458 <HAL_GetTick>
 800347c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d005      	beq.n	8003496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800348a:	4b0a      	ldr	r3, [pc, #40]	@ (80034b4 <HAL_Delay+0x44>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003496:	bf00      	nop
 8003498:	f7ff ffde 	bl	8003458 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d8f7      	bhi.n	8003498 <HAL_Delay+0x28>
  {
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000008 	.word	0x20000008

080034b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ea:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	60d3      	str	r3, [r2, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4907      	ldr	r1, [pc, #28]	@ (8003554 <__NVIC_EnableIRQ+0x38>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	@ (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	@ 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
         );
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	@ 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003624:	d301      	bcc.n	800362a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362a:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <SysTick_Config+0x40>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003632:	210f      	movs	r1, #15
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f7ff ff8e 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800363c:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <SysTick_Config+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003642:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <SysTick_Config+0x40>)
 8003644:	2207      	movs	r2, #7
 8003646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000e010 	.word	0xe000e010

08003658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff29 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff3e 	bl	8003500 <__NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff8e 	bl	80035ac <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5d 	bl	8003558 <__NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff31 	bl	800351c <__NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffa2 	bl	8003614 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff feb6 	bl	8003458 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e099      	b.n	800382c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003718:	e00f      	b.n	800373a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371a:	f7ff fe9d 	bl	8003458 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b05      	cmp	r3, #5
 8003726:	d908      	bls.n	800373a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2203      	movs	r2, #3
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e078      	b.n	800382c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e8      	bne.n	800371a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4b38      	ldr	r3, [pc, #224]	@ (8003834 <HAL_DMA_Init+0x158>)
 8003754:	4013      	ands	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	2b04      	cmp	r3, #4
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	4313      	orrs	r3, r2
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d117      	bne.n	80037fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb01 	bl	8003de8 <DMA_CheckFifoParam>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037fa:	2301      	movs	r3, #1
 80037fc:	e016      	b.n	800382c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fab8 	bl	8003d7c <DMA_CalcBaseAndBitshift>
 800380c:	4603      	mov	r3, r0
 800380e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	223f      	movs	r2, #63	@ 0x3f
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	f010803f 	.word	0xf010803f

08003838 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_DMA_Start_IT+0x26>
 800385a:	2302      	movs	r3, #2
 800385c:	e040      	b.n	80038e0 <HAL_DMA_Start_IT+0xa8>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d12f      	bne.n	80038d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa4a 	bl	8003d20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	223f      	movs	r2, #63	@ 0x3f
 8003892:	409a      	lsls	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0216 	orr.w	r2, r2, #22
 80038a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e005      	b.n	80038de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038f6:	f7ff fdaf 	bl	8003458 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d008      	beq.n	800391a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2280      	movs	r2, #128	@ 0x80
 800390c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e052      	b.n	80039c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0216 	bic.w	r2, r2, #22
 8003928:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003938:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <HAL_DMA_Abort+0x62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0208 	bic.w	r2, r2, #8
 8003958:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396a:	e013      	b.n	8003994 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800396c:	f7ff fd74 	bl	8003458 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b05      	cmp	r3, #5
 8003978:	d90c      	bls.n	8003994 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2203      	movs	r2, #3
 8003984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e015      	b.n	80039c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e4      	bne.n	800396c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	223f      	movs	r2, #63	@ 0x3f
 80039a8:	409a      	lsls	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2280      	movs	r2, #128	@ 0x80
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e00c      	b.n	8003a00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2205      	movs	r2, #5
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a18:	4b8e      	ldr	r3, [pc, #568]	@ (8003c54 <HAL_DMA_IRQHandler+0x248>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a8e      	ldr	r2, [pc, #568]	@ (8003c58 <HAL_DMA_IRQHandler+0x24c>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a36:	2208      	movs	r2, #8
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01a      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0204 	bic.w	r2, r2, #4
 8003a5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a64:	2208      	movs	r2, #8
 8003a66:	409a      	lsls	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d012      	beq.n	8003aae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa6:	f043 0202 	orr.w	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d012      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	2210      	movs	r2, #16
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d043      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d03c      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2210      	movs	r2, #16
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d108      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d024      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
 8003b3a:	e01f      	b.n	8003b7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01b      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
 8003b4c:	e016      	b.n	8003b7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0208 	bic.w	r2, r2, #8
 8003b6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	2220      	movs	r2, #32
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 808f 	beq.w	8003cac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8087 	beq.w	8003cac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d136      	bne.n	8003c24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0216 	bic.w	r2, r2, #22
 8003bc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x1da>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0208 	bic.w	r2, r2, #8
 8003bf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfa:	223f      	movs	r2, #63	@ 0x3f
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d07e      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
        }
        return;
 8003c22:	e079      	b.n	8003d18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01d      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10d      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d031      	beq.n	8003cac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
 8003c50:	e02c      	b.n	8003cac <HAL_DMA_IRQHandler+0x2a0>
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000
 8003c58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d023      	beq.n	8003cac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	e01e      	b.n	8003cac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0210 	bic.w	r2, r2, #16
 8003c8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d032      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2205      	movs	r2, #5
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d307      	bcc.n	8003cf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f2      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x2cc>
 8003cf2:	e000      	b.n	8003cf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
 8003d16:	e000      	b.n	8003d1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d18:	bf00      	nop
    }
  }
}
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d108      	bne.n	8003d60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d5e:	e007      	b.n	8003d70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	60da      	str	r2, [r3, #12]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	3b10      	subs	r3, #16
 8003d8c:	4a14      	ldr	r2, [pc, #80]	@ (8003de0 <DMA_CalcBaseAndBitshift+0x64>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d96:	4a13      	ldr	r2, [pc, #76]	@ (8003de4 <DMA_CalcBaseAndBitshift+0x68>)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d909      	bls.n	8003dbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	1d1a      	adds	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dbc:	e007      	b.n	8003dce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	aaaaaaab 	.word	0xaaaaaaab
 8003de4:	0800b920 	.word	0x0800b920

08003de8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d11f      	bne.n	8003e42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d856      	bhi.n	8003eb6 <DMA_CheckFifoParam+0xce>
 8003e08:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <DMA_CheckFifoParam+0x28>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e33 	.word	0x08003e33
 8003e18:	08003e21 	.word	0x08003e21
 8003e1c:	08003eb7 	.word	0x08003eb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d046      	beq.n	8003eba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e30:	e043      	b.n	8003eba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e3a:	d140      	bne.n	8003ebe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e03d      	b.n	8003ebe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4a:	d121      	bne.n	8003e90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d837      	bhi.n	8003ec2 <DMA_CheckFifoParam+0xda>
 8003e52:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <DMA_CheckFifoParam+0x70>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e6f 	.word	0x08003e6f
 8003e60:	08003e69 	.word	0x08003e69
 8003e64:	08003e81 	.word	0x08003e81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e030      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d025      	beq.n	8003ec6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7e:	e022      	b.n	8003ec6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e88:	d11f      	bne.n	8003eca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e8e:	e01c      	b.n	8003eca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d903      	bls.n	8003e9e <DMA_CheckFifoParam+0xb6>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d003      	beq.n	8003ea4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e9c:	e018      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea2:	e015      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb4:	e00b      	b.n	8003ece <DMA_CheckFifoParam+0xe6>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e00a      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e008      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e006      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e004      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ece:	bf00      	nop
    }
  } 
  
  return status; 
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop

08003ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b089      	sub	sp, #36	@ 0x24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	e16b      	b.n	80041d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	f040 815a 	bne.w	80041ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d005      	beq.n	8003f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d130      	bne.n	8003f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f68:	2201      	movs	r2, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 0201 	and.w	r2, r3, #1
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d017      	beq.n	8003fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	2203      	movs	r2, #3
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d123      	bne.n	8004024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	08da      	lsrs	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3208      	adds	r2, #8
 8003fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	220f      	movs	r2, #15
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	08da      	lsrs	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3208      	adds	r2, #8
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0203 	and.w	r2, r3, #3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80b4 	beq.w	80041ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	4b60      	ldr	r3, [pc, #384]	@ (80041ec <HAL_GPIO_Init+0x30c>)
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	4a5f      	ldr	r2, [pc, #380]	@ (80041ec <HAL_GPIO_Init+0x30c>)
 8004070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004074:	6453      	str	r3, [r2, #68]	@ 0x44
 8004076:	4b5d      	ldr	r3, [pc, #372]	@ (80041ec <HAL_GPIO_Init+0x30c>)
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004082:	4a5b      	ldr	r2, [pc, #364]	@ (80041f0 <HAL_GPIO_Init+0x310>)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	3302      	adds	r3, #2
 800408a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	220f      	movs	r2, #15
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a52      	ldr	r2, [pc, #328]	@ (80041f4 <HAL_GPIO_Init+0x314>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <HAL_GPIO_Init+0x226>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a51      	ldr	r2, [pc, #324]	@ (80041f8 <HAL_GPIO_Init+0x318>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d025      	beq.n	8004102 <HAL_GPIO_Init+0x222>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a50      	ldr	r2, [pc, #320]	@ (80041fc <HAL_GPIO_Init+0x31c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <HAL_GPIO_Init+0x21e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004200 <HAL_GPIO_Init+0x320>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d019      	beq.n	80040fa <HAL_GPIO_Init+0x21a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004204 <HAL_GPIO_Init+0x324>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_GPIO_Init+0x216>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004208 <HAL_GPIO_Init+0x328>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00d      	beq.n	80040f2 <HAL_GPIO_Init+0x212>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a4c      	ldr	r2, [pc, #304]	@ (800420c <HAL_GPIO_Init+0x32c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_GPIO_Init+0x20e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004210 <HAL_GPIO_Init+0x330>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_Init+0x20a>
 80040e6:	2307      	movs	r3, #7
 80040e8:	e00e      	b.n	8004108 <HAL_GPIO_Init+0x228>
 80040ea:	2308      	movs	r3, #8
 80040ec:	e00c      	b.n	8004108 <HAL_GPIO_Init+0x228>
 80040ee:	2306      	movs	r3, #6
 80040f0:	e00a      	b.n	8004108 <HAL_GPIO_Init+0x228>
 80040f2:	2305      	movs	r3, #5
 80040f4:	e008      	b.n	8004108 <HAL_GPIO_Init+0x228>
 80040f6:	2304      	movs	r3, #4
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x228>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e004      	b.n	8004108 <HAL_GPIO_Init+0x228>
 80040fe:	2302      	movs	r3, #2
 8004100:	e002      	b.n	8004108 <HAL_GPIO_Init+0x228>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x228>
 8004106:	2300      	movs	r3, #0
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	f002 0203 	and.w	r2, r2, #3
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4093      	lsls	r3, r2
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004118:	4935      	ldr	r1, [pc, #212]	@ (80041f0 <HAL_GPIO_Init+0x310>)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004126:	4b3b      	ldr	r3, [pc, #236]	@ (8004214 <HAL_GPIO_Init+0x334>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800414a:	4a32      	ldr	r2, [pc, #200]	@ (8004214 <HAL_GPIO_Init+0x334>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004150:	4b30      	ldr	r3, [pc, #192]	@ (8004214 <HAL_GPIO_Init+0x334>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004174:	4a27      	ldr	r2, [pc, #156]	@ (8004214 <HAL_GPIO_Init+0x334>)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800417a:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <HAL_GPIO_Init+0x334>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800419e:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <HAL_GPIO_Init+0x334>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004214 <HAL_GPIO_Init+0x334>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041c8:	4a12      	ldr	r2, [pc, #72]	@ (8004214 <HAL_GPIO_Init+0x334>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3301      	adds	r3, #1
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b0f      	cmp	r3, #15
 80041d8:	f67f ae90 	bls.w	8003efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3724      	adds	r7, #36	@ 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40013800 	.word	0x40013800
 80041f4:	40020000 	.word	0x40020000
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40020800 	.word	0x40020800
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40021000 	.word	0x40021000
 8004208:	40021400 	.word	0x40021400
 800420c:	40021800 	.word	0x40021800
 8004210:	40021c00 	.word	0x40021c00
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e001      	b.n	800423a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
 8004254:	4613      	mov	r3, r2
 8004256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004258:	787b      	ldrb	r3, [r7, #1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004264:	e003      	b.n	800426e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004266:	887b      	ldrh	r3, [r7, #2]
 8004268:	041a      	lsls	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	619a      	str	r2, [r3, #24]
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004286:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d006      	beq.n	80042a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004292:	4a05      	ldr	r2, [pc, #20]	@ (80042a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd fb68 	bl	8001970 <HAL_GPIO_EXTI_Callback>
  }
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40013c00 	.word	0x40013c00

080042ac <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80042b0:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a07      	ldr	r2, [pc, #28]	@ (80042d4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80042b6:	f043 0302 	orr.w	r3, r3, #2
 80042ba:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042bc:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	4a05      	ldr	r2, [pc, #20]	@ (80042d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80042c8:	bf30      	wfi
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40007000 	.word	0x40007000
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e267      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d075      	beq.n	80043e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fa:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b04      	cmp	r3, #4
 8004304:	d00c      	beq.n	8004320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004306:	4b85      	ldr	r3, [pc, #532]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800430e:	2b08      	cmp	r3, #8
 8004310:	d112      	bne.n	8004338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b82      	ldr	r3, [pc, #520]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431e:	d10b      	bne.n	8004338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	4b7e      	ldr	r3, [pc, #504]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d05b      	beq.n	80043e4 <HAL_RCC_OscConfig+0x108>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d157      	bne.n	80043e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e242      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x74>
 8004342:	4b76      	ldr	r3, [pc, #472]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a75      	ldr	r2, [pc, #468]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e01d      	b.n	800438c <HAL_RCC_OscConfig+0xb0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x98>
 800435a:	4b70      	ldr	r3, [pc, #448]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a6f      	ldr	r2, [pc, #444]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b6d      	ldr	r3, [pc, #436]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6c      	ldr	r2, [pc, #432]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e00b      	b.n	800438c <HAL_RCC_OscConfig+0xb0>
 8004374:	4b69      	ldr	r3, [pc, #420]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a68      	ldr	r2, [pc, #416]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800437a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b66      	ldr	r3, [pc, #408]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a65      	ldr	r2, [pc, #404]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800438a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d013      	beq.n	80043bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7ff f860 	bl	8003458 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7ff f85c 	bl	8003458 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e207      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	4b5b      	ldr	r3, [pc, #364]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0xc0>
 80043ba:	e014      	b.n	80043e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7ff f84c 	bl	8003458 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c4:	f7ff f848 	bl	8003458 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	@ 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1f3      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	4b51      	ldr	r3, [pc, #324]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0xe8>
 80043e2:	e000      	b.n	80043e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d063      	beq.n	80044ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f2:	4b4a      	ldr	r3, [pc, #296]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043fe:	4b47      	ldr	r3, [pc, #284]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004406:	2b08      	cmp	r3, #8
 8004408:	d11c      	bne.n	8004444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440a:	4b44      	ldr	r3, [pc, #272]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	4b41      	ldr	r3, [pc, #260]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_RCC_OscConfig+0x152>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e1c7      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442e:	4b3b      	ldr	r3, [pc, #236]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4937      	ldr	r1, [pc, #220]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	e03a      	b.n	80044ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800444c:	4b34      	ldr	r3, [pc, #208]	@ (8004520 <HAL_RCC_OscConfig+0x244>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7ff f801 	bl	8003458 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445a:	f7fe fffd 	bl	8003458 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e1a8      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004478:	4b28      	ldr	r3, [pc, #160]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4925      	ldr	r1, [pc, #148]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]
 800448c:	e015      	b.n	80044ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448e:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <HAL_RCC_OscConfig+0x244>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe ffe0 	bl	8003458 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449c:	f7fe ffdc 	bl	8003458 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e187      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d036      	beq.n	8004534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ce:	4b15      	ldr	r3, [pc, #84]	@ (8004524 <HAL_RCC_OscConfig+0x248>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fe ffc0 	bl	8003458 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fe ffbc 	bl	8003458 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e167      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ee:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <HAL_RCC_OscConfig+0x240>)
 80044f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x200>
 80044fa:	e01b      	b.n	8004534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fc:	4b09      	ldr	r3, [pc, #36]	@ (8004524 <HAL_RCC_OscConfig+0x248>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004502:	f7fe ffa9 	bl	8003458 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	e00e      	b.n	8004528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450a:	f7fe ffa5 	bl	8003458 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d907      	bls.n	8004528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e150      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
 800451c:	40023800 	.word	0x40023800
 8004520:	42470000 	.word	0x42470000
 8004524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	4b88      	ldr	r3, [pc, #544]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800452a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ea      	bne.n	800450a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8097 	beq.w	8004670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004546:	4b81      	ldr	r3, [pc, #516]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	4b7d      	ldr	r3, [pc, #500]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	4a7c      	ldr	r2, [pc, #496]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004560:	6413      	str	r3, [r2, #64]	@ 0x40
 8004562:	4b7a      	ldr	r3, [pc, #488]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b77      	ldr	r3, [pc, #476]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d118      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b74      	ldr	r3, [pc, #464]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a73      	ldr	r2, [pc, #460]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fe ff65 	bl	8003458 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004592:	f7fe ff61 	bl	8003458 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e10c      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004750 <HAL_RCC_OscConfig+0x474>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2ea>
 80045b8:	4b64      	ldr	r3, [pc, #400]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	4a63      	ldr	r2, [pc, #396]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c4:	e01c      	b.n	8004600 <HAL_RCC_OscConfig+0x324>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x30c>
 80045ce:	4b5f      	ldr	r3, [pc, #380]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	4a5e      	ldr	r2, [pc, #376]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045da:	4b5c      	ldr	r3, [pc, #368]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045de:	4a5b      	ldr	r2, [pc, #364]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0x324>
 80045e8:	4b58      	ldr	r3, [pc, #352]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	4a57      	ldr	r2, [pc, #348]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f4:	4b55      	ldr	r3, [pc, #340]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f8:	4a54      	ldr	r2, [pc, #336]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80045fa:	f023 0304 	bic.w	r3, r3, #4
 80045fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d015      	beq.n	8004634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fe ff26 	bl	8003458 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fe ff22 	bl	8003458 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e0cb      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	4b49      	ldr	r3, [pc, #292]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0ee      	beq.n	8004610 <HAL_RCC_OscConfig+0x334>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004634:	f7fe ff10 	bl	8003458 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fe ff0c 	bl	8003458 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0b5      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004652:	4b3e      	ldr	r3, [pc, #248]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1ee      	bne.n	800463c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800465e:	7dfb      	ldrb	r3, [r7, #23]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d105      	bne.n	8004670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004664:	4b39      	ldr	r3, [pc, #228]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	4a38      	ldr	r2, [pc, #224]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800466e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80a1 	beq.w	80047bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467a:	4b34      	ldr	r3, [pc, #208]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b08      	cmp	r3, #8
 8004684:	d05c      	beq.n	8004740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d141      	bne.n	8004712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468e:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCC_OscConfig+0x478>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fe fee0 	bl	8003458 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469c:	f7fe fedc 	bl	8003458 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e087      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ae:	4b27      	ldr	r3, [pc, #156]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69da      	ldr	r2, [r3, #28]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	019b      	lsls	r3, r3, #6
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	3b01      	subs	r3, #1
 80046d4:	041b      	lsls	r3, r3, #16
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	491b      	ldr	r1, [pc, #108]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <HAL_RCC_OscConfig+0x478>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fe feb5 	bl	8003458 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fe feb1 	bl	8003458 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e05c      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004704:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x416>
 8004710:	e054      	b.n	80047bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_RCC_OscConfig+0x478>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004718:	f7fe fe9e 	bl	8003458 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004720:	f7fe fe9a 	bl	8003458 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e045      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_RCC_OscConfig+0x470>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x444>
 800473e:	e03d      	b.n	80047bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e038      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
 800474c:	40023800 	.word	0x40023800
 8004750:	40007000 	.word	0x40007000
 8004754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x4ec>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d028      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d121      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d11a      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800478e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004790:	4293      	cmp	r3, r2
 8004792:	d111      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	3b01      	subs	r3, #1
 80047a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d107      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800

080047cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0cc      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e0:	4b68      	ldr	r3, [pc, #416]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d90c      	bls.n	8004808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b65      	ldr	r3, [pc, #404]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b63      	ldr	r3, [pc, #396]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0b8      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004820:	4b59      	ldr	r3, [pc, #356]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800482a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004838:	4b53      	ldr	r3, [pc, #332]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4a52      	ldr	r2, [pc, #328]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004844:	4b50      	ldr	r3, [pc, #320]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	494d      	ldr	r1, [pc, #308]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d044      	beq.n	80048ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	4b47      	ldr	r3, [pc, #284]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d119      	bne.n	80048aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e07f      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d003      	beq.n	800488a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004886:	2b03      	cmp	r3, #3
 8004888:	d107      	bne.n	800489a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488a:	4b3f      	ldr	r3, [pc, #252]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06f      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489a:	4b3b      	ldr	r3, [pc, #236]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e067      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048aa:	4b37      	ldr	r3, [pc, #220]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f023 0203 	bic.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4934      	ldr	r1, [pc, #208]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048bc:	f7fe fdcc 	bl	8003458 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	e00a      	b.n	80048da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c4:	f7fe fdc8 	bl	8003458 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e04f      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048da:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 020c 	and.w	r2, r3, #12
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d1eb      	bne.n	80048c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ec:	4b25      	ldr	r3, [pc, #148]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d20c      	bcs.n	8004914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b22      	ldr	r3, [pc, #136]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b20      	ldr	r3, [pc, #128]	@ (8004984 <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e032      	b.n	800497a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004920:	4b19      	ldr	r3, [pc, #100]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4916      	ldr	r1, [pc, #88]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800493e:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	490e      	ldr	r1, [pc, #56]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004952:	f000 f821 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 8004956:	4602      	mov	r2, r0
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	490a      	ldr	r1, [pc, #40]	@ (800498c <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	5ccb      	ldrb	r3, [r1, r3]
 8004966:	fa22 f303 	lsr.w	r3, r2, r3
 800496a:	4a09      	ldr	r2, [pc, #36]	@ (8004990 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800496e:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <HAL_RCC_ClockConfig+0x1c8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fd2c 	bl	80033d0 <HAL_InitTick>

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40023c00 	.word	0x40023c00
 8004988:	40023800 	.word	0x40023800
 800498c:	0800b908 	.word	0x0800b908
 8004990:	20000000 	.word	0x20000000
 8004994:	20000004 	.word	0x20000004

08004998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800499c:	b094      	sub	sp, #80	@ 0x50
 800499e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a4:	2300      	movs	r3, #0
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a8:	2300      	movs	r3, #0
 80049aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b0:	4b79      	ldr	r3, [pc, #484]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d00d      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x40>
 80049bc:	2b08      	cmp	r3, #8
 80049be:	f200 80e1 	bhi.w	8004b84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x34>
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d003      	beq.n	80049d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ca:	e0db      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049cc:	4b73      	ldr	r3, [pc, #460]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x204>)
 80049ce:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80049d0:	e0db      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049d2:	4b73      	ldr	r3, [pc, #460]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x208>)
 80049d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049d6:	e0d8      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d063      	beq.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	2200      	movs	r2, #0
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a02:	2300      	movs	r3, #0
 8004a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	f04f 0000 	mov.w	r0, #0
 8004a12:	f04f 0100 	mov.w	r1, #0
 8004a16:	0159      	lsls	r1, r3, #5
 8004a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1c:	0150      	lsls	r0, r2, #5
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4621      	mov	r1, r4
 8004a24:	1a51      	subs	r1, r2, r1
 8004a26:	6139      	str	r1, [r7, #16]
 8004a28:	4629      	mov	r1, r5
 8004a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	018b      	lsls	r3, r1, #6
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a46:	4651      	mov	r1, sl
 8004a48:	018a      	lsls	r2, r1, #6
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a50:	4659      	mov	r1, fp
 8004a52:	eb63 0901 	sbc.w	r9, r3, r1
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a6a:	4690      	mov	r8, r2
 8004a6c:	4699      	mov	r9, r3
 8004a6e:	4623      	mov	r3, r4
 8004a70:	eb18 0303 	adds.w	r3, r8, r3
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	462b      	mov	r3, r5
 8004a78:	eb49 0303 	adc.w	r3, r9, r3
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	024b      	lsls	r3, r1, #9
 8004a8e:	4621      	mov	r1, r4
 8004a90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a94:	4621      	mov	r1, r4
 8004a96:	024a      	lsls	r2, r1, #9
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aa8:	f7fc f8ee 	bl	8000c88 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab4:	e058      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab6:	4b38      	ldr	r3, [pc, #224]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	099b      	lsrs	r3, r3, #6
 8004abc:	2200      	movs	r2, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ac6:	623b      	str	r3, [r7, #32]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004acc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	f04f 0000 	mov.w	r0, #0
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	0159      	lsls	r1, r3, #5
 8004ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae2:	0150      	lsls	r0, r2, #5
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4641      	mov	r1, r8
 8004aea:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aee:	4649      	mov	r1, r9
 8004af0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b08:	ebb2 040a 	subs.w	r4, r2, sl
 8004b0c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	00eb      	lsls	r3, r5, #3
 8004b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b1e:	00e2      	lsls	r2, r4, #3
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	4643      	mov	r3, r8
 8004b26:	18e3      	adds	r3, r4, r3
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	eb45 0303 	adc.w	r3, r5, r3
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b3e:	4629      	mov	r1, r5
 8004b40:	028b      	lsls	r3, r1, #10
 8004b42:	4621      	mov	r1, r4
 8004b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b48:	4621      	mov	r1, r4
 8004b4a:	028a      	lsls	r2, r1, #10
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b52:	2200      	movs	r2, #0
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	61fa      	str	r2, [r7, #28]
 8004b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5c:	f7fc f894 	bl	8000c88 <__aeabi_uldivmod>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4613      	mov	r3, r2
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b68:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	3301      	adds	r3, #1
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b82:	e002      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3750      	adds	r7, #80	@ 0x50
 8004b90:	46bd      	mov	sp, r7
 8004b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	007a1200 	.word	0x007a1200

08004ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	@ (8004bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000000 	.word	0x20000000

08004bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bc0:	f7ff fff0 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0a9b      	lsrs	r3, r3, #10
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4903      	ldr	r1, [pc, #12]	@ (8004be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	0800b918 	.word	0x0800b918

08004be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004be8:	f7ff ffdc 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0b5b      	lsrs	r3, r3, #13
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4903      	ldr	r1, [pc, #12]	@ (8004c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40023800 	.word	0x40023800
 8004c08:	0800b918 	.word	0x0800b918

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e041      	b.n	8004ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fe f896 	bl	8002d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fe26 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e04e      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d022      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cee:	d01d      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a19      	ldr	r2, [pc, #100]	@ (8004d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x80>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d111      	bne.n	8004d50 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d010      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e007      	b.n	8004d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40010400 	.word	0x40010400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40001800 	.word	0x40001800

08004d8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e041      	b.n	8004e22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f839 	bl	8004e2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f000 fd66 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_TIM_PWM_Start_IT+0x28>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e022      	b.n	8004eae <HAL_TIM_PWM_Start_IT+0x6e>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d109      	bne.n	8004e82 <HAL_TIM_PWM_Start_IT+0x42>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	e015      	b.n	8004eae <HAL_TIM_PWM_Start_IT+0x6e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d109      	bne.n	8004e9c <HAL_TIM_PWM_Start_IT+0x5c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e008      	b.n	8004eae <HAL_TIM_PWM_Start_IT+0x6e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0c7      	b.n	8005046 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start_IT+0x86>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ec4:	e013      	b.n	8004eee <HAL_TIM_PWM_Start_IT+0xae>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Start_IT+0x96>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ed4:	e00b      	b.n	8004eee <HAL_TIM_PWM_Start_IT+0xae>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_PWM_Start_IT+0xa6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ee4:	e003      	b.n	8004eee <HAL_TIM_PWM_Start_IT+0xae>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b0c      	cmp	r3, #12
 8004ef2:	d841      	bhi.n	8004f78 <HAL_TIM_PWM_Start_IT+0x138>
 8004ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <HAL_TIM_PWM_Start_IT+0xbc>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f31 	.word	0x08004f31
 8004f00:	08004f79 	.word	0x08004f79
 8004f04:	08004f79 	.word	0x08004f79
 8004f08:	08004f79 	.word	0x08004f79
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f79 	.word	0x08004f79
 8004f14:	08004f79 	.word	0x08004f79
 8004f18:	08004f79 	.word	0x08004f79
 8004f1c:	08004f55 	.word	0x08004f55
 8004f20:	08004f79 	.word	0x08004f79
 8004f24:	08004f79 	.word	0x08004f79
 8004f28:	08004f79 	.word	0x08004f79
 8004f2c:	08004f67 	.word	0x08004f67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0202 	orr.w	r2, r2, #2
 8004f3e:	60da      	str	r2, [r3, #12]
      break;
 8004f40:	e01d      	b.n	8004f7e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0204 	orr.w	r2, r2, #4
 8004f50:	60da      	str	r2, [r3, #12]
      break;
 8004f52:	e014      	b.n	8004f7e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0208 	orr.w	r2, r2, #8
 8004f62:	60da      	str	r2, [r3, #12]
      break;
 8004f64:	e00b      	b.n	8004f7e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0210 	orr.w	r2, r2, #16
 8004f74:	60da      	str	r2, [r3, #12]
      break;
 8004f76:	e002      	b.n	8004f7e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d15f      	bne.n	8005044 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 f80c 	bl	8005faa <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2e      	ldr	r2, [pc, #184]	@ (8005050 <HAL_TIM_PWM_Start_IT+0x210>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIM_PWM_Start_IT+0x166>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8005054 <HAL_TIM_PWM_Start_IT+0x214>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_PWM_Start_IT+0x16a>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <HAL_TIM_PWM_Start_IT+0x16c>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	@ (8005050 <HAL_TIM_PWM_Start_IT+0x210>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d022      	beq.n	8005010 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd2:	d01d      	beq.n	8005010 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_TIM_PWM_Start_IT+0x218>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <HAL_TIM_PWM_Start_IT+0x21c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_TIM_PWM_Start_IT+0x220>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <HAL_TIM_PWM_Start_IT+0x214>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a18      	ldr	r2, [pc, #96]	@ (8005064 <HAL_TIM_PWM_Start_IT+0x224>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a17      	ldr	r2, [pc, #92]	@ (8005068 <HAL_TIM_PWM_Start_IT+0x228>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d010      	beq.n	8005044 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	e007      	b.n	8005044 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40010400 	.word	0x40010400
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40014000 	.word	0x40014000
 8005068:	40001800 	.word	0x40001800

0800506c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e097      	b.n	80051b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fd fdd7 	bl	8002c48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f000 fbeb 	bl	800589c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	4313      	orrs	r3, r2
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800510c:	f023 030c 	bic.w	r3, r3, #12
 8005110:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005118:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800511c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	4313      	orrs	r3, r2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	011a      	lsls	r2, r3, #4
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	031b      	lsls	r3, r3, #12
 800513c:	4313      	orrs	r3, r2
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	4313      	orrs	r3, r2
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d110      	bne.n	800520a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d102      	bne.n	80051f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ee:	7b7b      	ldrb	r3, [r7, #13]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d001      	beq.n	80051f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e069      	b.n	80052cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005208:	e031      	b.n	800526e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b04      	cmp	r3, #4
 800520e:	d110      	bne.n	8005232 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d102      	bne.n	800521c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005216:	7b3b      	ldrb	r3, [r7, #12]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d001      	beq.n	8005220 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e055      	b.n	80052cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005230:	e01d      	b.n	800526e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d108      	bne.n	800524a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005238:	7bbb      	ldrb	r3, [r7, #14]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d105      	bne.n	800524a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800523e:	7b7b      	ldrb	r3, [r7, #13]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d102      	bne.n	800524a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005244:	7b3b      	ldrb	r3, [r7, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d001      	beq.n	800524e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e03e      	b.n	80052cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_TIM_Encoder_Start+0xc4>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d008      	beq.n	800528c <HAL_TIM_Encoder_Start+0xd4>
 800527a:	e00f      	b.n	800529c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2201      	movs	r2, #1
 8005282:	2100      	movs	r1, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fe90 	bl	8005faa <TIM_CCxChannelCmd>
      break;
 800528a:	e016      	b.n	80052ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2201      	movs	r2, #1
 8005292:	2104      	movs	r1, #4
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fe88 	bl	8005faa <TIM_CCxChannelCmd>
      break;
 800529a:	e00e      	b.n	80052ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fe80 	bl	8005faa <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	2104      	movs	r1, #4
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fe79 	bl	8005faa <TIM_CCxChannelCmd>
      break;
 80052b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01b      	beq.n	8005338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0202 	mvn.w	r2, #2
 8005308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa9d 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa8f 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 faa0 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0204 	mvn.w	r2, #4
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa77 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa69 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa7a 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d020      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0208 	mvn.w	r2, #8
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2204      	movs	r2, #4
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa51 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa43 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fa54 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d020      	beq.n	800541c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01b      	beq.n	800541c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0210 	mvn.w	r2, #16
 80053ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2208      	movs	r2, #8
 80053f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa2b 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 8005408:	e005      	b.n	8005416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa1d 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa2e 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0201 	mvn.w	r2, #1
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fc f96e 	bl	800171c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fe4e 	bl	8006100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f9ff 	bl	8005886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0220 	mvn.w	r2, #32
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fe20 	bl	80060ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e0ae      	b.n	8005630 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	f200 809f 	bhi.w	8005620 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054e2:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	0800551d 	.word	0x0800551d
 80054ec:	08005621 	.word	0x08005621
 80054f0:	08005621 	.word	0x08005621
 80054f4:	08005621 	.word	0x08005621
 80054f8:	0800555d 	.word	0x0800555d
 80054fc:	08005621 	.word	0x08005621
 8005500:	08005621 	.word	0x08005621
 8005504:	08005621 	.word	0x08005621
 8005508:	0800559f 	.word	0x0800559f
 800550c:	08005621 	.word	0x08005621
 8005510:	08005621 	.word	0x08005621
 8005514:	08005621 	.word	0x08005621
 8005518:	080055df 	.word	0x080055df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fa66 	bl	80059f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0208 	orr.w	r2, r2, #8
 8005536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0204 	bic.w	r2, r2, #4
 8005546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6999      	ldr	r1, [r3, #24]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	619a      	str	r2, [r3, #24]
      break;
 800555a:	e064      	b.n	8005626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fab6 	bl	8005ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6999      	ldr	r1, [r3, #24]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	021a      	lsls	r2, r3, #8
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	619a      	str	r2, [r3, #24]
      break;
 800559c:	e043      	b.n	8005626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fb0b 	bl	8005bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f042 0208 	orr.w	r2, r2, #8
 80055b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0204 	bic.w	r2, r2, #4
 80055c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69d9      	ldr	r1, [r3, #28]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	61da      	str	r2, [r3, #28]
      break;
 80055dc:	e023      	b.n	8005626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fb5f 	bl	8005ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69d9      	ldr	r1, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	021a      	lsls	r2, r3, #8
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	61da      	str	r2, [r3, #28]
      break;
 800561e:	e002      	b.n	8005626 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	75fb      	strb	r3, [r7, #23]
      break;
 8005624:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIM_ConfigClockSource+0x1c>
 8005650:	2302      	movs	r3, #2
 8005652:	e0b4      	b.n	80057be <HAL_TIM_ConfigClockSource+0x186>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800567a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800568c:	d03e      	beq.n	800570c <HAL_TIM_ConfigClockSource+0xd4>
 800568e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005692:	f200 8087 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569a:	f000 8086 	beq.w	80057aa <HAL_TIM_ConfigClockSource+0x172>
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a2:	d87f      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b70      	cmp	r3, #112	@ 0x70
 80056a6:	d01a      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xa6>
 80056a8:	2b70      	cmp	r3, #112	@ 0x70
 80056aa:	d87b      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b60      	cmp	r3, #96	@ 0x60
 80056ae:	d050      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x11a>
 80056b0:	2b60      	cmp	r3, #96	@ 0x60
 80056b2:	d877      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b50      	cmp	r3, #80	@ 0x50
 80056b6:	d03c      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0xfa>
 80056b8:	2b50      	cmp	r3, #80	@ 0x50
 80056ba:	d873      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b40      	cmp	r3, #64	@ 0x40
 80056be:	d058      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x13a>
 80056c0:	2b40      	cmp	r3, #64	@ 0x40
 80056c2:	d86f      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b30      	cmp	r3, #48	@ 0x30
 80056c6:	d064      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056c8:	2b30      	cmp	r3, #48	@ 0x30
 80056ca:	d86b      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d060      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d867      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d05c      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d05a      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056dc:	e062      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ee:	f000 fc3c 	bl	8005f6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	609a      	str	r2, [r3, #8]
      break;
 800570a:	e04f      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800571c:	f000 fc25 	bl	8005f6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800572e:	609a      	str	r2, [r3, #8]
      break;
 8005730:	e03c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573e:	461a      	mov	r2, r3
 8005740:	f000 fb99 	bl	8005e76 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2150      	movs	r1, #80	@ 0x50
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fbf2 	bl	8005f34 <TIM_ITRx_SetConfig>
      break;
 8005750:	e02c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800575e:	461a      	mov	r2, r3
 8005760:	f000 fbb8 	bl	8005ed4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2160      	movs	r1, #96	@ 0x60
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fbe2 	bl	8005f34 <TIM_ITRx_SetConfig>
      break;
 8005770:	e01c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577e:	461a      	mov	r2, r3
 8005780:	f000 fb79 	bl	8005e76 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2140      	movs	r1, #64	@ 0x40
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fbd2 	bl	8005f34 <TIM_ITRx_SetConfig>
      break;
 8005790:	e00c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f000 fbc9 	bl	8005f34 <TIM_ITRx_SetConfig>
      break;
 80057a2:	e003      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      break;
 80057a8:	e000      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_TIM_SlaveConfigSynchro+0x18>
 80057da:	2302      	movs	r3, #2
 80057dc:	e031      	b.n	8005842 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 faaf 	bl	8005d54 <TIM_SlaveTimer_SetConfig>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e018      	b.n	8005842 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800581e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800582e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a46      	ldr	r2, [pc, #280]	@ (80059c8 <TIM_Base_SetConfig+0x12c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ba:	d00f      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a43      	ldr	r2, [pc, #268]	@ (80059cc <TIM_Base_SetConfig+0x130>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a42      	ldr	r2, [pc, #264]	@ (80059d0 <TIM_Base_SetConfig+0x134>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a41      	ldr	r2, [pc, #260]	@ (80059d4 <TIM_Base_SetConfig+0x138>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a40      	ldr	r2, [pc, #256]	@ (80059d8 <TIM_Base_SetConfig+0x13c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d108      	bne.n	80058ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a35      	ldr	r2, [pc, #212]	@ (80059c8 <TIM_Base_SetConfig+0x12c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fc:	d027      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a32      	ldr	r2, [pc, #200]	@ (80059cc <TIM_Base_SetConfig+0x130>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d023      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a31      	ldr	r2, [pc, #196]	@ (80059d0 <TIM_Base_SetConfig+0x134>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01f      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a30      	ldr	r2, [pc, #192]	@ (80059d4 <TIM_Base_SetConfig+0x138>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a2f      	ldr	r2, [pc, #188]	@ (80059d8 <TIM_Base_SetConfig+0x13c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d017      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2e      	ldr	r2, [pc, #184]	@ (80059dc <TIM_Base_SetConfig+0x140>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2d      	ldr	r2, [pc, #180]	@ (80059e0 <TIM_Base_SetConfig+0x144>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00f      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2c      	ldr	r2, [pc, #176]	@ (80059e4 <TIM_Base_SetConfig+0x148>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2b      	ldr	r2, [pc, #172]	@ (80059e8 <TIM_Base_SetConfig+0x14c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2a      	ldr	r2, [pc, #168]	@ (80059ec <TIM_Base_SetConfig+0x150>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a29      	ldr	r2, [pc, #164]	@ (80059f0 <TIM_Base_SetConfig+0x154>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d108      	bne.n	8005960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a10      	ldr	r2, [pc, #64]	@ (80059c8 <TIM_Base_SetConfig+0x12c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_Base_SetConfig+0xf8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a12      	ldr	r2, [pc, #72]	@ (80059d8 <TIM_Base_SetConfig+0x13c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d103      	bne.n	800599c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d105      	bne.n	80059ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f023 0201 	bic.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	611a      	str	r2, [r3, #16]
  }
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40010400 	.word	0x40010400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800
 80059e8:	40001800 	.word	0x40001800
 80059ec:	40001c00 	.word	0x40001c00
 80059f0:	40002000 	.word	0x40002000

080059f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f023 0201 	bic.w	r2, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f023 0302 	bic.w	r3, r3, #2
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a20      	ldr	r2, [pc, #128]	@ (8005acc <TIM_OC1_SetConfig+0xd8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_OC1_SetConfig+0x64>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad0 <TIM_OC1_SetConfig+0xdc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d10c      	bne.n	8005a72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0308 	bic.w	r3, r3, #8
 8005a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f023 0304 	bic.w	r3, r3, #4
 8005a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a15      	ldr	r2, [pc, #84]	@ (8005acc <TIM_OC1_SetConfig+0xd8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_OC1_SetConfig+0x8e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <TIM_OC1_SetConfig+0xdc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d111      	bne.n	8005aa6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40010400 	.word	0x40010400

08005ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f023 0210 	bic.w	r2, r3, #16
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0320 	bic.w	r3, r3, #32
 8005b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a22      	ldr	r2, [pc, #136]	@ (8005bb8 <TIM_OC2_SetConfig+0xe4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC2_SetConfig+0x68>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a21      	ldr	r2, [pc, #132]	@ (8005bbc <TIM_OC2_SetConfig+0xe8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d10d      	bne.n	8005b58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a17      	ldr	r2, [pc, #92]	@ (8005bb8 <TIM_OC2_SetConfig+0xe4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_OC2_SetConfig+0x94>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <TIM_OC2_SetConfig+0xe8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d113      	bne.n	8005b90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40010400 	.word	0x40010400

08005bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a21      	ldr	r2, [pc, #132]	@ (8005ca0 <TIM_OC3_SetConfig+0xe0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0x66>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a20      	ldr	r2, [pc, #128]	@ (8005ca4 <TIM_OC3_SetConfig+0xe4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10d      	bne.n	8005c42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <TIM_OC3_SetConfig+0xe0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_OC3_SetConfig+0x92>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a15      	ldr	r2, [pc, #84]	@ (8005ca4 <TIM_OC3_SetConfig+0xe4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d113      	bne.n	8005c7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	621a      	str	r2, [r3, #32]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	031b      	lsls	r3, r3, #12
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a12      	ldr	r2, [pc, #72]	@ (8005d4c <TIM_OC4_SetConfig+0xa4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_OC4_SetConfig+0x68>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a11      	ldr	r2, [pc, #68]	@ (8005d50 <TIM_OC4_SetConfig+0xa8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d109      	bne.n	8005d24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400

08005d54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b70      	cmp	r3, #112	@ 0x70
 8005d9c:	d01a      	beq.n	8005dd4 <TIM_SlaveTimer_SetConfig+0x80>
 8005d9e:	2b70      	cmp	r3, #112	@ 0x70
 8005da0:	d860      	bhi.n	8005e64 <TIM_SlaveTimer_SetConfig+0x110>
 8005da2:	2b60      	cmp	r3, #96	@ 0x60
 8005da4:	d054      	beq.n	8005e50 <TIM_SlaveTimer_SetConfig+0xfc>
 8005da6:	2b60      	cmp	r3, #96	@ 0x60
 8005da8:	d85c      	bhi.n	8005e64 <TIM_SlaveTimer_SetConfig+0x110>
 8005daa:	2b50      	cmp	r3, #80	@ 0x50
 8005dac:	d046      	beq.n	8005e3c <TIM_SlaveTimer_SetConfig+0xe8>
 8005dae:	2b50      	cmp	r3, #80	@ 0x50
 8005db0:	d858      	bhi.n	8005e64 <TIM_SlaveTimer_SetConfig+0x110>
 8005db2:	2b40      	cmp	r3, #64	@ 0x40
 8005db4:	d019      	beq.n	8005dea <TIM_SlaveTimer_SetConfig+0x96>
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d854      	bhi.n	8005e64 <TIM_SlaveTimer_SetConfig+0x110>
 8005dba:	2b30      	cmp	r3, #48	@ 0x30
 8005dbc:	d055      	beq.n	8005e6a <TIM_SlaveTimer_SetConfig+0x116>
 8005dbe:	2b30      	cmp	r3, #48	@ 0x30
 8005dc0:	d850      	bhi.n	8005e64 <TIM_SlaveTimer_SetConfig+0x110>
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d051      	beq.n	8005e6a <TIM_SlaveTimer_SetConfig+0x116>
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d84c      	bhi.n	8005e64 <TIM_SlaveTimer_SetConfig+0x110>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d04d      	beq.n	8005e6a <TIM_SlaveTimer_SetConfig+0x116>
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d04b      	beq.n	8005e6a <TIM_SlaveTimer_SetConfig+0x116>
 8005dd2:	e047      	b.n	8005e64 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	f000 f8c1 	bl	8005f6a <TIM_ETR_SetConfig>
      break;
 8005de8:	e040      	b.n	8005e6c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d101      	bne.n	8005df6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e03b      	b.n	8005e6e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
      break;
 8005e3a:	e017      	b.n	8005e6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f000 f814 	bl	8005e76 <TIM_TI1_ConfigInputStage>
      break;
 8005e4e:	e00d      	b.n	8005e6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f000 f839 	bl	8005ed4 <TIM_TI2_ConfigInputStage>
      break;
 8005e62:	e003      	b.n	8005e6c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
      break;
 8005e68:	e000      	b.n	8005e6c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005e6a:	bf00      	nop
  }

  return status;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 0201 	bic.w	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 030a 	bic.w	r3, r3, #10
 8005eb2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f023 0210 	bic.w	r2, r3, #16
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f043 0307 	orr.w	r3, r3, #7
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	609a      	str	r2, [r3, #8]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b087      	sub	sp, #28
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	021a      	lsls	r2, r3, #8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	609a      	str	r2, [r3, #8]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1a      	ldr	r2, [r3, #32]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	401a      	ands	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006008:	2302      	movs	r3, #2
 800600a:	e05a      	b.n	80060c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a21      	ldr	r2, [pc, #132]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d022      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006058:	d01d      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a1d      	ldr	r2, [pc, #116]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d018      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00e      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a17      	ldr	r2, [pc, #92]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d004      	beq.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a15      	ldr	r2, [pc, #84]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d10c      	bne.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800609c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40001800 	.word	0x40001800

080060ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e042      	b.n	80061ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fc ffa4 	bl	8003088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	@ 0x24
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fdcb 	bl	8006cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800616c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800617c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800618c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08c      	sub	sp, #48	@ 0x30
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d156      	bne.n	800627c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_UART_Transmit_DMA+0x26>
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e04f      	b.n	800627e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2221      	movs	r2, #33	@ 0x21
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006202:	4a21      	ldr	r2, [pc, #132]	@ (8006288 <HAL_UART_Transmit_DMA+0xd4>)
 8006204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620a:	4a20      	ldr	r2, [pc, #128]	@ (800628c <HAL_UART_Transmit_DMA+0xd8>)
 800620c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	4a1f      	ldr	r2, [pc, #124]	@ (8006290 <HAL_UART_Transmit_DMA+0xdc>)
 8006214:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	2200      	movs	r2, #0
 800621c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	6819      	ldr	r1, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3304      	adds	r3, #4
 8006232:	461a      	mov	r2, r3
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	f7fd faff 	bl	8003838 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006242:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3314      	adds	r3, #20
 800624a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	617b      	str	r3, [r7, #20]
   return(result);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006264:	627a      	str	r2, [r7, #36]	@ 0x24
 8006266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6a39      	ldr	r1, [r7, #32]
 800626a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	61fb      	str	r3, [r7, #28]
   return(result);
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3730      	adds	r7, #48	@ 0x30
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	08006821 	.word	0x08006821
 800628c:	080068bb 	.word	0x080068bb
 8006290:	080068d7 	.word	0x080068d7

08006294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b0ba      	sub	sp, #232	@ 0xe8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10f      	bne.n	80062fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_UART_IRQHandler+0x66>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fc40 	bl	8006b78 <UART_Receive_IT>
      return;
 80062f8:	e25b      	b.n	80067b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80de 	beq.w	80064c0 <HAL_UART_IRQHandler+0x22c>
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d106      	bne.n	800631e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006314:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80d1 	beq.w	80064c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_UART_IRQHandler+0xae>
 800632a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	f043 0201 	orr.w	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <HAL_UART_IRQHandler+0xd2>
 800634e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635e:	f043 0202 	orr.w	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_UART_IRQHandler+0xf6>
 8006372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006382:	f043 0204 	orr.w	r2, r3, #4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800638a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d011      	beq.n	80063ba <HAL_UART_IRQHandler+0x126>
 8006396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b2:	f043 0208 	orr.w	r2, r3, #8
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 81f2 	beq.w	80067a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_UART_IRQHandler+0x14e>
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fbcb 	bl	8006b78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ec:	2b40      	cmp	r3, #64	@ 0x40
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <HAL_UART_IRQHandler+0x17a>
 8006406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800640a:	2b00      	cmp	r3, #0
 800640c:	d04f      	beq.n	80064ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fad3 	bl	80069ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641e:	2b40      	cmp	r3, #64	@ 0x40
 8006420:	d141      	bne.n	80064a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3314      	adds	r3, #20
 8006428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800643c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3314      	adds	r3, #20
 800644a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800644e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800645a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1d9      	bne.n	8006422 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d013      	beq.n	800649e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647a:	4a7e      	ldr	r2, [pc, #504]	@ (8006674 <HAL_UART_IRQHandler+0x3e0>)
 800647c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006482:	4618      	mov	r0, r3
 8006484:	f7fd faa0 	bl	80039c8 <HAL_DMA_Abort_IT>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d016      	beq.n	80064bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649c:	e00e      	b.n	80064bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f9a8 	bl	80067f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	e00a      	b.n	80064bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9a4 	bl	80067f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ac:	e006      	b.n	80064bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9a0 	bl	80067f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064ba:	e175      	b.n	80067a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	bf00      	nop
    return;
 80064be:	e173      	b.n	80067a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	f040 814f 	bne.w	8006768 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8148 	beq.w	8006768 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8141 	beq.w	8006768 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006506:	2b40      	cmp	r3, #64	@ 0x40
 8006508:	f040 80b6 	bne.w	8006678 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8145 	beq.w	80067ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800652a:	429a      	cmp	r2, r3
 800652c:	f080 813e 	bcs.w	80067ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006536:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006542:	f000 8088 	beq.w	8006656 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800655c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006572:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800657e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800658a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1d9      	bne.n	8006546 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3314      	adds	r3, #20
 8006598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3314      	adds	r3, #20
 80065b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e1      	bne.n	8006592 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3314      	adds	r3, #20
 80065d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3314      	adds	r3, #20
 80065ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e3      	bne.n	80065ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	330c      	adds	r3, #12
 800661a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006626:	f023 0310 	bic.w	r3, r3, #16
 800662a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006638:	65ba      	str	r2, [r7, #88]	@ 0x58
 800663a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800663e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e3      	bne.n	8006614 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	4618      	mov	r0, r3
 8006652:	f7fd f949 	bl	80038e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006664:	b29b      	uxth	r3, r3
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	b29b      	uxth	r3, r3
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8cb 	bl	8006808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006672:	e09b      	b.n	80067ac <HAL_UART_IRQHandler+0x518>
 8006674:	08006a81 	.word	0x08006a81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006680:	b29b      	uxth	r3, r3
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 808e 	beq.w	80067b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8089 	beq.w	80067b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80066c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e3      	bne.n	800669e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3314      	adds	r3, #20
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	623b      	str	r3, [r7, #32]
   return(result);
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3314      	adds	r3, #20
 80066f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80066fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e3      	bne.n	80066d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	60fb      	str	r3, [r7, #12]
   return(result);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0310 	bic.w	r3, r3, #16
 8006732:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	330c      	adds	r3, #12
 800673c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006740:	61fa      	str	r2, [r7, #28]
 8006742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	69b9      	ldr	r1, [r7, #24]
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	617b      	str	r3, [r7, #20]
   return(result);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e3      	bne.n	800671c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800675a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f851 	bl	8006808 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006766:	e023      	b.n	80067b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <HAL_UART_IRQHandler+0x4f4>
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f991 	bl	8006aa8 <UART_Transmit_IT>
    return;
 8006786:	e014      	b.n	80067b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00e      	beq.n	80067b2 <HAL_UART_IRQHandler+0x51e>
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f9d1 	bl	8006b48 <UART_EndTransmit_IT>
    return;
 80067a6:	e004      	b.n	80067b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80067a8:	bf00      	nop
 80067aa:	e002      	b.n	80067b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80067ac:	bf00      	nop
 80067ae:	e000      	b.n	80067b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80067b0:	bf00      	nop
  }
}
 80067b2:	37e8      	adds	r7, #232	@ 0xe8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b090      	sub	sp, #64	@ 0x40
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d137      	bne.n	80068ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800683c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800683e:	2200      	movs	r2, #0
 8006840:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3314      	adds	r3, #20
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	623b      	str	r3, [r7, #32]
   return(result);
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006858:	63bb      	str	r3, [r7, #56]	@ 0x38
 800685a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006862:	633a      	str	r2, [r7, #48]	@ 0x30
 8006864:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	330c      	adds	r3, #12
 800687c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	60fb      	str	r3, [r7, #12]
   return(result);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800688c:	637b      	str	r3, [r7, #52]	@ 0x34
 800688e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006896:	61fa      	str	r2, [r7, #28]
 8006898:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	69b9      	ldr	r1, [r7, #24]
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	617b      	str	r3, [r7, #20]
   return(result);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068aa:	e002      	b.n	80068b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068ae:	f7ff ff83 	bl	80067b8 <HAL_UART_TxCpltCallback>
}
 80068b2:	bf00      	nop
 80068b4:	3740      	adds	r7, #64	@ 0x40
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f7ff ff7f 	bl	80067cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ce:	bf00      	nop
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f2:	2b80      	cmp	r3, #128	@ 0x80
 80068f4:	bf0c      	ite	eq
 80068f6:	2301      	moveq	r3, #1
 80068f8:	2300      	movne	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b21      	cmp	r3, #33	@ 0x21
 8006908:	d108      	bne.n	800691c <UART_DMAError+0x46>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006916:	68b8      	ldr	r0, [r7, #8]
 8006918:	f000 f827 	bl	800696a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006926:	2b40      	cmp	r3, #64	@ 0x40
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b22      	cmp	r3, #34	@ 0x22
 800693c:	d108      	bne.n	8006950 <UART_DMAError+0x7a>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2200      	movs	r2, #0
 8006948:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f000 f835 	bl	80069ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006954:	f043 0210 	orr.w	r2, r3, #16
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695c:	68b8      	ldr	r0, [r7, #8]
 800695e:	f7ff ff49 	bl	80067f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800696a:	b480      	push	{r7}
 800696c:	b089      	sub	sp, #36	@ 0x24
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	60bb      	str	r3, [r7, #8]
   return(result);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	61ba      	str	r2, [r7, #24]
 8006994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80069ae:	bf00      	nop
 80069b0:	3724      	adds	r7, #36	@ 0x24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b095      	sub	sp, #84	@ 0x54
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80069e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e5      	bne.n	80069c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3314      	adds	r3, #20
 80069fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d119      	bne.n	8006a66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f023 0310 	bic.w	r3, r3, #16
 8006a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	330c      	adds	r3, #12
 8006a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a52:	61ba      	str	r2, [r7, #24]
 8006a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6979      	ldr	r1, [r7, #20]
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e5      	bne.n	8006a32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a74:	bf00      	nop
 8006a76:	3754      	adds	r7, #84	@ 0x54
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7ff feaa 	bl	80067f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b21      	cmp	r3, #33	@ 0x21
 8006aba:	d13e      	bne.n	8006b3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac4:	d114      	bne.n	8006af0 <UART_Transmit_IT+0x48>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d110      	bne.n	8006af0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]
 8006aee:	e008      	b.n	8006b02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	1c59      	adds	r1, r3, #1
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6211      	str	r1, [r2, #32]
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10f      	bne.n	8006b36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e000      	b.n	8006b3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
  }
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff fe25 	bl	80067b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	@ 0x30
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b22      	cmp	r3, #34	@ 0x22
 8006b8a:	f040 80ae 	bne.w	8006cea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b96:	d117      	bne.n	8006bc8 <UART_Receive_IT+0x50>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d113      	bne.n	8006bc8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	1c9a      	adds	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bc6:	e026      	b.n	8006c16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bda:	d007      	beq.n	8006bec <UART_Receive_IT+0x74>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <UART_Receive_IT+0x82>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	e008      	b.n	8006c0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4619      	mov	r1, r3
 8006c24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d15d      	bne.n	8006ce6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0220 	bic.w	r2, r2, #32
 8006c38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695a      	ldr	r2, [r3, #20]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0201 	bic.w	r2, r2, #1
 8006c58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d135      	bne.n	8006cdc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	613b      	str	r3, [r7, #16]
   return(result);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f023 0310 	bic.w	r3, r3, #16
 8006c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c96:	623a      	str	r2, [r7, #32]
 8006c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	6a3a      	ldr	r2, [r7, #32]
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d10a      	bne.n	8006cce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff fd97 	bl	8006808 <HAL_UARTEx_RxEventCallback>
 8006cda:	e002      	b.n	8006ce2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff fd7f 	bl	80067e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e002      	b.n	8006cec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
  }
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3730      	adds	r7, #48	@ 0x30
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf8:	b0c0      	sub	sp, #256	@ 0x100
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d10:	68d9      	ldr	r1, [r3, #12]
 8006d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	ea40 0301 	orr.w	r3, r0, r1
 8006d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d4c:	f021 010c 	bic.w	r1, r1, #12
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d6e:	6999      	ldr	r1, [r3, #24]
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	ea40 0301 	orr.w	r3, r0, r1
 8006d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b8f      	ldr	r3, [pc, #572]	@ (8006fc0 <UART_SetConfig+0x2cc>)
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d005      	beq.n	8006d94 <UART_SetConfig+0xa0>
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8006fc4 <UART_SetConfig+0x2d0>)
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d104      	bne.n	8006d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fd ff26 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8006d98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d9c:	e003      	b.n	8006da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d9e:	f7fd ff0d 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8006da2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006db0:	f040 810c 	bne.w	8006fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	1891      	adds	r1, r2, r2
 8006dcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006dce:	415b      	adcs	r3, r3
 8006dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	eb12 0801 	adds.w	r8, r2, r1
 8006ddc:	4629      	mov	r1, r5
 8006dde:	eb43 0901 	adc.w	r9, r3, r1
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006df6:	4690      	mov	r8, r2
 8006df8:	4699      	mov	r9, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	eb18 0303 	adds.w	r3, r8, r3
 8006e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e04:	462b      	mov	r3, r5
 8006e06:	eb49 0303 	adc.w	r3, r9, r3
 8006e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e22:	460b      	mov	r3, r1
 8006e24:	18db      	adds	r3, r3, r3
 8006e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e28:	4613      	mov	r3, r2
 8006e2a:	eb42 0303 	adc.w	r3, r2, r3
 8006e2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e38:	f7f9 ff26 	bl	8000c88 <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4b61      	ldr	r3, [pc, #388]	@ (8006fc8 <UART_SetConfig+0x2d4>)
 8006e42:	fba3 2302 	umull	r2, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	011c      	lsls	r4, r3, #4
 8006e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	1891      	adds	r1, r2, r2
 8006e62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e64:	415b      	adcs	r3, r3
 8006e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e72:	4649      	mov	r1, r9
 8006e74:	eb43 0b01 	adc.w	fp, r3, r1
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e8c:	4692      	mov	sl, r2
 8006e8e:	469b      	mov	fp, r3
 8006e90:	4643      	mov	r3, r8
 8006e92:	eb1a 0303 	adds.w	r3, sl, r3
 8006e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8006ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	18db      	adds	r3, r3, r3
 8006ebc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ece:	f7f9 fedb 	bl	8000c88 <__aeabi_uldivmod>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fc8 <UART_SetConfig+0x2d4>)
 8006eda:	fba3 2301 	umull	r2, r3, r3, r1
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	2264      	movs	r2, #100	@ 0x64
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	1acb      	subs	r3, r1, r3
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006eee:	4b36      	ldr	r3, [pc, #216]	@ (8006fc8 <UART_SetConfig+0x2d4>)
 8006ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006efc:	441c      	add	r4, r3
 8006efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	1891      	adds	r1, r2, r2
 8006f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f18:	415b      	adcs	r3, r3
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f20:	4641      	mov	r1, r8
 8006f22:	1851      	adds	r1, r2, r1
 8006f24:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f26:	4649      	mov	r1, r9
 8006f28:	414b      	adcs	r3, r1
 8006f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f38:	4659      	mov	r1, fp
 8006f3a:	00cb      	lsls	r3, r1, #3
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f42:	4651      	mov	r1, sl
 8006f44:	00ca      	lsls	r2, r1, #3
 8006f46:	4610      	mov	r0, r2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	189b      	adds	r3, r3, r2
 8006f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f54:	464b      	mov	r3, r9
 8006f56:	460a      	mov	r2, r1
 8006f58:	eb42 0303 	adc.w	r3, r2, r3
 8006f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f74:	460b      	mov	r3, r1
 8006f76:	18db      	adds	r3, r3, r3
 8006f78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	eb42 0303 	adc.w	r3, r2, r3
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f8a:	f7f9 fe7d 	bl	8000c88 <__aeabi_uldivmod>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc8 <UART_SetConfig+0x2d4>)
 8006f94:	fba3 1302 	umull	r1, r3, r3, r2
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	2164      	movs	r1, #100	@ 0x64
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	3332      	adds	r3, #50	@ 0x32
 8006fa6:	4a08      	ldr	r2, [pc, #32]	@ (8006fc8 <UART_SetConfig+0x2d4>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	f003 0207 	and.w	r2, r3, #7
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4422      	add	r2, r4
 8006fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fbc:	e106      	b.n	80071cc <UART_SetConfig+0x4d8>
 8006fbe:	bf00      	nop
 8006fc0:	40011000 	.word	0x40011000
 8006fc4:	40011400 	.word	0x40011400
 8006fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006fde:	4642      	mov	r2, r8
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	1891      	adds	r1, r2, r2
 8006fe4:	6239      	str	r1, [r7, #32]
 8006fe6:	415b      	adcs	r3, r3
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fee:	4641      	mov	r1, r8
 8006ff0:	1854      	adds	r4, r2, r1
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	eb43 0501 	adc.w	r5, r3, r1
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	00eb      	lsls	r3, r5, #3
 8007002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007006:	00e2      	lsls	r2, r4, #3
 8007008:	4614      	mov	r4, r2
 800700a:	461d      	mov	r5, r3
 800700c:	4643      	mov	r3, r8
 800700e:	18e3      	adds	r3, r4, r3
 8007010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007014:	464b      	mov	r3, r9
 8007016:	eb45 0303 	adc.w	r3, r5, r3
 800701a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800701e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800702a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800703a:	4629      	mov	r1, r5
 800703c:	008b      	lsls	r3, r1, #2
 800703e:	4621      	mov	r1, r4
 8007040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007044:	4621      	mov	r1, r4
 8007046:	008a      	lsls	r2, r1, #2
 8007048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800704c:	f7f9 fe1c 	bl	8000c88 <__aeabi_uldivmod>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4b60      	ldr	r3, [pc, #384]	@ (80071d8 <UART_SetConfig+0x4e4>)
 8007056:	fba3 2302 	umull	r2, r3, r3, r2
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	011c      	lsls	r4, r3, #4
 800705e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007062:	2200      	movs	r2, #0
 8007064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800706c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007070:	4642      	mov	r2, r8
 8007072:	464b      	mov	r3, r9
 8007074:	1891      	adds	r1, r2, r2
 8007076:	61b9      	str	r1, [r7, #24]
 8007078:	415b      	adcs	r3, r3
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007080:	4641      	mov	r1, r8
 8007082:	1851      	adds	r1, r2, r1
 8007084:	6139      	str	r1, [r7, #16]
 8007086:	4649      	mov	r1, r9
 8007088:	414b      	adcs	r3, r1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007098:	4659      	mov	r1, fp
 800709a:	00cb      	lsls	r3, r1, #3
 800709c:	4651      	mov	r1, sl
 800709e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070a2:	4651      	mov	r1, sl
 80070a4:	00ca      	lsls	r2, r1, #3
 80070a6:	4610      	mov	r0, r2
 80070a8:	4619      	mov	r1, r3
 80070aa:	4603      	mov	r3, r0
 80070ac:	4642      	mov	r2, r8
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070b4:	464b      	mov	r3, r9
 80070b6:	460a      	mov	r2, r1
 80070b8:	eb42 0303 	adc.w	r3, r2, r3
 80070bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070d8:	4649      	mov	r1, r9
 80070da:	008b      	lsls	r3, r1, #2
 80070dc:	4641      	mov	r1, r8
 80070de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070e2:	4641      	mov	r1, r8
 80070e4:	008a      	lsls	r2, r1, #2
 80070e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80070ea:	f7f9 fdcd 	bl	8000c88 <__aeabi_uldivmod>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	4b38      	ldr	r3, [pc, #224]	@ (80071d8 <UART_SetConfig+0x4e4>)
 80070f6:	fba3 2301 	umull	r2, r3, r3, r1
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	2264      	movs	r2, #100	@ 0x64
 80070fe:	fb02 f303 	mul.w	r3, r2, r3
 8007102:	1acb      	subs	r3, r1, r3
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	3332      	adds	r3, #50	@ 0x32
 8007108:	4a33      	ldr	r2, [pc, #204]	@ (80071d8 <UART_SetConfig+0x4e4>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007114:	441c      	add	r4, r3
 8007116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800711a:	2200      	movs	r2, #0
 800711c:	673b      	str	r3, [r7, #112]	@ 0x70
 800711e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007120:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	1891      	adds	r1, r2, r2
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	415b      	adcs	r3, r3
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007134:	4641      	mov	r1, r8
 8007136:	1851      	adds	r1, r2, r1
 8007138:	6039      	str	r1, [r7, #0]
 800713a:	4649      	mov	r1, r9
 800713c:	414b      	adcs	r3, r1
 800713e:	607b      	str	r3, [r7, #4]
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800714c:	4659      	mov	r1, fp
 800714e:	00cb      	lsls	r3, r1, #3
 8007150:	4651      	mov	r1, sl
 8007152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007156:	4651      	mov	r1, sl
 8007158:	00ca      	lsls	r2, r1, #3
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	4603      	mov	r3, r0
 8007160:	4642      	mov	r2, r8
 8007162:	189b      	adds	r3, r3, r2
 8007164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007166:	464b      	mov	r3, r9
 8007168:	460a      	mov	r2, r1
 800716a:	eb42 0303 	adc.w	r3, r2, r3
 800716e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	663b      	str	r3, [r7, #96]	@ 0x60
 800717a:	667a      	str	r2, [r7, #100]	@ 0x64
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007188:	4649      	mov	r1, r9
 800718a:	008b      	lsls	r3, r1, #2
 800718c:	4641      	mov	r1, r8
 800718e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007192:	4641      	mov	r1, r8
 8007194:	008a      	lsls	r2, r1, #2
 8007196:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800719a:	f7f9 fd75 	bl	8000c88 <__aeabi_uldivmod>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4b0d      	ldr	r3, [pc, #52]	@ (80071d8 <UART_SetConfig+0x4e4>)
 80071a4:	fba3 1302 	umull	r1, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	2164      	movs	r1, #100	@ 0x64
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	3332      	adds	r3, #50	@ 0x32
 80071b6:	4a08      	ldr	r2, [pc, #32]	@ (80071d8 <UART_SetConfig+0x4e4>)
 80071b8:	fba2 2303 	umull	r2, r3, r2, r3
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	f003 020f 	and.w	r2, r3, #15
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4422      	add	r2, r4
 80071ca:	609a      	str	r2, [r3, #8]
}
 80071cc:	bf00      	nop
 80071ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80071d2:	46bd      	mov	sp, r7
 80071d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071d8:	51eb851f 	.word	0x51eb851f

080071dc <__cvt>:
 80071dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	ec57 6b10 	vmov	r6, r7, d0
 80071e4:	2f00      	cmp	r7, #0
 80071e6:	460c      	mov	r4, r1
 80071e8:	4619      	mov	r1, r3
 80071ea:	463b      	mov	r3, r7
 80071ec:	bfbb      	ittet	lt
 80071ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80071f2:	461f      	movlt	r7, r3
 80071f4:	2300      	movge	r3, #0
 80071f6:	232d      	movlt	r3, #45	@ 0x2d
 80071f8:	700b      	strb	r3, [r1, #0]
 80071fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007200:	4691      	mov	r9, r2
 8007202:	f023 0820 	bic.w	r8, r3, #32
 8007206:	bfbc      	itt	lt
 8007208:	4632      	movlt	r2, r6
 800720a:	4616      	movlt	r6, r2
 800720c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007210:	d005      	beq.n	800721e <__cvt+0x42>
 8007212:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007216:	d100      	bne.n	800721a <__cvt+0x3e>
 8007218:	3401      	adds	r4, #1
 800721a:	2102      	movs	r1, #2
 800721c:	e000      	b.n	8007220 <__cvt+0x44>
 800721e:	2103      	movs	r1, #3
 8007220:	ab03      	add	r3, sp, #12
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	ab02      	add	r3, sp, #8
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	ec47 6b10 	vmov	d0, r6, r7
 800722c:	4653      	mov	r3, sl
 800722e:	4622      	mov	r2, r4
 8007230:	f001 f876 	bl	8008320 <_dtoa_r>
 8007234:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007238:	4605      	mov	r5, r0
 800723a:	d119      	bne.n	8007270 <__cvt+0x94>
 800723c:	f019 0f01 	tst.w	r9, #1
 8007240:	d00e      	beq.n	8007260 <__cvt+0x84>
 8007242:	eb00 0904 	add.w	r9, r0, r4
 8007246:	2200      	movs	r2, #0
 8007248:	2300      	movs	r3, #0
 800724a:	4630      	mov	r0, r6
 800724c:	4639      	mov	r1, r7
 800724e:	f7f9 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007252:	b108      	cbz	r0, 8007258 <__cvt+0x7c>
 8007254:	f8cd 900c 	str.w	r9, [sp, #12]
 8007258:	2230      	movs	r2, #48	@ 0x30
 800725a:	9b03      	ldr	r3, [sp, #12]
 800725c:	454b      	cmp	r3, r9
 800725e:	d31e      	bcc.n	800729e <__cvt+0xc2>
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007264:	1b5b      	subs	r3, r3, r5
 8007266:	4628      	mov	r0, r5
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	b004      	add	sp, #16
 800726c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007274:	eb00 0904 	add.w	r9, r0, r4
 8007278:	d1e5      	bne.n	8007246 <__cvt+0x6a>
 800727a:	7803      	ldrb	r3, [r0, #0]
 800727c:	2b30      	cmp	r3, #48	@ 0x30
 800727e:	d10a      	bne.n	8007296 <__cvt+0xba>
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	4630      	mov	r0, r6
 8007286:	4639      	mov	r1, r7
 8007288:	f7f9 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800728c:	b918      	cbnz	r0, 8007296 <__cvt+0xba>
 800728e:	f1c4 0401 	rsb	r4, r4, #1
 8007292:	f8ca 4000 	str.w	r4, [sl]
 8007296:	f8da 3000 	ldr.w	r3, [sl]
 800729a:	4499      	add	r9, r3
 800729c:	e7d3      	b.n	8007246 <__cvt+0x6a>
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	e7d9      	b.n	800725a <__cvt+0x7e>

080072a6 <__exponent>:
 80072a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072a8:	2900      	cmp	r1, #0
 80072aa:	bfba      	itte	lt
 80072ac:	4249      	neglt	r1, r1
 80072ae:	232d      	movlt	r3, #45	@ 0x2d
 80072b0:	232b      	movge	r3, #43	@ 0x2b
 80072b2:	2909      	cmp	r1, #9
 80072b4:	7002      	strb	r2, [r0, #0]
 80072b6:	7043      	strb	r3, [r0, #1]
 80072b8:	dd29      	ble.n	800730e <__exponent+0x68>
 80072ba:	f10d 0307 	add.w	r3, sp, #7
 80072be:	461d      	mov	r5, r3
 80072c0:	270a      	movs	r7, #10
 80072c2:	461a      	mov	r2, r3
 80072c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80072c8:	fb07 1416 	mls	r4, r7, r6, r1
 80072cc:	3430      	adds	r4, #48	@ 0x30
 80072ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072d2:	460c      	mov	r4, r1
 80072d4:	2c63      	cmp	r4, #99	@ 0x63
 80072d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80072da:	4631      	mov	r1, r6
 80072dc:	dcf1      	bgt.n	80072c2 <__exponent+0x1c>
 80072de:	3130      	adds	r1, #48	@ 0x30
 80072e0:	1e94      	subs	r4, r2, #2
 80072e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072e6:	1c41      	adds	r1, r0, #1
 80072e8:	4623      	mov	r3, r4
 80072ea:	42ab      	cmp	r3, r5
 80072ec:	d30a      	bcc.n	8007304 <__exponent+0x5e>
 80072ee:	f10d 0309 	add.w	r3, sp, #9
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	42ac      	cmp	r4, r5
 80072f6:	bf88      	it	hi
 80072f8:	2300      	movhi	r3, #0
 80072fa:	3302      	adds	r3, #2
 80072fc:	4403      	add	r3, r0
 80072fe:	1a18      	subs	r0, r3, r0
 8007300:	b003      	add	sp, #12
 8007302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007304:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007308:	f801 6f01 	strb.w	r6, [r1, #1]!
 800730c:	e7ed      	b.n	80072ea <__exponent+0x44>
 800730e:	2330      	movs	r3, #48	@ 0x30
 8007310:	3130      	adds	r1, #48	@ 0x30
 8007312:	7083      	strb	r3, [r0, #2]
 8007314:	70c1      	strb	r1, [r0, #3]
 8007316:	1d03      	adds	r3, r0, #4
 8007318:	e7f1      	b.n	80072fe <__exponent+0x58>
	...

0800731c <_printf_float>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	b08d      	sub	sp, #52	@ 0x34
 8007322:	460c      	mov	r4, r1
 8007324:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007328:	4616      	mov	r6, r2
 800732a:	461f      	mov	r7, r3
 800732c:	4605      	mov	r5, r0
 800732e:	f000 feef 	bl	8008110 <_localeconv_r>
 8007332:	6803      	ldr	r3, [r0, #0]
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	4618      	mov	r0, r3
 8007338:	f7f8 ff9a 	bl	8000270 <strlen>
 800733c:	2300      	movs	r3, #0
 800733e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007340:	f8d8 3000 	ldr.w	r3, [r8]
 8007344:	9005      	str	r0, [sp, #20]
 8007346:	3307      	adds	r3, #7
 8007348:	f023 0307 	bic.w	r3, r3, #7
 800734c:	f103 0208 	add.w	r2, r3, #8
 8007350:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007354:	f8d4 b000 	ldr.w	fp, [r4]
 8007358:	f8c8 2000 	str.w	r2, [r8]
 800735c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007360:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007364:	9307      	str	r3, [sp, #28]
 8007366:	f8cd 8018 	str.w	r8, [sp, #24]
 800736a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800736e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007372:	4b9c      	ldr	r3, [pc, #624]	@ (80075e4 <_printf_float+0x2c8>)
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	f7f9 fbd8 	bl	8000b2c <__aeabi_dcmpun>
 800737c:	bb70      	cbnz	r0, 80073dc <_printf_float+0xc0>
 800737e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007382:	4b98      	ldr	r3, [pc, #608]	@ (80075e4 <_printf_float+0x2c8>)
 8007384:	f04f 32ff 	mov.w	r2, #4294967295
 8007388:	f7f9 fbb2 	bl	8000af0 <__aeabi_dcmple>
 800738c:	bb30      	cbnz	r0, 80073dc <_printf_float+0xc0>
 800738e:	2200      	movs	r2, #0
 8007390:	2300      	movs	r3, #0
 8007392:	4640      	mov	r0, r8
 8007394:	4649      	mov	r1, r9
 8007396:	f7f9 fba1 	bl	8000adc <__aeabi_dcmplt>
 800739a:	b110      	cbz	r0, 80073a2 <_printf_float+0x86>
 800739c:	232d      	movs	r3, #45	@ 0x2d
 800739e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073a2:	4a91      	ldr	r2, [pc, #580]	@ (80075e8 <_printf_float+0x2cc>)
 80073a4:	4b91      	ldr	r3, [pc, #580]	@ (80075ec <_printf_float+0x2d0>)
 80073a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073aa:	bf94      	ite	ls
 80073ac:	4690      	movls	r8, r2
 80073ae:	4698      	movhi	r8, r3
 80073b0:	2303      	movs	r3, #3
 80073b2:	6123      	str	r3, [r4, #16]
 80073b4:	f02b 0304 	bic.w	r3, fp, #4
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	f04f 0900 	mov.w	r9, #0
 80073be:	9700      	str	r7, [sp, #0]
 80073c0:	4633      	mov	r3, r6
 80073c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f9d2 	bl	8007770 <_printf_common>
 80073cc:	3001      	adds	r0, #1
 80073ce:	f040 808d 	bne.w	80074ec <_printf_float+0x1d0>
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	b00d      	add	sp, #52	@ 0x34
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	f7f9 fba2 	bl	8000b2c <__aeabi_dcmpun>
 80073e8:	b140      	cbz	r0, 80073fc <_printf_float+0xe0>
 80073ea:	464b      	mov	r3, r9
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfbc      	itt	lt
 80073f0:	232d      	movlt	r3, #45	@ 0x2d
 80073f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073f6:	4a7e      	ldr	r2, [pc, #504]	@ (80075f0 <_printf_float+0x2d4>)
 80073f8:	4b7e      	ldr	r3, [pc, #504]	@ (80075f4 <_printf_float+0x2d8>)
 80073fa:	e7d4      	b.n	80073a6 <_printf_float+0x8a>
 80073fc:	6863      	ldr	r3, [r4, #4]
 80073fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007402:	9206      	str	r2, [sp, #24]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	d13b      	bne.n	8007480 <_printf_float+0x164>
 8007408:	2306      	movs	r3, #6
 800740a:	6063      	str	r3, [r4, #4]
 800740c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007410:	2300      	movs	r3, #0
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	ab0a      	add	r3, sp, #40	@ 0x28
 8007418:	e9cd a301 	strd	sl, r3, [sp, #4]
 800741c:	ab09      	add	r3, sp, #36	@ 0x24
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	6861      	ldr	r1, [r4, #4]
 8007422:	ec49 8b10 	vmov	d0, r8, r9
 8007426:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800742a:	4628      	mov	r0, r5
 800742c:	f7ff fed6 	bl	80071dc <__cvt>
 8007430:	9b06      	ldr	r3, [sp, #24]
 8007432:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007434:	2b47      	cmp	r3, #71	@ 0x47
 8007436:	4680      	mov	r8, r0
 8007438:	d129      	bne.n	800748e <_printf_float+0x172>
 800743a:	1cc8      	adds	r0, r1, #3
 800743c:	db02      	blt.n	8007444 <_printf_float+0x128>
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	4299      	cmp	r1, r3
 8007442:	dd41      	ble.n	80074c8 <_printf_float+0x1ac>
 8007444:	f1aa 0a02 	sub.w	sl, sl, #2
 8007448:	fa5f fa8a 	uxtb.w	sl, sl
 800744c:	3901      	subs	r1, #1
 800744e:	4652      	mov	r2, sl
 8007450:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007454:	9109      	str	r1, [sp, #36]	@ 0x24
 8007456:	f7ff ff26 	bl	80072a6 <__exponent>
 800745a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800745c:	1813      	adds	r3, r2, r0
 800745e:	2a01      	cmp	r2, #1
 8007460:	4681      	mov	r9, r0
 8007462:	6123      	str	r3, [r4, #16]
 8007464:	dc02      	bgt.n	800746c <_printf_float+0x150>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	07d2      	lsls	r2, r2, #31
 800746a:	d501      	bpl.n	8007470 <_printf_float+0x154>
 800746c:	3301      	adds	r3, #1
 800746e:	6123      	str	r3, [r4, #16]
 8007470:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0a2      	beq.n	80073be <_printf_float+0xa2>
 8007478:	232d      	movs	r3, #45	@ 0x2d
 800747a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800747e:	e79e      	b.n	80073be <_printf_float+0xa2>
 8007480:	9a06      	ldr	r2, [sp, #24]
 8007482:	2a47      	cmp	r2, #71	@ 0x47
 8007484:	d1c2      	bne.n	800740c <_printf_float+0xf0>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1c0      	bne.n	800740c <_printf_float+0xf0>
 800748a:	2301      	movs	r3, #1
 800748c:	e7bd      	b.n	800740a <_printf_float+0xee>
 800748e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007492:	d9db      	bls.n	800744c <_printf_float+0x130>
 8007494:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007498:	d118      	bne.n	80074cc <_printf_float+0x1b0>
 800749a:	2900      	cmp	r1, #0
 800749c:	6863      	ldr	r3, [r4, #4]
 800749e:	dd0b      	ble.n	80074b8 <_printf_float+0x19c>
 80074a0:	6121      	str	r1, [r4, #16]
 80074a2:	b913      	cbnz	r3, 80074aa <_printf_float+0x18e>
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	07d0      	lsls	r0, r2, #31
 80074a8:	d502      	bpl.n	80074b0 <_printf_float+0x194>
 80074aa:	3301      	adds	r3, #1
 80074ac:	440b      	add	r3, r1
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074b2:	f04f 0900 	mov.w	r9, #0
 80074b6:	e7db      	b.n	8007470 <_printf_float+0x154>
 80074b8:	b913      	cbnz	r3, 80074c0 <_printf_float+0x1a4>
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	07d2      	lsls	r2, r2, #31
 80074be:	d501      	bpl.n	80074c4 <_printf_float+0x1a8>
 80074c0:	3302      	adds	r3, #2
 80074c2:	e7f4      	b.n	80074ae <_printf_float+0x192>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e7f2      	b.n	80074ae <_printf_float+0x192>
 80074c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80074cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ce:	4299      	cmp	r1, r3
 80074d0:	db05      	blt.n	80074de <_printf_float+0x1c2>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	6121      	str	r1, [r4, #16]
 80074d6:	07d8      	lsls	r0, r3, #31
 80074d8:	d5ea      	bpl.n	80074b0 <_printf_float+0x194>
 80074da:	1c4b      	adds	r3, r1, #1
 80074dc:	e7e7      	b.n	80074ae <_printf_float+0x192>
 80074de:	2900      	cmp	r1, #0
 80074e0:	bfd4      	ite	le
 80074e2:	f1c1 0202 	rsble	r2, r1, #2
 80074e6:	2201      	movgt	r2, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	e7e0      	b.n	80074ae <_printf_float+0x192>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	055a      	lsls	r2, r3, #21
 80074f0:	d407      	bmi.n	8007502 <_printf_float+0x1e6>
 80074f2:	6923      	ldr	r3, [r4, #16]
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	d12b      	bne.n	8007558 <_printf_float+0x23c>
 8007500:	e767      	b.n	80073d2 <_printf_float+0xb6>
 8007502:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007506:	f240 80dd 	bls.w	80076c4 <_printf_float+0x3a8>
 800750a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800750e:	2200      	movs	r2, #0
 8007510:	2300      	movs	r3, #0
 8007512:	f7f9 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007516:	2800      	cmp	r0, #0
 8007518:	d033      	beq.n	8007582 <_printf_float+0x266>
 800751a:	4a37      	ldr	r2, [pc, #220]	@ (80075f8 <_printf_float+0x2dc>)
 800751c:	2301      	movs	r3, #1
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	f43f af54 	beq.w	80073d2 <_printf_float+0xb6>
 800752a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800752e:	4543      	cmp	r3, r8
 8007530:	db02      	blt.n	8007538 <_printf_float+0x21c>
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	07d8      	lsls	r0, r3, #31
 8007536:	d50f      	bpl.n	8007558 <_printf_float+0x23c>
 8007538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	f43f af45 	beq.w	80073d2 <_printf_float+0xb6>
 8007548:	f04f 0900 	mov.w	r9, #0
 800754c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007550:	f104 0a1a 	add.w	sl, r4, #26
 8007554:	45c8      	cmp	r8, r9
 8007556:	dc09      	bgt.n	800756c <_printf_float+0x250>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	079b      	lsls	r3, r3, #30
 800755c:	f100 8103 	bmi.w	8007766 <_printf_float+0x44a>
 8007560:	68e0      	ldr	r0, [r4, #12]
 8007562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007564:	4298      	cmp	r0, r3
 8007566:	bfb8      	it	lt
 8007568:	4618      	movlt	r0, r3
 800756a:	e734      	b.n	80073d6 <_printf_float+0xba>
 800756c:	2301      	movs	r3, #1
 800756e:	4652      	mov	r2, sl
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f af2b 	beq.w	80073d2 <_printf_float+0xb6>
 800757c:	f109 0901 	add.w	r9, r9, #1
 8007580:	e7e8      	b.n	8007554 <_printf_float+0x238>
 8007582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	dc39      	bgt.n	80075fc <_printf_float+0x2e0>
 8007588:	4a1b      	ldr	r2, [pc, #108]	@ (80075f8 <_printf_float+0x2dc>)
 800758a:	2301      	movs	r3, #1
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af1d 	beq.w	80073d2 <_printf_float+0xb6>
 8007598:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800759c:	ea59 0303 	orrs.w	r3, r9, r3
 80075a0:	d102      	bne.n	80075a8 <_printf_float+0x28c>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	07d9      	lsls	r1, r3, #31
 80075a6:	d5d7      	bpl.n	8007558 <_printf_float+0x23c>
 80075a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f af0d 	beq.w	80073d2 <_printf_float+0xb6>
 80075b8:	f04f 0a00 	mov.w	sl, #0
 80075bc:	f104 0b1a 	add.w	fp, r4, #26
 80075c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075c2:	425b      	negs	r3, r3
 80075c4:	4553      	cmp	r3, sl
 80075c6:	dc01      	bgt.n	80075cc <_printf_float+0x2b0>
 80075c8:	464b      	mov	r3, r9
 80075ca:	e793      	b.n	80074f4 <_printf_float+0x1d8>
 80075cc:	2301      	movs	r3, #1
 80075ce:	465a      	mov	r2, fp
 80075d0:	4631      	mov	r1, r6
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	f43f aefb 	beq.w	80073d2 <_printf_float+0xb6>
 80075dc:	f10a 0a01 	add.w	sl, sl, #1
 80075e0:	e7ee      	b.n	80075c0 <_printf_float+0x2a4>
 80075e2:	bf00      	nop
 80075e4:	7fefffff 	.word	0x7fefffff
 80075e8:	0800b928 	.word	0x0800b928
 80075ec:	0800b92c 	.word	0x0800b92c
 80075f0:	0800b930 	.word	0x0800b930
 80075f4:	0800b934 	.word	0x0800b934
 80075f8:	0800b938 	.word	0x0800b938
 80075fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007602:	4553      	cmp	r3, sl
 8007604:	bfa8      	it	ge
 8007606:	4653      	movge	r3, sl
 8007608:	2b00      	cmp	r3, #0
 800760a:	4699      	mov	r9, r3
 800760c:	dc36      	bgt.n	800767c <_printf_float+0x360>
 800760e:	f04f 0b00 	mov.w	fp, #0
 8007612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007616:	f104 021a 	add.w	r2, r4, #26
 800761a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800761c:	9306      	str	r3, [sp, #24]
 800761e:	eba3 0309 	sub.w	r3, r3, r9
 8007622:	455b      	cmp	r3, fp
 8007624:	dc31      	bgt.n	800768a <_printf_float+0x36e>
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	459a      	cmp	sl, r3
 800762a:	dc3a      	bgt.n	80076a2 <_printf_float+0x386>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	07da      	lsls	r2, r3, #31
 8007630:	d437      	bmi.n	80076a2 <_printf_float+0x386>
 8007632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007634:	ebaa 0903 	sub.w	r9, sl, r3
 8007638:	9b06      	ldr	r3, [sp, #24]
 800763a:	ebaa 0303 	sub.w	r3, sl, r3
 800763e:	4599      	cmp	r9, r3
 8007640:	bfa8      	it	ge
 8007642:	4699      	movge	r9, r3
 8007644:	f1b9 0f00 	cmp.w	r9, #0
 8007648:	dc33      	bgt.n	80076b2 <_printf_float+0x396>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007652:	f104 0b1a 	add.w	fp, r4, #26
 8007656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007658:	ebaa 0303 	sub.w	r3, sl, r3
 800765c:	eba3 0309 	sub.w	r3, r3, r9
 8007660:	4543      	cmp	r3, r8
 8007662:	f77f af79 	ble.w	8007558 <_printf_float+0x23c>
 8007666:	2301      	movs	r3, #1
 8007668:	465a      	mov	r2, fp
 800766a:	4631      	mov	r1, r6
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	f43f aeae 	beq.w	80073d2 <_printf_float+0xb6>
 8007676:	f108 0801 	add.w	r8, r8, #1
 800767a:	e7ec      	b.n	8007656 <_printf_float+0x33a>
 800767c:	4642      	mov	r2, r8
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	d1c2      	bne.n	800760e <_printf_float+0x2f2>
 8007688:	e6a3      	b.n	80073d2 <_printf_float+0xb6>
 800768a:	2301      	movs	r3, #1
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	9206      	str	r2, [sp, #24]
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	f43f ae9c 	beq.w	80073d2 <_printf_float+0xb6>
 800769a:	9a06      	ldr	r2, [sp, #24]
 800769c:	f10b 0b01 	add.w	fp, fp, #1
 80076a0:	e7bb      	b.n	800761a <_printf_float+0x2fe>
 80076a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	d1c0      	bne.n	8007632 <_printf_float+0x316>
 80076b0:	e68f      	b.n	80073d2 <_printf_float+0xb6>
 80076b2:	9a06      	ldr	r2, [sp, #24]
 80076b4:	464b      	mov	r3, r9
 80076b6:	4442      	add	r2, r8
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	d1c3      	bne.n	800764a <_printf_float+0x32e>
 80076c2:	e686      	b.n	80073d2 <_printf_float+0xb6>
 80076c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076c8:	f1ba 0f01 	cmp.w	sl, #1
 80076cc:	dc01      	bgt.n	80076d2 <_printf_float+0x3b6>
 80076ce:	07db      	lsls	r3, r3, #31
 80076d0:	d536      	bpl.n	8007740 <_printf_float+0x424>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4642      	mov	r2, r8
 80076d6:	4631      	mov	r1, r6
 80076d8:	4628      	mov	r0, r5
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f ae78 	beq.w	80073d2 <_printf_float+0xb6>
 80076e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f ae70 	beq.w	80073d2 <_printf_float+0xb6>
 80076f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076fe:	f7f9 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007702:	b9c0      	cbnz	r0, 8007736 <_printf_float+0x41a>
 8007704:	4653      	mov	r3, sl
 8007706:	f108 0201 	add.w	r2, r8, #1
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	d10c      	bne.n	800772e <_printf_float+0x412>
 8007714:	e65d      	b.n	80073d2 <_printf_float+0xb6>
 8007716:	2301      	movs	r3, #1
 8007718:	465a      	mov	r2, fp
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f ae56 	beq.w	80073d2 <_printf_float+0xb6>
 8007726:	f108 0801 	add.w	r8, r8, #1
 800772a:	45d0      	cmp	r8, sl
 800772c:	dbf3      	blt.n	8007716 <_printf_float+0x3fa>
 800772e:	464b      	mov	r3, r9
 8007730:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007734:	e6df      	b.n	80074f6 <_printf_float+0x1da>
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	f104 0b1a 	add.w	fp, r4, #26
 800773e:	e7f4      	b.n	800772a <_printf_float+0x40e>
 8007740:	2301      	movs	r3, #1
 8007742:	4642      	mov	r2, r8
 8007744:	e7e1      	b.n	800770a <_printf_float+0x3ee>
 8007746:	2301      	movs	r3, #1
 8007748:	464a      	mov	r2, r9
 800774a:	4631      	mov	r1, r6
 800774c:	4628      	mov	r0, r5
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	f43f ae3e 	beq.w	80073d2 <_printf_float+0xb6>
 8007756:	f108 0801 	add.w	r8, r8, #1
 800775a:	68e3      	ldr	r3, [r4, #12]
 800775c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800775e:	1a5b      	subs	r3, r3, r1
 8007760:	4543      	cmp	r3, r8
 8007762:	dcf0      	bgt.n	8007746 <_printf_float+0x42a>
 8007764:	e6fc      	b.n	8007560 <_printf_float+0x244>
 8007766:	f04f 0800 	mov.w	r8, #0
 800776a:	f104 0919 	add.w	r9, r4, #25
 800776e:	e7f4      	b.n	800775a <_printf_float+0x43e>

08007770 <_printf_common>:
 8007770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	4616      	mov	r6, r2
 8007776:	4698      	mov	r8, r3
 8007778:	688a      	ldr	r2, [r1, #8]
 800777a:	690b      	ldr	r3, [r1, #16]
 800777c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007780:	4293      	cmp	r3, r2
 8007782:	bfb8      	it	lt
 8007784:	4613      	movlt	r3, r2
 8007786:	6033      	str	r3, [r6, #0]
 8007788:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800778c:	4607      	mov	r7, r0
 800778e:	460c      	mov	r4, r1
 8007790:	b10a      	cbz	r2, 8007796 <_printf_common+0x26>
 8007792:	3301      	adds	r3, #1
 8007794:	6033      	str	r3, [r6, #0]
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	0699      	lsls	r1, r3, #26
 800779a:	bf42      	ittt	mi
 800779c:	6833      	ldrmi	r3, [r6, #0]
 800779e:	3302      	addmi	r3, #2
 80077a0:	6033      	strmi	r3, [r6, #0]
 80077a2:	6825      	ldr	r5, [r4, #0]
 80077a4:	f015 0506 	ands.w	r5, r5, #6
 80077a8:	d106      	bne.n	80077b8 <_printf_common+0x48>
 80077aa:	f104 0a19 	add.w	sl, r4, #25
 80077ae:	68e3      	ldr	r3, [r4, #12]
 80077b0:	6832      	ldr	r2, [r6, #0]
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	42ab      	cmp	r3, r5
 80077b6:	dc26      	bgt.n	8007806 <_printf_common+0x96>
 80077b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077bc:	6822      	ldr	r2, [r4, #0]
 80077be:	3b00      	subs	r3, #0
 80077c0:	bf18      	it	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	0692      	lsls	r2, r2, #26
 80077c6:	d42b      	bmi.n	8007820 <_printf_common+0xb0>
 80077c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077cc:	4641      	mov	r1, r8
 80077ce:	4638      	mov	r0, r7
 80077d0:	47c8      	blx	r9
 80077d2:	3001      	adds	r0, #1
 80077d4:	d01e      	beq.n	8007814 <_printf_common+0xa4>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	6922      	ldr	r2, [r4, #16]
 80077da:	f003 0306 	and.w	r3, r3, #6
 80077de:	2b04      	cmp	r3, #4
 80077e0:	bf02      	ittt	eq
 80077e2:	68e5      	ldreq	r5, [r4, #12]
 80077e4:	6833      	ldreq	r3, [r6, #0]
 80077e6:	1aed      	subeq	r5, r5, r3
 80077e8:	68a3      	ldr	r3, [r4, #8]
 80077ea:	bf0c      	ite	eq
 80077ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f0:	2500      	movne	r5, #0
 80077f2:	4293      	cmp	r3, r2
 80077f4:	bfc4      	itt	gt
 80077f6:	1a9b      	subgt	r3, r3, r2
 80077f8:	18ed      	addgt	r5, r5, r3
 80077fa:	2600      	movs	r6, #0
 80077fc:	341a      	adds	r4, #26
 80077fe:	42b5      	cmp	r5, r6
 8007800:	d11a      	bne.n	8007838 <_printf_common+0xc8>
 8007802:	2000      	movs	r0, #0
 8007804:	e008      	b.n	8007818 <_printf_common+0xa8>
 8007806:	2301      	movs	r3, #1
 8007808:	4652      	mov	r2, sl
 800780a:	4641      	mov	r1, r8
 800780c:	4638      	mov	r0, r7
 800780e:	47c8      	blx	r9
 8007810:	3001      	adds	r0, #1
 8007812:	d103      	bne.n	800781c <_printf_common+0xac>
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781c:	3501      	adds	r5, #1
 800781e:	e7c6      	b.n	80077ae <_printf_common+0x3e>
 8007820:	18e1      	adds	r1, r4, r3
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	2030      	movs	r0, #48	@ 0x30
 8007826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800782a:	4422      	add	r2, r4
 800782c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007834:	3302      	adds	r3, #2
 8007836:	e7c7      	b.n	80077c8 <_printf_common+0x58>
 8007838:	2301      	movs	r3, #1
 800783a:	4622      	mov	r2, r4
 800783c:	4641      	mov	r1, r8
 800783e:	4638      	mov	r0, r7
 8007840:	47c8      	blx	r9
 8007842:	3001      	adds	r0, #1
 8007844:	d0e6      	beq.n	8007814 <_printf_common+0xa4>
 8007846:	3601      	adds	r6, #1
 8007848:	e7d9      	b.n	80077fe <_printf_common+0x8e>
	...

0800784c <_printf_i>:
 800784c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	7e0f      	ldrb	r7, [r1, #24]
 8007852:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007854:	2f78      	cmp	r7, #120	@ 0x78
 8007856:	4691      	mov	r9, r2
 8007858:	4680      	mov	r8, r0
 800785a:	460c      	mov	r4, r1
 800785c:	469a      	mov	sl, r3
 800785e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007862:	d807      	bhi.n	8007874 <_printf_i+0x28>
 8007864:	2f62      	cmp	r7, #98	@ 0x62
 8007866:	d80a      	bhi.n	800787e <_printf_i+0x32>
 8007868:	2f00      	cmp	r7, #0
 800786a:	f000 80d2 	beq.w	8007a12 <_printf_i+0x1c6>
 800786e:	2f58      	cmp	r7, #88	@ 0x58
 8007870:	f000 80b9 	beq.w	80079e6 <_printf_i+0x19a>
 8007874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800787c:	e03a      	b.n	80078f4 <_printf_i+0xa8>
 800787e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007882:	2b15      	cmp	r3, #21
 8007884:	d8f6      	bhi.n	8007874 <_printf_i+0x28>
 8007886:	a101      	add	r1, pc, #4	@ (adr r1, 800788c <_printf_i+0x40>)
 8007888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800788c:	080078e5 	.word	0x080078e5
 8007890:	080078f9 	.word	0x080078f9
 8007894:	08007875 	.word	0x08007875
 8007898:	08007875 	.word	0x08007875
 800789c:	08007875 	.word	0x08007875
 80078a0:	08007875 	.word	0x08007875
 80078a4:	080078f9 	.word	0x080078f9
 80078a8:	08007875 	.word	0x08007875
 80078ac:	08007875 	.word	0x08007875
 80078b0:	08007875 	.word	0x08007875
 80078b4:	08007875 	.word	0x08007875
 80078b8:	080079f9 	.word	0x080079f9
 80078bc:	08007923 	.word	0x08007923
 80078c0:	080079b3 	.word	0x080079b3
 80078c4:	08007875 	.word	0x08007875
 80078c8:	08007875 	.word	0x08007875
 80078cc:	08007a1b 	.word	0x08007a1b
 80078d0:	08007875 	.word	0x08007875
 80078d4:	08007923 	.word	0x08007923
 80078d8:	08007875 	.word	0x08007875
 80078dc:	08007875 	.word	0x08007875
 80078e0:	080079bb 	.word	0x080079bb
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	1d1a      	adds	r2, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6032      	str	r2, [r6, #0]
 80078ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078f4:	2301      	movs	r3, #1
 80078f6:	e09d      	b.n	8007a34 <_printf_i+0x1e8>
 80078f8:	6833      	ldr	r3, [r6, #0]
 80078fa:	6820      	ldr	r0, [r4, #0]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	6031      	str	r1, [r6, #0]
 8007900:	0606      	lsls	r6, r0, #24
 8007902:	d501      	bpl.n	8007908 <_printf_i+0xbc>
 8007904:	681d      	ldr	r5, [r3, #0]
 8007906:	e003      	b.n	8007910 <_printf_i+0xc4>
 8007908:	0645      	lsls	r5, r0, #25
 800790a:	d5fb      	bpl.n	8007904 <_printf_i+0xb8>
 800790c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007910:	2d00      	cmp	r5, #0
 8007912:	da03      	bge.n	800791c <_printf_i+0xd0>
 8007914:	232d      	movs	r3, #45	@ 0x2d
 8007916:	426d      	negs	r5, r5
 8007918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800791c:	4859      	ldr	r0, [pc, #356]	@ (8007a84 <_printf_i+0x238>)
 800791e:	230a      	movs	r3, #10
 8007920:	e011      	b.n	8007946 <_printf_i+0xfa>
 8007922:	6821      	ldr	r1, [r4, #0]
 8007924:	6833      	ldr	r3, [r6, #0]
 8007926:	0608      	lsls	r0, r1, #24
 8007928:	f853 5b04 	ldr.w	r5, [r3], #4
 800792c:	d402      	bmi.n	8007934 <_printf_i+0xe8>
 800792e:	0649      	lsls	r1, r1, #25
 8007930:	bf48      	it	mi
 8007932:	b2ad      	uxthmi	r5, r5
 8007934:	2f6f      	cmp	r7, #111	@ 0x6f
 8007936:	4853      	ldr	r0, [pc, #332]	@ (8007a84 <_printf_i+0x238>)
 8007938:	6033      	str	r3, [r6, #0]
 800793a:	bf14      	ite	ne
 800793c:	230a      	movne	r3, #10
 800793e:	2308      	moveq	r3, #8
 8007940:	2100      	movs	r1, #0
 8007942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007946:	6866      	ldr	r6, [r4, #4]
 8007948:	60a6      	str	r6, [r4, #8]
 800794a:	2e00      	cmp	r6, #0
 800794c:	bfa2      	ittt	ge
 800794e:	6821      	ldrge	r1, [r4, #0]
 8007950:	f021 0104 	bicge.w	r1, r1, #4
 8007954:	6021      	strge	r1, [r4, #0]
 8007956:	b90d      	cbnz	r5, 800795c <_printf_i+0x110>
 8007958:	2e00      	cmp	r6, #0
 800795a:	d04b      	beq.n	80079f4 <_printf_i+0x1a8>
 800795c:	4616      	mov	r6, r2
 800795e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007962:	fb03 5711 	mls	r7, r3, r1, r5
 8007966:	5dc7      	ldrb	r7, [r0, r7]
 8007968:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800796c:	462f      	mov	r7, r5
 800796e:	42bb      	cmp	r3, r7
 8007970:	460d      	mov	r5, r1
 8007972:	d9f4      	bls.n	800795e <_printf_i+0x112>
 8007974:	2b08      	cmp	r3, #8
 8007976:	d10b      	bne.n	8007990 <_printf_i+0x144>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	07df      	lsls	r7, r3, #31
 800797c:	d508      	bpl.n	8007990 <_printf_i+0x144>
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	6861      	ldr	r1, [r4, #4]
 8007982:	4299      	cmp	r1, r3
 8007984:	bfde      	ittt	le
 8007986:	2330      	movle	r3, #48	@ 0x30
 8007988:	f806 3c01 	strble.w	r3, [r6, #-1]
 800798c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007990:	1b92      	subs	r2, r2, r6
 8007992:	6122      	str	r2, [r4, #16]
 8007994:	f8cd a000 	str.w	sl, [sp]
 8007998:	464b      	mov	r3, r9
 800799a:	aa03      	add	r2, sp, #12
 800799c:	4621      	mov	r1, r4
 800799e:	4640      	mov	r0, r8
 80079a0:	f7ff fee6 	bl	8007770 <_printf_common>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d14a      	bne.n	8007a3e <_printf_i+0x1f2>
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	b004      	add	sp, #16
 80079ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	f043 0320 	orr.w	r3, r3, #32
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	4833      	ldr	r0, [pc, #204]	@ (8007a88 <_printf_i+0x23c>)
 80079bc:	2778      	movs	r7, #120	@ 0x78
 80079be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	6831      	ldr	r1, [r6, #0]
 80079c6:	061f      	lsls	r7, r3, #24
 80079c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80079cc:	d402      	bmi.n	80079d4 <_printf_i+0x188>
 80079ce:	065f      	lsls	r7, r3, #25
 80079d0:	bf48      	it	mi
 80079d2:	b2ad      	uxthmi	r5, r5
 80079d4:	6031      	str	r1, [r6, #0]
 80079d6:	07d9      	lsls	r1, r3, #31
 80079d8:	bf44      	itt	mi
 80079da:	f043 0320 	orrmi.w	r3, r3, #32
 80079de:	6023      	strmi	r3, [r4, #0]
 80079e0:	b11d      	cbz	r5, 80079ea <_printf_i+0x19e>
 80079e2:	2310      	movs	r3, #16
 80079e4:	e7ac      	b.n	8007940 <_printf_i+0xf4>
 80079e6:	4827      	ldr	r0, [pc, #156]	@ (8007a84 <_printf_i+0x238>)
 80079e8:	e7e9      	b.n	80079be <_printf_i+0x172>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	f023 0320 	bic.w	r3, r3, #32
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	e7f6      	b.n	80079e2 <_printf_i+0x196>
 80079f4:	4616      	mov	r6, r2
 80079f6:	e7bd      	b.n	8007974 <_printf_i+0x128>
 80079f8:	6833      	ldr	r3, [r6, #0]
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	6961      	ldr	r1, [r4, #20]
 80079fe:	1d18      	adds	r0, r3, #4
 8007a00:	6030      	str	r0, [r6, #0]
 8007a02:	062e      	lsls	r6, r5, #24
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	d501      	bpl.n	8007a0c <_printf_i+0x1c0>
 8007a08:	6019      	str	r1, [r3, #0]
 8007a0a:	e002      	b.n	8007a12 <_printf_i+0x1c6>
 8007a0c:	0668      	lsls	r0, r5, #25
 8007a0e:	d5fb      	bpl.n	8007a08 <_printf_i+0x1bc>
 8007a10:	8019      	strh	r1, [r3, #0]
 8007a12:	2300      	movs	r3, #0
 8007a14:	6123      	str	r3, [r4, #16]
 8007a16:	4616      	mov	r6, r2
 8007a18:	e7bc      	b.n	8007994 <_printf_i+0x148>
 8007a1a:	6833      	ldr	r3, [r6, #0]
 8007a1c:	1d1a      	adds	r2, r3, #4
 8007a1e:	6032      	str	r2, [r6, #0]
 8007a20:	681e      	ldr	r6, [r3, #0]
 8007a22:	6862      	ldr	r2, [r4, #4]
 8007a24:	2100      	movs	r1, #0
 8007a26:	4630      	mov	r0, r6
 8007a28:	f7f8 fbd2 	bl	80001d0 <memchr>
 8007a2c:	b108      	cbz	r0, 8007a32 <_printf_i+0x1e6>
 8007a2e:	1b80      	subs	r0, r0, r6
 8007a30:	6060      	str	r0, [r4, #4]
 8007a32:	6863      	ldr	r3, [r4, #4]
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	2300      	movs	r3, #0
 8007a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a3c:	e7aa      	b.n	8007994 <_printf_i+0x148>
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	4632      	mov	r2, r6
 8007a42:	4649      	mov	r1, r9
 8007a44:	4640      	mov	r0, r8
 8007a46:	47d0      	blx	sl
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d0ad      	beq.n	80079a8 <_printf_i+0x15c>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	079b      	lsls	r3, r3, #30
 8007a50:	d413      	bmi.n	8007a7a <_printf_i+0x22e>
 8007a52:	68e0      	ldr	r0, [r4, #12]
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	4298      	cmp	r0, r3
 8007a58:	bfb8      	it	lt
 8007a5a:	4618      	movlt	r0, r3
 8007a5c:	e7a6      	b.n	80079ac <_printf_i+0x160>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4632      	mov	r2, r6
 8007a62:	4649      	mov	r1, r9
 8007a64:	4640      	mov	r0, r8
 8007a66:	47d0      	blx	sl
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d09d      	beq.n	80079a8 <_printf_i+0x15c>
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	68e3      	ldr	r3, [r4, #12]
 8007a70:	9903      	ldr	r1, [sp, #12]
 8007a72:	1a5b      	subs	r3, r3, r1
 8007a74:	42ab      	cmp	r3, r5
 8007a76:	dcf2      	bgt.n	8007a5e <_printf_i+0x212>
 8007a78:	e7eb      	b.n	8007a52 <_printf_i+0x206>
 8007a7a:	2500      	movs	r5, #0
 8007a7c:	f104 0619 	add.w	r6, r4, #25
 8007a80:	e7f5      	b.n	8007a6e <_printf_i+0x222>
 8007a82:	bf00      	nop
 8007a84:	0800b93a 	.word	0x0800b93a
 8007a88:	0800b94b 	.word	0x0800b94b

08007a8c <_scanf_float>:
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	b087      	sub	sp, #28
 8007a92:	4617      	mov	r7, r2
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	688b      	ldr	r3, [r1, #8]
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007a9e:	bf81      	itttt	hi
 8007aa0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007aa4:	eb03 0b05 	addhi.w	fp, r3, r5
 8007aa8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007aac:	608b      	strhi	r3, [r1, #8]
 8007aae:	680b      	ldr	r3, [r1, #0]
 8007ab0:	460a      	mov	r2, r1
 8007ab2:	f04f 0500 	mov.w	r5, #0
 8007ab6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007aba:	f842 3b1c 	str.w	r3, [r2], #28
 8007abe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	bf98      	it	ls
 8007ac8:	f04f 0b00 	movls.w	fp, #0
 8007acc:	9201      	str	r2, [sp, #4]
 8007ace:	4616      	mov	r6, r2
 8007ad0:	46aa      	mov	sl, r5
 8007ad2:	46a9      	mov	r9, r5
 8007ad4:	9502      	str	r5, [sp, #8]
 8007ad6:	68a2      	ldr	r2, [r4, #8]
 8007ad8:	b152      	cbz	r2, 8007af0 <_scanf_float+0x64>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b4e      	cmp	r3, #78	@ 0x4e
 8007ae0:	d864      	bhi.n	8007bac <_scanf_float+0x120>
 8007ae2:	2b40      	cmp	r3, #64	@ 0x40
 8007ae4:	d83c      	bhi.n	8007b60 <_scanf_float+0xd4>
 8007ae6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007aea:	b2c8      	uxtb	r0, r1
 8007aec:	280e      	cmp	r0, #14
 8007aee:	d93a      	bls.n	8007b66 <_scanf_float+0xda>
 8007af0:	f1b9 0f00 	cmp.w	r9, #0
 8007af4:	d003      	beq.n	8007afe <_scanf_float+0x72>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b02:	f1ba 0f01 	cmp.w	sl, #1
 8007b06:	f200 8117 	bhi.w	8007d38 <_scanf_float+0x2ac>
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	429e      	cmp	r6, r3
 8007b0e:	f200 8108 	bhi.w	8007d22 <_scanf_float+0x296>
 8007b12:	2001      	movs	r0, #1
 8007b14:	b007      	add	sp, #28
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007b1e:	2a0d      	cmp	r2, #13
 8007b20:	d8e6      	bhi.n	8007af0 <_scanf_float+0x64>
 8007b22:	a101      	add	r1, pc, #4	@ (adr r1, 8007b28 <_scanf_float+0x9c>)
 8007b24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b28:	08007c6f 	.word	0x08007c6f
 8007b2c:	08007af1 	.word	0x08007af1
 8007b30:	08007af1 	.word	0x08007af1
 8007b34:	08007af1 	.word	0x08007af1
 8007b38:	08007ccf 	.word	0x08007ccf
 8007b3c:	08007ca7 	.word	0x08007ca7
 8007b40:	08007af1 	.word	0x08007af1
 8007b44:	08007af1 	.word	0x08007af1
 8007b48:	08007c7d 	.word	0x08007c7d
 8007b4c:	08007af1 	.word	0x08007af1
 8007b50:	08007af1 	.word	0x08007af1
 8007b54:	08007af1 	.word	0x08007af1
 8007b58:	08007af1 	.word	0x08007af1
 8007b5c:	08007c35 	.word	0x08007c35
 8007b60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007b64:	e7db      	b.n	8007b1e <_scanf_float+0x92>
 8007b66:	290e      	cmp	r1, #14
 8007b68:	d8c2      	bhi.n	8007af0 <_scanf_float+0x64>
 8007b6a:	a001      	add	r0, pc, #4	@ (adr r0, 8007b70 <_scanf_float+0xe4>)
 8007b6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007b70:	08007c25 	.word	0x08007c25
 8007b74:	08007af1 	.word	0x08007af1
 8007b78:	08007c25 	.word	0x08007c25
 8007b7c:	08007cbb 	.word	0x08007cbb
 8007b80:	08007af1 	.word	0x08007af1
 8007b84:	08007bcd 	.word	0x08007bcd
 8007b88:	08007c0b 	.word	0x08007c0b
 8007b8c:	08007c0b 	.word	0x08007c0b
 8007b90:	08007c0b 	.word	0x08007c0b
 8007b94:	08007c0b 	.word	0x08007c0b
 8007b98:	08007c0b 	.word	0x08007c0b
 8007b9c:	08007c0b 	.word	0x08007c0b
 8007ba0:	08007c0b 	.word	0x08007c0b
 8007ba4:	08007c0b 	.word	0x08007c0b
 8007ba8:	08007c0b 	.word	0x08007c0b
 8007bac:	2b6e      	cmp	r3, #110	@ 0x6e
 8007bae:	d809      	bhi.n	8007bc4 <_scanf_float+0x138>
 8007bb0:	2b60      	cmp	r3, #96	@ 0x60
 8007bb2:	d8b2      	bhi.n	8007b1a <_scanf_float+0x8e>
 8007bb4:	2b54      	cmp	r3, #84	@ 0x54
 8007bb6:	d07b      	beq.n	8007cb0 <_scanf_float+0x224>
 8007bb8:	2b59      	cmp	r3, #89	@ 0x59
 8007bba:	d199      	bne.n	8007af0 <_scanf_float+0x64>
 8007bbc:	2d07      	cmp	r5, #7
 8007bbe:	d197      	bne.n	8007af0 <_scanf_float+0x64>
 8007bc0:	2508      	movs	r5, #8
 8007bc2:	e02c      	b.n	8007c1e <_scanf_float+0x192>
 8007bc4:	2b74      	cmp	r3, #116	@ 0x74
 8007bc6:	d073      	beq.n	8007cb0 <_scanf_float+0x224>
 8007bc8:	2b79      	cmp	r3, #121	@ 0x79
 8007bca:	e7f6      	b.n	8007bba <_scanf_float+0x12e>
 8007bcc:	6821      	ldr	r1, [r4, #0]
 8007bce:	05c8      	lsls	r0, r1, #23
 8007bd0:	d51b      	bpl.n	8007c0a <_scanf_float+0x17e>
 8007bd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007bd6:	6021      	str	r1, [r4, #0]
 8007bd8:	f109 0901 	add.w	r9, r9, #1
 8007bdc:	f1bb 0f00 	cmp.w	fp, #0
 8007be0:	d003      	beq.n	8007bea <_scanf_float+0x15e>
 8007be2:	3201      	adds	r2, #1
 8007be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007be8:	60a2      	str	r2, [r4, #8]
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	60a3      	str	r3, [r4, #8]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	6123      	str	r3, [r4, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	607b      	str	r3, [r7, #4]
 8007bfe:	f340 8087 	ble.w	8007d10 <_scanf_float+0x284>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	e765      	b.n	8007ad6 <_scanf_float+0x4a>
 8007c0a:	eb1a 0105 	adds.w	r1, sl, r5
 8007c0e:	f47f af6f 	bne.w	8007af0 <_scanf_float+0x64>
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007c18:	6022      	str	r2, [r4, #0]
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	468a      	mov	sl, r1
 8007c1e:	f806 3b01 	strb.w	r3, [r6], #1
 8007c22:	e7e2      	b.n	8007bea <_scanf_float+0x15e>
 8007c24:	6822      	ldr	r2, [r4, #0]
 8007c26:	0610      	lsls	r0, r2, #24
 8007c28:	f57f af62 	bpl.w	8007af0 <_scanf_float+0x64>
 8007c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c30:	6022      	str	r2, [r4, #0]
 8007c32:	e7f4      	b.n	8007c1e <_scanf_float+0x192>
 8007c34:	f1ba 0f00 	cmp.w	sl, #0
 8007c38:	d10e      	bne.n	8007c58 <_scanf_float+0x1cc>
 8007c3a:	f1b9 0f00 	cmp.w	r9, #0
 8007c3e:	d10e      	bne.n	8007c5e <_scanf_float+0x1d2>
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007c46:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007c4a:	d108      	bne.n	8007c5e <_scanf_float+0x1d2>
 8007c4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007c50:	6022      	str	r2, [r4, #0]
 8007c52:	f04f 0a01 	mov.w	sl, #1
 8007c56:	e7e2      	b.n	8007c1e <_scanf_float+0x192>
 8007c58:	f1ba 0f02 	cmp.w	sl, #2
 8007c5c:	d055      	beq.n	8007d0a <_scanf_float+0x27e>
 8007c5e:	2d01      	cmp	r5, #1
 8007c60:	d002      	beq.n	8007c68 <_scanf_float+0x1dc>
 8007c62:	2d04      	cmp	r5, #4
 8007c64:	f47f af44 	bne.w	8007af0 <_scanf_float+0x64>
 8007c68:	3501      	adds	r5, #1
 8007c6a:	b2ed      	uxtb	r5, r5
 8007c6c:	e7d7      	b.n	8007c1e <_scanf_float+0x192>
 8007c6e:	f1ba 0f01 	cmp.w	sl, #1
 8007c72:	f47f af3d 	bne.w	8007af0 <_scanf_float+0x64>
 8007c76:	f04f 0a02 	mov.w	sl, #2
 8007c7a:	e7d0      	b.n	8007c1e <_scanf_float+0x192>
 8007c7c:	b97d      	cbnz	r5, 8007c9e <_scanf_float+0x212>
 8007c7e:	f1b9 0f00 	cmp.w	r9, #0
 8007c82:	f47f af38 	bne.w	8007af6 <_scanf_float+0x6a>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007c8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007c90:	f040 8108 	bne.w	8007ea4 <_scanf_float+0x418>
 8007c94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007c98:	6022      	str	r2, [r4, #0]
 8007c9a:	2501      	movs	r5, #1
 8007c9c:	e7bf      	b.n	8007c1e <_scanf_float+0x192>
 8007c9e:	2d03      	cmp	r5, #3
 8007ca0:	d0e2      	beq.n	8007c68 <_scanf_float+0x1dc>
 8007ca2:	2d05      	cmp	r5, #5
 8007ca4:	e7de      	b.n	8007c64 <_scanf_float+0x1d8>
 8007ca6:	2d02      	cmp	r5, #2
 8007ca8:	f47f af22 	bne.w	8007af0 <_scanf_float+0x64>
 8007cac:	2503      	movs	r5, #3
 8007cae:	e7b6      	b.n	8007c1e <_scanf_float+0x192>
 8007cb0:	2d06      	cmp	r5, #6
 8007cb2:	f47f af1d 	bne.w	8007af0 <_scanf_float+0x64>
 8007cb6:	2507      	movs	r5, #7
 8007cb8:	e7b1      	b.n	8007c1e <_scanf_float+0x192>
 8007cba:	6822      	ldr	r2, [r4, #0]
 8007cbc:	0591      	lsls	r1, r2, #22
 8007cbe:	f57f af17 	bpl.w	8007af0 <_scanf_float+0x64>
 8007cc2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ccc:	e7a7      	b.n	8007c1e <_scanf_float+0x192>
 8007cce:	6822      	ldr	r2, [r4, #0]
 8007cd0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007cd4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007cd8:	d006      	beq.n	8007ce8 <_scanf_float+0x25c>
 8007cda:	0550      	lsls	r0, r2, #21
 8007cdc:	f57f af08 	bpl.w	8007af0 <_scanf_float+0x64>
 8007ce0:	f1b9 0f00 	cmp.w	r9, #0
 8007ce4:	f000 80de 	beq.w	8007ea4 <_scanf_float+0x418>
 8007ce8:	0591      	lsls	r1, r2, #22
 8007cea:	bf58      	it	pl
 8007cec:	9902      	ldrpl	r1, [sp, #8]
 8007cee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007cf2:	bf58      	it	pl
 8007cf4:	eba9 0101 	subpl.w	r1, r9, r1
 8007cf8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007cfc:	bf58      	it	pl
 8007cfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	f04f 0900 	mov.w	r9, #0
 8007d08:	e789      	b.n	8007c1e <_scanf_float+0x192>
 8007d0a:	f04f 0a03 	mov.w	sl, #3
 8007d0e:	e786      	b.n	8007c1e <_scanf_float+0x192>
 8007d10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007d14:	4639      	mov	r1, r7
 8007d16:	4640      	mov	r0, r8
 8007d18:	4798      	blx	r3
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	f43f aedb 	beq.w	8007ad6 <_scanf_float+0x4a>
 8007d20:	e6e6      	b.n	8007af0 <_scanf_float+0x64>
 8007d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d2a:	463a      	mov	r2, r7
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	4798      	blx	r3
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	6123      	str	r3, [r4, #16]
 8007d36:	e6e8      	b.n	8007b0a <_scanf_float+0x7e>
 8007d38:	1e6b      	subs	r3, r5, #1
 8007d3a:	2b06      	cmp	r3, #6
 8007d3c:	d824      	bhi.n	8007d88 <_scanf_float+0x2fc>
 8007d3e:	2d02      	cmp	r5, #2
 8007d40:	d836      	bhi.n	8007db0 <_scanf_float+0x324>
 8007d42:	9b01      	ldr	r3, [sp, #4]
 8007d44:	429e      	cmp	r6, r3
 8007d46:	f67f aee4 	bls.w	8007b12 <_scanf_float+0x86>
 8007d4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d52:	463a      	mov	r2, r7
 8007d54:	4640      	mov	r0, r8
 8007d56:	4798      	blx	r3
 8007d58:	6923      	ldr	r3, [r4, #16]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	e7f0      	b.n	8007d42 <_scanf_float+0x2b6>
 8007d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007d68:	463a      	mov	r2, r7
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4798      	blx	r3
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	6123      	str	r3, [r4, #16]
 8007d74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d78:	fa5f fa8a 	uxtb.w	sl, sl
 8007d7c:	f1ba 0f02 	cmp.w	sl, #2
 8007d80:	d1ee      	bne.n	8007d60 <_scanf_float+0x2d4>
 8007d82:	3d03      	subs	r5, #3
 8007d84:	b2ed      	uxtb	r5, r5
 8007d86:	1b76      	subs	r6, r6, r5
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	05da      	lsls	r2, r3, #23
 8007d8c:	d530      	bpl.n	8007df0 <_scanf_float+0x364>
 8007d8e:	055b      	lsls	r3, r3, #21
 8007d90:	d511      	bpl.n	8007db6 <_scanf_float+0x32a>
 8007d92:	9b01      	ldr	r3, [sp, #4]
 8007d94:	429e      	cmp	r6, r3
 8007d96:	f67f aebc 	bls.w	8007b12 <_scanf_float+0x86>
 8007d9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007da2:	463a      	mov	r2, r7
 8007da4:	4640      	mov	r0, r8
 8007da6:	4798      	blx	r3
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	e7f0      	b.n	8007d92 <_scanf_float+0x306>
 8007db0:	46aa      	mov	sl, r5
 8007db2:	46b3      	mov	fp, r6
 8007db4:	e7de      	b.n	8007d74 <_scanf_float+0x2e8>
 8007db6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	2965      	cmp	r1, #101	@ 0x65
 8007dbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dc2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007dc6:	6123      	str	r3, [r4, #16]
 8007dc8:	d00c      	beq.n	8007de4 <_scanf_float+0x358>
 8007dca:	2945      	cmp	r1, #69	@ 0x45
 8007dcc:	d00a      	beq.n	8007de4 <_scanf_float+0x358>
 8007dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dd2:	463a      	mov	r2, r7
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	4798      	blx	r3
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	1eb5      	subs	r5, r6, #2
 8007de2:	6123      	str	r3, [r4, #16]
 8007de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007de8:	463a      	mov	r2, r7
 8007dea:	4640      	mov	r0, r8
 8007dec:	4798      	blx	r3
 8007dee:	462e      	mov	r6, r5
 8007df0:	6822      	ldr	r2, [r4, #0]
 8007df2:	f012 0210 	ands.w	r2, r2, #16
 8007df6:	d001      	beq.n	8007dfc <_scanf_float+0x370>
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e68b      	b.n	8007b14 <_scanf_float+0x88>
 8007dfc:	7032      	strb	r2, [r6, #0]
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e08:	d11c      	bne.n	8007e44 <_scanf_float+0x3b8>
 8007e0a:	9b02      	ldr	r3, [sp, #8]
 8007e0c:	454b      	cmp	r3, r9
 8007e0e:	eba3 0209 	sub.w	r2, r3, r9
 8007e12:	d123      	bne.n	8007e5c <_scanf_float+0x3d0>
 8007e14:	9901      	ldr	r1, [sp, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	4640      	mov	r0, r8
 8007e1a:	f002 fbf9 	bl	800a610 <_strtod_r>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	6821      	ldr	r1, [r4, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f011 0f02 	tst.w	r1, #2
 8007e28:	ec57 6b10 	vmov	r6, r7, d0
 8007e2c:	f103 0204 	add.w	r2, r3, #4
 8007e30:	d01f      	beq.n	8007e72 <_scanf_float+0x3e6>
 8007e32:	9903      	ldr	r1, [sp, #12]
 8007e34:	600a      	str	r2, [r1, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	e9c3 6700 	strd	r6, r7, [r3]
 8007e3c:	68e3      	ldr	r3, [r4, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60e3      	str	r3, [r4, #12]
 8007e42:	e7d9      	b.n	8007df8 <_scanf_float+0x36c>
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0e4      	beq.n	8007e14 <_scanf_float+0x388>
 8007e4a:	9905      	ldr	r1, [sp, #20]
 8007e4c:	230a      	movs	r3, #10
 8007e4e:	3101      	adds	r1, #1
 8007e50:	4640      	mov	r0, r8
 8007e52:	f002 fc5d 	bl	800a710 <_strtol_r>
 8007e56:	9b04      	ldr	r3, [sp, #16]
 8007e58:	9e05      	ldr	r6, [sp, #20]
 8007e5a:	1ac2      	subs	r2, r0, r3
 8007e5c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007e60:	429e      	cmp	r6, r3
 8007e62:	bf28      	it	cs
 8007e64:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007e68:	4910      	ldr	r1, [pc, #64]	@ (8007eac <_scanf_float+0x420>)
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f000 f8e4 	bl	8008038 <siprintf>
 8007e70:	e7d0      	b.n	8007e14 <_scanf_float+0x388>
 8007e72:	f011 0f04 	tst.w	r1, #4
 8007e76:	9903      	ldr	r1, [sp, #12]
 8007e78:	600a      	str	r2, [r1, #0]
 8007e7a:	d1dc      	bne.n	8007e36 <_scanf_float+0x3aa>
 8007e7c:	681d      	ldr	r5, [r3, #0]
 8007e7e:	4632      	mov	r2, r6
 8007e80:	463b      	mov	r3, r7
 8007e82:	4630      	mov	r0, r6
 8007e84:	4639      	mov	r1, r7
 8007e86:	f7f8 fe51 	bl	8000b2c <__aeabi_dcmpun>
 8007e8a:	b128      	cbz	r0, 8007e98 <_scanf_float+0x40c>
 8007e8c:	4808      	ldr	r0, [pc, #32]	@ (8007eb0 <_scanf_float+0x424>)
 8007e8e:	f000 f9b7 	bl	8008200 <nanf>
 8007e92:	ed85 0a00 	vstr	s0, [r5]
 8007e96:	e7d1      	b.n	8007e3c <_scanf_float+0x3b0>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	f7f8 fea4 	bl	8000be8 <__aeabi_d2f>
 8007ea0:	6028      	str	r0, [r5, #0]
 8007ea2:	e7cb      	b.n	8007e3c <_scanf_float+0x3b0>
 8007ea4:	f04f 0900 	mov.w	r9, #0
 8007ea8:	e629      	b.n	8007afe <_scanf_float+0x72>
 8007eaa:	bf00      	nop
 8007eac:	0800b95c 	.word	0x0800b95c
 8007eb0:	0800bcf5 	.word	0x0800bcf5

08007eb4 <std>:
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	4604      	mov	r4, r0
 8007eba:	e9c0 3300 	strd	r3, r3, [r0]
 8007ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ec2:	6083      	str	r3, [r0, #8]
 8007ec4:	8181      	strh	r1, [r0, #12]
 8007ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ec8:	81c2      	strh	r2, [r0, #14]
 8007eca:	6183      	str	r3, [r0, #24]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	2208      	movs	r2, #8
 8007ed0:	305c      	adds	r0, #92	@ 0x5c
 8007ed2:	f000 f914 	bl	80080fe <memset>
 8007ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f0c <std+0x58>)
 8007ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007eda:	4b0d      	ldr	r3, [pc, #52]	@ (8007f10 <std+0x5c>)
 8007edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <std+0x60>)
 8007ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f18 <std+0x64>)
 8007ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f1c <std+0x68>)
 8007ee8:	6224      	str	r4, [r4, #32]
 8007eea:	429c      	cmp	r4, r3
 8007eec:	d006      	beq.n	8007efc <std+0x48>
 8007eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ef2:	4294      	cmp	r4, r2
 8007ef4:	d002      	beq.n	8007efc <std+0x48>
 8007ef6:	33d0      	adds	r3, #208	@ 0xd0
 8007ef8:	429c      	cmp	r4, r3
 8007efa:	d105      	bne.n	8007f08 <std+0x54>
 8007efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f04:	f000 b978 	b.w	80081f8 <__retarget_lock_init_recursive>
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	bf00      	nop
 8007f0c:	08008079 	.word	0x08008079
 8007f10:	0800809b 	.word	0x0800809b
 8007f14:	080080d3 	.word	0x080080d3
 8007f18:	080080f7 	.word	0x080080f7
 8007f1c:	2000075c 	.word	0x2000075c

08007f20 <stdio_exit_handler>:
 8007f20:	4a02      	ldr	r2, [pc, #8]	@ (8007f2c <stdio_exit_handler+0xc>)
 8007f22:	4903      	ldr	r1, [pc, #12]	@ (8007f30 <stdio_exit_handler+0x10>)
 8007f24:	4803      	ldr	r0, [pc, #12]	@ (8007f34 <stdio_exit_handler+0x14>)
 8007f26:	f000 b869 	b.w	8007ffc <_fwalk_sglue>
 8007f2a:	bf00      	nop
 8007f2c:	2000000c 	.word	0x2000000c
 8007f30:	0800aacd 	.word	0x0800aacd
 8007f34:	2000001c 	.word	0x2000001c

08007f38 <cleanup_stdio>:
 8007f38:	6841      	ldr	r1, [r0, #4]
 8007f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007f6c <cleanup_stdio+0x34>)
 8007f3c:	4299      	cmp	r1, r3
 8007f3e:	b510      	push	{r4, lr}
 8007f40:	4604      	mov	r4, r0
 8007f42:	d001      	beq.n	8007f48 <cleanup_stdio+0x10>
 8007f44:	f002 fdc2 	bl	800aacc <_fflush_r>
 8007f48:	68a1      	ldr	r1, [r4, #8]
 8007f4a:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <cleanup_stdio+0x38>)
 8007f4c:	4299      	cmp	r1, r3
 8007f4e:	d002      	beq.n	8007f56 <cleanup_stdio+0x1e>
 8007f50:	4620      	mov	r0, r4
 8007f52:	f002 fdbb 	bl	800aacc <_fflush_r>
 8007f56:	68e1      	ldr	r1, [r4, #12]
 8007f58:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <cleanup_stdio+0x3c>)
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	d004      	beq.n	8007f68 <cleanup_stdio+0x30>
 8007f5e:	4620      	mov	r0, r4
 8007f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f64:	f002 bdb2 	b.w	800aacc <_fflush_r>
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	bf00      	nop
 8007f6c:	2000075c 	.word	0x2000075c
 8007f70:	200007c4 	.word	0x200007c4
 8007f74:	2000082c 	.word	0x2000082c

08007f78 <global_stdio_init.part.0>:
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa8 <global_stdio_init.part.0+0x30>)
 8007f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8007fac <global_stdio_init.part.0+0x34>)
 8007f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb0 <global_stdio_init.part.0+0x38>)
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	4620      	mov	r0, r4
 8007f84:	2200      	movs	r2, #0
 8007f86:	2104      	movs	r1, #4
 8007f88:	f7ff ff94 	bl	8007eb4 <std>
 8007f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f90:	2201      	movs	r2, #1
 8007f92:	2109      	movs	r1, #9
 8007f94:	f7ff ff8e 	bl	8007eb4 <std>
 8007f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa2:	2112      	movs	r1, #18
 8007fa4:	f7ff bf86 	b.w	8007eb4 <std>
 8007fa8:	20000894 	.word	0x20000894
 8007fac:	2000075c 	.word	0x2000075c
 8007fb0:	08007f21 	.word	0x08007f21

08007fb4 <__sfp_lock_acquire>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	@ (8007fbc <__sfp_lock_acquire+0x8>)
 8007fb6:	f000 b920 	b.w	80081fa <__retarget_lock_acquire_recursive>
 8007fba:	bf00      	nop
 8007fbc:	2000089d 	.word	0x2000089d

08007fc0 <__sfp_lock_release>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	@ (8007fc8 <__sfp_lock_release+0x8>)
 8007fc2:	f000 b91b 	b.w	80081fc <__retarget_lock_release_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	2000089d 	.word	0x2000089d

08007fcc <__sinit>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	f7ff fff0 	bl	8007fb4 <__sfp_lock_acquire>
 8007fd4:	6a23      	ldr	r3, [r4, #32]
 8007fd6:	b11b      	cbz	r3, 8007fe0 <__sinit+0x14>
 8007fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fdc:	f7ff bff0 	b.w	8007fc0 <__sfp_lock_release>
 8007fe0:	4b04      	ldr	r3, [pc, #16]	@ (8007ff4 <__sinit+0x28>)
 8007fe2:	6223      	str	r3, [r4, #32]
 8007fe4:	4b04      	ldr	r3, [pc, #16]	@ (8007ff8 <__sinit+0x2c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f5      	bne.n	8007fd8 <__sinit+0xc>
 8007fec:	f7ff ffc4 	bl	8007f78 <global_stdio_init.part.0>
 8007ff0:	e7f2      	b.n	8007fd8 <__sinit+0xc>
 8007ff2:	bf00      	nop
 8007ff4:	08007f39 	.word	0x08007f39
 8007ff8:	20000894 	.word	0x20000894

08007ffc <_fwalk_sglue>:
 8007ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008000:	4607      	mov	r7, r0
 8008002:	4688      	mov	r8, r1
 8008004:	4614      	mov	r4, r2
 8008006:	2600      	movs	r6, #0
 8008008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800800c:	f1b9 0901 	subs.w	r9, r9, #1
 8008010:	d505      	bpl.n	800801e <_fwalk_sglue+0x22>
 8008012:	6824      	ldr	r4, [r4, #0]
 8008014:	2c00      	cmp	r4, #0
 8008016:	d1f7      	bne.n	8008008 <_fwalk_sglue+0xc>
 8008018:	4630      	mov	r0, r6
 800801a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d907      	bls.n	8008034 <_fwalk_sglue+0x38>
 8008024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008028:	3301      	adds	r3, #1
 800802a:	d003      	beq.n	8008034 <_fwalk_sglue+0x38>
 800802c:	4629      	mov	r1, r5
 800802e:	4638      	mov	r0, r7
 8008030:	47c0      	blx	r8
 8008032:	4306      	orrs	r6, r0
 8008034:	3568      	adds	r5, #104	@ 0x68
 8008036:	e7e9      	b.n	800800c <_fwalk_sglue+0x10>

08008038 <siprintf>:
 8008038:	b40e      	push	{r1, r2, r3}
 800803a:	b500      	push	{lr}
 800803c:	b09c      	sub	sp, #112	@ 0x70
 800803e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008040:	9002      	str	r0, [sp, #8]
 8008042:	9006      	str	r0, [sp, #24]
 8008044:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008048:	4809      	ldr	r0, [pc, #36]	@ (8008070 <siprintf+0x38>)
 800804a:	9107      	str	r1, [sp, #28]
 800804c:	9104      	str	r1, [sp, #16]
 800804e:	4909      	ldr	r1, [pc, #36]	@ (8008074 <siprintf+0x3c>)
 8008050:	f853 2b04 	ldr.w	r2, [r3], #4
 8008054:	9105      	str	r1, [sp, #20]
 8008056:	6800      	ldr	r0, [r0, #0]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	a902      	add	r1, sp, #8
 800805c:	f002 fbb6 	bl	800a7cc <_svfiprintf_r>
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	b01c      	add	sp, #112	@ 0x70
 8008068:	f85d eb04 	ldr.w	lr, [sp], #4
 800806c:	b003      	add	sp, #12
 800806e:	4770      	bx	lr
 8008070:	20000018 	.word	0x20000018
 8008074:	ffff0208 	.word	0xffff0208

08008078 <__sread>:
 8008078:	b510      	push	{r4, lr}
 800807a:	460c      	mov	r4, r1
 800807c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008080:	f000 f86c 	bl	800815c <_read_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	bfab      	itete	ge
 8008088:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800808a:	89a3      	ldrhlt	r3, [r4, #12]
 800808c:	181b      	addge	r3, r3, r0
 800808e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008092:	bfac      	ite	ge
 8008094:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008096:	81a3      	strhlt	r3, [r4, #12]
 8008098:	bd10      	pop	{r4, pc}

0800809a <__swrite>:
 800809a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809e:	461f      	mov	r7, r3
 80080a0:	898b      	ldrh	r3, [r1, #12]
 80080a2:	05db      	lsls	r3, r3, #23
 80080a4:	4605      	mov	r5, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	4616      	mov	r6, r2
 80080aa:	d505      	bpl.n	80080b8 <__swrite+0x1e>
 80080ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b0:	2302      	movs	r3, #2
 80080b2:	2200      	movs	r2, #0
 80080b4:	f000 f840 	bl	8008138 <_lseek_r>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	4632      	mov	r2, r6
 80080c6:	463b      	mov	r3, r7
 80080c8:	4628      	mov	r0, r5
 80080ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ce:	f000 b857 	b.w	8008180 <_write_r>

080080d2 <__sseek>:
 80080d2:	b510      	push	{r4, lr}
 80080d4:	460c      	mov	r4, r1
 80080d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080da:	f000 f82d 	bl	8008138 <_lseek_r>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	bf15      	itete	ne
 80080e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080ee:	81a3      	strheq	r3, [r4, #12]
 80080f0:	bf18      	it	ne
 80080f2:	81a3      	strhne	r3, [r4, #12]
 80080f4:	bd10      	pop	{r4, pc}

080080f6 <__sclose>:
 80080f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fa:	f000 b80d 	b.w	8008118 <_close_r>

080080fe <memset>:
 80080fe:	4402      	add	r2, r0
 8008100:	4603      	mov	r3, r0
 8008102:	4293      	cmp	r3, r2
 8008104:	d100      	bne.n	8008108 <memset+0xa>
 8008106:	4770      	bx	lr
 8008108:	f803 1b01 	strb.w	r1, [r3], #1
 800810c:	e7f9      	b.n	8008102 <memset+0x4>
	...

08008110 <_localeconv_r>:
 8008110:	4800      	ldr	r0, [pc, #0]	@ (8008114 <_localeconv_r+0x4>)
 8008112:	4770      	bx	lr
 8008114:	20000158 	.word	0x20000158

08008118 <_close_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d06      	ldr	r5, [pc, #24]	@ (8008134 <_close_r+0x1c>)
 800811c:	2300      	movs	r3, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	f7fa fa0e 	bl	8002544 <_close>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_close_r+0x1a>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_close_r+0x1a>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20000898 	.word	0x20000898

08008138 <_lseek_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d07      	ldr	r5, [pc, #28]	@ (8008158 <_lseek_r+0x20>)
 800813c:	4604      	mov	r4, r0
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	2200      	movs	r2, #0
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7fa fa23 	bl	8002592 <_lseek>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_lseek_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_lseek_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20000898 	.word	0x20000898

0800815c <_read_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	@ (800817c <_read_r+0x20>)
 8008160:	4604      	mov	r4, r0
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	2200      	movs	r2, #0
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	f7fa f9b1 	bl	80024d2 <_read>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_read_r+0x1e>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_read_r+0x1e>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	20000898 	.word	0x20000898

08008180 <_write_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d07      	ldr	r5, [pc, #28]	@ (80081a0 <_write_r+0x20>)
 8008184:	4604      	mov	r4, r0
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	2200      	movs	r2, #0
 800818c:	602a      	str	r2, [r5, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	f7fa f9bc 	bl	800250c <_write>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_write_r+0x1e>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_write_r+0x1e>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	20000898 	.word	0x20000898

080081a4 <__errno>:
 80081a4:	4b01      	ldr	r3, [pc, #4]	@ (80081ac <__errno+0x8>)
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000018 	.word	0x20000018

080081b0 <__libc_init_array>:
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	4d0d      	ldr	r5, [pc, #52]	@ (80081e8 <__libc_init_array+0x38>)
 80081b4:	4c0d      	ldr	r4, [pc, #52]	@ (80081ec <__libc_init_array+0x3c>)
 80081b6:	1b64      	subs	r4, r4, r5
 80081b8:	10a4      	asrs	r4, r4, #2
 80081ba:	2600      	movs	r6, #0
 80081bc:	42a6      	cmp	r6, r4
 80081be:	d109      	bne.n	80081d4 <__libc_init_array+0x24>
 80081c0:	4d0b      	ldr	r5, [pc, #44]	@ (80081f0 <__libc_init_array+0x40>)
 80081c2:	4c0c      	ldr	r4, [pc, #48]	@ (80081f4 <__libc_init_array+0x44>)
 80081c4:	f003 fb72 	bl	800b8ac <_init>
 80081c8:	1b64      	subs	r4, r4, r5
 80081ca:	10a4      	asrs	r4, r4, #2
 80081cc:	2600      	movs	r6, #0
 80081ce:	42a6      	cmp	r6, r4
 80081d0:	d105      	bne.n	80081de <__libc_init_array+0x2e>
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d8:	4798      	blx	r3
 80081da:	3601      	adds	r6, #1
 80081dc:	e7ee      	b.n	80081bc <__libc_init_array+0xc>
 80081de:	f855 3b04 	ldr.w	r3, [r5], #4
 80081e2:	4798      	blx	r3
 80081e4:	3601      	adds	r6, #1
 80081e6:	e7f2      	b.n	80081ce <__libc_init_array+0x1e>
 80081e8:	0800bd60 	.word	0x0800bd60
 80081ec:	0800bd60 	.word	0x0800bd60
 80081f0:	0800bd60 	.word	0x0800bd60
 80081f4:	0800bd64 	.word	0x0800bd64

080081f8 <__retarget_lock_init_recursive>:
 80081f8:	4770      	bx	lr

080081fa <__retarget_lock_acquire_recursive>:
 80081fa:	4770      	bx	lr

080081fc <__retarget_lock_release_recursive>:
 80081fc:	4770      	bx	lr
	...

08008200 <nanf>:
 8008200:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008208 <nanf+0x8>
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	7fc00000 	.word	0x7fc00000

0800820c <quorem>:
 800820c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	6903      	ldr	r3, [r0, #16]
 8008212:	690c      	ldr	r4, [r1, #16]
 8008214:	42a3      	cmp	r3, r4
 8008216:	4607      	mov	r7, r0
 8008218:	db7e      	blt.n	8008318 <quorem+0x10c>
 800821a:	3c01      	subs	r4, #1
 800821c:	f101 0814 	add.w	r8, r1, #20
 8008220:	00a3      	lsls	r3, r4, #2
 8008222:	f100 0514 	add.w	r5, r0, #20
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008236:	3301      	adds	r3, #1
 8008238:	429a      	cmp	r2, r3
 800823a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800823e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008242:	d32e      	bcc.n	80082a2 <quorem+0x96>
 8008244:	f04f 0a00 	mov.w	sl, #0
 8008248:	46c4      	mov	ip, r8
 800824a:	46ae      	mov	lr, r5
 800824c:	46d3      	mov	fp, sl
 800824e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008252:	b298      	uxth	r0, r3
 8008254:	fb06 a000 	mla	r0, r6, r0, sl
 8008258:	0c02      	lsrs	r2, r0, #16
 800825a:	0c1b      	lsrs	r3, r3, #16
 800825c:	fb06 2303 	mla	r3, r6, r3, r2
 8008260:	f8de 2000 	ldr.w	r2, [lr]
 8008264:	b280      	uxth	r0, r0
 8008266:	b292      	uxth	r2, r2
 8008268:	1a12      	subs	r2, r2, r0
 800826a:	445a      	add	r2, fp
 800826c:	f8de 0000 	ldr.w	r0, [lr]
 8008270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008274:	b29b      	uxth	r3, r3
 8008276:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800827a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800827e:	b292      	uxth	r2, r2
 8008280:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008284:	45e1      	cmp	r9, ip
 8008286:	f84e 2b04 	str.w	r2, [lr], #4
 800828a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800828e:	d2de      	bcs.n	800824e <quorem+0x42>
 8008290:	9b00      	ldr	r3, [sp, #0]
 8008292:	58eb      	ldr	r3, [r5, r3]
 8008294:	b92b      	cbnz	r3, 80082a2 <quorem+0x96>
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	3b04      	subs	r3, #4
 800829a:	429d      	cmp	r5, r3
 800829c:	461a      	mov	r2, r3
 800829e:	d32f      	bcc.n	8008300 <quorem+0xf4>
 80082a0:	613c      	str	r4, [r7, #16]
 80082a2:	4638      	mov	r0, r7
 80082a4:	f001 f9c4 	bl	8009630 <__mcmp>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	db25      	blt.n	80082f8 <quorem+0xec>
 80082ac:	4629      	mov	r1, r5
 80082ae:	2000      	movs	r0, #0
 80082b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80082b4:	f8d1 c000 	ldr.w	ip, [r1]
 80082b8:	fa1f fe82 	uxth.w	lr, r2
 80082bc:	fa1f f38c 	uxth.w	r3, ip
 80082c0:	eba3 030e 	sub.w	r3, r3, lr
 80082c4:	4403      	add	r3, r0
 80082c6:	0c12      	lsrs	r2, r2, #16
 80082c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d6:	45c1      	cmp	r9, r8
 80082d8:	f841 3b04 	str.w	r3, [r1], #4
 80082dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082e0:	d2e6      	bcs.n	80082b0 <quorem+0xa4>
 80082e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082ea:	b922      	cbnz	r2, 80082f6 <quorem+0xea>
 80082ec:	3b04      	subs	r3, #4
 80082ee:	429d      	cmp	r5, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	d30b      	bcc.n	800830c <quorem+0x100>
 80082f4:	613c      	str	r4, [r7, #16]
 80082f6:	3601      	adds	r6, #1
 80082f8:	4630      	mov	r0, r6
 80082fa:	b003      	add	sp, #12
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	6812      	ldr	r2, [r2, #0]
 8008302:	3b04      	subs	r3, #4
 8008304:	2a00      	cmp	r2, #0
 8008306:	d1cb      	bne.n	80082a0 <quorem+0x94>
 8008308:	3c01      	subs	r4, #1
 800830a:	e7c6      	b.n	800829a <quorem+0x8e>
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	3b04      	subs	r3, #4
 8008310:	2a00      	cmp	r2, #0
 8008312:	d1ef      	bne.n	80082f4 <quorem+0xe8>
 8008314:	3c01      	subs	r4, #1
 8008316:	e7ea      	b.n	80082ee <quorem+0xe2>
 8008318:	2000      	movs	r0, #0
 800831a:	e7ee      	b.n	80082fa <quorem+0xee>
 800831c:	0000      	movs	r0, r0
	...

08008320 <_dtoa_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	69c7      	ldr	r7, [r0, #28]
 8008326:	b099      	sub	sp, #100	@ 0x64
 8008328:	ed8d 0b02 	vstr	d0, [sp, #8]
 800832c:	ec55 4b10 	vmov	r4, r5, d0
 8008330:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008332:	9109      	str	r1, [sp, #36]	@ 0x24
 8008334:	4683      	mov	fp, r0
 8008336:	920e      	str	r2, [sp, #56]	@ 0x38
 8008338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800833a:	b97f      	cbnz	r7, 800835c <_dtoa_r+0x3c>
 800833c:	2010      	movs	r0, #16
 800833e:	f000 fdfd 	bl	8008f3c <malloc>
 8008342:	4602      	mov	r2, r0
 8008344:	f8cb 001c 	str.w	r0, [fp, #28]
 8008348:	b920      	cbnz	r0, 8008354 <_dtoa_r+0x34>
 800834a:	4ba7      	ldr	r3, [pc, #668]	@ (80085e8 <_dtoa_r+0x2c8>)
 800834c:	21ef      	movs	r1, #239	@ 0xef
 800834e:	48a7      	ldr	r0, [pc, #668]	@ (80085ec <_dtoa_r+0x2cc>)
 8008350:	f002 fc36 	bl	800abc0 <__assert_func>
 8008354:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008358:	6007      	str	r7, [r0, #0]
 800835a:	60c7      	str	r7, [r0, #12]
 800835c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008360:	6819      	ldr	r1, [r3, #0]
 8008362:	b159      	cbz	r1, 800837c <_dtoa_r+0x5c>
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	604a      	str	r2, [r1, #4]
 8008368:	2301      	movs	r3, #1
 800836a:	4093      	lsls	r3, r2
 800836c:	608b      	str	r3, [r1, #8]
 800836e:	4658      	mov	r0, fp
 8008370:	f000 feda 	bl	8009128 <_Bfree>
 8008374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	1e2b      	subs	r3, r5, #0
 800837e:	bfb9      	ittee	lt
 8008380:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	9303      	strlt	r3, [sp, #12]
 8008386:	2300      	movge	r3, #0
 8008388:	6033      	strge	r3, [r6, #0]
 800838a:	9f03      	ldr	r7, [sp, #12]
 800838c:	4b98      	ldr	r3, [pc, #608]	@ (80085f0 <_dtoa_r+0x2d0>)
 800838e:	bfbc      	itt	lt
 8008390:	2201      	movlt	r2, #1
 8008392:	6032      	strlt	r2, [r6, #0]
 8008394:	43bb      	bics	r3, r7
 8008396:	d112      	bne.n	80083be <_dtoa_r+0x9e>
 8008398:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800839a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083a4:	4323      	orrs	r3, r4
 80083a6:	f000 854d 	beq.w	8008e44 <_dtoa_r+0xb24>
 80083aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008604 <_dtoa_r+0x2e4>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 854f 	beq.w	8008e54 <_dtoa_r+0xb34>
 80083b6:	f10a 0303 	add.w	r3, sl, #3
 80083ba:	f000 bd49 	b.w	8008e50 <_dtoa_r+0xb30>
 80083be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	ec51 0b17 	vmov	r0, r1, d7
 80083c8:	2300      	movs	r3, #0
 80083ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083ce:	f7f8 fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80083d2:	4680      	mov	r8, r0
 80083d4:	b158      	cbz	r0, 80083ee <_dtoa_r+0xce>
 80083d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083d8:	2301      	movs	r3, #1
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083de:	b113      	cbz	r3, 80083e6 <_dtoa_r+0xc6>
 80083e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083e2:	4b84      	ldr	r3, [pc, #528]	@ (80085f4 <_dtoa_r+0x2d4>)
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008608 <_dtoa_r+0x2e8>
 80083ea:	f000 bd33 	b.w	8008e54 <_dtoa_r+0xb34>
 80083ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80083f2:	aa16      	add	r2, sp, #88	@ 0x58
 80083f4:	a917      	add	r1, sp, #92	@ 0x5c
 80083f6:	4658      	mov	r0, fp
 80083f8:	f001 fa3a 	bl	8009870 <__d2b>
 80083fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008400:	4681      	mov	r9, r0
 8008402:	2e00      	cmp	r6, #0
 8008404:	d077      	beq.n	80084f6 <_dtoa_r+0x1d6>
 8008406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008408:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800840c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008414:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008418:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800841c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008420:	4619      	mov	r1, r3
 8008422:	2200      	movs	r2, #0
 8008424:	4b74      	ldr	r3, [pc, #464]	@ (80085f8 <_dtoa_r+0x2d8>)
 8008426:	f7f7 ff2f 	bl	8000288 <__aeabi_dsub>
 800842a:	a369      	add	r3, pc, #420	@ (adr r3, 80085d0 <_dtoa_r+0x2b0>)
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	f7f8 f8e2 	bl	80005f8 <__aeabi_dmul>
 8008434:	a368      	add	r3, pc, #416	@ (adr r3, 80085d8 <_dtoa_r+0x2b8>)
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	f7f7 ff27 	bl	800028c <__adddf3>
 800843e:	4604      	mov	r4, r0
 8008440:	4630      	mov	r0, r6
 8008442:	460d      	mov	r5, r1
 8008444:	f7f8 f86e 	bl	8000524 <__aeabi_i2d>
 8008448:	a365      	add	r3, pc, #404	@ (adr r3, 80085e0 <_dtoa_r+0x2c0>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f8 f8d3 	bl	80005f8 <__aeabi_dmul>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	f7f7 ff17 	bl	800028c <__adddf3>
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	f7f8 fb79 	bl	8000b58 <__aeabi_d2iz>
 8008466:	2200      	movs	r2, #0
 8008468:	4607      	mov	r7, r0
 800846a:	2300      	movs	r3, #0
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f8 fb34 	bl	8000adc <__aeabi_dcmplt>
 8008474:	b140      	cbz	r0, 8008488 <_dtoa_r+0x168>
 8008476:	4638      	mov	r0, r7
 8008478:	f7f8 f854 	bl	8000524 <__aeabi_i2d>
 800847c:	4622      	mov	r2, r4
 800847e:	462b      	mov	r3, r5
 8008480:	f7f8 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008484:	b900      	cbnz	r0, 8008488 <_dtoa_r+0x168>
 8008486:	3f01      	subs	r7, #1
 8008488:	2f16      	cmp	r7, #22
 800848a:	d851      	bhi.n	8008530 <_dtoa_r+0x210>
 800848c:	4b5b      	ldr	r3, [pc, #364]	@ (80085fc <_dtoa_r+0x2dc>)
 800848e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800849a:	f7f8 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d048      	beq.n	8008534 <_dtoa_r+0x214>
 80084a2:	3f01      	subs	r7, #1
 80084a4:	2300      	movs	r3, #0
 80084a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80084a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084aa:	1b9b      	subs	r3, r3, r6
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	bf44      	itt	mi
 80084b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80084b4:	2300      	movmi	r3, #0
 80084b6:	9208      	str	r2, [sp, #32]
 80084b8:	bf54      	ite	pl
 80084ba:	f04f 0800 	movpl.w	r8, #0
 80084be:	9308      	strmi	r3, [sp, #32]
 80084c0:	2f00      	cmp	r7, #0
 80084c2:	db39      	blt.n	8008538 <_dtoa_r+0x218>
 80084c4:	9b08      	ldr	r3, [sp, #32]
 80084c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084c8:	443b      	add	r3, r7
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	2300      	movs	r3, #0
 80084ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d2:	2b09      	cmp	r3, #9
 80084d4:	d864      	bhi.n	80085a0 <_dtoa_r+0x280>
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	bfc4      	itt	gt
 80084da:	3b04      	subgt	r3, #4
 80084dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e0:	f1a3 0302 	sub.w	r3, r3, #2
 80084e4:	bfcc      	ite	gt
 80084e6:	2400      	movgt	r4, #0
 80084e8:	2401      	movle	r4, #1
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d863      	bhi.n	80085b6 <_dtoa_r+0x296>
 80084ee:	e8df f003 	tbb	[pc, r3]
 80084f2:	372a      	.short	0x372a
 80084f4:	5535      	.short	0x5535
 80084f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80084fa:	441e      	add	r6, r3
 80084fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008500:	2b20      	cmp	r3, #32
 8008502:	bfc1      	itttt	gt
 8008504:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008508:	409f      	lslgt	r7, r3
 800850a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800850e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008512:	bfd6      	itet	le
 8008514:	f1c3 0320 	rsble	r3, r3, #32
 8008518:	ea47 0003 	orrgt.w	r0, r7, r3
 800851c:	fa04 f003 	lslle.w	r0, r4, r3
 8008520:	f7f7 fff0 	bl	8000504 <__aeabi_ui2d>
 8008524:	2201      	movs	r2, #1
 8008526:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800852a:	3e01      	subs	r6, #1
 800852c:	9214      	str	r2, [sp, #80]	@ 0x50
 800852e:	e777      	b.n	8008420 <_dtoa_r+0x100>
 8008530:	2301      	movs	r3, #1
 8008532:	e7b8      	b.n	80084a6 <_dtoa_r+0x186>
 8008534:	9012      	str	r0, [sp, #72]	@ 0x48
 8008536:	e7b7      	b.n	80084a8 <_dtoa_r+0x188>
 8008538:	427b      	negs	r3, r7
 800853a:	930a      	str	r3, [sp, #40]	@ 0x28
 800853c:	2300      	movs	r3, #0
 800853e:	eba8 0807 	sub.w	r8, r8, r7
 8008542:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008544:	e7c4      	b.n	80084d0 <_dtoa_r+0x1b0>
 8008546:	2300      	movs	r3, #0
 8008548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800854a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc35      	bgt.n	80085bc <_dtoa_r+0x29c>
 8008550:	2301      	movs	r3, #1
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	9307      	str	r3, [sp, #28]
 8008556:	461a      	mov	r2, r3
 8008558:	920e      	str	r2, [sp, #56]	@ 0x38
 800855a:	e00b      	b.n	8008574 <_dtoa_r+0x254>
 800855c:	2301      	movs	r3, #1
 800855e:	e7f3      	b.n	8008548 <_dtoa_r+0x228>
 8008560:	2300      	movs	r3, #0
 8008562:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008566:	18fb      	adds	r3, r7, r3
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	2b01      	cmp	r3, #1
 800856e:	9307      	str	r3, [sp, #28]
 8008570:	bfb8      	it	lt
 8008572:	2301      	movlt	r3, #1
 8008574:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008578:	2100      	movs	r1, #0
 800857a:	2204      	movs	r2, #4
 800857c:	f102 0514 	add.w	r5, r2, #20
 8008580:	429d      	cmp	r5, r3
 8008582:	d91f      	bls.n	80085c4 <_dtoa_r+0x2a4>
 8008584:	6041      	str	r1, [r0, #4]
 8008586:	4658      	mov	r0, fp
 8008588:	f000 fd8e 	bl	80090a8 <_Balloc>
 800858c:	4682      	mov	sl, r0
 800858e:	2800      	cmp	r0, #0
 8008590:	d13c      	bne.n	800860c <_dtoa_r+0x2ec>
 8008592:	4b1b      	ldr	r3, [pc, #108]	@ (8008600 <_dtoa_r+0x2e0>)
 8008594:	4602      	mov	r2, r0
 8008596:	f240 11af 	movw	r1, #431	@ 0x1af
 800859a:	e6d8      	b.n	800834e <_dtoa_r+0x2e>
 800859c:	2301      	movs	r3, #1
 800859e:	e7e0      	b.n	8008562 <_dtoa_r+0x242>
 80085a0:	2401      	movs	r4, #1
 80085a2:	2300      	movs	r3, #0
 80085a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085a8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	9307      	str	r3, [sp, #28]
 80085b0:	2200      	movs	r2, #0
 80085b2:	2312      	movs	r3, #18
 80085b4:	e7d0      	b.n	8008558 <_dtoa_r+0x238>
 80085b6:	2301      	movs	r3, #1
 80085b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085ba:	e7f5      	b.n	80085a8 <_dtoa_r+0x288>
 80085bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	9307      	str	r3, [sp, #28]
 80085c2:	e7d7      	b.n	8008574 <_dtoa_r+0x254>
 80085c4:	3101      	adds	r1, #1
 80085c6:	0052      	lsls	r2, r2, #1
 80085c8:	e7d8      	b.n	800857c <_dtoa_r+0x25c>
 80085ca:	bf00      	nop
 80085cc:	f3af 8000 	nop.w
 80085d0:	636f4361 	.word	0x636f4361
 80085d4:	3fd287a7 	.word	0x3fd287a7
 80085d8:	8b60c8b3 	.word	0x8b60c8b3
 80085dc:	3fc68a28 	.word	0x3fc68a28
 80085e0:	509f79fb 	.word	0x509f79fb
 80085e4:	3fd34413 	.word	0x3fd34413
 80085e8:	0800b96e 	.word	0x0800b96e
 80085ec:	0800b985 	.word	0x0800b985
 80085f0:	7ff00000 	.word	0x7ff00000
 80085f4:	0800b939 	.word	0x0800b939
 80085f8:	3ff80000 	.word	0x3ff80000
 80085fc:	0800ba80 	.word	0x0800ba80
 8008600:	0800b9dd 	.word	0x0800b9dd
 8008604:	0800b96a 	.word	0x0800b96a
 8008608:	0800b938 	.word	0x0800b938
 800860c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008610:	6018      	str	r0, [r3, #0]
 8008612:	9b07      	ldr	r3, [sp, #28]
 8008614:	2b0e      	cmp	r3, #14
 8008616:	f200 80a4 	bhi.w	8008762 <_dtoa_r+0x442>
 800861a:	2c00      	cmp	r4, #0
 800861c:	f000 80a1 	beq.w	8008762 <_dtoa_r+0x442>
 8008620:	2f00      	cmp	r7, #0
 8008622:	dd33      	ble.n	800868c <_dtoa_r+0x36c>
 8008624:	4bad      	ldr	r3, [pc, #692]	@ (80088dc <_dtoa_r+0x5bc>)
 8008626:	f007 020f 	and.w	r2, r7, #15
 800862a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800862e:	ed93 7b00 	vldr	d7, [r3]
 8008632:	05f8      	lsls	r0, r7, #23
 8008634:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008638:	ea4f 1427 	mov.w	r4, r7, asr #4
 800863c:	d516      	bpl.n	800866c <_dtoa_r+0x34c>
 800863e:	4ba8      	ldr	r3, [pc, #672]	@ (80088e0 <_dtoa_r+0x5c0>)
 8008640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008648:	f7f8 f900 	bl	800084c <__aeabi_ddiv>
 800864c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008650:	f004 040f 	and.w	r4, r4, #15
 8008654:	2603      	movs	r6, #3
 8008656:	4da2      	ldr	r5, [pc, #648]	@ (80088e0 <_dtoa_r+0x5c0>)
 8008658:	b954      	cbnz	r4, 8008670 <_dtoa_r+0x350>
 800865a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800865e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008662:	f7f8 f8f3 	bl	800084c <__aeabi_ddiv>
 8008666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800866a:	e028      	b.n	80086be <_dtoa_r+0x39e>
 800866c:	2602      	movs	r6, #2
 800866e:	e7f2      	b.n	8008656 <_dtoa_r+0x336>
 8008670:	07e1      	lsls	r1, r4, #31
 8008672:	d508      	bpl.n	8008686 <_dtoa_r+0x366>
 8008674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800867c:	f7f7 ffbc 	bl	80005f8 <__aeabi_dmul>
 8008680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008684:	3601      	adds	r6, #1
 8008686:	1064      	asrs	r4, r4, #1
 8008688:	3508      	adds	r5, #8
 800868a:	e7e5      	b.n	8008658 <_dtoa_r+0x338>
 800868c:	f000 80d2 	beq.w	8008834 <_dtoa_r+0x514>
 8008690:	427c      	negs	r4, r7
 8008692:	4b92      	ldr	r3, [pc, #584]	@ (80088dc <_dtoa_r+0x5bc>)
 8008694:	4d92      	ldr	r5, [pc, #584]	@ (80088e0 <_dtoa_r+0x5c0>)
 8008696:	f004 020f 	and.w	r2, r4, #15
 800869a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800869e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086a6:	f7f7 ffa7 	bl	80005f8 <__aeabi_dmul>
 80086aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ae:	1124      	asrs	r4, r4, #4
 80086b0:	2300      	movs	r3, #0
 80086b2:	2602      	movs	r6, #2
 80086b4:	2c00      	cmp	r4, #0
 80086b6:	f040 80b2 	bne.w	800881e <_dtoa_r+0x4fe>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1d3      	bne.n	8008666 <_dtoa_r+0x346>
 80086be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80b7 	beq.w	8008838 <_dtoa_r+0x518>
 80086ca:	4b86      	ldr	r3, [pc, #536]	@ (80088e4 <_dtoa_r+0x5c4>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f8 fa03 	bl	8000adc <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f000 80ae 	beq.w	8008838 <_dtoa_r+0x518>
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 80aa 	beq.w	8008838 <_dtoa_r+0x518>
 80086e4:	9b00      	ldr	r3, [sp, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	dd37      	ble.n	800875a <_dtoa_r+0x43a>
 80086ea:	1e7b      	subs	r3, r7, #1
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	4620      	mov	r0, r4
 80086f0:	4b7d      	ldr	r3, [pc, #500]	@ (80088e8 <_dtoa_r+0x5c8>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f7 ff7f 	bl	80005f8 <__aeabi_dmul>
 80086fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086fe:	9c00      	ldr	r4, [sp, #0]
 8008700:	3601      	adds	r6, #1
 8008702:	4630      	mov	r0, r6
 8008704:	f7f7 ff0e 	bl	8000524 <__aeabi_i2d>
 8008708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800870c:	f7f7 ff74 	bl	80005f8 <__aeabi_dmul>
 8008710:	4b76      	ldr	r3, [pc, #472]	@ (80088ec <_dtoa_r+0x5cc>)
 8008712:	2200      	movs	r2, #0
 8008714:	f7f7 fdba 	bl	800028c <__adddf3>
 8008718:	4605      	mov	r5, r0
 800871a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800871e:	2c00      	cmp	r4, #0
 8008720:	f040 808d 	bne.w	800883e <_dtoa_r+0x51e>
 8008724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008728:	4b71      	ldr	r3, [pc, #452]	@ (80088f0 <_dtoa_r+0x5d0>)
 800872a:	2200      	movs	r2, #0
 800872c:	f7f7 fdac 	bl	8000288 <__aeabi_dsub>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008738:	462a      	mov	r2, r5
 800873a:	4633      	mov	r3, r6
 800873c:	f7f8 f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 8008740:	2800      	cmp	r0, #0
 8008742:	f040 828b 	bne.w	8008c5c <_dtoa_r+0x93c>
 8008746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800874a:	462a      	mov	r2, r5
 800874c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008750:	f7f8 f9c4 	bl	8000adc <__aeabi_dcmplt>
 8008754:	2800      	cmp	r0, #0
 8008756:	f040 8128 	bne.w	80089aa <_dtoa_r+0x68a>
 800875a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800875e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008762:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008764:	2b00      	cmp	r3, #0
 8008766:	f2c0 815a 	blt.w	8008a1e <_dtoa_r+0x6fe>
 800876a:	2f0e      	cmp	r7, #14
 800876c:	f300 8157 	bgt.w	8008a1e <_dtoa_r+0x6fe>
 8008770:	4b5a      	ldr	r3, [pc, #360]	@ (80088dc <_dtoa_r+0x5bc>)
 8008772:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008776:	ed93 7b00 	vldr	d7, [r3]
 800877a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800877c:	2b00      	cmp	r3, #0
 800877e:	ed8d 7b00 	vstr	d7, [sp]
 8008782:	da03      	bge.n	800878c <_dtoa_r+0x46c>
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	f340 8101 	ble.w	800898e <_dtoa_r+0x66e>
 800878c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008790:	4656      	mov	r6, sl
 8008792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f8 f857 	bl	800084c <__aeabi_ddiv>
 800879e:	f7f8 f9db 	bl	8000b58 <__aeabi_d2iz>
 80087a2:	4680      	mov	r8, r0
 80087a4:	f7f7 febe 	bl	8000524 <__aeabi_i2d>
 80087a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ac:	f7f7 ff24 	bl	80005f8 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4620      	mov	r0, r4
 80087b6:	4629      	mov	r1, r5
 80087b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80087bc:	f7f7 fd64 	bl	8000288 <__aeabi_dsub>
 80087c0:	f806 4b01 	strb.w	r4, [r6], #1
 80087c4:	9d07      	ldr	r5, [sp, #28]
 80087c6:	eba6 040a 	sub.w	r4, r6, sl
 80087ca:	42a5      	cmp	r5, r4
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	f040 8117 	bne.w	8008a02 <_dtoa_r+0x6e2>
 80087d4:	f7f7 fd5a 	bl	800028c <__adddf3>
 80087d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087dc:	4604      	mov	r4, r0
 80087de:	460d      	mov	r5, r1
 80087e0:	f7f8 f99a 	bl	8000b18 <__aeabi_dcmpgt>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	f040 80f9 	bne.w	80089dc <_dtoa_r+0x6bc>
 80087ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ee:	4620      	mov	r0, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	f7f8 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80087f6:	b118      	cbz	r0, 8008800 <_dtoa_r+0x4e0>
 80087f8:	f018 0f01 	tst.w	r8, #1
 80087fc:	f040 80ee 	bne.w	80089dc <_dtoa_r+0x6bc>
 8008800:	4649      	mov	r1, r9
 8008802:	4658      	mov	r0, fp
 8008804:	f000 fc90 	bl	8009128 <_Bfree>
 8008808:	2300      	movs	r3, #0
 800880a:	7033      	strb	r3, [r6, #0]
 800880c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800880e:	3701      	adds	r7, #1
 8008810:	601f      	str	r7, [r3, #0]
 8008812:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 831d 	beq.w	8008e54 <_dtoa_r+0xb34>
 800881a:	601e      	str	r6, [r3, #0]
 800881c:	e31a      	b.n	8008e54 <_dtoa_r+0xb34>
 800881e:	07e2      	lsls	r2, r4, #31
 8008820:	d505      	bpl.n	800882e <_dtoa_r+0x50e>
 8008822:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008826:	f7f7 fee7 	bl	80005f8 <__aeabi_dmul>
 800882a:	3601      	adds	r6, #1
 800882c:	2301      	movs	r3, #1
 800882e:	1064      	asrs	r4, r4, #1
 8008830:	3508      	adds	r5, #8
 8008832:	e73f      	b.n	80086b4 <_dtoa_r+0x394>
 8008834:	2602      	movs	r6, #2
 8008836:	e742      	b.n	80086be <_dtoa_r+0x39e>
 8008838:	9c07      	ldr	r4, [sp, #28]
 800883a:	9704      	str	r7, [sp, #16]
 800883c:	e761      	b.n	8008702 <_dtoa_r+0x3e2>
 800883e:	4b27      	ldr	r3, [pc, #156]	@ (80088dc <_dtoa_r+0x5bc>)
 8008840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008846:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800884a:	4454      	add	r4, sl
 800884c:	2900      	cmp	r1, #0
 800884e:	d053      	beq.n	80088f8 <_dtoa_r+0x5d8>
 8008850:	4928      	ldr	r1, [pc, #160]	@ (80088f4 <_dtoa_r+0x5d4>)
 8008852:	2000      	movs	r0, #0
 8008854:	f7f7 fffa 	bl	800084c <__aeabi_ddiv>
 8008858:	4633      	mov	r3, r6
 800885a:	462a      	mov	r2, r5
 800885c:	f7f7 fd14 	bl	8000288 <__aeabi_dsub>
 8008860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008864:	4656      	mov	r6, sl
 8008866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886a:	f7f8 f975 	bl	8000b58 <__aeabi_d2iz>
 800886e:	4605      	mov	r5, r0
 8008870:	f7f7 fe58 	bl	8000524 <__aeabi_i2d>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800887c:	f7f7 fd04 	bl	8000288 <__aeabi_dsub>
 8008880:	3530      	adds	r5, #48	@ 0x30
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800888a:	f806 5b01 	strb.w	r5, [r6], #1
 800888e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008892:	f7f8 f923 	bl	8000adc <__aeabi_dcmplt>
 8008896:	2800      	cmp	r0, #0
 8008898:	d171      	bne.n	800897e <_dtoa_r+0x65e>
 800889a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800889e:	4911      	ldr	r1, [pc, #68]	@ (80088e4 <_dtoa_r+0x5c4>)
 80088a0:	2000      	movs	r0, #0
 80088a2:	f7f7 fcf1 	bl	8000288 <__aeabi_dsub>
 80088a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088aa:	f7f8 f917 	bl	8000adc <__aeabi_dcmplt>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	f040 8095 	bne.w	80089de <_dtoa_r+0x6be>
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	f43f af50 	beq.w	800875a <_dtoa_r+0x43a>
 80088ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088be:	4b0a      	ldr	r3, [pc, #40]	@ (80088e8 <_dtoa_r+0x5c8>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	f7f7 fe99 	bl	80005f8 <__aeabi_dmul>
 80088c6:	4b08      	ldr	r3, [pc, #32]	@ (80088e8 <_dtoa_r+0x5c8>)
 80088c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088cc:	2200      	movs	r2, #0
 80088ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088da:	e7c4      	b.n	8008866 <_dtoa_r+0x546>
 80088dc:	0800ba80 	.word	0x0800ba80
 80088e0:	0800ba58 	.word	0x0800ba58
 80088e4:	3ff00000 	.word	0x3ff00000
 80088e8:	40240000 	.word	0x40240000
 80088ec:	401c0000 	.word	0x401c0000
 80088f0:	40140000 	.word	0x40140000
 80088f4:	3fe00000 	.word	0x3fe00000
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	f7f7 fe7c 	bl	80005f8 <__aeabi_dmul>
 8008900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008904:	9415      	str	r4, [sp, #84]	@ 0x54
 8008906:	4656      	mov	r6, sl
 8008908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800890c:	f7f8 f924 	bl	8000b58 <__aeabi_d2iz>
 8008910:	4605      	mov	r5, r0
 8008912:	f7f7 fe07 	bl	8000524 <__aeabi_i2d>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800891e:	f7f7 fcb3 	bl	8000288 <__aeabi_dsub>
 8008922:	3530      	adds	r5, #48	@ 0x30
 8008924:	f806 5b01 	strb.w	r5, [r6], #1
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	42a6      	cmp	r6, r4
 800892e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008932:	f04f 0200 	mov.w	r2, #0
 8008936:	d124      	bne.n	8008982 <_dtoa_r+0x662>
 8008938:	4bac      	ldr	r3, [pc, #688]	@ (8008bec <_dtoa_r+0x8cc>)
 800893a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800893e:	f7f7 fca5 	bl	800028c <__adddf3>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800894a:	f7f8 f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 800894e:	2800      	cmp	r0, #0
 8008950:	d145      	bne.n	80089de <_dtoa_r+0x6be>
 8008952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008956:	49a5      	ldr	r1, [pc, #660]	@ (8008bec <_dtoa_r+0x8cc>)
 8008958:	2000      	movs	r0, #0
 800895a:	f7f7 fc95 	bl	8000288 <__aeabi_dsub>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008966:	f7f8 f8b9 	bl	8000adc <__aeabi_dcmplt>
 800896a:	2800      	cmp	r0, #0
 800896c:	f43f aef5 	beq.w	800875a <_dtoa_r+0x43a>
 8008970:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008972:	1e73      	subs	r3, r6, #1
 8008974:	9315      	str	r3, [sp, #84]	@ 0x54
 8008976:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800897a:	2b30      	cmp	r3, #48	@ 0x30
 800897c:	d0f8      	beq.n	8008970 <_dtoa_r+0x650>
 800897e:	9f04      	ldr	r7, [sp, #16]
 8008980:	e73e      	b.n	8008800 <_dtoa_r+0x4e0>
 8008982:	4b9b      	ldr	r3, [pc, #620]	@ (8008bf0 <_dtoa_r+0x8d0>)
 8008984:	f7f7 fe38 	bl	80005f8 <__aeabi_dmul>
 8008988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800898c:	e7bc      	b.n	8008908 <_dtoa_r+0x5e8>
 800898e:	d10c      	bne.n	80089aa <_dtoa_r+0x68a>
 8008990:	4b98      	ldr	r3, [pc, #608]	@ (8008bf4 <_dtoa_r+0x8d4>)
 8008992:	2200      	movs	r2, #0
 8008994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008998:	f7f7 fe2e 	bl	80005f8 <__aeabi_dmul>
 800899c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089a0:	f7f8 f8b0 	bl	8000b04 <__aeabi_dcmpge>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f000 8157 	beq.w	8008c58 <_dtoa_r+0x938>
 80089aa:	2400      	movs	r4, #0
 80089ac:	4625      	mov	r5, r4
 80089ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089b0:	43db      	mvns	r3, r3
 80089b2:	9304      	str	r3, [sp, #16]
 80089b4:	4656      	mov	r6, sl
 80089b6:	2700      	movs	r7, #0
 80089b8:	4621      	mov	r1, r4
 80089ba:	4658      	mov	r0, fp
 80089bc:	f000 fbb4 	bl	8009128 <_Bfree>
 80089c0:	2d00      	cmp	r5, #0
 80089c2:	d0dc      	beq.n	800897e <_dtoa_r+0x65e>
 80089c4:	b12f      	cbz	r7, 80089d2 <_dtoa_r+0x6b2>
 80089c6:	42af      	cmp	r7, r5
 80089c8:	d003      	beq.n	80089d2 <_dtoa_r+0x6b2>
 80089ca:	4639      	mov	r1, r7
 80089cc:	4658      	mov	r0, fp
 80089ce:	f000 fbab 	bl	8009128 <_Bfree>
 80089d2:	4629      	mov	r1, r5
 80089d4:	4658      	mov	r0, fp
 80089d6:	f000 fba7 	bl	8009128 <_Bfree>
 80089da:	e7d0      	b.n	800897e <_dtoa_r+0x65e>
 80089dc:	9704      	str	r7, [sp, #16]
 80089de:	4633      	mov	r3, r6
 80089e0:	461e      	mov	r6, r3
 80089e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089e6:	2a39      	cmp	r2, #57	@ 0x39
 80089e8:	d107      	bne.n	80089fa <_dtoa_r+0x6da>
 80089ea:	459a      	cmp	sl, r3
 80089ec:	d1f8      	bne.n	80089e0 <_dtoa_r+0x6c0>
 80089ee:	9a04      	ldr	r2, [sp, #16]
 80089f0:	3201      	adds	r2, #1
 80089f2:	9204      	str	r2, [sp, #16]
 80089f4:	2230      	movs	r2, #48	@ 0x30
 80089f6:	f88a 2000 	strb.w	r2, [sl]
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	3201      	adds	r2, #1
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	e7bd      	b.n	800897e <_dtoa_r+0x65e>
 8008a02:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf0 <_dtoa_r+0x8d0>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	f7f7 fdf7 	bl	80005f8 <__aeabi_dmul>
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	f7f8 f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	f43f aebb 	beq.w	8008792 <_dtoa_r+0x472>
 8008a1c:	e6f0      	b.n	8008800 <_dtoa_r+0x4e0>
 8008a1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	f000 80db 	beq.w	8008bdc <_dtoa_r+0x8bc>
 8008a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a28:	2a01      	cmp	r2, #1
 8008a2a:	f300 80bf 	bgt.w	8008bac <_dtoa_r+0x88c>
 8008a2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a30:	2a00      	cmp	r2, #0
 8008a32:	f000 80b7 	beq.w	8008ba4 <_dtoa_r+0x884>
 8008a36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a3c:	4646      	mov	r6, r8
 8008a3e:	9a08      	ldr	r2, [sp, #32]
 8008a40:	2101      	movs	r1, #1
 8008a42:	441a      	add	r2, r3
 8008a44:	4658      	mov	r0, fp
 8008a46:	4498      	add	r8, r3
 8008a48:	9208      	str	r2, [sp, #32]
 8008a4a:	f000 fc6b 	bl	8009324 <__i2b>
 8008a4e:	4605      	mov	r5, r0
 8008a50:	b15e      	cbz	r6, 8008a6a <_dtoa_r+0x74a>
 8008a52:	9b08      	ldr	r3, [sp, #32]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dd08      	ble.n	8008a6a <_dtoa_r+0x74a>
 8008a58:	42b3      	cmp	r3, r6
 8008a5a:	9a08      	ldr	r2, [sp, #32]
 8008a5c:	bfa8      	it	ge
 8008a5e:	4633      	movge	r3, r6
 8008a60:	eba8 0803 	sub.w	r8, r8, r3
 8008a64:	1af6      	subs	r6, r6, r3
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	9308      	str	r3, [sp, #32]
 8008a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6c:	b1f3      	cbz	r3, 8008aac <_dtoa_r+0x78c>
 8008a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80b7 	beq.w	8008be4 <_dtoa_r+0x8c4>
 8008a76:	b18c      	cbz	r4, 8008a9c <_dtoa_r+0x77c>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4658      	mov	r0, fp
 8008a7e:	f000 fd11 	bl	80094a4 <__pow5mult>
 8008a82:	464a      	mov	r2, r9
 8008a84:	4601      	mov	r1, r0
 8008a86:	4605      	mov	r5, r0
 8008a88:	4658      	mov	r0, fp
 8008a8a:	f000 fc61 	bl	8009350 <__multiply>
 8008a8e:	4649      	mov	r1, r9
 8008a90:	9004      	str	r0, [sp, #16]
 8008a92:	4658      	mov	r0, fp
 8008a94:	f000 fb48 	bl	8009128 <_Bfree>
 8008a98:	9b04      	ldr	r3, [sp, #16]
 8008a9a:	4699      	mov	r9, r3
 8008a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a9e:	1b1a      	subs	r2, r3, r4
 8008aa0:	d004      	beq.n	8008aac <_dtoa_r+0x78c>
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	4658      	mov	r0, fp
 8008aa6:	f000 fcfd 	bl	80094a4 <__pow5mult>
 8008aaa:	4681      	mov	r9, r0
 8008aac:	2101      	movs	r1, #1
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f000 fc38 	bl	8009324 <__i2b>
 8008ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 81cf 	beq.w	8008e5c <_dtoa_r+0xb3c>
 8008abe:	461a      	mov	r2, r3
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	4658      	mov	r0, fp
 8008ac4:	f000 fcee 	bl	80094a4 <__pow5mult>
 8008ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	4604      	mov	r4, r0
 8008ace:	f300 8095 	bgt.w	8008bfc <_dtoa_r+0x8dc>
 8008ad2:	9b02      	ldr	r3, [sp, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f040 8087 	bne.w	8008be8 <_dtoa_r+0x8c8>
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f040 8089 	bne.w	8008bf8 <_dtoa_r+0x8d8>
 8008ae6:	9b03      	ldr	r3, [sp, #12]
 8008ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008aec:	0d1b      	lsrs	r3, r3, #20
 8008aee:	051b      	lsls	r3, r3, #20
 8008af0:	b12b      	cbz	r3, 8008afe <_dtoa_r+0x7de>
 8008af2:	9b08      	ldr	r3, [sp, #32]
 8008af4:	3301      	adds	r3, #1
 8008af6:	9308      	str	r3, [sp, #32]
 8008af8:	f108 0801 	add.w	r8, r8, #1
 8008afc:	2301      	movs	r3, #1
 8008afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 81b0 	beq.w	8008e68 <_dtoa_r+0xb48>
 8008b08:	6923      	ldr	r3, [r4, #16]
 8008b0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b0e:	6918      	ldr	r0, [r3, #16]
 8008b10:	f000 fbbc 	bl	800928c <__hi0bits>
 8008b14:	f1c0 0020 	rsb	r0, r0, #32
 8008b18:	9b08      	ldr	r3, [sp, #32]
 8008b1a:	4418      	add	r0, r3
 8008b1c:	f010 001f 	ands.w	r0, r0, #31
 8008b20:	d077      	beq.n	8008c12 <_dtoa_r+0x8f2>
 8008b22:	f1c0 0320 	rsb	r3, r0, #32
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	dd6b      	ble.n	8008c02 <_dtoa_r+0x8e2>
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	f1c0 001c 	rsb	r0, r0, #28
 8008b30:	4403      	add	r3, r0
 8008b32:	4480      	add	r8, r0
 8008b34:	4406      	add	r6, r0
 8008b36:	9308      	str	r3, [sp, #32]
 8008b38:	f1b8 0f00 	cmp.w	r8, #0
 8008b3c:	dd05      	ble.n	8008b4a <_dtoa_r+0x82a>
 8008b3e:	4649      	mov	r1, r9
 8008b40:	4642      	mov	r2, r8
 8008b42:	4658      	mov	r0, fp
 8008b44:	f000 fd08 	bl	8009558 <__lshift>
 8008b48:	4681      	mov	r9, r0
 8008b4a:	9b08      	ldr	r3, [sp, #32]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dd05      	ble.n	8008b5c <_dtoa_r+0x83c>
 8008b50:	4621      	mov	r1, r4
 8008b52:	461a      	mov	r2, r3
 8008b54:	4658      	mov	r0, fp
 8008b56:	f000 fcff 	bl	8009558 <__lshift>
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d059      	beq.n	8008c16 <_dtoa_r+0x8f6>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4648      	mov	r0, r9
 8008b66:	f000 fd63 	bl	8009630 <__mcmp>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	da53      	bge.n	8008c16 <_dtoa_r+0x8f6>
 8008b6e:	1e7b      	subs	r3, r7, #1
 8008b70:	9304      	str	r3, [sp, #16]
 8008b72:	4649      	mov	r1, r9
 8008b74:	2300      	movs	r3, #0
 8008b76:	220a      	movs	r2, #10
 8008b78:	4658      	mov	r0, fp
 8008b7a:	f000 faf7 	bl	800916c <__multadd>
 8008b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b80:	4681      	mov	r9, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8172 	beq.w	8008e6c <_dtoa_r+0xb4c>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	220a      	movs	r2, #10
 8008b8e:	4658      	mov	r0, fp
 8008b90:	f000 faec 	bl	800916c <__multadd>
 8008b94:	9b00      	ldr	r3, [sp, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	4605      	mov	r5, r0
 8008b9a:	dc67      	bgt.n	8008c6c <_dtoa_r+0x94c>
 8008b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	dc41      	bgt.n	8008c26 <_dtoa_r+0x906>
 8008ba2:	e063      	b.n	8008c6c <_dtoa_r+0x94c>
 8008ba4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ba6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008baa:	e746      	b.n	8008a3a <_dtoa_r+0x71a>
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	1e5c      	subs	r4, r3, #1
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	bfbf      	itttt	lt
 8008bb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008bb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008bba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008bbc:	1ae3      	sublt	r3, r4, r3
 8008bbe:	bfb4      	ite	lt
 8008bc0:	18d2      	addlt	r2, r2, r3
 8008bc2:	1b1c      	subge	r4, r3, r4
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	bfbc      	itt	lt
 8008bc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008bca:	2400      	movlt	r4, #0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bfb5      	itete	lt
 8008bd0:	eba8 0603 	sublt.w	r6, r8, r3
 8008bd4:	9b07      	ldrge	r3, [sp, #28]
 8008bd6:	2300      	movlt	r3, #0
 8008bd8:	4646      	movge	r6, r8
 8008bda:	e730      	b.n	8008a3e <_dtoa_r+0x71e>
 8008bdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008be0:	4646      	mov	r6, r8
 8008be2:	e735      	b.n	8008a50 <_dtoa_r+0x730>
 8008be4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008be6:	e75c      	b.n	8008aa2 <_dtoa_r+0x782>
 8008be8:	2300      	movs	r3, #0
 8008bea:	e788      	b.n	8008afe <_dtoa_r+0x7de>
 8008bec:	3fe00000 	.word	0x3fe00000
 8008bf0:	40240000 	.word	0x40240000
 8008bf4:	40140000 	.word	0x40140000
 8008bf8:	9b02      	ldr	r3, [sp, #8]
 8008bfa:	e780      	b.n	8008afe <_dtoa_r+0x7de>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c00:	e782      	b.n	8008b08 <_dtoa_r+0x7e8>
 8008c02:	d099      	beq.n	8008b38 <_dtoa_r+0x818>
 8008c04:	9a08      	ldr	r2, [sp, #32]
 8008c06:	331c      	adds	r3, #28
 8008c08:	441a      	add	r2, r3
 8008c0a:	4498      	add	r8, r3
 8008c0c:	441e      	add	r6, r3
 8008c0e:	9208      	str	r2, [sp, #32]
 8008c10:	e792      	b.n	8008b38 <_dtoa_r+0x818>
 8008c12:	4603      	mov	r3, r0
 8008c14:	e7f6      	b.n	8008c04 <_dtoa_r+0x8e4>
 8008c16:	9b07      	ldr	r3, [sp, #28]
 8008c18:	9704      	str	r7, [sp, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dc20      	bgt.n	8008c60 <_dtoa_r+0x940>
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	dd1e      	ble.n	8008c64 <_dtoa_r+0x944>
 8008c26:	9b00      	ldr	r3, [sp, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f47f aec0 	bne.w	80089ae <_dtoa_r+0x68e>
 8008c2e:	4621      	mov	r1, r4
 8008c30:	2205      	movs	r2, #5
 8008c32:	4658      	mov	r0, fp
 8008c34:	f000 fa9a 	bl	800916c <__multadd>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	4648      	mov	r0, r9
 8008c3e:	f000 fcf7 	bl	8009630 <__mcmp>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f77f aeb3 	ble.w	80089ae <_dtoa_r+0x68e>
 8008c48:	4656      	mov	r6, sl
 8008c4a:	2331      	movs	r3, #49	@ 0x31
 8008c4c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c50:	9b04      	ldr	r3, [sp, #16]
 8008c52:	3301      	adds	r3, #1
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	e6ae      	b.n	80089b6 <_dtoa_r+0x696>
 8008c58:	9c07      	ldr	r4, [sp, #28]
 8008c5a:	9704      	str	r7, [sp, #16]
 8008c5c:	4625      	mov	r5, r4
 8008c5e:	e7f3      	b.n	8008c48 <_dtoa_r+0x928>
 8008c60:	9b07      	ldr	r3, [sp, #28]
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 8104 	beq.w	8008e74 <_dtoa_r+0xb54>
 8008c6c:	2e00      	cmp	r6, #0
 8008c6e:	dd05      	ble.n	8008c7c <_dtoa_r+0x95c>
 8008c70:	4629      	mov	r1, r5
 8008c72:	4632      	mov	r2, r6
 8008c74:	4658      	mov	r0, fp
 8008c76:	f000 fc6f 	bl	8009558 <__lshift>
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d05a      	beq.n	8008d38 <_dtoa_r+0xa18>
 8008c82:	6869      	ldr	r1, [r5, #4]
 8008c84:	4658      	mov	r0, fp
 8008c86:	f000 fa0f 	bl	80090a8 <_Balloc>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	b928      	cbnz	r0, 8008c9a <_dtoa_r+0x97a>
 8008c8e:	4b84      	ldr	r3, [pc, #528]	@ (8008ea0 <_dtoa_r+0xb80>)
 8008c90:	4602      	mov	r2, r0
 8008c92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c96:	f7ff bb5a 	b.w	800834e <_dtoa_r+0x2e>
 8008c9a:	692a      	ldr	r2, [r5, #16]
 8008c9c:	3202      	adds	r2, #2
 8008c9e:	0092      	lsls	r2, r2, #2
 8008ca0:	f105 010c 	add.w	r1, r5, #12
 8008ca4:	300c      	adds	r0, #12
 8008ca6:	f001 ff75 	bl	800ab94 <memcpy>
 8008caa:	2201      	movs	r2, #1
 8008cac:	4631      	mov	r1, r6
 8008cae:	4658      	mov	r0, fp
 8008cb0:	f000 fc52 	bl	8009558 <__lshift>
 8008cb4:	f10a 0301 	add.w	r3, sl, #1
 8008cb8:	9307      	str	r3, [sp, #28]
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	4453      	add	r3, sl
 8008cbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cc0:	9b02      	ldr	r3, [sp, #8]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	462f      	mov	r7, r5
 8008cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cca:	4605      	mov	r5, r0
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	4621      	mov	r1, r4
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	4648      	mov	r0, r9
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	f7ff fa99 	bl	800820c <quorem>
 8008cda:	4639      	mov	r1, r7
 8008cdc:	9002      	str	r0, [sp, #8]
 8008cde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ce2:	4648      	mov	r0, r9
 8008ce4:	f000 fca4 	bl	8009630 <__mcmp>
 8008ce8:	462a      	mov	r2, r5
 8008cea:	9008      	str	r0, [sp, #32]
 8008cec:	4621      	mov	r1, r4
 8008cee:	4658      	mov	r0, fp
 8008cf0:	f000 fcba 	bl	8009668 <__mdiff>
 8008cf4:	68c2      	ldr	r2, [r0, #12]
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	bb02      	cbnz	r2, 8008d3c <_dtoa_r+0xa1c>
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	4648      	mov	r0, r9
 8008cfe:	f000 fc97 	bl	8009630 <__mcmp>
 8008d02:	4602      	mov	r2, r0
 8008d04:	4631      	mov	r1, r6
 8008d06:	4658      	mov	r0, fp
 8008d08:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d0a:	f000 fa0d 	bl	8009128 <_Bfree>
 8008d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d12:	9e07      	ldr	r6, [sp, #28]
 8008d14:	ea43 0102 	orr.w	r1, r3, r2
 8008d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1a:	4319      	orrs	r1, r3
 8008d1c:	d110      	bne.n	8008d40 <_dtoa_r+0xa20>
 8008d1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d22:	d029      	beq.n	8008d78 <_dtoa_r+0xa58>
 8008d24:	9b08      	ldr	r3, [sp, #32]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd02      	ble.n	8008d30 <_dtoa_r+0xa10>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d30:	9b00      	ldr	r3, [sp, #0]
 8008d32:	f883 8000 	strb.w	r8, [r3]
 8008d36:	e63f      	b.n	80089b8 <_dtoa_r+0x698>
 8008d38:	4628      	mov	r0, r5
 8008d3a:	e7bb      	b.n	8008cb4 <_dtoa_r+0x994>
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	e7e1      	b.n	8008d04 <_dtoa_r+0x9e4>
 8008d40:	9b08      	ldr	r3, [sp, #32]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	db04      	blt.n	8008d50 <_dtoa_r+0xa30>
 8008d46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	d120      	bne.n	8008d92 <_dtoa_r+0xa72>
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	dded      	ble.n	8008d30 <_dtoa_r+0xa10>
 8008d54:	4649      	mov	r1, r9
 8008d56:	2201      	movs	r2, #1
 8008d58:	4658      	mov	r0, fp
 8008d5a:	f000 fbfd 	bl	8009558 <__lshift>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4681      	mov	r9, r0
 8008d62:	f000 fc65 	bl	8009630 <__mcmp>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	dc03      	bgt.n	8008d72 <_dtoa_r+0xa52>
 8008d6a:	d1e1      	bne.n	8008d30 <_dtoa_r+0xa10>
 8008d6c:	f018 0f01 	tst.w	r8, #1
 8008d70:	d0de      	beq.n	8008d30 <_dtoa_r+0xa10>
 8008d72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d76:	d1d8      	bne.n	8008d2a <_dtoa_r+0xa0a>
 8008d78:	9a00      	ldr	r2, [sp, #0]
 8008d7a:	2339      	movs	r3, #57	@ 0x39
 8008d7c:	7013      	strb	r3, [r2, #0]
 8008d7e:	4633      	mov	r3, r6
 8008d80:	461e      	mov	r6, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d88:	2a39      	cmp	r2, #57	@ 0x39
 8008d8a:	d052      	beq.n	8008e32 <_dtoa_r+0xb12>
 8008d8c:	3201      	adds	r2, #1
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	e612      	b.n	80089b8 <_dtoa_r+0x698>
 8008d92:	2a00      	cmp	r2, #0
 8008d94:	dd07      	ble.n	8008da6 <_dtoa_r+0xa86>
 8008d96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d9a:	d0ed      	beq.n	8008d78 <_dtoa_r+0xa58>
 8008d9c:	9a00      	ldr	r2, [sp, #0]
 8008d9e:	f108 0301 	add.w	r3, r8, #1
 8008da2:	7013      	strb	r3, [r2, #0]
 8008da4:	e608      	b.n	80089b8 <_dtoa_r+0x698>
 8008da6:	9b07      	ldr	r3, [sp, #28]
 8008da8:	9a07      	ldr	r2, [sp, #28]
 8008daa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d028      	beq.n	8008e06 <_dtoa_r+0xae6>
 8008db4:	4649      	mov	r1, r9
 8008db6:	2300      	movs	r3, #0
 8008db8:	220a      	movs	r2, #10
 8008dba:	4658      	mov	r0, fp
 8008dbc:	f000 f9d6 	bl	800916c <__multadd>
 8008dc0:	42af      	cmp	r7, r5
 8008dc2:	4681      	mov	r9, r0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	f04f 020a 	mov.w	r2, #10
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4658      	mov	r0, fp
 8008dd0:	d107      	bne.n	8008de2 <_dtoa_r+0xac2>
 8008dd2:	f000 f9cb 	bl	800916c <__multadd>
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	4605      	mov	r5, r0
 8008dda:	9b07      	ldr	r3, [sp, #28]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	9307      	str	r3, [sp, #28]
 8008de0:	e774      	b.n	8008ccc <_dtoa_r+0x9ac>
 8008de2:	f000 f9c3 	bl	800916c <__multadd>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4607      	mov	r7, r0
 8008dea:	2300      	movs	r3, #0
 8008dec:	220a      	movs	r2, #10
 8008dee:	4658      	mov	r0, fp
 8008df0:	f000 f9bc 	bl	800916c <__multadd>
 8008df4:	4605      	mov	r5, r0
 8008df6:	e7f0      	b.n	8008dda <_dtoa_r+0xaba>
 8008df8:	9b00      	ldr	r3, [sp, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bfcc      	ite	gt
 8008dfe:	461e      	movgt	r6, r3
 8008e00:	2601      	movle	r6, #1
 8008e02:	4456      	add	r6, sl
 8008e04:	2700      	movs	r7, #0
 8008e06:	4649      	mov	r1, r9
 8008e08:	2201      	movs	r2, #1
 8008e0a:	4658      	mov	r0, fp
 8008e0c:	f000 fba4 	bl	8009558 <__lshift>
 8008e10:	4621      	mov	r1, r4
 8008e12:	4681      	mov	r9, r0
 8008e14:	f000 fc0c 	bl	8009630 <__mcmp>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	dcb0      	bgt.n	8008d7e <_dtoa_r+0xa5e>
 8008e1c:	d102      	bne.n	8008e24 <_dtoa_r+0xb04>
 8008e1e:	f018 0f01 	tst.w	r8, #1
 8008e22:	d1ac      	bne.n	8008d7e <_dtoa_r+0xa5e>
 8008e24:	4633      	mov	r3, r6
 8008e26:	461e      	mov	r6, r3
 8008e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e2c:	2a30      	cmp	r2, #48	@ 0x30
 8008e2e:	d0fa      	beq.n	8008e26 <_dtoa_r+0xb06>
 8008e30:	e5c2      	b.n	80089b8 <_dtoa_r+0x698>
 8008e32:	459a      	cmp	sl, r3
 8008e34:	d1a4      	bne.n	8008d80 <_dtoa_r+0xa60>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	2331      	movs	r3, #49	@ 0x31
 8008e3e:	f88a 3000 	strb.w	r3, [sl]
 8008e42:	e5b9      	b.n	80089b8 <_dtoa_r+0x698>
 8008e44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ea4 <_dtoa_r+0xb84>
 8008e4a:	b11b      	cbz	r3, 8008e54 <_dtoa_r+0xb34>
 8008e4c:	f10a 0308 	add.w	r3, sl, #8
 8008e50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	4650      	mov	r0, sl
 8008e56:	b019      	add	sp, #100	@ 0x64
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	f77f ae37 	ble.w	8008ad2 <_dtoa_r+0x7b2>
 8008e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e68:	2001      	movs	r0, #1
 8008e6a:	e655      	b.n	8008b18 <_dtoa_r+0x7f8>
 8008e6c:	9b00      	ldr	r3, [sp, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f77f aed6 	ble.w	8008c20 <_dtoa_r+0x900>
 8008e74:	4656      	mov	r6, sl
 8008e76:	4621      	mov	r1, r4
 8008e78:	4648      	mov	r0, r9
 8008e7a:	f7ff f9c7 	bl	800820c <quorem>
 8008e7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e82:	f806 8b01 	strb.w	r8, [r6], #1
 8008e86:	9b00      	ldr	r3, [sp, #0]
 8008e88:	eba6 020a 	sub.w	r2, r6, sl
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	ddb3      	ble.n	8008df8 <_dtoa_r+0xad8>
 8008e90:	4649      	mov	r1, r9
 8008e92:	2300      	movs	r3, #0
 8008e94:	220a      	movs	r2, #10
 8008e96:	4658      	mov	r0, fp
 8008e98:	f000 f968 	bl	800916c <__multadd>
 8008e9c:	4681      	mov	r9, r0
 8008e9e:	e7ea      	b.n	8008e76 <_dtoa_r+0xb56>
 8008ea0:	0800b9dd 	.word	0x0800b9dd
 8008ea4:	0800b961 	.word	0x0800b961

08008ea8 <_free_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4605      	mov	r5, r0
 8008eac:	2900      	cmp	r1, #0
 8008eae:	d041      	beq.n	8008f34 <_free_r+0x8c>
 8008eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb4:	1f0c      	subs	r4, r1, #4
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bfb8      	it	lt
 8008eba:	18e4      	addlt	r4, r4, r3
 8008ebc:	f000 f8e8 	bl	8009090 <__malloc_lock>
 8008ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f38 <_free_r+0x90>)
 8008ec2:	6813      	ldr	r3, [r2, #0]
 8008ec4:	b933      	cbnz	r3, 8008ed4 <_free_r+0x2c>
 8008ec6:	6063      	str	r3, [r4, #4]
 8008ec8:	6014      	str	r4, [r2, #0]
 8008eca:	4628      	mov	r0, r5
 8008ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed0:	f000 b8e4 	b.w	800909c <__malloc_unlock>
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	d908      	bls.n	8008eea <_free_r+0x42>
 8008ed8:	6820      	ldr	r0, [r4, #0]
 8008eda:	1821      	adds	r1, r4, r0
 8008edc:	428b      	cmp	r3, r1
 8008ede:	bf01      	itttt	eq
 8008ee0:	6819      	ldreq	r1, [r3, #0]
 8008ee2:	685b      	ldreq	r3, [r3, #4]
 8008ee4:	1809      	addeq	r1, r1, r0
 8008ee6:	6021      	streq	r1, [r4, #0]
 8008ee8:	e7ed      	b.n	8008ec6 <_free_r+0x1e>
 8008eea:	461a      	mov	r2, r3
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	b10b      	cbz	r3, 8008ef4 <_free_r+0x4c>
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d9fa      	bls.n	8008eea <_free_r+0x42>
 8008ef4:	6811      	ldr	r1, [r2, #0]
 8008ef6:	1850      	adds	r0, r2, r1
 8008ef8:	42a0      	cmp	r0, r4
 8008efa:	d10b      	bne.n	8008f14 <_free_r+0x6c>
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	4401      	add	r1, r0
 8008f00:	1850      	adds	r0, r2, r1
 8008f02:	4283      	cmp	r3, r0
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	d1e0      	bne.n	8008eca <_free_r+0x22>
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	6053      	str	r3, [r2, #4]
 8008f0e:	4408      	add	r0, r1
 8008f10:	6010      	str	r0, [r2, #0]
 8008f12:	e7da      	b.n	8008eca <_free_r+0x22>
 8008f14:	d902      	bls.n	8008f1c <_free_r+0x74>
 8008f16:	230c      	movs	r3, #12
 8008f18:	602b      	str	r3, [r5, #0]
 8008f1a:	e7d6      	b.n	8008eca <_free_r+0x22>
 8008f1c:	6820      	ldr	r0, [r4, #0]
 8008f1e:	1821      	adds	r1, r4, r0
 8008f20:	428b      	cmp	r3, r1
 8008f22:	bf04      	itt	eq
 8008f24:	6819      	ldreq	r1, [r3, #0]
 8008f26:	685b      	ldreq	r3, [r3, #4]
 8008f28:	6063      	str	r3, [r4, #4]
 8008f2a:	bf04      	itt	eq
 8008f2c:	1809      	addeq	r1, r1, r0
 8008f2e:	6021      	streq	r1, [r4, #0]
 8008f30:	6054      	str	r4, [r2, #4]
 8008f32:	e7ca      	b.n	8008eca <_free_r+0x22>
 8008f34:	bd38      	pop	{r3, r4, r5, pc}
 8008f36:	bf00      	nop
 8008f38:	200008a4 	.word	0x200008a4

08008f3c <malloc>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	@ (8008f48 <malloc+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f000 b825 	b.w	8008f90 <_malloc_r>
 8008f46:	bf00      	nop
 8008f48:	20000018 	.word	0x20000018

08008f4c <sbrk_aligned>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f8c <sbrk_aligned+0x40>)
 8008f50:	460c      	mov	r4, r1
 8008f52:	6831      	ldr	r1, [r6, #0]
 8008f54:	4605      	mov	r5, r0
 8008f56:	b911      	cbnz	r1, 8008f5e <sbrk_aligned+0x12>
 8008f58:	f001 fe0c 	bl	800ab74 <_sbrk_r>
 8008f5c:	6030      	str	r0, [r6, #0]
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f001 fe07 	bl	800ab74 <_sbrk_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d103      	bne.n	8008f72 <sbrk_aligned+0x26>
 8008f6a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f6e:	4620      	mov	r0, r4
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	1cc4      	adds	r4, r0, #3
 8008f74:	f024 0403 	bic.w	r4, r4, #3
 8008f78:	42a0      	cmp	r0, r4
 8008f7a:	d0f8      	beq.n	8008f6e <sbrk_aligned+0x22>
 8008f7c:	1a21      	subs	r1, r4, r0
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f001 fdf8 	bl	800ab74 <_sbrk_r>
 8008f84:	3001      	adds	r0, #1
 8008f86:	d1f2      	bne.n	8008f6e <sbrk_aligned+0x22>
 8008f88:	e7ef      	b.n	8008f6a <sbrk_aligned+0x1e>
 8008f8a:	bf00      	nop
 8008f8c:	200008a0 	.word	0x200008a0

08008f90 <_malloc_r>:
 8008f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f94:	1ccd      	adds	r5, r1, #3
 8008f96:	f025 0503 	bic.w	r5, r5, #3
 8008f9a:	3508      	adds	r5, #8
 8008f9c:	2d0c      	cmp	r5, #12
 8008f9e:	bf38      	it	cc
 8008fa0:	250c      	movcc	r5, #12
 8008fa2:	2d00      	cmp	r5, #0
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	db01      	blt.n	8008fac <_malloc_r+0x1c>
 8008fa8:	42a9      	cmp	r1, r5
 8008faa:	d904      	bls.n	8008fb6 <_malloc_r+0x26>
 8008fac:	230c      	movs	r3, #12
 8008fae:	6033      	str	r3, [r6, #0]
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800908c <_malloc_r+0xfc>
 8008fba:	f000 f869 	bl	8009090 <__malloc_lock>
 8008fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc2:	461c      	mov	r4, r3
 8008fc4:	bb44      	cbnz	r4, 8009018 <_malloc_r+0x88>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff ffbf 	bl	8008f4c <sbrk_aligned>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	d158      	bne.n	8009086 <_malloc_r+0xf6>
 8008fd4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fd8:	4627      	mov	r7, r4
 8008fda:	2f00      	cmp	r7, #0
 8008fdc:	d143      	bne.n	8009066 <_malloc_r+0xd6>
 8008fde:	2c00      	cmp	r4, #0
 8008fe0:	d04b      	beq.n	800907a <_malloc_r+0xea>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	eb04 0903 	add.w	r9, r4, r3
 8008fec:	f001 fdc2 	bl	800ab74 <_sbrk_r>
 8008ff0:	4581      	cmp	r9, r0
 8008ff2:	d142      	bne.n	800907a <_malloc_r+0xea>
 8008ff4:	6821      	ldr	r1, [r4, #0]
 8008ff6:	1a6d      	subs	r5, r5, r1
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ffa6 	bl	8008f4c <sbrk_aligned>
 8009000:	3001      	adds	r0, #1
 8009002:	d03a      	beq.n	800907a <_malloc_r+0xea>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	442b      	add	r3, r5
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	f8d8 3000 	ldr.w	r3, [r8]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	bb62      	cbnz	r2, 800906c <_malloc_r+0xdc>
 8009012:	f8c8 7000 	str.w	r7, [r8]
 8009016:	e00f      	b.n	8009038 <_malloc_r+0xa8>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	1b52      	subs	r2, r2, r5
 800901c:	d420      	bmi.n	8009060 <_malloc_r+0xd0>
 800901e:	2a0b      	cmp	r2, #11
 8009020:	d917      	bls.n	8009052 <_malloc_r+0xc2>
 8009022:	1961      	adds	r1, r4, r5
 8009024:	42a3      	cmp	r3, r4
 8009026:	6025      	str	r5, [r4, #0]
 8009028:	bf18      	it	ne
 800902a:	6059      	strne	r1, [r3, #4]
 800902c:	6863      	ldr	r3, [r4, #4]
 800902e:	bf08      	it	eq
 8009030:	f8c8 1000 	streq.w	r1, [r8]
 8009034:	5162      	str	r2, [r4, r5]
 8009036:	604b      	str	r3, [r1, #4]
 8009038:	4630      	mov	r0, r6
 800903a:	f000 f82f 	bl	800909c <__malloc_unlock>
 800903e:	f104 000b 	add.w	r0, r4, #11
 8009042:	1d23      	adds	r3, r4, #4
 8009044:	f020 0007 	bic.w	r0, r0, #7
 8009048:	1ac2      	subs	r2, r0, r3
 800904a:	bf1c      	itt	ne
 800904c:	1a1b      	subne	r3, r3, r0
 800904e:	50a3      	strne	r3, [r4, r2]
 8009050:	e7af      	b.n	8008fb2 <_malloc_r+0x22>
 8009052:	6862      	ldr	r2, [r4, #4]
 8009054:	42a3      	cmp	r3, r4
 8009056:	bf0c      	ite	eq
 8009058:	f8c8 2000 	streq.w	r2, [r8]
 800905c:	605a      	strne	r2, [r3, #4]
 800905e:	e7eb      	b.n	8009038 <_malloc_r+0xa8>
 8009060:	4623      	mov	r3, r4
 8009062:	6864      	ldr	r4, [r4, #4]
 8009064:	e7ae      	b.n	8008fc4 <_malloc_r+0x34>
 8009066:	463c      	mov	r4, r7
 8009068:	687f      	ldr	r7, [r7, #4]
 800906a:	e7b6      	b.n	8008fda <_malloc_r+0x4a>
 800906c:	461a      	mov	r2, r3
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	42a3      	cmp	r3, r4
 8009072:	d1fb      	bne.n	800906c <_malloc_r+0xdc>
 8009074:	2300      	movs	r3, #0
 8009076:	6053      	str	r3, [r2, #4]
 8009078:	e7de      	b.n	8009038 <_malloc_r+0xa8>
 800907a:	230c      	movs	r3, #12
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	4630      	mov	r0, r6
 8009080:	f000 f80c 	bl	800909c <__malloc_unlock>
 8009084:	e794      	b.n	8008fb0 <_malloc_r+0x20>
 8009086:	6005      	str	r5, [r0, #0]
 8009088:	e7d6      	b.n	8009038 <_malloc_r+0xa8>
 800908a:	bf00      	nop
 800908c:	200008a4 	.word	0x200008a4

08009090 <__malloc_lock>:
 8009090:	4801      	ldr	r0, [pc, #4]	@ (8009098 <__malloc_lock+0x8>)
 8009092:	f7ff b8b2 	b.w	80081fa <__retarget_lock_acquire_recursive>
 8009096:	bf00      	nop
 8009098:	2000089c 	.word	0x2000089c

0800909c <__malloc_unlock>:
 800909c:	4801      	ldr	r0, [pc, #4]	@ (80090a4 <__malloc_unlock+0x8>)
 800909e:	f7ff b8ad 	b.w	80081fc <__retarget_lock_release_recursive>
 80090a2:	bf00      	nop
 80090a4:	2000089c 	.word	0x2000089c

080090a8 <_Balloc>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	69c6      	ldr	r6, [r0, #28]
 80090ac:	4604      	mov	r4, r0
 80090ae:	460d      	mov	r5, r1
 80090b0:	b976      	cbnz	r6, 80090d0 <_Balloc+0x28>
 80090b2:	2010      	movs	r0, #16
 80090b4:	f7ff ff42 	bl	8008f3c <malloc>
 80090b8:	4602      	mov	r2, r0
 80090ba:	61e0      	str	r0, [r4, #28]
 80090bc:	b920      	cbnz	r0, 80090c8 <_Balloc+0x20>
 80090be:	4b18      	ldr	r3, [pc, #96]	@ (8009120 <_Balloc+0x78>)
 80090c0:	4818      	ldr	r0, [pc, #96]	@ (8009124 <_Balloc+0x7c>)
 80090c2:	216b      	movs	r1, #107	@ 0x6b
 80090c4:	f001 fd7c 	bl	800abc0 <__assert_func>
 80090c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090cc:	6006      	str	r6, [r0, #0]
 80090ce:	60c6      	str	r6, [r0, #12]
 80090d0:	69e6      	ldr	r6, [r4, #28]
 80090d2:	68f3      	ldr	r3, [r6, #12]
 80090d4:	b183      	cbz	r3, 80090f8 <_Balloc+0x50>
 80090d6:	69e3      	ldr	r3, [r4, #28]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090de:	b9b8      	cbnz	r0, 8009110 <_Balloc+0x68>
 80090e0:	2101      	movs	r1, #1
 80090e2:	fa01 f605 	lsl.w	r6, r1, r5
 80090e6:	1d72      	adds	r2, r6, #5
 80090e8:	0092      	lsls	r2, r2, #2
 80090ea:	4620      	mov	r0, r4
 80090ec:	f001 fd86 	bl	800abfc <_calloc_r>
 80090f0:	b160      	cbz	r0, 800910c <_Balloc+0x64>
 80090f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090f6:	e00e      	b.n	8009116 <_Balloc+0x6e>
 80090f8:	2221      	movs	r2, #33	@ 0x21
 80090fa:	2104      	movs	r1, #4
 80090fc:	4620      	mov	r0, r4
 80090fe:	f001 fd7d 	bl	800abfc <_calloc_r>
 8009102:	69e3      	ldr	r3, [r4, #28]
 8009104:	60f0      	str	r0, [r6, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e4      	bne.n	80090d6 <_Balloc+0x2e>
 800910c:	2000      	movs	r0, #0
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	6802      	ldr	r2, [r0, #0]
 8009112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009116:	2300      	movs	r3, #0
 8009118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800911c:	e7f7      	b.n	800910e <_Balloc+0x66>
 800911e:	bf00      	nop
 8009120:	0800b96e 	.word	0x0800b96e
 8009124:	0800b9ee 	.word	0x0800b9ee

08009128 <_Bfree>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	69c6      	ldr	r6, [r0, #28]
 800912c:	4605      	mov	r5, r0
 800912e:	460c      	mov	r4, r1
 8009130:	b976      	cbnz	r6, 8009150 <_Bfree+0x28>
 8009132:	2010      	movs	r0, #16
 8009134:	f7ff ff02 	bl	8008f3c <malloc>
 8009138:	4602      	mov	r2, r0
 800913a:	61e8      	str	r0, [r5, #28]
 800913c:	b920      	cbnz	r0, 8009148 <_Bfree+0x20>
 800913e:	4b09      	ldr	r3, [pc, #36]	@ (8009164 <_Bfree+0x3c>)
 8009140:	4809      	ldr	r0, [pc, #36]	@ (8009168 <_Bfree+0x40>)
 8009142:	218f      	movs	r1, #143	@ 0x8f
 8009144:	f001 fd3c 	bl	800abc0 <__assert_func>
 8009148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800914c:	6006      	str	r6, [r0, #0]
 800914e:	60c6      	str	r6, [r0, #12]
 8009150:	b13c      	cbz	r4, 8009162 <_Bfree+0x3a>
 8009152:	69eb      	ldr	r3, [r5, #28]
 8009154:	6862      	ldr	r2, [r4, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800915c:	6021      	str	r1, [r4, #0]
 800915e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	0800b96e 	.word	0x0800b96e
 8009168:	0800b9ee 	.word	0x0800b9ee

0800916c <__multadd>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	690d      	ldr	r5, [r1, #16]
 8009172:	4607      	mov	r7, r0
 8009174:	460c      	mov	r4, r1
 8009176:	461e      	mov	r6, r3
 8009178:	f101 0c14 	add.w	ip, r1, #20
 800917c:	2000      	movs	r0, #0
 800917e:	f8dc 3000 	ldr.w	r3, [ip]
 8009182:	b299      	uxth	r1, r3
 8009184:	fb02 6101 	mla	r1, r2, r1, r6
 8009188:	0c1e      	lsrs	r6, r3, #16
 800918a:	0c0b      	lsrs	r3, r1, #16
 800918c:	fb02 3306 	mla	r3, r2, r6, r3
 8009190:	b289      	uxth	r1, r1
 8009192:	3001      	adds	r0, #1
 8009194:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009198:	4285      	cmp	r5, r0
 800919a:	f84c 1b04 	str.w	r1, [ip], #4
 800919e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091a2:	dcec      	bgt.n	800917e <__multadd+0x12>
 80091a4:	b30e      	cbz	r6, 80091ea <__multadd+0x7e>
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	42ab      	cmp	r3, r5
 80091aa:	dc19      	bgt.n	80091e0 <__multadd+0x74>
 80091ac:	6861      	ldr	r1, [r4, #4]
 80091ae:	4638      	mov	r0, r7
 80091b0:	3101      	adds	r1, #1
 80091b2:	f7ff ff79 	bl	80090a8 <_Balloc>
 80091b6:	4680      	mov	r8, r0
 80091b8:	b928      	cbnz	r0, 80091c6 <__multadd+0x5a>
 80091ba:	4602      	mov	r2, r0
 80091bc:	4b0c      	ldr	r3, [pc, #48]	@ (80091f0 <__multadd+0x84>)
 80091be:	480d      	ldr	r0, [pc, #52]	@ (80091f4 <__multadd+0x88>)
 80091c0:	21ba      	movs	r1, #186	@ 0xba
 80091c2:	f001 fcfd 	bl	800abc0 <__assert_func>
 80091c6:	6922      	ldr	r2, [r4, #16]
 80091c8:	3202      	adds	r2, #2
 80091ca:	f104 010c 	add.w	r1, r4, #12
 80091ce:	0092      	lsls	r2, r2, #2
 80091d0:	300c      	adds	r0, #12
 80091d2:	f001 fcdf 	bl	800ab94 <memcpy>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4638      	mov	r0, r7
 80091da:	f7ff ffa5 	bl	8009128 <_Bfree>
 80091de:	4644      	mov	r4, r8
 80091e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091e4:	3501      	adds	r5, #1
 80091e6:	615e      	str	r6, [r3, #20]
 80091e8:	6125      	str	r5, [r4, #16]
 80091ea:	4620      	mov	r0, r4
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	0800b9dd 	.word	0x0800b9dd
 80091f4:	0800b9ee 	.word	0x0800b9ee

080091f8 <__s2b>:
 80091f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091fc:	460c      	mov	r4, r1
 80091fe:	4615      	mov	r5, r2
 8009200:	461f      	mov	r7, r3
 8009202:	2209      	movs	r2, #9
 8009204:	3308      	adds	r3, #8
 8009206:	4606      	mov	r6, r0
 8009208:	fb93 f3f2 	sdiv	r3, r3, r2
 800920c:	2100      	movs	r1, #0
 800920e:	2201      	movs	r2, #1
 8009210:	429a      	cmp	r2, r3
 8009212:	db09      	blt.n	8009228 <__s2b+0x30>
 8009214:	4630      	mov	r0, r6
 8009216:	f7ff ff47 	bl	80090a8 <_Balloc>
 800921a:	b940      	cbnz	r0, 800922e <__s2b+0x36>
 800921c:	4602      	mov	r2, r0
 800921e:	4b19      	ldr	r3, [pc, #100]	@ (8009284 <__s2b+0x8c>)
 8009220:	4819      	ldr	r0, [pc, #100]	@ (8009288 <__s2b+0x90>)
 8009222:	21d3      	movs	r1, #211	@ 0xd3
 8009224:	f001 fccc 	bl	800abc0 <__assert_func>
 8009228:	0052      	lsls	r2, r2, #1
 800922a:	3101      	adds	r1, #1
 800922c:	e7f0      	b.n	8009210 <__s2b+0x18>
 800922e:	9b08      	ldr	r3, [sp, #32]
 8009230:	6143      	str	r3, [r0, #20]
 8009232:	2d09      	cmp	r5, #9
 8009234:	f04f 0301 	mov.w	r3, #1
 8009238:	6103      	str	r3, [r0, #16]
 800923a:	dd16      	ble.n	800926a <__s2b+0x72>
 800923c:	f104 0909 	add.w	r9, r4, #9
 8009240:	46c8      	mov	r8, r9
 8009242:	442c      	add	r4, r5
 8009244:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009248:	4601      	mov	r1, r0
 800924a:	3b30      	subs	r3, #48	@ 0x30
 800924c:	220a      	movs	r2, #10
 800924e:	4630      	mov	r0, r6
 8009250:	f7ff ff8c 	bl	800916c <__multadd>
 8009254:	45a0      	cmp	r8, r4
 8009256:	d1f5      	bne.n	8009244 <__s2b+0x4c>
 8009258:	f1a5 0408 	sub.w	r4, r5, #8
 800925c:	444c      	add	r4, r9
 800925e:	1b2d      	subs	r5, r5, r4
 8009260:	1963      	adds	r3, r4, r5
 8009262:	42bb      	cmp	r3, r7
 8009264:	db04      	blt.n	8009270 <__s2b+0x78>
 8009266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926a:	340a      	adds	r4, #10
 800926c:	2509      	movs	r5, #9
 800926e:	e7f6      	b.n	800925e <__s2b+0x66>
 8009270:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009274:	4601      	mov	r1, r0
 8009276:	3b30      	subs	r3, #48	@ 0x30
 8009278:	220a      	movs	r2, #10
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff ff76 	bl	800916c <__multadd>
 8009280:	e7ee      	b.n	8009260 <__s2b+0x68>
 8009282:	bf00      	nop
 8009284:	0800b9dd 	.word	0x0800b9dd
 8009288:	0800b9ee 	.word	0x0800b9ee

0800928c <__hi0bits>:
 800928c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009290:	4603      	mov	r3, r0
 8009292:	bf36      	itet	cc
 8009294:	0403      	lslcc	r3, r0, #16
 8009296:	2000      	movcs	r0, #0
 8009298:	2010      	movcc	r0, #16
 800929a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800929e:	bf3c      	itt	cc
 80092a0:	021b      	lslcc	r3, r3, #8
 80092a2:	3008      	addcc	r0, #8
 80092a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092a8:	bf3c      	itt	cc
 80092aa:	011b      	lslcc	r3, r3, #4
 80092ac:	3004      	addcc	r0, #4
 80092ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092b2:	bf3c      	itt	cc
 80092b4:	009b      	lslcc	r3, r3, #2
 80092b6:	3002      	addcc	r0, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db05      	blt.n	80092c8 <__hi0bits+0x3c>
 80092bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092c0:	f100 0001 	add.w	r0, r0, #1
 80092c4:	bf08      	it	eq
 80092c6:	2020      	moveq	r0, #32
 80092c8:	4770      	bx	lr

080092ca <__lo0bits>:
 80092ca:	6803      	ldr	r3, [r0, #0]
 80092cc:	4602      	mov	r2, r0
 80092ce:	f013 0007 	ands.w	r0, r3, #7
 80092d2:	d00b      	beq.n	80092ec <__lo0bits+0x22>
 80092d4:	07d9      	lsls	r1, r3, #31
 80092d6:	d421      	bmi.n	800931c <__lo0bits+0x52>
 80092d8:	0798      	lsls	r0, r3, #30
 80092da:	bf49      	itett	mi
 80092dc:	085b      	lsrmi	r3, r3, #1
 80092de:	089b      	lsrpl	r3, r3, #2
 80092e0:	2001      	movmi	r0, #1
 80092e2:	6013      	strmi	r3, [r2, #0]
 80092e4:	bf5c      	itt	pl
 80092e6:	6013      	strpl	r3, [r2, #0]
 80092e8:	2002      	movpl	r0, #2
 80092ea:	4770      	bx	lr
 80092ec:	b299      	uxth	r1, r3
 80092ee:	b909      	cbnz	r1, 80092f4 <__lo0bits+0x2a>
 80092f0:	0c1b      	lsrs	r3, r3, #16
 80092f2:	2010      	movs	r0, #16
 80092f4:	b2d9      	uxtb	r1, r3
 80092f6:	b909      	cbnz	r1, 80092fc <__lo0bits+0x32>
 80092f8:	3008      	adds	r0, #8
 80092fa:	0a1b      	lsrs	r3, r3, #8
 80092fc:	0719      	lsls	r1, r3, #28
 80092fe:	bf04      	itt	eq
 8009300:	091b      	lsreq	r3, r3, #4
 8009302:	3004      	addeq	r0, #4
 8009304:	0799      	lsls	r1, r3, #30
 8009306:	bf04      	itt	eq
 8009308:	089b      	lsreq	r3, r3, #2
 800930a:	3002      	addeq	r0, #2
 800930c:	07d9      	lsls	r1, r3, #31
 800930e:	d403      	bmi.n	8009318 <__lo0bits+0x4e>
 8009310:	085b      	lsrs	r3, r3, #1
 8009312:	f100 0001 	add.w	r0, r0, #1
 8009316:	d003      	beq.n	8009320 <__lo0bits+0x56>
 8009318:	6013      	str	r3, [r2, #0]
 800931a:	4770      	bx	lr
 800931c:	2000      	movs	r0, #0
 800931e:	4770      	bx	lr
 8009320:	2020      	movs	r0, #32
 8009322:	4770      	bx	lr

08009324 <__i2b>:
 8009324:	b510      	push	{r4, lr}
 8009326:	460c      	mov	r4, r1
 8009328:	2101      	movs	r1, #1
 800932a:	f7ff febd 	bl	80090a8 <_Balloc>
 800932e:	4602      	mov	r2, r0
 8009330:	b928      	cbnz	r0, 800933e <__i2b+0x1a>
 8009332:	4b05      	ldr	r3, [pc, #20]	@ (8009348 <__i2b+0x24>)
 8009334:	4805      	ldr	r0, [pc, #20]	@ (800934c <__i2b+0x28>)
 8009336:	f240 1145 	movw	r1, #325	@ 0x145
 800933a:	f001 fc41 	bl	800abc0 <__assert_func>
 800933e:	2301      	movs	r3, #1
 8009340:	6144      	str	r4, [r0, #20]
 8009342:	6103      	str	r3, [r0, #16]
 8009344:	bd10      	pop	{r4, pc}
 8009346:	bf00      	nop
 8009348:	0800b9dd 	.word	0x0800b9dd
 800934c:	0800b9ee 	.word	0x0800b9ee

08009350 <__multiply>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	4614      	mov	r4, r2
 8009356:	690a      	ldr	r2, [r1, #16]
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	429a      	cmp	r2, r3
 800935c:	bfa8      	it	ge
 800935e:	4623      	movge	r3, r4
 8009360:	460f      	mov	r7, r1
 8009362:	bfa4      	itt	ge
 8009364:	460c      	movge	r4, r1
 8009366:	461f      	movge	r7, r3
 8009368:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800936c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009370:	68a3      	ldr	r3, [r4, #8]
 8009372:	6861      	ldr	r1, [r4, #4]
 8009374:	eb0a 0609 	add.w	r6, sl, r9
 8009378:	42b3      	cmp	r3, r6
 800937a:	b085      	sub	sp, #20
 800937c:	bfb8      	it	lt
 800937e:	3101      	addlt	r1, #1
 8009380:	f7ff fe92 	bl	80090a8 <_Balloc>
 8009384:	b930      	cbnz	r0, 8009394 <__multiply+0x44>
 8009386:	4602      	mov	r2, r0
 8009388:	4b44      	ldr	r3, [pc, #272]	@ (800949c <__multiply+0x14c>)
 800938a:	4845      	ldr	r0, [pc, #276]	@ (80094a0 <__multiply+0x150>)
 800938c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009390:	f001 fc16 	bl	800abc0 <__assert_func>
 8009394:	f100 0514 	add.w	r5, r0, #20
 8009398:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800939c:	462b      	mov	r3, r5
 800939e:	2200      	movs	r2, #0
 80093a0:	4543      	cmp	r3, r8
 80093a2:	d321      	bcc.n	80093e8 <__multiply+0x98>
 80093a4:	f107 0114 	add.w	r1, r7, #20
 80093a8:	f104 0214 	add.w	r2, r4, #20
 80093ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80093b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80093b4:	9302      	str	r3, [sp, #8]
 80093b6:	1b13      	subs	r3, r2, r4
 80093b8:	3b15      	subs	r3, #21
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	3304      	adds	r3, #4
 80093c0:	f104 0715 	add.w	r7, r4, #21
 80093c4:	42ba      	cmp	r2, r7
 80093c6:	bf38      	it	cc
 80093c8:	2304      	movcc	r3, #4
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	9b02      	ldr	r3, [sp, #8]
 80093ce:	9103      	str	r1, [sp, #12]
 80093d0:	428b      	cmp	r3, r1
 80093d2:	d80c      	bhi.n	80093ee <__multiply+0x9e>
 80093d4:	2e00      	cmp	r6, #0
 80093d6:	dd03      	ble.n	80093e0 <__multiply+0x90>
 80093d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d05b      	beq.n	8009498 <__multiply+0x148>
 80093e0:	6106      	str	r6, [r0, #16]
 80093e2:	b005      	add	sp, #20
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	f843 2b04 	str.w	r2, [r3], #4
 80093ec:	e7d8      	b.n	80093a0 <__multiply+0x50>
 80093ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80093f2:	f1ba 0f00 	cmp.w	sl, #0
 80093f6:	d024      	beq.n	8009442 <__multiply+0xf2>
 80093f8:	f104 0e14 	add.w	lr, r4, #20
 80093fc:	46a9      	mov	r9, r5
 80093fe:	f04f 0c00 	mov.w	ip, #0
 8009402:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009406:	f8d9 3000 	ldr.w	r3, [r9]
 800940a:	fa1f fb87 	uxth.w	fp, r7
 800940e:	b29b      	uxth	r3, r3
 8009410:	fb0a 330b 	mla	r3, sl, fp, r3
 8009414:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009418:	f8d9 7000 	ldr.w	r7, [r9]
 800941c:	4463      	add	r3, ip
 800941e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009422:	fb0a c70b 	mla	r7, sl, fp, ip
 8009426:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800942a:	b29b      	uxth	r3, r3
 800942c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009430:	4572      	cmp	r2, lr
 8009432:	f849 3b04 	str.w	r3, [r9], #4
 8009436:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800943a:	d8e2      	bhi.n	8009402 <__multiply+0xb2>
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	f845 c003 	str.w	ip, [r5, r3]
 8009442:	9b03      	ldr	r3, [sp, #12]
 8009444:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009448:	3104      	adds	r1, #4
 800944a:	f1b9 0f00 	cmp.w	r9, #0
 800944e:	d021      	beq.n	8009494 <__multiply+0x144>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	f104 0c14 	add.w	ip, r4, #20
 8009456:	46ae      	mov	lr, r5
 8009458:	f04f 0a00 	mov.w	sl, #0
 800945c:	f8bc b000 	ldrh.w	fp, [ip]
 8009460:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009464:	fb09 770b 	mla	r7, r9, fp, r7
 8009468:	4457      	add	r7, sl
 800946a:	b29b      	uxth	r3, r3
 800946c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009470:	f84e 3b04 	str.w	r3, [lr], #4
 8009474:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009478:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800947c:	f8be 3000 	ldrh.w	r3, [lr]
 8009480:	fb09 330a 	mla	r3, r9, sl, r3
 8009484:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009488:	4562      	cmp	r2, ip
 800948a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800948e:	d8e5      	bhi.n	800945c <__multiply+0x10c>
 8009490:	9f01      	ldr	r7, [sp, #4]
 8009492:	51eb      	str	r3, [r5, r7]
 8009494:	3504      	adds	r5, #4
 8009496:	e799      	b.n	80093cc <__multiply+0x7c>
 8009498:	3e01      	subs	r6, #1
 800949a:	e79b      	b.n	80093d4 <__multiply+0x84>
 800949c:	0800b9dd 	.word	0x0800b9dd
 80094a0:	0800b9ee 	.word	0x0800b9ee

080094a4 <__pow5mult>:
 80094a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a8:	4615      	mov	r5, r2
 80094aa:	f012 0203 	ands.w	r2, r2, #3
 80094ae:	4607      	mov	r7, r0
 80094b0:	460e      	mov	r6, r1
 80094b2:	d007      	beq.n	80094c4 <__pow5mult+0x20>
 80094b4:	4c25      	ldr	r4, [pc, #148]	@ (800954c <__pow5mult+0xa8>)
 80094b6:	3a01      	subs	r2, #1
 80094b8:	2300      	movs	r3, #0
 80094ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094be:	f7ff fe55 	bl	800916c <__multadd>
 80094c2:	4606      	mov	r6, r0
 80094c4:	10ad      	asrs	r5, r5, #2
 80094c6:	d03d      	beq.n	8009544 <__pow5mult+0xa0>
 80094c8:	69fc      	ldr	r4, [r7, #28]
 80094ca:	b97c      	cbnz	r4, 80094ec <__pow5mult+0x48>
 80094cc:	2010      	movs	r0, #16
 80094ce:	f7ff fd35 	bl	8008f3c <malloc>
 80094d2:	4602      	mov	r2, r0
 80094d4:	61f8      	str	r0, [r7, #28]
 80094d6:	b928      	cbnz	r0, 80094e4 <__pow5mult+0x40>
 80094d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009550 <__pow5mult+0xac>)
 80094da:	481e      	ldr	r0, [pc, #120]	@ (8009554 <__pow5mult+0xb0>)
 80094dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094e0:	f001 fb6e 	bl	800abc0 <__assert_func>
 80094e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094e8:	6004      	str	r4, [r0, #0]
 80094ea:	60c4      	str	r4, [r0, #12]
 80094ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094f4:	b94c      	cbnz	r4, 800950a <__pow5mult+0x66>
 80094f6:	f240 2171 	movw	r1, #625	@ 0x271
 80094fa:	4638      	mov	r0, r7
 80094fc:	f7ff ff12 	bl	8009324 <__i2b>
 8009500:	2300      	movs	r3, #0
 8009502:	f8c8 0008 	str.w	r0, [r8, #8]
 8009506:	4604      	mov	r4, r0
 8009508:	6003      	str	r3, [r0, #0]
 800950a:	f04f 0900 	mov.w	r9, #0
 800950e:	07eb      	lsls	r3, r5, #31
 8009510:	d50a      	bpl.n	8009528 <__pow5mult+0x84>
 8009512:	4631      	mov	r1, r6
 8009514:	4622      	mov	r2, r4
 8009516:	4638      	mov	r0, r7
 8009518:	f7ff ff1a 	bl	8009350 <__multiply>
 800951c:	4631      	mov	r1, r6
 800951e:	4680      	mov	r8, r0
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff fe01 	bl	8009128 <_Bfree>
 8009526:	4646      	mov	r6, r8
 8009528:	106d      	asrs	r5, r5, #1
 800952a:	d00b      	beq.n	8009544 <__pow5mult+0xa0>
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	b938      	cbnz	r0, 8009540 <__pow5mult+0x9c>
 8009530:	4622      	mov	r2, r4
 8009532:	4621      	mov	r1, r4
 8009534:	4638      	mov	r0, r7
 8009536:	f7ff ff0b 	bl	8009350 <__multiply>
 800953a:	6020      	str	r0, [r4, #0]
 800953c:	f8c0 9000 	str.w	r9, [r0]
 8009540:	4604      	mov	r4, r0
 8009542:	e7e4      	b.n	800950e <__pow5mult+0x6a>
 8009544:	4630      	mov	r0, r6
 8009546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954a:	bf00      	nop
 800954c:	0800ba48 	.word	0x0800ba48
 8009550:	0800b96e 	.word	0x0800b96e
 8009554:	0800b9ee 	.word	0x0800b9ee

08009558 <__lshift>:
 8009558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800955c:	460c      	mov	r4, r1
 800955e:	6849      	ldr	r1, [r1, #4]
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009566:	68a3      	ldr	r3, [r4, #8]
 8009568:	4607      	mov	r7, r0
 800956a:	4691      	mov	r9, r2
 800956c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009570:	f108 0601 	add.w	r6, r8, #1
 8009574:	42b3      	cmp	r3, r6
 8009576:	db0b      	blt.n	8009590 <__lshift+0x38>
 8009578:	4638      	mov	r0, r7
 800957a:	f7ff fd95 	bl	80090a8 <_Balloc>
 800957e:	4605      	mov	r5, r0
 8009580:	b948      	cbnz	r0, 8009596 <__lshift+0x3e>
 8009582:	4602      	mov	r2, r0
 8009584:	4b28      	ldr	r3, [pc, #160]	@ (8009628 <__lshift+0xd0>)
 8009586:	4829      	ldr	r0, [pc, #164]	@ (800962c <__lshift+0xd4>)
 8009588:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800958c:	f001 fb18 	bl	800abc0 <__assert_func>
 8009590:	3101      	adds	r1, #1
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	e7ee      	b.n	8009574 <__lshift+0x1c>
 8009596:	2300      	movs	r3, #0
 8009598:	f100 0114 	add.w	r1, r0, #20
 800959c:	f100 0210 	add.w	r2, r0, #16
 80095a0:	4618      	mov	r0, r3
 80095a2:	4553      	cmp	r3, sl
 80095a4:	db33      	blt.n	800960e <__lshift+0xb6>
 80095a6:	6920      	ldr	r0, [r4, #16]
 80095a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095ac:	f104 0314 	add.w	r3, r4, #20
 80095b0:	f019 091f 	ands.w	r9, r9, #31
 80095b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095bc:	d02b      	beq.n	8009616 <__lshift+0xbe>
 80095be:	f1c9 0e20 	rsb	lr, r9, #32
 80095c2:	468a      	mov	sl, r1
 80095c4:	2200      	movs	r2, #0
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	fa00 f009 	lsl.w	r0, r0, r9
 80095cc:	4310      	orrs	r0, r2
 80095ce:	f84a 0b04 	str.w	r0, [sl], #4
 80095d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d6:	459c      	cmp	ip, r3
 80095d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80095dc:	d8f3      	bhi.n	80095c6 <__lshift+0x6e>
 80095de:	ebac 0304 	sub.w	r3, ip, r4
 80095e2:	3b15      	subs	r3, #21
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	3304      	adds	r3, #4
 80095ea:	f104 0015 	add.w	r0, r4, #21
 80095ee:	4584      	cmp	ip, r0
 80095f0:	bf38      	it	cc
 80095f2:	2304      	movcc	r3, #4
 80095f4:	50ca      	str	r2, [r1, r3]
 80095f6:	b10a      	cbz	r2, 80095fc <__lshift+0xa4>
 80095f8:	f108 0602 	add.w	r6, r8, #2
 80095fc:	3e01      	subs	r6, #1
 80095fe:	4638      	mov	r0, r7
 8009600:	612e      	str	r6, [r5, #16]
 8009602:	4621      	mov	r1, r4
 8009604:	f7ff fd90 	bl	8009128 <_Bfree>
 8009608:	4628      	mov	r0, r5
 800960a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009612:	3301      	adds	r3, #1
 8009614:	e7c5      	b.n	80095a2 <__lshift+0x4a>
 8009616:	3904      	subs	r1, #4
 8009618:	f853 2b04 	ldr.w	r2, [r3], #4
 800961c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009620:	459c      	cmp	ip, r3
 8009622:	d8f9      	bhi.n	8009618 <__lshift+0xc0>
 8009624:	e7ea      	b.n	80095fc <__lshift+0xa4>
 8009626:	bf00      	nop
 8009628:	0800b9dd 	.word	0x0800b9dd
 800962c:	0800b9ee 	.word	0x0800b9ee

08009630 <__mcmp>:
 8009630:	690a      	ldr	r2, [r1, #16]
 8009632:	4603      	mov	r3, r0
 8009634:	6900      	ldr	r0, [r0, #16]
 8009636:	1a80      	subs	r0, r0, r2
 8009638:	b530      	push	{r4, r5, lr}
 800963a:	d10e      	bne.n	800965a <__mcmp+0x2a>
 800963c:	3314      	adds	r3, #20
 800963e:	3114      	adds	r1, #20
 8009640:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009644:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009648:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800964c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009650:	4295      	cmp	r5, r2
 8009652:	d003      	beq.n	800965c <__mcmp+0x2c>
 8009654:	d205      	bcs.n	8009662 <__mcmp+0x32>
 8009656:	f04f 30ff 	mov.w	r0, #4294967295
 800965a:	bd30      	pop	{r4, r5, pc}
 800965c:	42a3      	cmp	r3, r4
 800965e:	d3f3      	bcc.n	8009648 <__mcmp+0x18>
 8009660:	e7fb      	b.n	800965a <__mcmp+0x2a>
 8009662:	2001      	movs	r0, #1
 8009664:	e7f9      	b.n	800965a <__mcmp+0x2a>
	...

08009668 <__mdiff>:
 8009668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	4689      	mov	r9, r1
 800966e:	4606      	mov	r6, r0
 8009670:	4611      	mov	r1, r2
 8009672:	4648      	mov	r0, r9
 8009674:	4614      	mov	r4, r2
 8009676:	f7ff ffdb 	bl	8009630 <__mcmp>
 800967a:	1e05      	subs	r5, r0, #0
 800967c:	d112      	bne.n	80096a4 <__mdiff+0x3c>
 800967e:	4629      	mov	r1, r5
 8009680:	4630      	mov	r0, r6
 8009682:	f7ff fd11 	bl	80090a8 <_Balloc>
 8009686:	4602      	mov	r2, r0
 8009688:	b928      	cbnz	r0, 8009696 <__mdiff+0x2e>
 800968a:	4b3f      	ldr	r3, [pc, #252]	@ (8009788 <__mdiff+0x120>)
 800968c:	f240 2137 	movw	r1, #567	@ 0x237
 8009690:	483e      	ldr	r0, [pc, #248]	@ (800978c <__mdiff+0x124>)
 8009692:	f001 fa95 	bl	800abc0 <__assert_func>
 8009696:	2301      	movs	r3, #1
 8009698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800969c:	4610      	mov	r0, r2
 800969e:	b003      	add	sp, #12
 80096a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a4:	bfbc      	itt	lt
 80096a6:	464b      	movlt	r3, r9
 80096a8:	46a1      	movlt	r9, r4
 80096aa:	4630      	mov	r0, r6
 80096ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096b0:	bfba      	itte	lt
 80096b2:	461c      	movlt	r4, r3
 80096b4:	2501      	movlt	r5, #1
 80096b6:	2500      	movge	r5, #0
 80096b8:	f7ff fcf6 	bl	80090a8 <_Balloc>
 80096bc:	4602      	mov	r2, r0
 80096be:	b918      	cbnz	r0, 80096c8 <__mdiff+0x60>
 80096c0:	4b31      	ldr	r3, [pc, #196]	@ (8009788 <__mdiff+0x120>)
 80096c2:	f240 2145 	movw	r1, #581	@ 0x245
 80096c6:	e7e3      	b.n	8009690 <__mdiff+0x28>
 80096c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096cc:	6926      	ldr	r6, [r4, #16]
 80096ce:	60c5      	str	r5, [r0, #12]
 80096d0:	f109 0310 	add.w	r3, r9, #16
 80096d4:	f109 0514 	add.w	r5, r9, #20
 80096d8:	f104 0e14 	add.w	lr, r4, #20
 80096dc:	f100 0b14 	add.w	fp, r0, #20
 80096e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	46d9      	mov	r9, fp
 80096ec:	f04f 0c00 	mov.w	ip, #0
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	fa1f f38a 	uxth.w	r3, sl
 8009700:	4619      	mov	r1, r3
 8009702:	b283      	uxth	r3, r0
 8009704:	1acb      	subs	r3, r1, r3
 8009706:	0c00      	lsrs	r0, r0, #16
 8009708:	4463      	add	r3, ip
 800970a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800970e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009718:	4576      	cmp	r6, lr
 800971a:	f849 3b04 	str.w	r3, [r9], #4
 800971e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009722:	d8e5      	bhi.n	80096f0 <__mdiff+0x88>
 8009724:	1b33      	subs	r3, r6, r4
 8009726:	3b15      	subs	r3, #21
 8009728:	f023 0303 	bic.w	r3, r3, #3
 800972c:	3415      	adds	r4, #21
 800972e:	3304      	adds	r3, #4
 8009730:	42a6      	cmp	r6, r4
 8009732:	bf38      	it	cc
 8009734:	2304      	movcc	r3, #4
 8009736:	441d      	add	r5, r3
 8009738:	445b      	add	r3, fp
 800973a:	461e      	mov	r6, r3
 800973c:	462c      	mov	r4, r5
 800973e:	4544      	cmp	r4, r8
 8009740:	d30e      	bcc.n	8009760 <__mdiff+0xf8>
 8009742:	f108 0103 	add.w	r1, r8, #3
 8009746:	1b49      	subs	r1, r1, r5
 8009748:	f021 0103 	bic.w	r1, r1, #3
 800974c:	3d03      	subs	r5, #3
 800974e:	45a8      	cmp	r8, r5
 8009750:	bf38      	it	cc
 8009752:	2100      	movcc	r1, #0
 8009754:	440b      	add	r3, r1
 8009756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800975a:	b191      	cbz	r1, 8009782 <__mdiff+0x11a>
 800975c:	6117      	str	r7, [r2, #16]
 800975e:	e79d      	b.n	800969c <__mdiff+0x34>
 8009760:	f854 1b04 	ldr.w	r1, [r4], #4
 8009764:	46e6      	mov	lr, ip
 8009766:	0c08      	lsrs	r0, r1, #16
 8009768:	fa1c fc81 	uxtah	ip, ip, r1
 800976c:	4471      	add	r1, lr
 800976e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009772:	b289      	uxth	r1, r1
 8009774:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009778:	f846 1b04 	str.w	r1, [r6], #4
 800977c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009780:	e7dd      	b.n	800973e <__mdiff+0xd6>
 8009782:	3f01      	subs	r7, #1
 8009784:	e7e7      	b.n	8009756 <__mdiff+0xee>
 8009786:	bf00      	nop
 8009788:	0800b9dd 	.word	0x0800b9dd
 800978c:	0800b9ee 	.word	0x0800b9ee

08009790 <__ulp>:
 8009790:	b082      	sub	sp, #8
 8009792:	ed8d 0b00 	vstr	d0, [sp]
 8009796:	9a01      	ldr	r2, [sp, #4]
 8009798:	4b0f      	ldr	r3, [pc, #60]	@ (80097d8 <__ulp+0x48>)
 800979a:	4013      	ands	r3, r2
 800979c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dc08      	bgt.n	80097b6 <__ulp+0x26>
 80097a4:	425b      	negs	r3, r3
 80097a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80097aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097ae:	da04      	bge.n	80097ba <__ulp+0x2a>
 80097b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80097b4:	4113      	asrs	r3, r2
 80097b6:	2200      	movs	r2, #0
 80097b8:	e008      	b.n	80097cc <__ulp+0x3c>
 80097ba:	f1a2 0314 	sub.w	r3, r2, #20
 80097be:	2b1e      	cmp	r3, #30
 80097c0:	bfda      	itte	le
 80097c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80097c6:	40da      	lsrle	r2, r3
 80097c8:	2201      	movgt	r2, #1
 80097ca:	2300      	movs	r3, #0
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	ec41 0b10 	vmov	d0, r0, r1
 80097d4:	b002      	add	sp, #8
 80097d6:	4770      	bx	lr
 80097d8:	7ff00000 	.word	0x7ff00000

080097dc <__b2d>:
 80097dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e0:	6906      	ldr	r6, [r0, #16]
 80097e2:	f100 0814 	add.w	r8, r0, #20
 80097e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80097ea:	1f37      	subs	r7, r6, #4
 80097ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80097f0:	4610      	mov	r0, r2
 80097f2:	f7ff fd4b 	bl	800928c <__hi0bits>
 80097f6:	f1c0 0320 	rsb	r3, r0, #32
 80097fa:	280a      	cmp	r0, #10
 80097fc:	600b      	str	r3, [r1, #0]
 80097fe:	491b      	ldr	r1, [pc, #108]	@ (800986c <__b2d+0x90>)
 8009800:	dc15      	bgt.n	800982e <__b2d+0x52>
 8009802:	f1c0 0c0b 	rsb	ip, r0, #11
 8009806:	fa22 f30c 	lsr.w	r3, r2, ip
 800980a:	45b8      	cmp	r8, r7
 800980c:	ea43 0501 	orr.w	r5, r3, r1
 8009810:	bf34      	ite	cc
 8009812:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009816:	2300      	movcs	r3, #0
 8009818:	3015      	adds	r0, #21
 800981a:	fa02 f000 	lsl.w	r0, r2, r0
 800981e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009822:	4303      	orrs	r3, r0
 8009824:	461c      	mov	r4, r3
 8009826:	ec45 4b10 	vmov	d0, r4, r5
 800982a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982e:	45b8      	cmp	r8, r7
 8009830:	bf3a      	itte	cc
 8009832:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009836:	f1a6 0708 	subcc.w	r7, r6, #8
 800983a:	2300      	movcs	r3, #0
 800983c:	380b      	subs	r0, #11
 800983e:	d012      	beq.n	8009866 <__b2d+0x8a>
 8009840:	f1c0 0120 	rsb	r1, r0, #32
 8009844:	fa23 f401 	lsr.w	r4, r3, r1
 8009848:	4082      	lsls	r2, r0
 800984a:	4322      	orrs	r2, r4
 800984c:	4547      	cmp	r7, r8
 800984e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009852:	bf8c      	ite	hi
 8009854:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009858:	2200      	movls	r2, #0
 800985a:	4083      	lsls	r3, r0
 800985c:	40ca      	lsrs	r2, r1
 800985e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009862:	4313      	orrs	r3, r2
 8009864:	e7de      	b.n	8009824 <__b2d+0x48>
 8009866:	ea42 0501 	orr.w	r5, r2, r1
 800986a:	e7db      	b.n	8009824 <__b2d+0x48>
 800986c:	3ff00000 	.word	0x3ff00000

08009870 <__d2b>:
 8009870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009874:	460f      	mov	r7, r1
 8009876:	2101      	movs	r1, #1
 8009878:	ec59 8b10 	vmov	r8, r9, d0
 800987c:	4616      	mov	r6, r2
 800987e:	f7ff fc13 	bl	80090a8 <_Balloc>
 8009882:	4604      	mov	r4, r0
 8009884:	b930      	cbnz	r0, 8009894 <__d2b+0x24>
 8009886:	4602      	mov	r2, r0
 8009888:	4b23      	ldr	r3, [pc, #140]	@ (8009918 <__d2b+0xa8>)
 800988a:	4824      	ldr	r0, [pc, #144]	@ (800991c <__d2b+0xac>)
 800988c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009890:	f001 f996 	bl	800abc0 <__assert_func>
 8009894:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800989c:	b10d      	cbz	r5, 80098a2 <__d2b+0x32>
 800989e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	f1b8 0300 	subs.w	r3, r8, #0
 80098a8:	d023      	beq.n	80098f2 <__d2b+0x82>
 80098aa:	4668      	mov	r0, sp
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	f7ff fd0c 	bl	80092ca <__lo0bits>
 80098b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098b6:	b1d0      	cbz	r0, 80098ee <__d2b+0x7e>
 80098b8:	f1c0 0320 	rsb	r3, r0, #32
 80098bc:	fa02 f303 	lsl.w	r3, r2, r3
 80098c0:	430b      	orrs	r3, r1
 80098c2:	40c2      	lsrs	r2, r0
 80098c4:	6163      	str	r3, [r4, #20]
 80098c6:	9201      	str	r2, [sp, #4]
 80098c8:	9b01      	ldr	r3, [sp, #4]
 80098ca:	61a3      	str	r3, [r4, #24]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	bf0c      	ite	eq
 80098d0:	2201      	moveq	r2, #1
 80098d2:	2202      	movne	r2, #2
 80098d4:	6122      	str	r2, [r4, #16]
 80098d6:	b1a5      	cbz	r5, 8009902 <__d2b+0x92>
 80098d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098dc:	4405      	add	r5, r0
 80098de:	603d      	str	r5, [r7, #0]
 80098e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80098e4:	6030      	str	r0, [r6, #0]
 80098e6:	4620      	mov	r0, r4
 80098e8:	b003      	add	sp, #12
 80098ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ee:	6161      	str	r1, [r4, #20]
 80098f0:	e7ea      	b.n	80098c8 <__d2b+0x58>
 80098f2:	a801      	add	r0, sp, #4
 80098f4:	f7ff fce9 	bl	80092ca <__lo0bits>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	6163      	str	r3, [r4, #20]
 80098fc:	3020      	adds	r0, #32
 80098fe:	2201      	movs	r2, #1
 8009900:	e7e8      	b.n	80098d4 <__d2b+0x64>
 8009902:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009906:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800990a:	6038      	str	r0, [r7, #0]
 800990c:	6918      	ldr	r0, [r3, #16]
 800990e:	f7ff fcbd 	bl	800928c <__hi0bits>
 8009912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009916:	e7e5      	b.n	80098e4 <__d2b+0x74>
 8009918:	0800b9dd 	.word	0x0800b9dd
 800991c:	0800b9ee 	.word	0x0800b9ee

08009920 <__ratio>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	b085      	sub	sp, #20
 8009926:	e9cd 1000 	strd	r1, r0, [sp]
 800992a:	a902      	add	r1, sp, #8
 800992c:	f7ff ff56 	bl	80097dc <__b2d>
 8009930:	9800      	ldr	r0, [sp, #0]
 8009932:	a903      	add	r1, sp, #12
 8009934:	ec55 4b10 	vmov	r4, r5, d0
 8009938:	f7ff ff50 	bl	80097dc <__b2d>
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	6919      	ldr	r1, [r3, #16]
 8009940:	9b00      	ldr	r3, [sp, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	1ac9      	subs	r1, r1, r3
 8009946:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	ec5b ab10 	vmov	sl, fp, d0
 8009950:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfce      	itee	gt
 8009958:	462a      	movgt	r2, r5
 800995a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800995e:	465a      	movle	r2, fp
 8009960:	462f      	mov	r7, r5
 8009962:	46d9      	mov	r9, fp
 8009964:	bfcc      	ite	gt
 8009966:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800996a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800996e:	464b      	mov	r3, r9
 8009970:	4652      	mov	r2, sl
 8009972:	4620      	mov	r0, r4
 8009974:	4639      	mov	r1, r7
 8009976:	f7f6 ff69 	bl	800084c <__aeabi_ddiv>
 800997a:	ec41 0b10 	vmov	d0, r0, r1
 800997e:	b005      	add	sp, #20
 8009980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009984 <__copybits>:
 8009984:	3901      	subs	r1, #1
 8009986:	b570      	push	{r4, r5, r6, lr}
 8009988:	1149      	asrs	r1, r1, #5
 800998a:	6914      	ldr	r4, [r2, #16]
 800998c:	3101      	adds	r1, #1
 800998e:	f102 0314 	add.w	r3, r2, #20
 8009992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800999a:	1f05      	subs	r5, r0, #4
 800999c:	42a3      	cmp	r3, r4
 800999e:	d30c      	bcc.n	80099ba <__copybits+0x36>
 80099a0:	1aa3      	subs	r3, r4, r2
 80099a2:	3b11      	subs	r3, #17
 80099a4:	f023 0303 	bic.w	r3, r3, #3
 80099a8:	3211      	adds	r2, #17
 80099aa:	42a2      	cmp	r2, r4
 80099ac:	bf88      	it	hi
 80099ae:	2300      	movhi	r3, #0
 80099b0:	4418      	add	r0, r3
 80099b2:	2300      	movs	r3, #0
 80099b4:	4288      	cmp	r0, r1
 80099b6:	d305      	bcc.n	80099c4 <__copybits+0x40>
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80099be:	f845 6f04 	str.w	r6, [r5, #4]!
 80099c2:	e7eb      	b.n	800999c <__copybits+0x18>
 80099c4:	f840 3b04 	str.w	r3, [r0], #4
 80099c8:	e7f4      	b.n	80099b4 <__copybits+0x30>

080099ca <__any_on>:
 80099ca:	f100 0214 	add.w	r2, r0, #20
 80099ce:	6900      	ldr	r0, [r0, #16]
 80099d0:	114b      	asrs	r3, r1, #5
 80099d2:	4298      	cmp	r0, r3
 80099d4:	b510      	push	{r4, lr}
 80099d6:	db11      	blt.n	80099fc <__any_on+0x32>
 80099d8:	dd0a      	ble.n	80099f0 <__any_on+0x26>
 80099da:	f011 011f 	ands.w	r1, r1, #31
 80099de:	d007      	beq.n	80099f0 <__any_on+0x26>
 80099e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099e4:	fa24 f001 	lsr.w	r0, r4, r1
 80099e8:	fa00 f101 	lsl.w	r1, r0, r1
 80099ec:	428c      	cmp	r4, r1
 80099ee:	d10b      	bne.n	8009a08 <__any_on+0x3e>
 80099f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d803      	bhi.n	8009a00 <__any_on+0x36>
 80099f8:	2000      	movs	r0, #0
 80099fa:	bd10      	pop	{r4, pc}
 80099fc:	4603      	mov	r3, r0
 80099fe:	e7f7      	b.n	80099f0 <__any_on+0x26>
 8009a00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a04:	2900      	cmp	r1, #0
 8009a06:	d0f5      	beq.n	80099f4 <__any_on+0x2a>
 8009a08:	2001      	movs	r0, #1
 8009a0a:	e7f6      	b.n	80099fa <__any_on+0x30>

08009a0c <sulp>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	4604      	mov	r4, r0
 8009a10:	460d      	mov	r5, r1
 8009a12:	ec45 4b10 	vmov	d0, r4, r5
 8009a16:	4616      	mov	r6, r2
 8009a18:	f7ff feba 	bl	8009790 <__ulp>
 8009a1c:	ec51 0b10 	vmov	r0, r1, d0
 8009a20:	b17e      	cbz	r6, 8009a42 <sulp+0x36>
 8009a22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dd09      	ble.n	8009a42 <sulp+0x36>
 8009a2e:	051b      	lsls	r3, r3, #20
 8009a30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a34:	2400      	movs	r4, #0
 8009a36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	f7f6 fddb 	bl	80005f8 <__aeabi_dmul>
 8009a42:	ec41 0b10 	vmov	d0, r0, r1
 8009a46:	bd70      	pop	{r4, r5, r6, pc}

08009a48 <_strtod_l>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	b09f      	sub	sp, #124	@ 0x7c
 8009a4e:	460c      	mov	r4, r1
 8009a50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a52:	2200      	movs	r2, #0
 8009a54:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a56:	9005      	str	r0, [sp, #20]
 8009a58:	f04f 0a00 	mov.w	sl, #0
 8009a5c:	f04f 0b00 	mov.w	fp, #0
 8009a60:	460a      	mov	r2, r1
 8009a62:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a64:	7811      	ldrb	r1, [r2, #0]
 8009a66:	292b      	cmp	r1, #43	@ 0x2b
 8009a68:	d04a      	beq.n	8009b00 <_strtod_l+0xb8>
 8009a6a:	d838      	bhi.n	8009ade <_strtod_l+0x96>
 8009a6c:	290d      	cmp	r1, #13
 8009a6e:	d832      	bhi.n	8009ad6 <_strtod_l+0x8e>
 8009a70:	2908      	cmp	r1, #8
 8009a72:	d832      	bhi.n	8009ada <_strtod_l+0x92>
 8009a74:	2900      	cmp	r1, #0
 8009a76:	d03b      	beq.n	8009af0 <_strtod_l+0xa8>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a7e:	782a      	ldrb	r2, [r5, #0]
 8009a80:	2a30      	cmp	r2, #48	@ 0x30
 8009a82:	f040 80b3 	bne.w	8009bec <_strtod_l+0x1a4>
 8009a86:	786a      	ldrb	r2, [r5, #1]
 8009a88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a8c:	2a58      	cmp	r2, #88	@ 0x58
 8009a8e:	d16e      	bne.n	8009b6e <_strtod_l+0x126>
 8009a90:	9302      	str	r3, [sp, #8]
 8009a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a94:	9301      	str	r3, [sp, #4]
 8009a96:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	4a8e      	ldr	r2, [pc, #568]	@ (8009cd4 <_strtod_l+0x28c>)
 8009a9c:	9805      	ldr	r0, [sp, #20]
 8009a9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009aa0:	a919      	add	r1, sp, #100	@ 0x64
 8009aa2:	f001 f927 	bl	800acf4 <__gethex>
 8009aa6:	f010 060f 	ands.w	r6, r0, #15
 8009aaa:	4604      	mov	r4, r0
 8009aac:	d005      	beq.n	8009aba <_strtod_l+0x72>
 8009aae:	2e06      	cmp	r6, #6
 8009ab0:	d128      	bne.n	8009b04 <_strtod_l+0xbc>
 8009ab2:	3501      	adds	r5, #1
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 858e 	bne.w	800a5de <_strtod_l+0xb96>
 8009ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ac4:	b1cb      	cbz	r3, 8009afa <_strtod_l+0xb2>
 8009ac6:	4652      	mov	r2, sl
 8009ac8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009acc:	ec43 2b10 	vmov	d0, r2, r3
 8009ad0:	b01f      	add	sp, #124	@ 0x7c
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	2920      	cmp	r1, #32
 8009ad8:	d1ce      	bne.n	8009a78 <_strtod_l+0x30>
 8009ada:	3201      	adds	r2, #1
 8009adc:	e7c1      	b.n	8009a62 <_strtod_l+0x1a>
 8009ade:	292d      	cmp	r1, #45	@ 0x2d
 8009ae0:	d1ca      	bne.n	8009a78 <_strtod_l+0x30>
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ae6:	1c51      	adds	r1, r2, #1
 8009ae8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009aea:	7852      	ldrb	r2, [r2, #1]
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	d1c5      	bne.n	8009a7c <_strtod_l+0x34>
 8009af0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009af2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f040 8570 	bne.w	800a5da <_strtod_l+0xb92>
 8009afa:	4652      	mov	r2, sl
 8009afc:	465b      	mov	r3, fp
 8009afe:	e7e5      	b.n	8009acc <_strtod_l+0x84>
 8009b00:	2100      	movs	r1, #0
 8009b02:	e7ef      	b.n	8009ae4 <_strtod_l+0x9c>
 8009b04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b06:	b13a      	cbz	r2, 8009b18 <_strtod_l+0xd0>
 8009b08:	2135      	movs	r1, #53	@ 0x35
 8009b0a:	a81c      	add	r0, sp, #112	@ 0x70
 8009b0c:	f7ff ff3a 	bl	8009984 <__copybits>
 8009b10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b12:	9805      	ldr	r0, [sp, #20]
 8009b14:	f7ff fb08 	bl	8009128 <_Bfree>
 8009b18:	3e01      	subs	r6, #1
 8009b1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b1c:	2e04      	cmp	r6, #4
 8009b1e:	d806      	bhi.n	8009b2e <_strtod_l+0xe6>
 8009b20:	e8df f006 	tbb	[pc, r6]
 8009b24:	201d0314 	.word	0x201d0314
 8009b28:	14          	.byte	0x14
 8009b29:	00          	.byte	0x00
 8009b2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b2e:	05e1      	lsls	r1, r4, #23
 8009b30:	bf48      	it	mi
 8009b32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b3a:	0d1b      	lsrs	r3, r3, #20
 8009b3c:	051b      	lsls	r3, r3, #20
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1bb      	bne.n	8009aba <_strtod_l+0x72>
 8009b42:	f7fe fb2f 	bl	80081a4 <__errno>
 8009b46:	2322      	movs	r3, #34	@ 0x22
 8009b48:	6003      	str	r3, [r0, #0]
 8009b4a:	e7b6      	b.n	8009aba <_strtod_l+0x72>
 8009b4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009b50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b5c:	e7e7      	b.n	8009b2e <_strtod_l+0xe6>
 8009b5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009cdc <_strtod_l+0x294>
 8009b62:	e7e4      	b.n	8009b2e <_strtod_l+0xe6>
 8009b64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b68:	f04f 3aff 	mov.w	sl, #4294967295
 8009b6c:	e7df      	b.n	8009b2e <_strtod_l+0xe6>
 8009b6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	2b30      	cmp	r3, #48	@ 0x30
 8009b78:	d0f9      	beq.n	8009b6e <_strtod_l+0x126>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d09d      	beq.n	8009aba <_strtod_l+0x72>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b84:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b86:	2300      	movs	r3, #0
 8009b88:	9308      	str	r3, [sp, #32]
 8009b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b8c:	461f      	mov	r7, r3
 8009b8e:	220a      	movs	r2, #10
 8009b90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b92:	7805      	ldrb	r5, [r0, #0]
 8009b94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b98:	b2d9      	uxtb	r1, r3
 8009b9a:	2909      	cmp	r1, #9
 8009b9c:	d928      	bls.n	8009bf0 <_strtod_l+0x1a8>
 8009b9e:	494e      	ldr	r1, [pc, #312]	@ (8009cd8 <_strtod_l+0x290>)
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f000 ffd5 	bl	800ab50 <strncmp>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d032      	beq.n	8009c10 <_strtod_l+0x1c8>
 8009baa:	2000      	movs	r0, #0
 8009bac:	462a      	mov	r2, r5
 8009bae:	4681      	mov	r9, r0
 8009bb0:	463d      	mov	r5, r7
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2a65      	cmp	r2, #101	@ 0x65
 8009bb6:	d001      	beq.n	8009bbc <_strtod_l+0x174>
 8009bb8:	2a45      	cmp	r2, #69	@ 0x45
 8009bba:	d114      	bne.n	8009be6 <_strtod_l+0x19e>
 8009bbc:	b91d      	cbnz	r5, 8009bc6 <_strtod_l+0x17e>
 8009bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc0:	4302      	orrs	r2, r0
 8009bc2:	d095      	beq.n	8009af0 <_strtod_l+0xa8>
 8009bc4:	2500      	movs	r5, #0
 8009bc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009bc8:	1c62      	adds	r2, r4, #1
 8009bca:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bcc:	7862      	ldrb	r2, [r4, #1]
 8009bce:	2a2b      	cmp	r2, #43	@ 0x2b
 8009bd0:	d077      	beq.n	8009cc2 <_strtod_l+0x27a>
 8009bd2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009bd4:	d07b      	beq.n	8009cce <_strtod_l+0x286>
 8009bd6:	f04f 0c00 	mov.w	ip, #0
 8009bda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009bde:	2909      	cmp	r1, #9
 8009be0:	f240 8082 	bls.w	8009ce8 <_strtod_l+0x2a0>
 8009be4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009be6:	f04f 0800 	mov.w	r8, #0
 8009bea:	e0a2      	b.n	8009d32 <_strtod_l+0x2ea>
 8009bec:	2300      	movs	r3, #0
 8009bee:	e7c7      	b.n	8009b80 <_strtod_l+0x138>
 8009bf0:	2f08      	cmp	r7, #8
 8009bf2:	bfd5      	itete	le
 8009bf4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009bf6:	9908      	ldrgt	r1, [sp, #32]
 8009bf8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009bfc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c00:	f100 0001 	add.w	r0, r0, #1
 8009c04:	bfd4      	ite	le
 8009c06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009c08:	9308      	strgt	r3, [sp, #32]
 8009c0a:	3701      	adds	r7, #1
 8009c0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c0e:	e7bf      	b.n	8009b90 <_strtod_l+0x148>
 8009c10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c16:	785a      	ldrb	r2, [r3, #1]
 8009c18:	b37f      	cbz	r7, 8009c7a <_strtod_l+0x232>
 8009c1a:	4681      	mov	r9, r0
 8009c1c:	463d      	mov	r5, r7
 8009c1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c22:	2b09      	cmp	r3, #9
 8009c24:	d912      	bls.n	8009c4c <_strtod_l+0x204>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e7c4      	b.n	8009bb4 <_strtod_l+0x16c>
 8009c2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c30:	785a      	ldrb	r2, [r3, #1]
 8009c32:	3001      	adds	r0, #1
 8009c34:	2a30      	cmp	r2, #48	@ 0x30
 8009c36:	d0f8      	beq.n	8009c2a <_strtod_l+0x1e2>
 8009c38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	f200 84d3 	bhi.w	800a5e8 <_strtod_l+0xba0>
 8009c42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c44:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c46:	4681      	mov	r9, r0
 8009c48:	2000      	movs	r0, #0
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	3a30      	subs	r2, #48	@ 0x30
 8009c4e:	f100 0301 	add.w	r3, r0, #1
 8009c52:	d02a      	beq.n	8009caa <_strtod_l+0x262>
 8009c54:	4499      	add	r9, r3
 8009c56:	eb00 0c05 	add.w	ip, r0, r5
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	210a      	movs	r1, #10
 8009c5e:	4563      	cmp	r3, ip
 8009c60:	d10d      	bne.n	8009c7e <_strtod_l+0x236>
 8009c62:	1c69      	adds	r1, r5, #1
 8009c64:	4401      	add	r1, r0
 8009c66:	4428      	add	r0, r5
 8009c68:	2808      	cmp	r0, #8
 8009c6a:	dc16      	bgt.n	8009c9a <_strtod_l+0x252>
 8009c6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c6e:	230a      	movs	r3, #10
 8009c70:	fb03 2300 	mla	r3, r3, r0, r2
 8009c74:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c76:	2300      	movs	r3, #0
 8009c78:	e018      	b.n	8009cac <_strtod_l+0x264>
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	e7da      	b.n	8009c34 <_strtod_l+0x1ec>
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	f103 0301 	add.w	r3, r3, #1
 8009c84:	dc03      	bgt.n	8009c8e <_strtod_l+0x246>
 8009c86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c88:	434e      	muls	r6, r1
 8009c8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c8c:	e7e7      	b.n	8009c5e <_strtod_l+0x216>
 8009c8e:	2b10      	cmp	r3, #16
 8009c90:	bfde      	ittt	le
 8009c92:	9e08      	ldrle	r6, [sp, #32]
 8009c94:	434e      	mulle	r6, r1
 8009c96:	9608      	strle	r6, [sp, #32]
 8009c98:	e7e1      	b.n	8009c5e <_strtod_l+0x216>
 8009c9a:	280f      	cmp	r0, #15
 8009c9c:	dceb      	bgt.n	8009c76 <_strtod_l+0x22e>
 8009c9e:	9808      	ldr	r0, [sp, #32]
 8009ca0:	230a      	movs	r3, #10
 8009ca2:	fb03 2300 	mla	r3, r3, r0, r2
 8009ca6:	9308      	str	r3, [sp, #32]
 8009ca8:	e7e5      	b.n	8009c76 <_strtod_l+0x22e>
 8009caa:	4629      	mov	r1, r5
 8009cac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cae:	1c50      	adds	r0, r2, #1
 8009cb0:	9019      	str	r0, [sp, #100]	@ 0x64
 8009cb2:	7852      	ldrb	r2, [r2, #1]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	e7b1      	b.n	8009c1e <_strtod_l+0x1d6>
 8009cba:	f04f 0900 	mov.w	r9, #0
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e77d      	b.n	8009bbe <_strtod_l+0x176>
 8009cc2:	f04f 0c00 	mov.w	ip, #0
 8009cc6:	1ca2      	adds	r2, r4, #2
 8009cc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cca:	78a2      	ldrb	r2, [r4, #2]
 8009ccc:	e785      	b.n	8009bda <_strtod_l+0x192>
 8009cce:	f04f 0c01 	mov.w	ip, #1
 8009cd2:	e7f8      	b.n	8009cc6 <_strtod_l+0x27e>
 8009cd4:	0800bb60 	.word	0x0800bb60
 8009cd8:	0800bb48 	.word	0x0800bb48
 8009cdc:	7ff00000 	.word	0x7ff00000
 8009ce0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ce2:	1c51      	adds	r1, r2, #1
 8009ce4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009ce6:	7852      	ldrb	r2, [r2, #1]
 8009ce8:	2a30      	cmp	r2, #48	@ 0x30
 8009cea:	d0f9      	beq.n	8009ce0 <_strtod_l+0x298>
 8009cec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009cf0:	2908      	cmp	r1, #8
 8009cf2:	f63f af78 	bhi.w	8009be6 <_strtod_l+0x19e>
 8009cf6:	3a30      	subs	r2, #48	@ 0x30
 8009cf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009cfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009cfe:	f04f 080a 	mov.w	r8, #10
 8009d02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d04:	1c56      	adds	r6, r2, #1
 8009d06:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d08:	7852      	ldrb	r2, [r2, #1]
 8009d0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d0e:	f1be 0f09 	cmp.w	lr, #9
 8009d12:	d939      	bls.n	8009d88 <_strtod_l+0x340>
 8009d14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d16:	1a76      	subs	r6, r6, r1
 8009d18:	2e08      	cmp	r6, #8
 8009d1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009d1e:	dc03      	bgt.n	8009d28 <_strtod_l+0x2e0>
 8009d20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d22:	4588      	cmp	r8, r1
 8009d24:	bfa8      	it	ge
 8009d26:	4688      	movge	r8, r1
 8009d28:	f1bc 0f00 	cmp.w	ip, #0
 8009d2c:	d001      	beq.n	8009d32 <_strtod_l+0x2ea>
 8009d2e:	f1c8 0800 	rsb	r8, r8, #0
 8009d32:	2d00      	cmp	r5, #0
 8009d34:	d14e      	bne.n	8009dd4 <_strtod_l+0x38c>
 8009d36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d38:	4308      	orrs	r0, r1
 8009d3a:	f47f aebe 	bne.w	8009aba <_strtod_l+0x72>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f47f aed6 	bne.w	8009af0 <_strtod_l+0xa8>
 8009d44:	2a69      	cmp	r2, #105	@ 0x69
 8009d46:	d028      	beq.n	8009d9a <_strtod_l+0x352>
 8009d48:	dc25      	bgt.n	8009d96 <_strtod_l+0x34e>
 8009d4a:	2a49      	cmp	r2, #73	@ 0x49
 8009d4c:	d025      	beq.n	8009d9a <_strtod_l+0x352>
 8009d4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d50:	f47f aece 	bne.w	8009af0 <_strtod_l+0xa8>
 8009d54:	499b      	ldr	r1, [pc, #620]	@ (8009fc4 <_strtod_l+0x57c>)
 8009d56:	a819      	add	r0, sp, #100	@ 0x64
 8009d58:	f001 f9ee 	bl	800b138 <__match>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	f43f aec7 	beq.w	8009af0 <_strtod_l+0xa8>
 8009d62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b28      	cmp	r3, #40	@ 0x28
 8009d68:	d12e      	bne.n	8009dc8 <_strtod_l+0x380>
 8009d6a:	4997      	ldr	r1, [pc, #604]	@ (8009fc8 <_strtod_l+0x580>)
 8009d6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d6e:	a819      	add	r0, sp, #100	@ 0x64
 8009d70:	f001 f9f6 	bl	800b160 <__hexnan>
 8009d74:	2805      	cmp	r0, #5
 8009d76:	d127      	bne.n	8009dc8 <_strtod_l+0x380>
 8009d78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d86:	e698      	b.n	8009aba <_strtod_l+0x72>
 8009d88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d8a:	fb08 2101 	mla	r1, r8, r1, r2
 8009d8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d92:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d94:	e7b5      	b.n	8009d02 <_strtod_l+0x2ba>
 8009d96:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d98:	e7da      	b.n	8009d50 <_strtod_l+0x308>
 8009d9a:	498c      	ldr	r1, [pc, #560]	@ (8009fcc <_strtod_l+0x584>)
 8009d9c:	a819      	add	r0, sp, #100	@ 0x64
 8009d9e:	f001 f9cb 	bl	800b138 <__match>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	f43f aea4 	beq.w	8009af0 <_strtod_l+0xa8>
 8009da8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009daa:	4989      	ldr	r1, [pc, #548]	@ (8009fd0 <_strtod_l+0x588>)
 8009dac:	3b01      	subs	r3, #1
 8009dae:	a819      	add	r0, sp, #100	@ 0x64
 8009db0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009db2:	f001 f9c1 	bl	800b138 <__match>
 8009db6:	b910      	cbnz	r0, 8009dbe <_strtod_l+0x376>
 8009db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dba:	3301      	adds	r3, #1
 8009dbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8009dbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009fe0 <_strtod_l+0x598>
 8009dc2:	f04f 0a00 	mov.w	sl, #0
 8009dc6:	e678      	b.n	8009aba <_strtod_l+0x72>
 8009dc8:	4882      	ldr	r0, [pc, #520]	@ (8009fd4 <_strtod_l+0x58c>)
 8009dca:	f000 fef1 	bl	800abb0 <nan>
 8009dce:	ec5b ab10 	vmov	sl, fp, d0
 8009dd2:	e672      	b.n	8009aba <_strtod_l+0x72>
 8009dd4:	eba8 0309 	sub.w	r3, r8, r9
 8009dd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ddc:	2f00      	cmp	r7, #0
 8009dde:	bf08      	it	eq
 8009de0:	462f      	moveq	r7, r5
 8009de2:	2d10      	cmp	r5, #16
 8009de4:	462c      	mov	r4, r5
 8009de6:	bfa8      	it	ge
 8009de8:	2410      	movge	r4, #16
 8009dea:	f7f6 fb8b 	bl	8000504 <__aeabi_ui2d>
 8009dee:	2d09      	cmp	r5, #9
 8009df0:	4682      	mov	sl, r0
 8009df2:	468b      	mov	fp, r1
 8009df4:	dc13      	bgt.n	8009e1e <_strtod_l+0x3d6>
 8009df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f43f ae5e 	beq.w	8009aba <_strtod_l+0x72>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	dd78      	ble.n	8009ef4 <_strtod_l+0x4ac>
 8009e02:	2b16      	cmp	r3, #22
 8009e04:	dc5f      	bgt.n	8009ec6 <_strtod_l+0x47e>
 8009e06:	4974      	ldr	r1, [pc, #464]	@ (8009fd8 <_strtod_l+0x590>)
 8009e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e10:	4652      	mov	r2, sl
 8009e12:	465b      	mov	r3, fp
 8009e14:	f7f6 fbf0 	bl	80005f8 <__aeabi_dmul>
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	e64d      	b.n	8009aba <_strtod_l+0x72>
 8009e1e:	4b6e      	ldr	r3, [pc, #440]	@ (8009fd8 <_strtod_l+0x590>)
 8009e20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009e28:	f7f6 fbe6 	bl	80005f8 <__aeabi_dmul>
 8009e2c:	4682      	mov	sl, r0
 8009e2e:	9808      	ldr	r0, [sp, #32]
 8009e30:	468b      	mov	fp, r1
 8009e32:	f7f6 fb67 	bl	8000504 <__aeabi_ui2d>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4650      	mov	r0, sl
 8009e3c:	4659      	mov	r1, fp
 8009e3e:	f7f6 fa25 	bl	800028c <__adddf3>
 8009e42:	2d0f      	cmp	r5, #15
 8009e44:	4682      	mov	sl, r0
 8009e46:	468b      	mov	fp, r1
 8009e48:	ddd5      	ble.n	8009df6 <_strtod_l+0x3ae>
 8009e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4c:	1b2c      	subs	r4, r5, r4
 8009e4e:	441c      	add	r4, r3
 8009e50:	2c00      	cmp	r4, #0
 8009e52:	f340 8096 	ble.w	8009f82 <_strtod_l+0x53a>
 8009e56:	f014 030f 	ands.w	r3, r4, #15
 8009e5a:	d00a      	beq.n	8009e72 <_strtod_l+0x42a>
 8009e5c:	495e      	ldr	r1, [pc, #376]	@ (8009fd8 <_strtod_l+0x590>)
 8009e5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e62:	4652      	mov	r2, sl
 8009e64:	465b      	mov	r3, fp
 8009e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e6a:	f7f6 fbc5 	bl	80005f8 <__aeabi_dmul>
 8009e6e:	4682      	mov	sl, r0
 8009e70:	468b      	mov	fp, r1
 8009e72:	f034 040f 	bics.w	r4, r4, #15
 8009e76:	d073      	beq.n	8009f60 <_strtod_l+0x518>
 8009e78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e7c:	dd48      	ble.n	8009f10 <_strtod_l+0x4c8>
 8009e7e:	2400      	movs	r4, #0
 8009e80:	46a0      	mov	r8, r4
 8009e82:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e84:	46a1      	mov	r9, r4
 8009e86:	9a05      	ldr	r2, [sp, #20]
 8009e88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009fe0 <_strtod_l+0x598>
 8009e8c:	2322      	movs	r3, #34	@ 0x22
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	f04f 0a00 	mov.w	sl, #0
 8009e94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f43f ae0f 	beq.w	8009aba <_strtod_l+0x72>
 8009e9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e9e:	9805      	ldr	r0, [sp, #20]
 8009ea0:	f7ff f942 	bl	8009128 <_Bfree>
 8009ea4:	9805      	ldr	r0, [sp, #20]
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7ff f93e 	bl	8009128 <_Bfree>
 8009eac:	9805      	ldr	r0, [sp, #20]
 8009eae:	4641      	mov	r1, r8
 8009eb0:	f7ff f93a 	bl	8009128 <_Bfree>
 8009eb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009eb6:	9805      	ldr	r0, [sp, #20]
 8009eb8:	f7ff f936 	bl	8009128 <_Bfree>
 8009ebc:	9805      	ldr	r0, [sp, #20]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	f7ff f932 	bl	8009128 <_Bfree>
 8009ec4:	e5f9      	b.n	8009aba <_strtod_l+0x72>
 8009ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ec8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	dbbc      	blt.n	8009e4a <_strtod_l+0x402>
 8009ed0:	4c41      	ldr	r4, [pc, #260]	@ (8009fd8 <_strtod_l+0x590>)
 8009ed2:	f1c5 050f 	rsb	r5, r5, #15
 8009ed6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee2:	f7f6 fb89 	bl	80005f8 <__aeabi_dmul>
 8009ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee8:	1b5d      	subs	r5, r3, r5
 8009eea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009eee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ef2:	e78f      	b.n	8009e14 <_strtod_l+0x3cc>
 8009ef4:	3316      	adds	r3, #22
 8009ef6:	dba8      	blt.n	8009e4a <_strtod_l+0x402>
 8009ef8:	4b37      	ldr	r3, [pc, #220]	@ (8009fd8 <_strtod_l+0x590>)
 8009efa:	eba9 0808 	sub.w	r8, r9, r8
 8009efe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f02:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f06:	4650      	mov	r0, sl
 8009f08:	4659      	mov	r1, fp
 8009f0a:	f7f6 fc9f 	bl	800084c <__aeabi_ddiv>
 8009f0e:	e783      	b.n	8009e18 <_strtod_l+0x3d0>
 8009f10:	4b32      	ldr	r3, [pc, #200]	@ (8009fdc <_strtod_l+0x594>)
 8009f12:	9308      	str	r3, [sp, #32]
 8009f14:	2300      	movs	r3, #0
 8009f16:	1124      	asrs	r4, r4, #4
 8009f18:	4650      	mov	r0, sl
 8009f1a:	4659      	mov	r1, fp
 8009f1c:	461e      	mov	r6, r3
 8009f1e:	2c01      	cmp	r4, #1
 8009f20:	dc21      	bgt.n	8009f66 <_strtod_l+0x51e>
 8009f22:	b10b      	cbz	r3, 8009f28 <_strtod_l+0x4e0>
 8009f24:	4682      	mov	sl, r0
 8009f26:	468b      	mov	fp, r1
 8009f28:	492c      	ldr	r1, [pc, #176]	@ (8009fdc <_strtod_l+0x594>)
 8009f2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009f32:	4652      	mov	r2, sl
 8009f34:	465b      	mov	r3, fp
 8009f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f3a:	f7f6 fb5d 	bl	80005f8 <__aeabi_dmul>
 8009f3e:	4b28      	ldr	r3, [pc, #160]	@ (8009fe0 <_strtod_l+0x598>)
 8009f40:	460a      	mov	r2, r1
 8009f42:	400b      	ands	r3, r1
 8009f44:	4927      	ldr	r1, [pc, #156]	@ (8009fe4 <_strtod_l+0x59c>)
 8009f46:	428b      	cmp	r3, r1
 8009f48:	4682      	mov	sl, r0
 8009f4a:	d898      	bhi.n	8009e7e <_strtod_l+0x436>
 8009f4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009f50:	428b      	cmp	r3, r1
 8009f52:	bf86      	itte	hi
 8009f54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009fe8 <_strtod_l+0x5a0>
 8009f58:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f60:	2300      	movs	r3, #0
 8009f62:	9308      	str	r3, [sp, #32]
 8009f64:	e07a      	b.n	800a05c <_strtod_l+0x614>
 8009f66:	07e2      	lsls	r2, r4, #31
 8009f68:	d505      	bpl.n	8009f76 <_strtod_l+0x52e>
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 fb42 	bl	80005f8 <__aeabi_dmul>
 8009f74:	2301      	movs	r3, #1
 8009f76:	9a08      	ldr	r2, [sp, #32]
 8009f78:	3208      	adds	r2, #8
 8009f7a:	3601      	adds	r6, #1
 8009f7c:	1064      	asrs	r4, r4, #1
 8009f7e:	9208      	str	r2, [sp, #32]
 8009f80:	e7cd      	b.n	8009f1e <_strtod_l+0x4d6>
 8009f82:	d0ed      	beq.n	8009f60 <_strtod_l+0x518>
 8009f84:	4264      	negs	r4, r4
 8009f86:	f014 020f 	ands.w	r2, r4, #15
 8009f8a:	d00a      	beq.n	8009fa2 <_strtod_l+0x55a>
 8009f8c:	4b12      	ldr	r3, [pc, #72]	@ (8009fd8 <_strtod_l+0x590>)
 8009f8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f92:	4650      	mov	r0, sl
 8009f94:	4659      	mov	r1, fp
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	f7f6 fc57 	bl	800084c <__aeabi_ddiv>
 8009f9e:	4682      	mov	sl, r0
 8009fa0:	468b      	mov	fp, r1
 8009fa2:	1124      	asrs	r4, r4, #4
 8009fa4:	d0dc      	beq.n	8009f60 <_strtod_l+0x518>
 8009fa6:	2c1f      	cmp	r4, #31
 8009fa8:	dd20      	ble.n	8009fec <_strtod_l+0x5a4>
 8009faa:	2400      	movs	r4, #0
 8009fac:	46a0      	mov	r8, r4
 8009fae:	940a      	str	r4, [sp, #40]	@ 0x28
 8009fb0:	46a1      	mov	r9, r4
 8009fb2:	9a05      	ldr	r2, [sp, #20]
 8009fb4:	2322      	movs	r3, #34	@ 0x22
 8009fb6:	f04f 0a00 	mov.w	sl, #0
 8009fba:	f04f 0b00 	mov.w	fp, #0
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	e768      	b.n	8009e94 <_strtod_l+0x44c>
 8009fc2:	bf00      	nop
 8009fc4:	0800b935 	.word	0x0800b935
 8009fc8:	0800bb4c 	.word	0x0800bb4c
 8009fcc:	0800b92d 	.word	0x0800b92d
 8009fd0:	0800b964 	.word	0x0800b964
 8009fd4:	0800bcf5 	.word	0x0800bcf5
 8009fd8:	0800ba80 	.word	0x0800ba80
 8009fdc:	0800ba58 	.word	0x0800ba58
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	7ca00000 	.word	0x7ca00000
 8009fe8:	7fefffff 	.word	0x7fefffff
 8009fec:	f014 0310 	ands.w	r3, r4, #16
 8009ff0:	bf18      	it	ne
 8009ff2:	236a      	movne	r3, #106	@ 0x6a
 8009ff4:	4ea9      	ldr	r6, [pc, #676]	@ (800a29c <_strtod_l+0x854>)
 8009ff6:	9308      	str	r3, [sp, #32]
 8009ff8:	4650      	mov	r0, sl
 8009ffa:	4659      	mov	r1, fp
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	07e2      	lsls	r2, r4, #31
 800a000:	d504      	bpl.n	800a00c <_strtod_l+0x5c4>
 800a002:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a006:	f7f6 faf7 	bl	80005f8 <__aeabi_dmul>
 800a00a:	2301      	movs	r3, #1
 800a00c:	1064      	asrs	r4, r4, #1
 800a00e:	f106 0608 	add.w	r6, r6, #8
 800a012:	d1f4      	bne.n	8009ffe <_strtod_l+0x5b6>
 800a014:	b10b      	cbz	r3, 800a01a <_strtod_l+0x5d2>
 800a016:	4682      	mov	sl, r0
 800a018:	468b      	mov	fp, r1
 800a01a:	9b08      	ldr	r3, [sp, #32]
 800a01c:	b1b3      	cbz	r3, 800a04c <_strtod_l+0x604>
 800a01e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a022:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a026:	2b00      	cmp	r3, #0
 800a028:	4659      	mov	r1, fp
 800a02a:	dd0f      	ble.n	800a04c <_strtod_l+0x604>
 800a02c:	2b1f      	cmp	r3, #31
 800a02e:	dd55      	ble.n	800a0dc <_strtod_l+0x694>
 800a030:	2b34      	cmp	r3, #52	@ 0x34
 800a032:	bfde      	ittt	le
 800a034:	f04f 33ff 	movle.w	r3, #4294967295
 800a038:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a03c:	4093      	lslle	r3, r2
 800a03e:	f04f 0a00 	mov.w	sl, #0
 800a042:	bfcc      	ite	gt
 800a044:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a048:	ea03 0b01 	andle.w	fp, r3, r1
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	f7f6 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d1a6      	bne.n	8009faa <_strtod_l+0x562>
 800a05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a062:	9805      	ldr	r0, [sp, #20]
 800a064:	462b      	mov	r3, r5
 800a066:	463a      	mov	r2, r7
 800a068:	f7ff f8c6 	bl	80091f8 <__s2b>
 800a06c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a06e:	2800      	cmp	r0, #0
 800a070:	f43f af05 	beq.w	8009e7e <_strtod_l+0x436>
 800a074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a076:	2a00      	cmp	r2, #0
 800a078:	eba9 0308 	sub.w	r3, r9, r8
 800a07c:	bfa8      	it	ge
 800a07e:	2300      	movge	r3, #0
 800a080:	9312      	str	r3, [sp, #72]	@ 0x48
 800a082:	2400      	movs	r4, #0
 800a084:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a088:	9316      	str	r3, [sp, #88]	@ 0x58
 800a08a:	46a0      	mov	r8, r4
 800a08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a08e:	9805      	ldr	r0, [sp, #20]
 800a090:	6859      	ldr	r1, [r3, #4]
 800a092:	f7ff f809 	bl	80090a8 <_Balloc>
 800a096:	4681      	mov	r9, r0
 800a098:	2800      	cmp	r0, #0
 800a09a:	f43f aef4 	beq.w	8009e86 <_strtod_l+0x43e>
 800a09e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0a0:	691a      	ldr	r2, [r3, #16]
 800a0a2:	3202      	adds	r2, #2
 800a0a4:	f103 010c 	add.w	r1, r3, #12
 800a0a8:	0092      	lsls	r2, r2, #2
 800a0aa:	300c      	adds	r0, #12
 800a0ac:	f000 fd72 	bl	800ab94 <memcpy>
 800a0b0:	ec4b ab10 	vmov	d0, sl, fp
 800a0b4:	9805      	ldr	r0, [sp, #20]
 800a0b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a0ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a0be:	f7ff fbd7 	bl	8009870 <__d2b>
 800a0c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	f43f aede 	beq.w	8009e86 <_strtod_l+0x43e>
 800a0ca:	9805      	ldr	r0, [sp, #20]
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	f7ff f929 	bl	8009324 <__i2b>
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	b948      	cbnz	r0, 800a0ea <_strtod_l+0x6a2>
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	e6d4      	b.n	8009e86 <_strtod_l+0x43e>
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e4:	ea03 0a0a 	and.w	sl, r3, sl
 800a0e8:	e7b0      	b.n	800a04c <_strtod_l+0x604>
 800a0ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a0ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	bfab      	itete	ge
 800a0f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a0f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a0f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a0f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a0fa:	bfac      	ite	ge
 800a0fc:	18ef      	addge	r7, r5, r3
 800a0fe:	1b5e      	sublt	r6, r3, r5
 800a100:	9b08      	ldr	r3, [sp, #32]
 800a102:	1aed      	subs	r5, r5, r3
 800a104:	4415      	add	r5, r2
 800a106:	4b66      	ldr	r3, [pc, #408]	@ (800a2a0 <_strtod_l+0x858>)
 800a108:	3d01      	subs	r5, #1
 800a10a:	429d      	cmp	r5, r3
 800a10c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a110:	da50      	bge.n	800a1b4 <_strtod_l+0x76c>
 800a112:	1b5b      	subs	r3, r3, r5
 800a114:	2b1f      	cmp	r3, #31
 800a116:	eba2 0203 	sub.w	r2, r2, r3
 800a11a:	f04f 0101 	mov.w	r1, #1
 800a11e:	dc3d      	bgt.n	800a19c <_strtod_l+0x754>
 800a120:	fa01 f303 	lsl.w	r3, r1, r3
 800a124:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a126:	2300      	movs	r3, #0
 800a128:	9310      	str	r3, [sp, #64]	@ 0x40
 800a12a:	18bd      	adds	r5, r7, r2
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	42af      	cmp	r7, r5
 800a130:	4416      	add	r6, r2
 800a132:	441e      	add	r6, r3
 800a134:	463b      	mov	r3, r7
 800a136:	bfa8      	it	ge
 800a138:	462b      	movge	r3, r5
 800a13a:	42b3      	cmp	r3, r6
 800a13c:	bfa8      	it	ge
 800a13e:	4633      	movge	r3, r6
 800a140:	2b00      	cmp	r3, #0
 800a142:	bfc2      	ittt	gt
 800a144:	1aed      	subgt	r5, r5, r3
 800a146:	1af6      	subgt	r6, r6, r3
 800a148:	1aff      	subgt	r7, r7, r3
 800a14a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd16      	ble.n	800a17e <_strtod_l+0x736>
 800a150:	4641      	mov	r1, r8
 800a152:	9805      	ldr	r0, [sp, #20]
 800a154:	461a      	mov	r2, r3
 800a156:	f7ff f9a5 	bl	80094a4 <__pow5mult>
 800a15a:	4680      	mov	r8, r0
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d0ba      	beq.n	800a0d6 <_strtod_l+0x68e>
 800a160:	4601      	mov	r1, r0
 800a162:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a164:	9805      	ldr	r0, [sp, #20]
 800a166:	f7ff f8f3 	bl	8009350 <__multiply>
 800a16a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f43f ae8a 	beq.w	8009e86 <_strtod_l+0x43e>
 800a172:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a174:	9805      	ldr	r0, [sp, #20]
 800a176:	f7fe ffd7 	bl	8009128 <_Bfree>
 800a17a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a17c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a17e:	2d00      	cmp	r5, #0
 800a180:	dc1d      	bgt.n	800a1be <_strtod_l+0x776>
 800a182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd23      	ble.n	800a1d0 <_strtod_l+0x788>
 800a188:	4649      	mov	r1, r9
 800a18a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a18c:	9805      	ldr	r0, [sp, #20]
 800a18e:	f7ff f989 	bl	80094a4 <__pow5mult>
 800a192:	4681      	mov	r9, r0
 800a194:	b9e0      	cbnz	r0, 800a1d0 <_strtod_l+0x788>
 800a196:	f04f 0900 	mov.w	r9, #0
 800a19a:	e674      	b.n	8009e86 <_strtod_l+0x43e>
 800a19c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a1a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a1a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a1a8:	35e2      	adds	r5, #226	@ 0xe2
 800a1aa:	fa01 f305 	lsl.w	r3, r1, r5
 800a1ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a1b2:	e7ba      	b.n	800a12a <_strtod_l+0x6e2>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1bc:	e7b5      	b.n	800a12a <_strtod_l+0x6e2>
 800a1be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1c0:	9805      	ldr	r0, [sp, #20]
 800a1c2:	462a      	mov	r2, r5
 800a1c4:	f7ff f9c8 	bl	8009558 <__lshift>
 800a1c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d1d9      	bne.n	800a182 <_strtod_l+0x73a>
 800a1ce:	e65a      	b.n	8009e86 <_strtod_l+0x43e>
 800a1d0:	2e00      	cmp	r6, #0
 800a1d2:	dd07      	ble.n	800a1e4 <_strtod_l+0x79c>
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	9805      	ldr	r0, [sp, #20]
 800a1d8:	4632      	mov	r2, r6
 800a1da:	f7ff f9bd 	bl	8009558 <__lshift>
 800a1de:	4681      	mov	r9, r0
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d0d8      	beq.n	800a196 <_strtod_l+0x74e>
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	dd08      	ble.n	800a1fa <_strtod_l+0x7b2>
 800a1e8:	4641      	mov	r1, r8
 800a1ea:	9805      	ldr	r0, [sp, #20]
 800a1ec:	463a      	mov	r2, r7
 800a1ee:	f7ff f9b3 	bl	8009558 <__lshift>
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f43f ae46 	beq.w	8009e86 <_strtod_l+0x43e>
 800a1fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1fc:	9805      	ldr	r0, [sp, #20]
 800a1fe:	464a      	mov	r2, r9
 800a200:	f7ff fa32 	bl	8009668 <__mdiff>
 800a204:	4604      	mov	r4, r0
 800a206:	2800      	cmp	r0, #0
 800a208:	f43f ae3d 	beq.w	8009e86 <_strtod_l+0x43e>
 800a20c:	68c3      	ldr	r3, [r0, #12]
 800a20e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a210:	2300      	movs	r3, #0
 800a212:	60c3      	str	r3, [r0, #12]
 800a214:	4641      	mov	r1, r8
 800a216:	f7ff fa0b 	bl	8009630 <__mcmp>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	da46      	bge.n	800a2ac <_strtod_l+0x864>
 800a21e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a220:	ea53 030a 	orrs.w	r3, r3, sl
 800a224:	d16c      	bne.n	800a300 <_strtod_l+0x8b8>
 800a226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d168      	bne.n	800a300 <_strtod_l+0x8b8>
 800a22e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a232:	0d1b      	lsrs	r3, r3, #20
 800a234:	051b      	lsls	r3, r3, #20
 800a236:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a23a:	d961      	bls.n	800a300 <_strtod_l+0x8b8>
 800a23c:	6963      	ldr	r3, [r4, #20]
 800a23e:	b913      	cbnz	r3, 800a246 <_strtod_l+0x7fe>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	2b01      	cmp	r3, #1
 800a244:	dd5c      	ble.n	800a300 <_strtod_l+0x8b8>
 800a246:	4621      	mov	r1, r4
 800a248:	2201      	movs	r2, #1
 800a24a:	9805      	ldr	r0, [sp, #20]
 800a24c:	f7ff f984 	bl	8009558 <__lshift>
 800a250:	4641      	mov	r1, r8
 800a252:	4604      	mov	r4, r0
 800a254:	f7ff f9ec 	bl	8009630 <__mcmp>
 800a258:	2800      	cmp	r0, #0
 800a25a:	dd51      	ble.n	800a300 <_strtod_l+0x8b8>
 800a25c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a260:	9a08      	ldr	r2, [sp, #32]
 800a262:	0d1b      	lsrs	r3, r3, #20
 800a264:	051b      	lsls	r3, r3, #20
 800a266:	2a00      	cmp	r2, #0
 800a268:	d06b      	beq.n	800a342 <_strtod_l+0x8fa>
 800a26a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a26e:	d868      	bhi.n	800a342 <_strtod_l+0x8fa>
 800a270:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a274:	f67f ae9d 	bls.w	8009fb2 <_strtod_l+0x56a>
 800a278:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a4 <_strtod_l+0x85c>)
 800a27a:	4650      	mov	r0, sl
 800a27c:	4659      	mov	r1, fp
 800a27e:	2200      	movs	r2, #0
 800a280:	f7f6 f9ba 	bl	80005f8 <__aeabi_dmul>
 800a284:	4b08      	ldr	r3, [pc, #32]	@ (800a2a8 <_strtod_l+0x860>)
 800a286:	400b      	ands	r3, r1
 800a288:	4682      	mov	sl, r0
 800a28a:	468b      	mov	fp, r1
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f47f ae05 	bne.w	8009e9c <_strtod_l+0x454>
 800a292:	9a05      	ldr	r2, [sp, #20]
 800a294:	2322      	movs	r3, #34	@ 0x22
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	e600      	b.n	8009e9c <_strtod_l+0x454>
 800a29a:	bf00      	nop
 800a29c:	0800bb78 	.word	0x0800bb78
 800a2a0:	fffffc02 	.word	0xfffffc02
 800a2a4:	39500000 	.word	0x39500000
 800a2a8:	7ff00000 	.word	0x7ff00000
 800a2ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a2b0:	d165      	bne.n	800a37e <_strtod_l+0x936>
 800a2b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2b8:	b35a      	cbz	r2, 800a312 <_strtod_l+0x8ca>
 800a2ba:	4a9f      	ldr	r2, [pc, #636]	@ (800a538 <_strtod_l+0xaf0>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d12b      	bne.n	800a318 <_strtod_l+0x8d0>
 800a2c0:	9b08      	ldr	r3, [sp, #32]
 800a2c2:	4651      	mov	r1, sl
 800a2c4:	b303      	cbz	r3, 800a308 <_strtod_l+0x8c0>
 800a2c6:	4b9d      	ldr	r3, [pc, #628]	@ (800a53c <_strtod_l+0xaf4>)
 800a2c8:	465a      	mov	r2, fp
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d4:	d81b      	bhi.n	800a30e <_strtod_l+0x8c6>
 800a2d6:	0d1b      	lsrs	r3, r3, #20
 800a2d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	d119      	bne.n	800a318 <_strtod_l+0x8d0>
 800a2e4:	4b96      	ldr	r3, [pc, #600]	@ (800a540 <_strtod_l+0xaf8>)
 800a2e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d102      	bne.n	800a2f2 <_strtod_l+0x8aa>
 800a2ec:	3101      	adds	r1, #1
 800a2ee:	f43f adca 	beq.w	8009e86 <_strtod_l+0x43e>
 800a2f2:	4b92      	ldr	r3, [pc, #584]	@ (800a53c <_strtod_l+0xaf4>)
 800a2f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2f6:	401a      	ands	r2, r3
 800a2f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a2fc:	f04f 0a00 	mov.w	sl, #0
 800a300:	9b08      	ldr	r3, [sp, #32]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1b8      	bne.n	800a278 <_strtod_l+0x830>
 800a306:	e5c9      	b.n	8009e9c <_strtod_l+0x454>
 800a308:	f04f 33ff 	mov.w	r3, #4294967295
 800a30c:	e7e8      	b.n	800a2e0 <_strtod_l+0x898>
 800a30e:	4613      	mov	r3, r2
 800a310:	e7e6      	b.n	800a2e0 <_strtod_l+0x898>
 800a312:	ea53 030a 	orrs.w	r3, r3, sl
 800a316:	d0a1      	beq.n	800a25c <_strtod_l+0x814>
 800a318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a31a:	b1db      	cbz	r3, 800a354 <_strtod_l+0x90c>
 800a31c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a31e:	4213      	tst	r3, r2
 800a320:	d0ee      	beq.n	800a300 <_strtod_l+0x8b8>
 800a322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a324:	9a08      	ldr	r2, [sp, #32]
 800a326:	4650      	mov	r0, sl
 800a328:	4659      	mov	r1, fp
 800a32a:	b1bb      	cbz	r3, 800a35c <_strtod_l+0x914>
 800a32c:	f7ff fb6e 	bl	8009a0c <sulp>
 800a330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a334:	ec53 2b10 	vmov	r2, r3, d0
 800a338:	f7f5 ffa8 	bl	800028c <__adddf3>
 800a33c:	4682      	mov	sl, r0
 800a33e:	468b      	mov	fp, r1
 800a340:	e7de      	b.n	800a300 <_strtod_l+0x8b8>
 800a342:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a346:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a34a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a34e:	f04f 3aff 	mov.w	sl, #4294967295
 800a352:	e7d5      	b.n	800a300 <_strtod_l+0x8b8>
 800a354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a356:	ea13 0f0a 	tst.w	r3, sl
 800a35a:	e7e1      	b.n	800a320 <_strtod_l+0x8d8>
 800a35c:	f7ff fb56 	bl	8009a0c <sulp>
 800a360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a364:	ec53 2b10 	vmov	r2, r3, d0
 800a368:	f7f5 ff8e 	bl	8000288 <__aeabi_dsub>
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	4682      	mov	sl, r0
 800a372:	468b      	mov	fp, r1
 800a374:	f7f6 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0c1      	beq.n	800a300 <_strtod_l+0x8b8>
 800a37c:	e619      	b.n	8009fb2 <_strtod_l+0x56a>
 800a37e:	4641      	mov	r1, r8
 800a380:	4620      	mov	r0, r4
 800a382:	f7ff facd 	bl	8009920 <__ratio>
 800a386:	ec57 6b10 	vmov	r6, r7, d0
 800a38a:	2200      	movs	r2, #0
 800a38c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a390:	4630      	mov	r0, r6
 800a392:	4639      	mov	r1, r7
 800a394:	f7f6 fbac 	bl	8000af0 <__aeabi_dcmple>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d06f      	beq.n	800a47c <_strtod_l+0xa34>
 800a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d17a      	bne.n	800a498 <_strtod_l+0xa50>
 800a3a2:	f1ba 0f00 	cmp.w	sl, #0
 800a3a6:	d158      	bne.n	800a45a <_strtod_l+0xa12>
 800a3a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d15a      	bne.n	800a468 <_strtod_l+0xa20>
 800a3b2:	4b64      	ldr	r3, [pc, #400]	@ (800a544 <_strtod_l+0xafc>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	4639      	mov	r1, r7
 800a3ba:	f7f6 fb8f 	bl	8000adc <__aeabi_dcmplt>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d159      	bne.n	800a476 <_strtod_l+0xa2e>
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	4b60      	ldr	r3, [pc, #384]	@ (800a548 <_strtod_l+0xb00>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f7f6 f915 	bl	80005f8 <__aeabi_dmul>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	460f      	mov	r7, r1
 800a3d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a3d6:	9606      	str	r6, [sp, #24]
 800a3d8:	9307      	str	r3, [sp, #28]
 800a3da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3de:	4d57      	ldr	r5, [pc, #348]	@ (800a53c <_strtod_l+0xaf4>)
 800a3e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a3e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3e6:	401d      	ands	r5, r3
 800a3e8:	4b58      	ldr	r3, [pc, #352]	@ (800a54c <_strtod_l+0xb04>)
 800a3ea:	429d      	cmp	r5, r3
 800a3ec:	f040 80b2 	bne.w	800a554 <_strtod_l+0xb0c>
 800a3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a3f6:	ec4b ab10 	vmov	d0, sl, fp
 800a3fa:	f7ff f9c9 	bl	8009790 <__ulp>
 800a3fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a402:	ec51 0b10 	vmov	r0, r1, d0
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	4652      	mov	r2, sl
 800a40c:	465b      	mov	r3, fp
 800a40e:	f7f5 ff3d 	bl	800028c <__adddf3>
 800a412:	460b      	mov	r3, r1
 800a414:	4949      	ldr	r1, [pc, #292]	@ (800a53c <_strtod_l+0xaf4>)
 800a416:	4a4e      	ldr	r2, [pc, #312]	@ (800a550 <_strtod_l+0xb08>)
 800a418:	4019      	ands	r1, r3
 800a41a:	4291      	cmp	r1, r2
 800a41c:	4682      	mov	sl, r0
 800a41e:	d942      	bls.n	800a4a6 <_strtod_l+0xa5e>
 800a420:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a422:	4b47      	ldr	r3, [pc, #284]	@ (800a540 <_strtod_l+0xaf8>)
 800a424:	429a      	cmp	r2, r3
 800a426:	d103      	bne.n	800a430 <_strtod_l+0x9e8>
 800a428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a42a:	3301      	adds	r3, #1
 800a42c:	f43f ad2b 	beq.w	8009e86 <_strtod_l+0x43e>
 800a430:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a540 <_strtod_l+0xaf8>
 800a434:	f04f 3aff 	mov.w	sl, #4294967295
 800a438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a43a:	9805      	ldr	r0, [sp, #20]
 800a43c:	f7fe fe74 	bl	8009128 <_Bfree>
 800a440:	9805      	ldr	r0, [sp, #20]
 800a442:	4649      	mov	r1, r9
 800a444:	f7fe fe70 	bl	8009128 <_Bfree>
 800a448:	9805      	ldr	r0, [sp, #20]
 800a44a:	4641      	mov	r1, r8
 800a44c:	f7fe fe6c 	bl	8009128 <_Bfree>
 800a450:	9805      	ldr	r0, [sp, #20]
 800a452:	4621      	mov	r1, r4
 800a454:	f7fe fe68 	bl	8009128 <_Bfree>
 800a458:	e618      	b.n	800a08c <_strtod_l+0x644>
 800a45a:	f1ba 0f01 	cmp.w	sl, #1
 800a45e:	d103      	bne.n	800a468 <_strtod_l+0xa20>
 800a460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	f43f ada5 	beq.w	8009fb2 <_strtod_l+0x56a>
 800a468:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a518 <_strtod_l+0xad0>
 800a46c:	4f35      	ldr	r7, [pc, #212]	@ (800a544 <_strtod_l+0xafc>)
 800a46e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a472:	2600      	movs	r6, #0
 800a474:	e7b1      	b.n	800a3da <_strtod_l+0x992>
 800a476:	4f34      	ldr	r7, [pc, #208]	@ (800a548 <_strtod_l+0xb00>)
 800a478:	2600      	movs	r6, #0
 800a47a:	e7aa      	b.n	800a3d2 <_strtod_l+0x98a>
 800a47c:	4b32      	ldr	r3, [pc, #200]	@ (800a548 <_strtod_l+0xb00>)
 800a47e:	4630      	mov	r0, r6
 800a480:	4639      	mov	r1, r7
 800a482:	2200      	movs	r2, #0
 800a484:	f7f6 f8b8 	bl	80005f8 <__aeabi_dmul>
 800a488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d09f      	beq.n	800a3d2 <_strtod_l+0x98a>
 800a492:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a496:	e7a0      	b.n	800a3da <_strtod_l+0x992>
 800a498:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a520 <_strtod_l+0xad8>
 800a49c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4a0:	ec57 6b17 	vmov	r6, r7, d7
 800a4a4:	e799      	b.n	800a3da <_strtod_l+0x992>
 800a4a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a4aa:	9b08      	ldr	r3, [sp, #32]
 800a4ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1c1      	bne.n	800a438 <_strtod_l+0x9f0>
 800a4b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4b8:	0d1b      	lsrs	r3, r3, #20
 800a4ba:	051b      	lsls	r3, r3, #20
 800a4bc:	429d      	cmp	r5, r3
 800a4be:	d1bb      	bne.n	800a438 <_strtod_l+0x9f0>
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 fbf8 	bl	8000cb8 <__aeabi_d2lz>
 800a4c8:	f7f6 f868 	bl	800059c <__aeabi_l2d>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f5 fed8 	bl	8000288 <__aeabi_dsub>
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4602      	mov	r2, r0
 800a4dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a4e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4e6:	ea46 060a 	orr.w	r6, r6, sl
 800a4ea:	431e      	orrs	r6, r3
 800a4ec:	d06f      	beq.n	800a5ce <_strtod_l+0xb86>
 800a4ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800a528 <_strtod_l+0xae0>)
 800a4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f4:	f7f6 faf2 	bl	8000adc <__aeabi_dcmplt>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f47f accf 	bne.w	8009e9c <_strtod_l+0x454>
 800a4fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800a530 <_strtod_l+0xae8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a508:	f7f6 fb06 	bl	8000b18 <__aeabi_dcmpgt>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d093      	beq.n	800a438 <_strtod_l+0x9f0>
 800a510:	e4c4      	b.n	8009e9c <_strtod_l+0x454>
 800a512:	bf00      	nop
 800a514:	f3af 8000 	nop.w
 800a518:	00000000 	.word	0x00000000
 800a51c:	bff00000 	.word	0xbff00000
 800a520:	00000000 	.word	0x00000000
 800a524:	3ff00000 	.word	0x3ff00000
 800a528:	94a03595 	.word	0x94a03595
 800a52c:	3fdfffff 	.word	0x3fdfffff
 800a530:	35afe535 	.word	0x35afe535
 800a534:	3fe00000 	.word	0x3fe00000
 800a538:	000fffff 	.word	0x000fffff
 800a53c:	7ff00000 	.word	0x7ff00000
 800a540:	7fefffff 	.word	0x7fefffff
 800a544:	3ff00000 	.word	0x3ff00000
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	7fe00000 	.word	0x7fe00000
 800a550:	7c9fffff 	.word	0x7c9fffff
 800a554:	9b08      	ldr	r3, [sp, #32]
 800a556:	b323      	cbz	r3, 800a5a2 <_strtod_l+0xb5a>
 800a558:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a55c:	d821      	bhi.n	800a5a2 <_strtod_l+0xb5a>
 800a55e:	a328      	add	r3, pc, #160	@ (adr r3, 800a600 <_strtod_l+0xbb8>)
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f6 fac2 	bl	8000af0 <__aeabi_dcmple>
 800a56c:	b1a0      	cbz	r0, 800a598 <_strtod_l+0xb50>
 800a56e:	4639      	mov	r1, r7
 800a570:	4630      	mov	r0, r6
 800a572:	f7f6 fb19 	bl	8000ba8 <__aeabi_d2uiz>
 800a576:	2801      	cmp	r0, #1
 800a578:	bf38      	it	cc
 800a57a:	2001      	movcc	r0, #1
 800a57c:	f7f5 ffc2 	bl	8000504 <__aeabi_ui2d>
 800a580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	b9fb      	cbnz	r3, 800a5c8 <_strtod_l+0xb80>
 800a588:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a58c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a58e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a590:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a594:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a59a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a59e:	1b5b      	subs	r3, r3, r5
 800a5a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a5a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a5a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a5aa:	f7ff f8f1 	bl	8009790 <__ulp>
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	ec53 2b10 	vmov	r2, r3, d0
 800a5b4:	4659      	mov	r1, fp
 800a5b6:	f7f6 f81f 	bl	80005f8 <__aeabi_dmul>
 800a5ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a5be:	f7f5 fe65 	bl	800028c <__adddf3>
 800a5c2:	4682      	mov	sl, r0
 800a5c4:	468b      	mov	fp, r1
 800a5c6:	e770      	b.n	800a4aa <_strtod_l+0xa62>
 800a5c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a5cc:	e7e0      	b.n	800a590 <_strtod_l+0xb48>
 800a5ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800a608 <_strtod_l+0xbc0>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	f7f6 fa82 	bl	8000adc <__aeabi_dcmplt>
 800a5d8:	e798      	b.n	800a50c <_strtod_l+0xac4>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	f7ff ba6d 	b.w	8009ac2 <_strtod_l+0x7a>
 800a5e8:	2a65      	cmp	r2, #101	@ 0x65
 800a5ea:	f43f ab66 	beq.w	8009cba <_strtod_l+0x272>
 800a5ee:	2a45      	cmp	r2, #69	@ 0x45
 800a5f0:	f43f ab63 	beq.w	8009cba <_strtod_l+0x272>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	f7ff bb9e 	b.w	8009d36 <_strtod_l+0x2ee>
 800a5fa:	bf00      	nop
 800a5fc:	f3af 8000 	nop.w
 800a600:	ffc00000 	.word	0xffc00000
 800a604:	41dfffff 	.word	0x41dfffff
 800a608:	94a03595 	.word	0x94a03595
 800a60c:	3fcfffff 	.word	0x3fcfffff

0800a610 <_strtod_r>:
 800a610:	4b01      	ldr	r3, [pc, #4]	@ (800a618 <_strtod_r+0x8>)
 800a612:	f7ff ba19 	b.w	8009a48 <_strtod_l>
 800a616:	bf00      	nop
 800a618:	20000068 	.word	0x20000068

0800a61c <_strtol_l.constprop.0>:
 800a61c:	2b24      	cmp	r3, #36	@ 0x24
 800a61e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a622:	4686      	mov	lr, r0
 800a624:	4690      	mov	r8, r2
 800a626:	d801      	bhi.n	800a62c <_strtol_l.constprop.0+0x10>
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d106      	bne.n	800a63a <_strtol_l.constprop.0+0x1e>
 800a62c:	f7fd fdba 	bl	80081a4 <__errno>
 800a630:	2316      	movs	r3, #22
 800a632:	6003      	str	r3, [r0, #0]
 800a634:	2000      	movs	r0, #0
 800a636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63a:	4834      	ldr	r0, [pc, #208]	@ (800a70c <_strtol_l.constprop.0+0xf0>)
 800a63c:	460d      	mov	r5, r1
 800a63e:	462a      	mov	r2, r5
 800a640:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a644:	5d06      	ldrb	r6, [r0, r4]
 800a646:	f016 0608 	ands.w	r6, r6, #8
 800a64a:	d1f8      	bne.n	800a63e <_strtol_l.constprop.0+0x22>
 800a64c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a64e:	d12d      	bne.n	800a6ac <_strtol_l.constprop.0+0x90>
 800a650:	782c      	ldrb	r4, [r5, #0]
 800a652:	2601      	movs	r6, #1
 800a654:	1c95      	adds	r5, r2, #2
 800a656:	f033 0210 	bics.w	r2, r3, #16
 800a65a:	d109      	bne.n	800a670 <_strtol_l.constprop.0+0x54>
 800a65c:	2c30      	cmp	r4, #48	@ 0x30
 800a65e:	d12a      	bne.n	800a6b6 <_strtol_l.constprop.0+0x9a>
 800a660:	782a      	ldrb	r2, [r5, #0]
 800a662:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a666:	2a58      	cmp	r2, #88	@ 0x58
 800a668:	d125      	bne.n	800a6b6 <_strtol_l.constprop.0+0x9a>
 800a66a:	786c      	ldrb	r4, [r5, #1]
 800a66c:	2310      	movs	r3, #16
 800a66e:	3502      	adds	r5, #2
 800a670:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a674:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a678:	2200      	movs	r2, #0
 800a67a:	fbbc f9f3 	udiv	r9, ip, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	fb03 ca19 	mls	sl, r3, r9, ip
 800a684:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a688:	2f09      	cmp	r7, #9
 800a68a:	d81b      	bhi.n	800a6c4 <_strtol_l.constprop.0+0xa8>
 800a68c:	463c      	mov	r4, r7
 800a68e:	42a3      	cmp	r3, r4
 800a690:	dd27      	ble.n	800a6e2 <_strtol_l.constprop.0+0xc6>
 800a692:	1c57      	adds	r7, r2, #1
 800a694:	d007      	beq.n	800a6a6 <_strtol_l.constprop.0+0x8a>
 800a696:	4581      	cmp	r9, r0
 800a698:	d320      	bcc.n	800a6dc <_strtol_l.constprop.0+0xc0>
 800a69a:	d101      	bne.n	800a6a0 <_strtol_l.constprop.0+0x84>
 800a69c:	45a2      	cmp	sl, r4
 800a69e:	db1d      	blt.n	800a6dc <_strtol_l.constprop.0+0xc0>
 800a6a0:	fb00 4003 	mla	r0, r0, r3, r4
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6aa:	e7eb      	b.n	800a684 <_strtol_l.constprop.0+0x68>
 800a6ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800a6ae:	bf04      	itt	eq
 800a6b0:	782c      	ldrbeq	r4, [r5, #0]
 800a6b2:	1c95      	addeq	r5, r2, #2
 800a6b4:	e7cf      	b.n	800a656 <_strtol_l.constprop.0+0x3a>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1da      	bne.n	800a670 <_strtol_l.constprop.0+0x54>
 800a6ba:	2c30      	cmp	r4, #48	@ 0x30
 800a6bc:	bf0c      	ite	eq
 800a6be:	2308      	moveq	r3, #8
 800a6c0:	230a      	movne	r3, #10
 800a6c2:	e7d5      	b.n	800a670 <_strtol_l.constprop.0+0x54>
 800a6c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a6c8:	2f19      	cmp	r7, #25
 800a6ca:	d801      	bhi.n	800a6d0 <_strtol_l.constprop.0+0xb4>
 800a6cc:	3c37      	subs	r4, #55	@ 0x37
 800a6ce:	e7de      	b.n	800a68e <_strtol_l.constprop.0+0x72>
 800a6d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a6d4:	2f19      	cmp	r7, #25
 800a6d6:	d804      	bhi.n	800a6e2 <_strtol_l.constprop.0+0xc6>
 800a6d8:	3c57      	subs	r4, #87	@ 0x57
 800a6da:	e7d8      	b.n	800a68e <_strtol_l.constprop.0+0x72>
 800a6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6e0:	e7e1      	b.n	800a6a6 <_strtol_l.constprop.0+0x8a>
 800a6e2:	1c53      	adds	r3, r2, #1
 800a6e4:	d108      	bne.n	800a6f8 <_strtol_l.constprop.0+0xdc>
 800a6e6:	2322      	movs	r3, #34	@ 0x22
 800a6e8:	f8ce 3000 	str.w	r3, [lr]
 800a6ec:	4660      	mov	r0, ip
 800a6ee:	f1b8 0f00 	cmp.w	r8, #0
 800a6f2:	d0a0      	beq.n	800a636 <_strtol_l.constprop.0+0x1a>
 800a6f4:	1e69      	subs	r1, r5, #1
 800a6f6:	e006      	b.n	800a706 <_strtol_l.constprop.0+0xea>
 800a6f8:	b106      	cbz	r6, 800a6fc <_strtol_l.constprop.0+0xe0>
 800a6fa:	4240      	negs	r0, r0
 800a6fc:	f1b8 0f00 	cmp.w	r8, #0
 800a700:	d099      	beq.n	800a636 <_strtol_l.constprop.0+0x1a>
 800a702:	2a00      	cmp	r2, #0
 800a704:	d1f6      	bne.n	800a6f4 <_strtol_l.constprop.0+0xd8>
 800a706:	f8c8 1000 	str.w	r1, [r8]
 800a70a:	e794      	b.n	800a636 <_strtol_l.constprop.0+0x1a>
 800a70c:	0800bba1 	.word	0x0800bba1

0800a710 <_strtol_r>:
 800a710:	f7ff bf84 	b.w	800a61c <_strtol_l.constprop.0>

0800a714 <__ssputs_r>:
 800a714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a718:	688e      	ldr	r6, [r1, #8]
 800a71a:	461f      	mov	r7, r3
 800a71c:	42be      	cmp	r6, r7
 800a71e:	680b      	ldr	r3, [r1, #0]
 800a720:	4682      	mov	sl, r0
 800a722:	460c      	mov	r4, r1
 800a724:	4690      	mov	r8, r2
 800a726:	d82d      	bhi.n	800a784 <__ssputs_r+0x70>
 800a728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a72c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a730:	d026      	beq.n	800a780 <__ssputs_r+0x6c>
 800a732:	6965      	ldr	r5, [r4, #20]
 800a734:	6909      	ldr	r1, [r1, #16]
 800a736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a73a:	eba3 0901 	sub.w	r9, r3, r1
 800a73e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a742:	1c7b      	adds	r3, r7, #1
 800a744:	444b      	add	r3, r9
 800a746:	106d      	asrs	r5, r5, #1
 800a748:	429d      	cmp	r5, r3
 800a74a:	bf38      	it	cc
 800a74c:	461d      	movcc	r5, r3
 800a74e:	0553      	lsls	r3, r2, #21
 800a750:	d527      	bpl.n	800a7a2 <__ssputs_r+0x8e>
 800a752:	4629      	mov	r1, r5
 800a754:	f7fe fc1c 	bl	8008f90 <_malloc_r>
 800a758:	4606      	mov	r6, r0
 800a75a:	b360      	cbz	r0, 800a7b6 <__ssputs_r+0xa2>
 800a75c:	6921      	ldr	r1, [r4, #16]
 800a75e:	464a      	mov	r2, r9
 800a760:	f000 fa18 	bl	800ab94 <memcpy>
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	6126      	str	r6, [r4, #16]
 800a772:	6165      	str	r5, [r4, #20]
 800a774:	444e      	add	r6, r9
 800a776:	eba5 0509 	sub.w	r5, r5, r9
 800a77a:	6026      	str	r6, [r4, #0]
 800a77c:	60a5      	str	r5, [r4, #8]
 800a77e:	463e      	mov	r6, r7
 800a780:	42be      	cmp	r6, r7
 800a782:	d900      	bls.n	800a786 <__ssputs_r+0x72>
 800a784:	463e      	mov	r6, r7
 800a786:	6820      	ldr	r0, [r4, #0]
 800a788:	4632      	mov	r2, r6
 800a78a:	4641      	mov	r1, r8
 800a78c:	f000 f9c6 	bl	800ab1c <memmove>
 800a790:	68a3      	ldr	r3, [r4, #8]
 800a792:	1b9b      	subs	r3, r3, r6
 800a794:	60a3      	str	r3, [r4, #8]
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	4433      	add	r3, r6
 800a79a:	6023      	str	r3, [r4, #0]
 800a79c:	2000      	movs	r0, #0
 800a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	f000 fd89 	bl	800b2ba <_realloc_r>
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d1e0      	bne.n	800a770 <__ssputs_r+0x5c>
 800a7ae:	6921      	ldr	r1, [r4, #16]
 800a7b0:	4650      	mov	r0, sl
 800a7b2:	f7fe fb79 	bl	8008ea8 <_free_r>
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	f8ca 3000 	str.w	r3, [sl]
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c8:	e7e9      	b.n	800a79e <__ssputs_r+0x8a>
	...

0800a7cc <_svfiprintf_r>:
 800a7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d0:	4698      	mov	r8, r3
 800a7d2:	898b      	ldrh	r3, [r1, #12]
 800a7d4:	061b      	lsls	r3, r3, #24
 800a7d6:	b09d      	sub	sp, #116	@ 0x74
 800a7d8:	4607      	mov	r7, r0
 800a7da:	460d      	mov	r5, r1
 800a7dc:	4614      	mov	r4, r2
 800a7de:	d510      	bpl.n	800a802 <_svfiprintf_r+0x36>
 800a7e0:	690b      	ldr	r3, [r1, #16]
 800a7e2:	b973      	cbnz	r3, 800a802 <_svfiprintf_r+0x36>
 800a7e4:	2140      	movs	r1, #64	@ 0x40
 800a7e6:	f7fe fbd3 	bl	8008f90 <_malloc_r>
 800a7ea:	6028      	str	r0, [r5, #0]
 800a7ec:	6128      	str	r0, [r5, #16]
 800a7ee:	b930      	cbnz	r0, 800a7fe <_svfiprintf_r+0x32>
 800a7f0:	230c      	movs	r3, #12
 800a7f2:	603b      	str	r3, [r7, #0]
 800a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f8:	b01d      	add	sp, #116	@ 0x74
 800a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fe:	2340      	movs	r3, #64	@ 0x40
 800a800:	616b      	str	r3, [r5, #20]
 800a802:	2300      	movs	r3, #0
 800a804:	9309      	str	r3, [sp, #36]	@ 0x24
 800a806:	2320      	movs	r3, #32
 800a808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a810:	2330      	movs	r3, #48	@ 0x30
 800a812:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a9b0 <_svfiprintf_r+0x1e4>
 800a816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a81a:	f04f 0901 	mov.w	r9, #1
 800a81e:	4623      	mov	r3, r4
 800a820:	469a      	mov	sl, r3
 800a822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a826:	b10a      	cbz	r2, 800a82c <_svfiprintf_r+0x60>
 800a828:	2a25      	cmp	r2, #37	@ 0x25
 800a82a:	d1f9      	bne.n	800a820 <_svfiprintf_r+0x54>
 800a82c:	ebba 0b04 	subs.w	fp, sl, r4
 800a830:	d00b      	beq.n	800a84a <_svfiprintf_r+0x7e>
 800a832:	465b      	mov	r3, fp
 800a834:	4622      	mov	r2, r4
 800a836:	4629      	mov	r1, r5
 800a838:	4638      	mov	r0, r7
 800a83a:	f7ff ff6b 	bl	800a714 <__ssputs_r>
 800a83e:	3001      	adds	r0, #1
 800a840:	f000 80a7 	beq.w	800a992 <_svfiprintf_r+0x1c6>
 800a844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a846:	445a      	add	r2, fp
 800a848:	9209      	str	r2, [sp, #36]	@ 0x24
 800a84a:	f89a 3000 	ldrb.w	r3, [sl]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 809f 	beq.w	800a992 <_svfiprintf_r+0x1c6>
 800a854:	2300      	movs	r3, #0
 800a856:	f04f 32ff 	mov.w	r2, #4294967295
 800a85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a85e:	f10a 0a01 	add.w	sl, sl, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	9307      	str	r3, [sp, #28]
 800a866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a86a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a86c:	4654      	mov	r4, sl
 800a86e:	2205      	movs	r2, #5
 800a870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a874:	484e      	ldr	r0, [pc, #312]	@ (800a9b0 <_svfiprintf_r+0x1e4>)
 800a876:	f7f5 fcab 	bl	80001d0 <memchr>
 800a87a:	9a04      	ldr	r2, [sp, #16]
 800a87c:	b9d8      	cbnz	r0, 800a8b6 <_svfiprintf_r+0xea>
 800a87e:	06d0      	lsls	r0, r2, #27
 800a880:	bf44      	itt	mi
 800a882:	2320      	movmi	r3, #32
 800a884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a888:	0711      	lsls	r1, r2, #28
 800a88a:	bf44      	itt	mi
 800a88c:	232b      	movmi	r3, #43	@ 0x2b
 800a88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a892:	f89a 3000 	ldrb.w	r3, [sl]
 800a896:	2b2a      	cmp	r3, #42	@ 0x2a
 800a898:	d015      	beq.n	800a8c6 <_svfiprintf_r+0xfa>
 800a89a:	9a07      	ldr	r2, [sp, #28]
 800a89c:	4654      	mov	r4, sl
 800a89e:	2000      	movs	r0, #0
 800a8a0:	f04f 0c0a 	mov.w	ip, #10
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8aa:	3b30      	subs	r3, #48	@ 0x30
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	d94b      	bls.n	800a948 <_svfiprintf_r+0x17c>
 800a8b0:	b1b0      	cbz	r0, 800a8e0 <_svfiprintf_r+0x114>
 800a8b2:	9207      	str	r2, [sp, #28]
 800a8b4:	e014      	b.n	800a8e0 <_svfiprintf_r+0x114>
 800a8b6:	eba0 0308 	sub.w	r3, r0, r8
 800a8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	46a2      	mov	sl, r4
 800a8c4:	e7d2      	b.n	800a86c <_svfiprintf_r+0xa0>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	1d19      	adds	r1, r3, #4
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	9103      	str	r1, [sp, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfbb      	ittet	lt
 800a8d2:	425b      	neglt	r3, r3
 800a8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a8d8:	9307      	strge	r3, [sp, #28]
 800a8da:	9307      	strlt	r3, [sp, #28]
 800a8dc:	bfb8      	it	lt
 800a8de:	9204      	strlt	r2, [sp, #16]
 800a8e0:	7823      	ldrb	r3, [r4, #0]
 800a8e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8e4:	d10a      	bne.n	800a8fc <_svfiprintf_r+0x130>
 800a8e6:	7863      	ldrb	r3, [r4, #1]
 800a8e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ea:	d132      	bne.n	800a952 <_svfiprintf_r+0x186>
 800a8ec:	9b03      	ldr	r3, [sp, #12]
 800a8ee:	1d1a      	adds	r2, r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	9203      	str	r2, [sp, #12]
 800a8f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8f8:	3402      	adds	r4, #2
 800a8fa:	9305      	str	r3, [sp, #20]
 800a8fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9c0 <_svfiprintf_r+0x1f4>
 800a900:	7821      	ldrb	r1, [r4, #0]
 800a902:	2203      	movs	r2, #3
 800a904:	4650      	mov	r0, sl
 800a906:	f7f5 fc63 	bl	80001d0 <memchr>
 800a90a:	b138      	cbz	r0, 800a91c <_svfiprintf_r+0x150>
 800a90c:	9b04      	ldr	r3, [sp, #16]
 800a90e:	eba0 000a 	sub.w	r0, r0, sl
 800a912:	2240      	movs	r2, #64	@ 0x40
 800a914:	4082      	lsls	r2, r0
 800a916:	4313      	orrs	r3, r2
 800a918:	3401      	adds	r4, #1
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a920:	4824      	ldr	r0, [pc, #144]	@ (800a9b4 <_svfiprintf_r+0x1e8>)
 800a922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a926:	2206      	movs	r2, #6
 800a928:	f7f5 fc52 	bl	80001d0 <memchr>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d036      	beq.n	800a99e <_svfiprintf_r+0x1d2>
 800a930:	4b21      	ldr	r3, [pc, #132]	@ (800a9b8 <_svfiprintf_r+0x1ec>)
 800a932:	bb1b      	cbnz	r3, 800a97c <_svfiprintf_r+0x1b0>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	3307      	adds	r3, #7
 800a938:	f023 0307 	bic.w	r3, r3, #7
 800a93c:	3308      	adds	r3, #8
 800a93e:	9303      	str	r3, [sp, #12]
 800a940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a942:	4433      	add	r3, r6
 800a944:	9309      	str	r3, [sp, #36]	@ 0x24
 800a946:	e76a      	b.n	800a81e <_svfiprintf_r+0x52>
 800a948:	fb0c 3202 	mla	r2, ip, r2, r3
 800a94c:	460c      	mov	r4, r1
 800a94e:	2001      	movs	r0, #1
 800a950:	e7a8      	b.n	800a8a4 <_svfiprintf_r+0xd8>
 800a952:	2300      	movs	r3, #0
 800a954:	3401      	adds	r4, #1
 800a956:	9305      	str	r3, [sp, #20]
 800a958:	4619      	mov	r1, r3
 800a95a:	f04f 0c0a 	mov.w	ip, #10
 800a95e:	4620      	mov	r0, r4
 800a960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a964:	3a30      	subs	r2, #48	@ 0x30
 800a966:	2a09      	cmp	r2, #9
 800a968:	d903      	bls.n	800a972 <_svfiprintf_r+0x1a6>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0c6      	beq.n	800a8fc <_svfiprintf_r+0x130>
 800a96e:	9105      	str	r1, [sp, #20]
 800a970:	e7c4      	b.n	800a8fc <_svfiprintf_r+0x130>
 800a972:	fb0c 2101 	mla	r1, ip, r1, r2
 800a976:	4604      	mov	r4, r0
 800a978:	2301      	movs	r3, #1
 800a97a:	e7f0      	b.n	800a95e <_svfiprintf_r+0x192>
 800a97c:	ab03      	add	r3, sp, #12
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	462a      	mov	r2, r5
 800a982:	4b0e      	ldr	r3, [pc, #56]	@ (800a9bc <_svfiprintf_r+0x1f0>)
 800a984:	a904      	add	r1, sp, #16
 800a986:	4638      	mov	r0, r7
 800a988:	f7fc fcc8 	bl	800731c <_printf_float>
 800a98c:	1c42      	adds	r2, r0, #1
 800a98e:	4606      	mov	r6, r0
 800a990:	d1d6      	bne.n	800a940 <_svfiprintf_r+0x174>
 800a992:	89ab      	ldrh	r3, [r5, #12]
 800a994:	065b      	lsls	r3, r3, #25
 800a996:	f53f af2d 	bmi.w	800a7f4 <_svfiprintf_r+0x28>
 800a99a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a99c:	e72c      	b.n	800a7f8 <_svfiprintf_r+0x2c>
 800a99e:	ab03      	add	r3, sp, #12
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	4b05      	ldr	r3, [pc, #20]	@ (800a9bc <_svfiprintf_r+0x1f0>)
 800a9a6:	a904      	add	r1, sp, #16
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7fc ff4f 	bl	800784c <_printf_i>
 800a9ae:	e7ed      	b.n	800a98c <_svfiprintf_r+0x1c0>
 800a9b0:	0800bca1 	.word	0x0800bca1
 800a9b4:	0800bcab 	.word	0x0800bcab
 800a9b8:	0800731d 	.word	0x0800731d
 800a9bc:	0800a715 	.word	0x0800a715
 800a9c0:	0800bca7 	.word	0x0800bca7

0800a9c4 <__sflush_r>:
 800a9c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	0716      	lsls	r6, r2, #28
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	d454      	bmi.n	800aa7e <__sflush_r+0xba>
 800a9d4:	684b      	ldr	r3, [r1, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	dc02      	bgt.n	800a9e0 <__sflush_r+0x1c>
 800a9da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dd48      	ble.n	800aa72 <__sflush_r+0xae>
 800a9e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9e2:	2e00      	cmp	r6, #0
 800a9e4:	d045      	beq.n	800aa72 <__sflush_r+0xae>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a9ec:	682f      	ldr	r7, [r5, #0]
 800a9ee:	6a21      	ldr	r1, [r4, #32]
 800a9f0:	602b      	str	r3, [r5, #0]
 800a9f2:	d030      	beq.n	800aa56 <__sflush_r+0x92>
 800a9f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	0759      	lsls	r1, r3, #29
 800a9fa:	d505      	bpl.n	800aa08 <__sflush_r+0x44>
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa02:	b10b      	cbz	r3, 800aa08 <__sflush_r+0x44>
 800aa04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	2300      	movs	r3, #0
 800aa0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa0c:	6a21      	ldr	r1, [r4, #32]
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b0      	blx	r6
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	d106      	bne.n	800aa26 <__sflush_r+0x62>
 800aa18:	6829      	ldr	r1, [r5, #0]
 800aa1a:	291d      	cmp	r1, #29
 800aa1c:	d82b      	bhi.n	800aa76 <__sflush_r+0xb2>
 800aa1e:	4a2a      	ldr	r2, [pc, #168]	@ (800aac8 <__sflush_r+0x104>)
 800aa20:	410a      	asrs	r2, r1
 800aa22:	07d6      	lsls	r6, r2, #31
 800aa24:	d427      	bmi.n	800aa76 <__sflush_r+0xb2>
 800aa26:	2200      	movs	r2, #0
 800aa28:	6062      	str	r2, [r4, #4]
 800aa2a:	04d9      	lsls	r1, r3, #19
 800aa2c:	6922      	ldr	r2, [r4, #16]
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	d504      	bpl.n	800aa3c <__sflush_r+0x78>
 800aa32:	1c42      	adds	r2, r0, #1
 800aa34:	d101      	bne.n	800aa3a <__sflush_r+0x76>
 800aa36:	682b      	ldr	r3, [r5, #0]
 800aa38:	b903      	cbnz	r3, 800aa3c <__sflush_r+0x78>
 800aa3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa3e:	602f      	str	r7, [r5, #0]
 800aa40:	b1b9      	cbz	r1, 800aa72 <__sflush_r+0xae>
 800aa42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa46:	4299      	cmp	r1, r3
 800aa48:	d002      	beq.n	800aa50 <__sflush_r+0x8c>
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f7fe fa2c 	bl	8008ea8 <_free_r>
 800aa50:	2300      	movs	r3, #0
 800aa52:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa54:	e00d      	b.n	800aa72 <__sflush_r+0xae>
 800aa56:	2301      	movs	r3, #1
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b0      	blx	r6
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	1c50      	adds	r0, r2, #1
 800aa60:	d1c9      	bne.n	800a9f6 <__sflush_r+0x32>
 800aa62:	682b      	ldr	r3, [r5, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d0c6      	beq.n	800a9f6 <__sflush_r+0x32>
 800aa68:	2b1d      	cmp	r3, #29
 800aa6a:	d001      	beq.n	800aa70 <__sflush_r+0xac>
 800aa6c:	2b16      	cmp	r3, #22
 800aa6e:	d11e      	bne.n	800aaae <__sflush_r+0xea>
 800aa70:	602f      	str	r7, [r5, #0]
 800aa72:	2000      	movs	r0, #0
 800aa74:	e022      	b.n	800aabc <__sflush_r+0xf8>
 800aa76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa7a:	b21b      	sxth	r3, r3
 800aa7c:	e01b      	b.n	800aab6 <__sflush_r+0xf2>
 800aa7e:	690f      	ldr	r7, [r1, #16]
 800aa80:	2f00      	cmp	r7, #0
 800aa82:	d0f6      	beq.n	800aa72 <__sflush_r+0xae>
 800aa84:	0793      	lsls	r3, r2, #30
 800aa86:	680e      	ldr	r6, [r1, #0]
 800aa88:	bf08      	it	eq
 800aa8a:	694b      	ldreq	r3, [r1, #20]
 800aa8c:	600f      	str	r7, [r1, #0]
 800aa8e:	bf18      	it	ne
 800aa90:	2300      	movne	r3, #0
 800aa92:	eba6 0807 	sub.w	r8, r6, r7
 800aa96:	608b      	str	r3, [r1, #8]
 800aa98:	f1b8 0f00 	cmp.w	r8, #0
 800aa9c:	dde9      	ble.n	800aa72 <__sflush_r+0xae>
 800aa9e:	6a21      	ldr	r1, [r4, #32]
 800aaa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aaa2:	4643      	mov	r3, r8
 800aaa4:	463a      	mov	r2, r7
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b0      	blx	r6
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	dc08      	bgt.n	800aac0 <__sflush_r+0xfc>
 800aaae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	f04f 30ff 	mov.w	r0, #4294967295
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	4407      	add	r7, r0
 800aac2:	eba8 0800 	sub.w	r8, r8, r0
 800aac6:	e7e7      	b.n	800aa98 <__sflush_r+0xd4>
 800aac8:	dfbffffe 	.word	0xdfbffffe

0800aacc <_fflush_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	690b      	ldr	r3, [r1, #16]
 800aad0:	4605      	mov	r5, r0
 800aad2:	460c      	mov	r4, r1
 800aad4:	b913      	cbnz	r3, 800aadc <_fflush_r+0x10>
 800aad6:	2500      	movs	r5, #0
 800aad8:	4628      	mov	r0, r5
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	b118      	cbz	r0, 800aae6 <_fflush_r+0x1a>
 800aade:	6a03      	ldr	r3, [r0, #32]
 800aae0:	b90b      	cbnz	r3, 800aae6 <_fflush_r+0x1a>
 800aae2:	f7fd fa73 	bl	8007fcc <__sinit>
 800aae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0f3      	beq.n	800aad6 <_fflush_r+0xa>
 800aaee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aaf0:	07d0      	lsls	r0, r2, #31
 800aaf2:	d404      	bmi.n	800aafe <_fflush_r+0x32>
 800aaf4:	0599      	lsls	r1, r3, #22
 800aaf6:	d402      	bmi.n	800aafe <_fflush_r+0x32>
 800aaf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aafa:	f7fd fb7e 	bl	80081fa <__retarget_lock_acquire_recursive>
 800aafe:	4628      	mov	r0, r5
 800ab00:	4621      	mov	r1, r4
 800ab02:	f7ff ff5f 	bl	800a9c4 <__sflush_r>
 800ab06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab08:	07da      	lsls	r2, r3, #31
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	d4e4      	bmi.n	800aad8 <_fflush_r+0xc>
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	059b      	lsls	r3, r3, #22
 800ab12:	d4e1      	bmi.n	800aad8 <_fflush_r+0xc>
 800ab14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab16:	f7fd fb71 	bl	80081fc <__retarget_lock_release_recursive>
 800ab1a:	e7dd      	b.n	800aad8 <_fflush_r+0xc>

0800ab1c <memmove>:
 800ab1c:	4288      	cmp	r0, r1
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	eb01 0402 	add.w	r4, r1, r2
 800ab24:	d902      	bls.n	800ab2c <memmove+0x10>
 800ab26:	4284      	cmp	r4, r0
 800ab28:	4623      	mov	r3, r4
 800ab2a:	d807      	bhi.n	800ab3c <memmove+0x20>
 800ab2c:	1e43      	subs	r3, r0, #1
 800ab2e:	42a1      	cmp	r1, r4
 800ab30:	d008      	beq.n	800ab44 <memmove+0x28>
 800ab32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab3a:	e7f8      	b.n	800ab2e <memmove+0x12>
 800ab3c:	4402      	add	r2, r0
 800ab3e:	4601      	mov	r1, r0
 800ab40:	428a      	cmp	r2, r1
 800ab42:	d100      	bne.n	800ab46 <memmove+0x2a>
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab4e:	e7f7      	b.n	800ab40 <memmove+0x24>

0800ab50 <strncmp>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	b16a      	cbz	r2, 800ab70 <strncmp+0x20>
 800ab54:	3901      	subs	r1, #1
 800ab56:	1884      	adds	r4, r0, r2
 800ab58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d103      	bne.n	800ab6c <strncmp+0x1c>
 800ab64:	42a0      	cmp	r0, r4
 800ab66:	d001      	beq.n	800ab6c <strncmp+0x1c>
 800ab68:	2a00      	cmp	r2, #0
 800ab6a:	d1f5      	bne.n	800ab58 <strncmp+0x8>
 800ab6c:	1ad0      	subs	r0, r2, r3
 800ab6e:	bd10      	pop	{r4, pc}
 800ab70:	4610      	mov	r0, r2
 800ab72:	e7fc      	b.n	800ab6e <strncmp+0x1e>

0800ab74 <_sbrk_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d06      	ldr	r5, [pc, #24]	@ (800ab90 <_sbrk_r+0x1c>)
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	f7f7 fd14 	bl	80025ac <_sbrk>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_sbrk_r+0x1a>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_sbrk_r+0x1a>
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	20000898 	.word	0x20000898

0800ab94 <memcpy>:
 800ab94:	440a      	add	r2, r1
 800ab96:	4291      	cmp	r1, r2
 800ab98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab9c:	d100      	bne.n	800aba0 <memcpy+0xc>
 800ab9e:	4770      	bx	lr
 800aba0:	b510      	push	{r4, lr}
 800aba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abaa:	4291      	cmp	r1, r2
 800abac:	d1f9      	bne.n	800aba2 <memcpy+0xe>
 800abae:	bd10      	pop	{r4, pc}

0800abb0 <nan>:
 800abb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800abb8 <nan+0x8>
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	00000000 	.word	0x00000000
 800abbc:	7ff80000 	.word	0x7ff80000

0800abc0 <__assert_func>:
 800abc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abc2:	4614      	mov	r4, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	4b09      	ldr	r3, [pc, #36]	@ (800abec <__assert_func+0x2c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4605      	mov	r5, r0
 800abcc:	68d8      	ldr	r0, [r3, #12]
 800abce:	b954      	cbnz	r4, 800abe6 <__assert_func+0x26>
 800abd0:	4b07      	ldr	r3, [pc, #28]	@ (800abf0 <__assert_func+0x30>)
 800abd2:	461c      	mov	r4, r3
 800abd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abd8:	9100      	str	r1, [sp, #0]
 800abda:	462b      	mov	r3, r5
 800abdc:	4905      	ldr	r1, [pc, #20]	@ (800abf4 <__assert_func+0x34>)
 800abde:	f000 fba7 	bl	800b330 <fiprintf>
 800abe2:	f000 fbb7 	bl	800b354 <abort>
 800abe6:	4b04      	ldr	r3, [pc, #16]	@ (800abf8 <__assert_func+0x38>)
 800abe8:	e7f4      	b.n	800abd4 <__assert_func+0x14>
 800abea:	bf00      	nop
 800abec:	20000018 	.word	0x20000018
 800abf0:	0800bcf5 	.word	0x0800bcf5
 800abf4:	0800bcc7 	.word	0x0800bcc7
 800abf8:	0800bcba 	.word	0x0800bcba

0800abfc <_calloc_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	fba1 5402 	umull	r5, r4, r1, r2
 800ac02:	b93c      	cbnz	r4, 800ac14 <_calloc_r+0x18>
 800ac04:	4629      	mov	r1, r5
 800ac06:	f7fe f9c3 	bl	8008f90 <_malloc_r>
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	b928      	cbnz	r0, 800ac1a <_calloc_r+0x1e>
 800ac0e:	2600      	movs	r6, #0
 800ac10:	4630      	mov	r0, r6
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	220c      	movs	r2, #12
 800ac16:	6002      	str	r2, [r0, #0]
 800ac18:	e7f9      	b.n	800ac0e <_calloc_r+0x12>
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	f7fd fa6e 	bl	80080fe <memset>
 800ac22:	e7f5      	b.n	800ac10 <_calloc_r+0x14>

0800ac24 <rshift>:
 800ac24:	6903      	ldr	r3, [r0, #16]
 800ac26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac32:	f100 0414 	add.w	r4, r0, #20
 800ac36:	dd45      	ble.n	800acc4 <rshift+0xa0>
 800ac38:	f011 011f 	ands.w	r1, r1, #31
 800ac3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac44:	d10c      	bne.n	800ac60 <rshift+0x3c>
 800ac46:	f100 0710 	add.w	r7, r0, #16
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	42b1      	cmp	r1, r6
 800ac4e:	d334      	bcc.n	800acba <rshift+0x96>
 800ac50:	1a9b      	subs	r3, r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	1eea      	subs	r2, r5, #3
 800ac56:	4296      	cmp	r6, r2
 800ac58:	bf38      	it	cc
 800ac5a:	2300      	movcc	r3, #0
 800ac5c:	4423      	add	r3, r4
 800ac5e:	e015      	b.n	800ac8c <rshift+0x68>
 800ac60:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac64:	f1c1 0820 	rsb	r8, r1, #32
 800ac68:	40cf      	lsrs	r7, r1
 800ac6a:	f105 0e04 	add.w	lr, r5, #4
 800ac6e:	46a1      	mov	r9, r4
 800ac70:	4576      	cmp	r6, lr
 800ac72:	46f4      	mov	ip, lr
 800ac74:	d815      	bhi.n	800aca2 <rshift+0x7e>
 800ac76:	1a9a      	subs	r2, r3, r2
 800ac78:	0092      	lsls	r2, r2, #2
 800ac7a:	3a04      	subs	r2, #4
 800ac7c:	3501      	adds	r5, #1
 800ac7e:	42ae      	cmp	r6, r5
 800ac80:	bf38      	it	cc
 800ac82:	2200      	movcc	r2, #0
 800ac84:	18a3      	adds	r3, r4, r2
 800ac86:	50a7      	str	r7, [r4, r2]
 800ac88:	b107      	cbz	r7, 800ac8c <rshift+0x68>
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	1b1a      	subs	r2, r3, r4
 800ac8e:	42a3      	cmp	r3, r4
 800ac90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac94:	bf08      	it	eq
 800ac96:	2300      	moveq	r3, #0
 800ac98:	6102      	str	r2, [r0, #16]
 800ac9a:	bf08      	it	eq
 800ac9c:	6143      	streq	r3, [r0, #20]
 800ac9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aca2:	f8dc c000 	ldr.w	ip, [ip]
 800aca6:	fa0c fc08 	lsl.w	ip, ip, r8
 800acaa:	ea4c 0707 	orr.w	r7, ip, r7
 800acae:	f849 7b04 	str.w	r7, [r9], #4
 800acb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acb6:	40cf      	lsrs	r7, r1
 800acb8:	e7da      	b.n	800ac70 <rshift+0x4c>
 800acba:	f851 cb04 	ldr.w	ip, [r1], #4
 800acbe:	f847 cf04 	str.w	ip, [r7, #4]!
 800acc2:	e7c3      	b.n	800ac4c <rshift+0x28>
 800acc4:	4623      	mov	r3, r4
 800acc6:	e7e1      	b.n	800ac8c <rshift+0x68>

0800acc8 <__hexdig_fun>:
 800acc8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800accc:	2b09      	cmp	r3, #9
 800acce:	d802      	bhi.n	800acd6 <__hexdig_fun+0xe>
 800acd0:	3820      	subs	r0, #32
 800acd2:	b2c0      	uxtb	r0, r0
 800acd4:	4770      	bx	lr
 800acd6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800acda:	2b05      	cmp	r3, #5
 800acdc:	d801      	bhi.n	800ace2 <__hexdig_fun+0x1a>
 800acde:	3847      	subs	r0, #71	@ 0x47
 800ace0:	e7f7      	b.n	800acd2 <__hexdig_fun+0xa>
 800ace2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ace6:	2b05      	cmp	r3, #5
 800ace8:	d801      	bhi.n	800acee <__hexdig_fun+0x26>
 800acea:	3827      	subs	r0, #39	@ 0x27
 800acec:	e7f1      	b.n	800acd2 <__hexdig_fun+0xa>
 800acee:	2000      	movs	r0, #0
 800acf0:	4770      	bx	lr
	...

0800acf4 <__gethex>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	b085      	sub	sp, #20
 800acfa:	468a      	mov	sl, r1
 800acfc:	9302      	str	r3, [sp, #8]
 800acfe:	680b      	ldr	r3, [r1, #0]
 800ad00:	9001      	str	r0, [sp, #4]
 800ad02:	4690      	mov	r8, r2
 800ad04:	1c9c      	adds	r4, r3, #2
 800ad06:	46a1      	mov	r9, r4
 800ad08:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ad0c:	2830      	cmp	r0, #48	@ 0x30
 800ad0e:	d0fa      	beq.n	800ad06 <__gethex+0x12>
 800ad10:	eba9 0303 	sub.w	r3, r9, r3
 800ad14:	f1a3 0b02 	sub.w	fp, r3, #2
 800ad18:	f7ff ffd6 	bl	800acc8 <__hexdig_fun>
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d168      	bne.n	800adf4 <__gethex+0x100>
 800ad22:	49a0      	ldr	r1, [pc, #640]	@ (800afa4 <__gethex+0x2b0>)
 800ad24:	2201      	movs	r2, #1
 800ad26:	4648      	mov	r0, r9
 800ad28:	f7ff ff12 	bl	800ab50 <strncmp>
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d167      	bne.n	800ae02 <__gethex+0x10e>
 800ad32:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ad36:	4626      	mov	r6, r4
 800ad38:	f7ff ffc6 	bl	800acc8 <__hexdig_fun>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d062      	beq.n	800ae06 <__gethex+0x112>
 800ad40:	4623      	mov	r3, r4
 800ad42:	7818      	ldrb	r0, [r3, #0]
 800ad44:	2830      	cmp	r0, #48	@ 0x30
 800ad46:	4699      	mov	r9, r3
 800ad48:	f103 0301 	add.w	r3, r3, #1
 800ad4c:	d0f9      	beq.n	800ad42 <__gethex+0x4e>
 800ad4e:	f7ff ffbb 	bl	800acc8 <__hexdig_fun>
 800ad52:	fab0 f580 	clz	r5, r0
 800ad56:	096d      	lsrs	r5, r5, #5
 800ad58:	f04f 0b01 	mov.w	fp, #1
 800ad5c:	464a      	mov	r2, r9
 800ad5e:	4616      	mov	r6, r2
 800ad60:	3201      	adds	r2, #1
 800ad62:	7830      	ldrb	r0, [r6, #0]
 800ad64:	f7ff ffb0 	bl	800acc8 <__hexdig_fun>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d1f8      	bne.n	800ad5e <__gethex+0x6a>
 800ad6c:	498d      	ldr	r1, [pc, #564]	@ (800afa4 <__gethex+0x2b0>)
 800ad6e:	2201      	movs	r2, #1
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff feed 	bl	800ab50 <strncmp>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d13f      	bne.n	800adfa <__gethex+0x106>
 800ad7a:	b944      	cbnz	r4, 800ad8e <__gethex+0x9a>
 800ad7c:	1c74      	adds	r4, r6, #1
 800ad7e:	4622      	mov	r2, r4
 800ad80:	4616      	mov	r6, r2
 800ad82:	3201      	adds	r2, #1
 800ad84:	7830      	ldrb	r0, [r6, #0]
 800ad86:	f7ff ff9f 	bl	800acc8 <__hexdig_fun>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d1f8      	bne.n	800ad80 <__gethex+0x8c>
 800ad8e:	1ba4      	subs	r4, r4, r6
 800ad90:	00a7      	lsls	r7, r4, #2
 800ad92:	7833      	ldrb	r3, [r6, #0]
 800ad94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ad98:	2b50      	cmp	r3, #80	@ 0x50
 800ad9a:	d13e      	bne.n	800ae1a <__gethex+0x126>
 800ad9c:	7873      	ldrb	r3, [r6, #1]
 800ad9e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ada0:	d033      	beq.n	800ae0a <__gethex+0x116>
 800ada2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ada4:	d034      	beq.n	800ae10 <__gethex+0x11c>
 800ada6:	1c71      	adds	r1, r6, #1
 800ada8:	2400      	movs	r4, #0
 800adaa:	7808      	ldrb	r0, [r1, #0]
 800adac:	f7ff ff8c 	bl	800acc8 <__hexdig_fun>
 800adb0:	1e43      	subs	r3, r0, #1
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b18      	cmp	r3, #24
 800adb6:	d830      	bhi.n	800ae1a <__gethex+0x126>
 800adb8:	f1a0 0210 	sub.w	r2, r0, #16
 800adbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800adc0:	f7ff ff82 	bl	800acc8 <__hexdig_fun>
 800adc4:	f100 3cff 	add.w	ip, r0, #4294967295
 800adc8:	fa5f fc8c 	uxtb.w	ip, ip
 800adcc:	f1bc 0f18 	cmp.w	ip, #24
 800add0:	f04f 030a 	mov.w	r3, #10
 800add4:	d91e      	bls.n	800ae14 <__gethex+0x120>
 800add6:	b104      	cbz	r4, 800adda <__gethex+0xe6>
 800add8:	4252      	negs	r2, r2
 800adda:	4417      	add	r7, r2
 800addc:	f8ca 1000 	str.w	r1, [sl]
 800ade0:	b1ed      	cbz	r5, 800ae1e <__gethex+0x12a>
 800ade2:	f1bb 0f00 	cmp.w	fp, #0
 800ade6:	bf0c      	ite	eq
 800ade8:	2506      	moveq	r5, #6
 800adea:	2500      	movne	r5, #0
 800adec:	4628      	mov	r0, r5
 800adee:	b005      	add	sp, #20
 800adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf4:	2500      	movs	r5, #0
 800adf6:	462c      	mov	r4, r5
 800adf8:	e7b0      	b.n	800ad5c <__gethex+0x68>
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	d1c7      	bne.n	800ad8e <__gethex+0x9a>
 800adfe:	4627      	mov	r7, r4
 800ae00:	e7c7      	b.n	800ad92 <__gethex+0x9e>
 800ae02:	464e      	mov	r6, r9
 800ae04:	462f      	mov	r7, r5
 800ae06:	2501      	movs	r5, #1
 800ae08:	e7c3      	b.n	800ad92 <__gethex+0x9e>
 800ae0a:	2400      	movs	r4, #0
 800ae0c:	1cb1      	adds	r1, r6, #2
 800ae0e:	e7cc      	b.n	800adaa <__gethex+0xb6>
 800ae10:	2401      	movs	r4, #1
 800ae12:	e7fb      	b.n	800ae0c <__gethex+0x118>
 800ae14:	fb03 0002 	mla	r0, r3, r2, r0
 800ae18:	e7ce      	b.n	800adb8 <__gethex+0xc4>
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	e7de      	b.n	800addc <__gethex+0xe8>
 800ae1e:	eba6 0309 	sub.w	r3, r6, r9
 800ae22:	3b01      	subs	r3, #1
 800ae24:	4629      	mov	r1, r5
 800ae26:	2b07      	cmp	r3, #7
 800ae28:	dc0a      	bgt.n	800ae40 <__gethex+0x14c>
 800ae2a:	9801      	ldr	r0, [sp, #4]
 800ae2c:	f7fe f93c 	bl	80090a8 <_Balloc>
 800ae30:	4604      	mov	r4, r0
 800ae32:	b940      	cbnz	r0, 800ae46 <__gethex+0x152>
 800ae34:	4b5c      	ldr	r3, [pc, #368]	@ (800afa8 <__gethex+0x2b4>)
 800ae36:	4602      	mov	r2, r0
 800ae38:	21e4      	movs	r1, #228	@ 0xe4
 800ae3a:	485c      	ldr	r0, [pc, #368]	@ (800afac <__gethex+0x2b8>)
 800ae3c:	f7ff fec0 	bl	800abc0 <__assert_func>
 800ae40:	3101      	adds	r1, #1
 800ae42:	105b      	asrs	r3, r3, #1
 800ae44:	e7ef      	b.n	800ae26 <__gethex+0x132>
 800ae46:	f100 0a14 	add.w	sl, r0, #20
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	4655      	mov	r5, sl
 800ae4e:	469b      	mov	fp, r3
 800ae50:	45b1      	cmp	r9, r6
 800ae52:	d337      	bcc.n	800aec4 <__gethex+0x1d0>
 800ae54:	f845 bb04 	str.w	fp, [r5], #4
 800ae58:	eba5 050a 	sub.w	r5, r5, sl
 800ae5c:	10ad      	asrs	r5, r5, #2
 800ae5e:	6125      	str	r5, [r4, #16]
 800ae60:	4658      	mov	r0, fp
 800ae62:	f7fe fa13 	bl	800928c <__hi0bits>
 800ae66:	016d      	lsls	r5, r5, #5
 800ae68:	f8d8 6000 	ldr.w	r6, [r8]
 800ae6c:	1a2d      	subs	r5, r5, r0
 800ae6e:	42b5      	cmp	r5, r6
 800ae70:	dd54      	ble.n	800af1c <__gethex+0x228>
 800ae72:	1bad      	subs	r5, r5, r6
 800ae74:	4629      	mov	r1, r5
 800ae76:	4620      	mov	r0, r4
 800ae78:	f7fe fda7 	bl	80099ca <__any_on>
 800ae7c:	4681      	mov	r9, r0
 800ae7e:	b178      	cbz	r0, 800aea0 <__gethex+0x1ac>
 800ae80:	1e6b      	subs	r3, r5, #1
 800ae82:	1159      	asrs	r1, r3, #5
 800ae84:	f003 021f 	and.w	r2, r3, #31
 800ae88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae8c:	f04f 0901 	mov.w	r9, #1
 800ae90:	fa09 f202 	lsl.w	r2, r9, r2
 800ae94:	420a      	tst	r2, r1
 800ae96:	d003      	beq.n	800aea0 <__gethex+0x1ac>
 800ae98:	454b      	cmp	r3, r9
 800ae9a:	dc36      	bgt.n	800af0a <__gethex+0x216>
 800ae9c:	f04f 0902 	mov.w	r9, #2
 800aea0:	4629      	mov	r1, r5
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7ff febe 	bl	800ac24 <rshift>
 800aea8:	442f      	add	r7, r5
 800aeaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aeae:	42bb      	cmp	r3, r7
 800aeb0:	da42      	bge.n	800af38 <__gethex+0x244>
 800aeb2:	9801      	ldr	r0, [sp, #4]
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	f7fe f937 	bl	8009128 <_Bfree>
 800aeba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aebc:	2300      	movs	r3, #0
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	25a3      	movs	r5, #163	@ 0xa3
 800aec2:	e793      	b.n	800adec <__gethex+0xf8>
 800aec4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aec8:	2a2e      	cmp	r2, #46	@ 0x2e
 800aeca:	d012      	beq.n	800aef2 <__gethex+0x1fe>
 800aecc:	2b20      	cmp	r3, #32
 800aece:	d104      	bne.n	800aeda <__gethex+0x1e6>
 800aed0:	f845 bb04 	str.w	fp, [r5], #4
 800aed4:	f04f 0b00 	mov.w	fp, #0
 800aed8:	465b      	mov	r3, fp
 800aeda:	7830      	ldrb	r0, [r6, #0]
 800aedc:	9303      	str	r3, [sp, #12]
 800aede:	f7ff fef3 	bl	800acc8 <__hexdig_fun>
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	f000 000f 	and.w	r0, r0, #15
 800aee8:	4098      	lsls	r0, r3
 800aeea:	ea4b 0b00 	orr.w	fp, fp, r0
 800aeee:	3304      	adds	r3, #4
 800aef0:	e7ae      	b.n	800ae50 <__gethex+0x15c>
 800aef2:	45b1      	cmp	r9, r6
 800aef4:	d8ea      	bhi.n	800aecc <__gethex+0x1d8>
 800aef6:	492b      	ldr	r1, [pc, #172]	@ (800afa4 <__gethex+0x2b0>)
 800aef8:	9303      	str	r3, [sp, #12]
 800aefa:	2201      	movs	r2, #1
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff fe27 	bl	800ab50 <strncmp>
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	2800      	cmp	r0, #0
 800af06:	d1e1      	bne.n	800aecc <__gethex+0x1d8>
 800af08:	e7a2      	b.n	800ae50 <__gethex+0x15c>
 800af0a:	1ea9      	subs	r1, r5, #2
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7fe fd5c 	bl	80099ca <__any_on>
 800af12:	2800      	cmp	r0, #0
 800af14:	d0c2      	beq.n	800ae9c <__gethex+0x1a8>
 800af16:	f04f 0903 	mov.w	r9, #3
 800af1a:	e7c1      	b.n	800aea0 <__gethex+0x1ac>
 800af1c:	da09      	bge.n	800af32 <__gethex+0x23e>
 800af1e:	1b75      	subs	r5, r6, r5
 800af20:	4621      	mov	r1, r4
 800af22:	9801      	ldr	r0, [sp, #4]
 800af24:	462a      	mov	r2, r5
 800af26:	f7fe fb17 	bl	8009558 <__lshift>
 800af2a:	1b7f      	subs	r7, r7, r5
 800af2c:	4604      	mov	r4, r0
 800af2e:	f100 0a14 	add.w	sl, r0, #20
 800af32:	f04f 0900 	mov.w	r9, #0
 800af36:	e7b8      	b.n	800aeaa <__gethex+0x1b6>
 800af38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af3c:	42bd      	cmp	r5, r7
 800af3e:	dd6f      	ble.n	800b020 <__gethex+0x32c>
 800af40:	1bed      	subs	r5, r5, r7
 800af42:	42ae      	cmp	r6, r5
 800af44:	dc34      	bgt.n	800afb0 <__gethex+0x2bc>
 800af46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d022      	beq.n	800af94 <__gethex+0x2a0>
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d024      	beq.n	800af9c <__gethex+0x2a8>
 800af52:	2b01      	cmp	r3, #1
 800af54:	d115      	bne.n	800af82 <__gethex+0x28e>
 800af56:	42ae      	cmp	r6, r5
 800af58:	d113      	bne.n	800af82 <__gethex+0x28e>
 800af5a:	2e01      	cmp	r6, #1
 800af5c:	d10b      	bne.n	800af76 <__gethex+0x282>
 800af5e:	9a02      	ldr	r2, [sp, #8]
 800af60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	2301      	movs	r3, #1
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	f8ca 3000 	str.w	r3, [sl]
 800af6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af70:	2562      	movs	r5, #98	@ 0x62
 800af72:	601c      	str	r4, [r3, #0]
 800af74:	e73a      	b.n	800adec <__gethex+0xf8>
 800af76:	1e71      	subs	r1, r6, #1
 800af78:	4620      	mov	r0, r4
 800af7a:	f7fe fd26 	bl	80099ca <__any_on>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d1ed      	bne.n	800af5e <__gethex+0x26a>
 800af82:	9801      	ldr	r0, [sp, #4]
 800af84:	4621      	mov	r1, r4
 800af86:	f7fe f8cf 	bl	8009128 <_Bfree>
 800af8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af8c:	2300      	movs	r3, #0
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	2550      	movs	r5, #80	@ 0x50
 800af92:	e72b      	b.n	800adec <__gethex+0xf8>
 800af94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1f3      	bne.n	800af82 <__gethex+0x28e>
 800af9a:	e7e0      	b.n	800af5e <__gethex+0x26a>
 800af9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1dd      	bne.n	800af5e <__gethex+0x26a>
 800afa2:	e7ee      	b.n	800af82 <__gethex+0x28e>
 800afa4:	0800bb48 	.word	0x0800bb48
 800afa8:	0800b9dd 	.word	0x0800b9dd
 800afac:	0800bcf6 	.word	0x0800bcf6
 800afb0:	1e6f      	subs	r7, r5, #1
 800afb2:	f1b9 0f00 	cmp.w	r9, #0
 800afb6:	d130      	bne.n	800b01a <__gethex+0x326>
 800afb8:	b127      	cbz	r7, 800afc4 <__gethex+0x2d0>
 800afba:	4639      	mov	r1, r7
 800afbc:	4620      	mov	r0, r4
 800afbe:	f7fe fd04 	bl	80099ca <__any_on>
 800afc2:	4681      	mov	r9, r0
 800afc4:	117a      	asrs	r2, r7, #5
 800afc6:	2301      	movs	r3, #1
 800afc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800afcc:	f007 071f 	and.w	r7, r7, #31
 800afd0:	40bb      	lsls	r3, r7
 800afd2:	4213      	tst	r3, r2
 800afd4:	4629      	mov	r1, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	bf18      	it	ne
 800afda:	f049 0902 	orrne.w	r9, r9, #2
 800afde:	f7ff fe21 	bl	800ac24 <rshift>
 800afe2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800afe6:	1b76      	subs	r6, r6, r5
 800afe8:	2502      	movs	r5, #2
 800afea:	f1b9 0f00 	cmp.w	r9, #0
 800afee:	d047      	beq.n	800b080 <__gethex+0x38c>
 800aff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d015      	beq.n	800b024 <__gethex+0x330>
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d017      	beq.n	800b02c <__gethex+0x338>
 800affc:	2b01      	cmp	r3, #1
 800affe:	d109      	bne.n	800b014 <__gethex+0x320>
 800b000:	f019 0f02 	tst.w	r9, #2
 800b004:	d006      	beq.n	800b014 <__gethex+0x320>
 800b006:	f8da 3000 	ldr.w	r3, [sl]
 800b00a:	ea49 0903 	orr.w	r9, r9, r3
 800b00e:	f019 0f01 	tst.w	r9, #1
 800b012:	d10e      	bne.n	800b032 <__gethex+0x33e>
 800b014:	f045 0510 	orr.w	r5, r5, #16
 800b018:	e032      	b.n	800b080 <__gethex+0x38c>
 800b01a:	f04f 0901 	mov.w	r9, #1
 800b01e:	e7d1      	b.n	800afc4 <__gethex+0x2d0>
 800b020:	2501      	movs	r5, #1
 800b022:	e7e2      	b.n	800afea <__gethex+0x2f6>
 800b024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b026:	f1c3 0301 	rsb	r3, r3, #1
 800b02a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0f0      	beq.n	800b014 <__gethex+0x320>
 800b032:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b036:	f104 0314 	add.w	r3, r4, #20
 800b03a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b03e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b042:	f04f 0c00 	mov.w	ip, #0
 800b046:	4618      	mov	r0, r3
 800b048:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b050:	d01b      	beq.n	800b08a <__gethex+0x396>
 800b052:	3201      	adds	r2, #1
 800b054:	6002      	str	r2, [r0, #0]
 800b056:	2d02      	cmp	r5, #2
 800b058:	f104 0314 	add.w	r3, r4, #20
 800b05c:	d13c      	bne.n	800b0d8 <__gethex+0x3e4>
 800b05e:	f8d8 2000 	ldr.w	r2, [r8]
 800b062:	3a01      	subs	r2, #1
 800b064:	42b2      	cmp	r2, r6
 800b066:	d109      	bne.n	800b07c <__gethex+0x388>
 800b068:	1171      	asrs	r1, r6, #5
 800b06a:	2201      	movs	r2, #1
 800b06c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b070:	f006 061f 	and.w	r6, r6, #31
 800b074:	fa02 f606 	lsl.w	r6, r2, r6
 800b078:	421e      	tst	r6, r3
 800b07a:	d13a      	bne.n	800b0f2 <__gethex+0x3fe>
 800b07c:	f045 0520 	orr.w	r5, r5, #32
 800b080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b082:	601c      	str	r4, [r3, #0]
 800b084:	9b02      	ldr	r3, [sp, #8]
 800b086:	601f      	str	r7, [r3, #0]
 800b088:	e6b0      	b.n	800adec <__gethex+0xf8>
 800b08a:	4299      	cmp	r1, r3
 800b08c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b090:	d8d9      	bhi.n	800b046 <__gethex+0x352>
 800b092:	68a3      	ldr	r3, [r4, #8]
 800b094:	459b      	cmp	fp, r3
 800b096:	db17      	blt.n	800b0c8 <__gethex+0x3d4>
 800b098:	6861      	ldr	r1, [r4, #4]
 800b09a:	9801      	ldr	r0, [sp, #4]
 800b09c:	3101      	adds	r1, #1
 800b09e:	f7fe f803 	bl	80090a8 <_Balloc>
 800b0a2:	4681      	mov	r9, r0
 800b0a4:	b918      	cbnz	r0, 800b0ae <__gethex+0x3ba>
 800b0a6:	4b1a      	ldr	r3, [pc, #104]	@ (800b110 <__gethex+0x41c>)
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	2184      	movs	r1, #132	@ 0x84
 800b0ac:	e6c5      	b.n	800ae3a <__gethex+0x146>
 800b0ae:	6922      	ldr	r2, [r4, #16]
 800b0b0:	3202      	adds	r2, #2
 800b0b2:	f104 010c 	add.w	r1, r4, #12
 800b0b6:	0092      	lsls	r2, r2, #2
 800b0b8:	300c      	adds	r0, #12
 800b0ba:	f7ff fd6b 	bl	800ab94 <memcpy>
 800b0be:	4621      	mov	r1, r4
 800b0c0:	9801      	ldr	r0, [sp, #4]
 800b0c2:	f7fe f831 	bl	8009128 <_Bfree>
 800b0c6:	464c      	mov	r4, r9
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0d0:	6122      	str	r2, [r4, #16]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	615a      	str	r2, [r3, #20]
 800b0d6:	e7be      	b.n	800b056 <__gethex+0x362>
 800b0d8:	6922      	ldr	r2, [r4, #16]
 800b0da:	455a      	cmp	r2, fp
 800b0dc:	dd0b      	ble.n	800b0f6 <__gethex+0x402>
 800b0de:	2101      	movs	r1, #1
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f7ff fd9f 	bl	800ac24 <rshift>
 800b0e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0ea:	3701      	adds	r7, #1
 800b0ec:	42bb      	cmp	r3, r7
 800b0ee:	f6ff aee0 	blt.w	800aeb2 <__gethex+0x1be>
 800b0f2:	2501      	movs	r5, #1
 800b0f4:	e7c2      	b.n	800b07c <__gethex+0x388>
 800b0f6:	f016 061f 	ands.w	r6, r6, #31
 800b0fa:	d0fa      	beq.n	800b0f2 <__gethex+0x3fe>
 800b0fc:	4453      	add	r3, sl
 800b0fe:	f1c6 0620 	rsb	r6, r6, #32
 800b102:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b106:	f7fe f8c1 	bl	800928c <__hi0bits>
 800b10a:	42b0      	cmp	r0, r6
 800b10c:	dbe7      	blt.n	800b0de <__gethex+0x3ea>
 800b10e:	e7f0      	b.n	800b0f2 <__gethex+0x3fe>
 800b110:	0800b9dd 	.word	0x0800b9dd

0800b114 <L_shift>:
 800b114:	f1c2 0208 	rsb	r2, r2, #8
 800b118:	0092      	lsls	r2, r2, #2
 800b11a:	b570      	push	{r4, r5, r6, lr}
 800b11c:	f1c2 0620 	rsb	r6, r2, #32
 800b120:	6843      	ldr	r3, [r0, #4]
 800b122:	6804      	ldr	r4, [r0, #0]
 800b124:	fa03 f506 	lsl.w	r5, r3, r6
 800b128:	432c      	orrs	r4, r5
 800b12a:	40d3      	lsrs	r3, r2
 800b12c:	6004      	str	r4, [r0, #0]
 800b12e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b132:	4288      	cmp	r0, r1
 800b134:	d3f4      	bcc.n	800b120 <L_shift+0xc>
 800b136:	bd70      	pop	{r4, r5, r6, pc}

0800b138 <__match>:
 800b138:	b530      	push	{r4, r5, lr}
 800b13a:	6803      	ldr	r3, [r0, #0]
 800b13c:	3301      	adds	r3, #1
 800b13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b142:	b914      	cbnz	r4, 800b14a <__match+0x12>
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	2001      	movs	r0, #1
 800b148:	bd30      	pop	{r4, r5, pc}
 800b14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b14e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b152:	2d19      	cmp	r5, #25
 800b154:	bf98      	it	ls
 800b156:	3220      	addls	r2, #32
 800b158:	42a2      	cmp	r2, r4
 800b15a:	d0f0      	beq.n	800b13e <__match+0x6>
 800b15c:	2000      	movs	r0, #0
 800b15e:	e7f3      	b.n	800b148 <__match+0x10>

0800b160 <__hexnan>:
 800b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	680b      	ldr	r3, [r1, #0]
 800b166:	6801      	ldr	r1, [r0, #0]
 800b168:	115e      	asrs	r6, r3, #5
 800b16a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b16e:	f013 031f 	ands.w	r3, r3, #31
 800b172:	b087      	sub	sp, #28
 800b174:	bf18      	it	ne
 800b176:	3604      	addne	r6, #4
 800b178:	2500      	movs	r5, #0
 800b17a:	1f37      	subs	r7, r6, #4
 800b17c:	4682      	mov	sl, r0
 800b17e:	4690      	mov	r8, r2
 800b180:	9301      	str	r3, [sp, #4]
 800b182:	f846 5c04 	str.w	r5, [r6, #-4]
 800b186:	46b9      	mov	r9, r7
 800b188:	463c      	mov	r4, r7
 800b18a:	9502      	str	r5, [sp, #8]
 800b18c:	46ab      	mov	fp, r5
 800b18e:	784a      	ldrb	r2, [r1, #1]
 800b190:	1c4b      	adds	r3, r1, #1
 800b192:	9303      	str	r3, [sp, #12]
 800b194:	b342      	cbz	r2, 800b1e8 <__hexnan+0x88>
 800b196:	4610      	mov	r0, r2
 800b198:	9105      	str	r1, [sp, #20]
 800b19a:	9204      	str	r2, [sp, #16]
 800b19c:	f7ff fd94 	bl	800acc8 <__hexdig_fun>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d151      	bne.n	800b248 <__hexnan+0xe8>
 800b1a4:	9a04      	ldr	r2, [sp, #16]
 800b1a6:	9905      	ldr	r1, [sp, #20]
 800b1a8:	2a20      	cmp	r2, #32
 800b1aa:	d818      	bhi.n	800b1de <__hexnan+0x7e>
 800b1ac:	9b02      	ldr	r3, [sp, #8]
 800b1ae:	459b      	cmp	fp, r3
 800b1b0:	dd13      	ble.n	800b1da <__hexnan+0x7a>
 800b1b2:	454c      	cmp	r4, r9
 800b1b4:	d206      	bcs.n	800b1c4 <__hexnan+0x64>
 800b1b6:	2d07      	cmp	r5, #7
 800b1b8:	dc04      	bgt.n	800b1c4 <__hexnan+0x64>
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4649      	mov	r1, r9
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f7ff ffa8 	bl	800b114 <L_shift>
 800b1c4:	4544      	cmp	r4, r8
 800b1c6:	d952      	bls.n	800b26e <__hexnan+0x10e>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f1a4 0904 	sub.w	r9, r4, #4
 800b1ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1d2:	f8cd b008 	str.w	fp, [sp, #8]
 800b1d6:	464c      	mov	r4, r9
 800b1d8:	461d      	mov	r5, r3
 800b1da:	9903      	ldr	r1, [sp, #12]
 800b1dc:	e7d7      	b.n	800b18e <__hexnan+0x2e>
 800b1de:	2a29      	cmp	r2, #41	@ 0x29
 800b1e0:	d157      	bne.n	800b292 <__hexnan+0x132>
 800b1e2:	3102      	adds	r1, #2
 800b1e4:	f8ca 1000 	str.w	r1, [sl]
 800b1e8:	f1bb 0f00 	cmp.w	fp, #0
 800b1ec:	d051      	beq.n	800b292 <__hexnan+0x132>
 800b1ee:	454c      	cmp	r4, r9
 800b1f0:	d206      	bcs.n	800b200 <__hexnan+0xa0>
 800b1f2:	2d07      	cmp	r5, #7
 800b1f4:	dc04      	bgt.n	800b200 <__hexnan+0xa0>
 800b1f6:	462a      	mov	r2, r5
 800b1f8:	4649      	mov	r1, r9
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f7ff ff8a 	bl	800b114 <L_shift>
 800b200:	4544      	cmp	r4, r8
 800b202:	d936      	bls.n	800b272 <__hexnan+0x112>
 800b204:	f1a8 0204 	sub.w	r2, r8, #4
 800b208:	4623      	mov	r3, r4
 800b20a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b20e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b212:	429f      	cmp	r7, r3
 800b214:	d2f9      	bcs.n	800b20a <__hexnan+0xaa>
 800b216:	1b3b      	subs	r3, r7, r4
 800b218:	f023 0303 	bic.w	r3, r3, #3
 800b21c:	3304      	adds	r3, #4
 800b21e:	3401      	adds	r4, #1
 800b220:	3e03      	subs	r6, #3
 800b222:	42b4      	cmp	r4, r6
 800b224:	bf88      	it	hi
 800b226:	2304      	movhi	r3, #4
 800b228:	4443      	add	r3, r8
 800b22a:	2200      	movs	r2, #0
 800b22c:	f843 2b04 	str.w	r2, [r3], #4
 800b230:	429f      	cmp	r7, r3
 800b232:	d2fb      	bcs.n	800b22c <__hexnan+0xcc>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	b91b      	cbnz	r3, 800b240 <__hexnan+0xe0>
 800b238:	4547      	cmp	r7, r8
 800b23a:	d128      	bne.n	800b28e <__hexnan+0x12e>
 800b23c:	2301      	movs	r3, #1
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	2005      	movs	r0, #5
 800b242:	b007      	add	sp, #28
 800b244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b248:	3501      	adds	r5, #1
 800b24a:	2d08      	cmp	r5, #8
 800b24c:	f10b 0b01 	add.w	fp, fp, #1
 800b250:	dd06      	ble.n	800b260 <__hexnan+0x100>
 800b252:	4544      	cmp	r4, r8
 800b254:	d9c1      	bls.n	800b1da <__hexnan+0x7a>
 800b256:	2300      	movs	r3, #0
 800b258:	f844 3c04 	str.w	r3, [r4, #-4]
 800b25c:	2501      	movs	r5, #1
 800b25e:	3c04      	subs	r4, #4
 800b260:	6822      	ldr	r2, [r4, #0]
 800b262:	f000 000f 	and.w	r0, r0, #15
 800b266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b26a:	6020      	str	r0, [r4, #0]
 800b26c:	e7b5      	b.n	800b1da <__hexnan+0x7a>
 800b26e:	2508      	movs	r5, #8
 800b270:	e7b3      	b.n	800b1da <__hexnan+0x7a>
 800b272:	9b01      	ldr	r3, [sp, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0dd      	beq.n	800b234 <__hexnan+0xd4>
 800b278:	f1c3 0320 	rsb	r3, r3, #32
 800b27c:	f04f 32ff 	mov.w	r2, #4294967295
 800b280:	40da      	lsrs	r2, r3
 800b282:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b286:	4013      	ands	r3, r2
 800b288:	f846 3c04 	str.w	r3, [r6, #-4]
 800b28c:	e7d2      	b.n	800b234 <__hexnan+0xd4>
 800b28e:	3f04      	subs	r7, #4
 800b290:	e7d0      	b.n	800b234 <__hexnan+0xd4>
 800b292:	2004      	movs	r0, #4
 800b294:	e7d5      	b.n	800b242 <__hexnan+0xe2>

0800b296 <__ascii_mbtowc>:
 800b296:	b082      	sub	sp, #8
 800b298:	b901      	cbnz	r1, 800b29c <__ascii_mbtowc+0x6>
 800b29a:	a901      	add	r1, sp, #4
 800b29c:	b142      	cbz	r2, 800b2b0 <__ascii_mbtowc+0x1a>
 800b29e:	b14b      	cbz	r3, 800b2b4 <__ascii_mbtowc+0x1e>
 800b2a0:	7813      	ldrb	r3, [r2, #0]
 800b2a2:	600b      	str	r3, [r1, #0]
 800b2a4:	7812      	ldrb	r2, [r2, #0]
 800b2a6:	1e10      	subs	r0, r2, #0
 800b2a8:	bf18      	it	ne
 800b2aa:	2001      	movne	r0, #1
 800b2ac:	b002      	add	sp, #8
 800b2ae:	4770      	bx	lr
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	e7fb      	b.n	800b2ac <__ascii_mbtowc+0x16>
 800b2b4:	f06f 0001 	mvn.w	r0, #1
 800b2b8:	e7f8      	b.n	800b2ac <__ascii_mbtowc+0x16>

0800b2ba <_realloc_r>:
 800b2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	4680      	mov	r8, r0
 800b2c0:	4615      	mov	r5, r2
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	b921      	cbnz	r1, 800b2d0 <_realloc_r+0x16>
 800b2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	f7fd be60 	b.w	8008f90 <_malloc_r>
 800b2d0:	b92a      	cbnz	r2, 800b2de <_realloc_r+0x24>
 800b2d2:	f7fd fde9 	bl	8008ea8 <_free_r>
 800b2d6:	2400      	movs	r4, #0
 800b2d8:	4620      	mov	r0, r4
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2de:	f000 f840 	bl	800b362 <_malloc_usable_size_r>
 800b2e2:	4285      	cmp	r5, r0
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	d802      	bhi.n	800b2ee <_realloc_r+0x34>
 800b2e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2ec:	d8f4      	bhi.n	800b2d8 <_realloc_r+0x1e>
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	f7fd fe4d 	bl	8008f90 <_malloc_r>
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d0ec      	beq.n	800b2d6 <_realloc_r+0x1c>
 800b2fc:	42b5      	cmp	r5, r6
 800b2fe:	462a      	mov	r2, r5
 800b300:	4621      	mov	r1, r4
 800b302:	bf28      	it	cs
 800b304:	4632      	movcs	r2, r6
 800b306:	f7ff fc45 	bl	800ab94 <memcpy>
 800b30a:	4621      	mov	r1, r4
 800b30c:	4640      	mov	r0, r8
 800b30e:	f7fd fdcb 	bl	8008ea8 <_free_r>
 800b312:	463c      	mov	r4, r7
 800b314:	e7e0      	b.n	800b2d8 <_realloc_r+0x1e>

0800b316 <__ascii_wctomb>:
 800b316:	4603      	mov	r3, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	b141      	cbz	r1, 800b32e <__ascii_wctomb+0x18>
 800b31c:	2aff      	cmp	r2, #255	@ 0xff
 800b31e:	d904      	bls.n	800b32a <__ascii_wctomb+0x14>
 800b320:	228a      	movs	r2, #138	@ 0x8a
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	4770      	bx	lr
 800b32a:	700a      	strb	r2, [r1, #0]
 800b32c:	2001      	movs	r0, #1
 800b32e:	4770      	bx	lr

0800b330 <fiprintf>:
 800b330:	b40e      	push	{r1, r2, r3}
 800b332:	b503      	push	{r0, r1, lr}
 800b334:	4601      	mov	r1, r0
 800b336:	ab03      	add	r3, sp, #12
 800b338:	4805      	ldr	r0, [pc, #20]	@ (800b350 <fiprintf+0x20>)
 800b33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33e:	6800      	ldr	r0, [r0, #0]
 800b340:	9301      	str	r3, [sp, #4]
 800b342:	f000 f83f 	bl	800b3c4 <_vfiprintf_r>
 800b346:	b002      	add	sp, #8
 800b348:	f85d eb04 	ldr.w	lr, [sp], #4
 800b34c:	b003      	add	sp, #12
 800b34e:	4770      	bx	lr
 800b350:	20000018 	.word	0x20000018

0800b354 <abort>:
 800b354:	b508      	push	{r3, lr}
 800b356:	2006      	movs	r0, #6
 800b358:	f000 fa08 	bl	800b76c <raise>
 800b35c:	2001      	movs	r0, #1
 800b35e:	f7f7 f8ad 	bl	80024bc <_exit>

0800b362 <_malloc_usable_size_r>:
 800b362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b366:	1f18      	subs	r0, r3, #4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bfbc      	itt	lt
 800b36c:	580b      	ldrlt	r3, [r1, r0]
 800b36e:	18c0      	addlt	r0, r0, r3
 800b370:	4770      	bx	lr

0800b372 <__sfputc_r>:
 800b372:	6893      	ldr	r3, [r2, #8]
 800b374:	3b01      	subs	r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	b410      	push	{r4}
 800b37a:	6093      	str	r3, [r2, #8]
 800b37c:	da08      	bge.n	800b390 <__sfputc_r+0x1e>
 800b37e:	6994      	ldr	r4, [r2, #24]
 800b380:	42a3      	cmp	r3, r4
 800b382:	db01      	blt.n	800b388 <__sfputc_r+0x16>
 800b384:	290a      	cmp	r1, #10
 800b386:	d103      	bne.n	800b390 <__sfputc_r+0x1e>
 800b388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38c:	f000 b932 	b.w	800b5f4 <__swbuf_r>
 800b390:	6813      	ldr	r3, [r2, #0]
 800b392:	1c58      	adds	r0, r3, #1
 800b394:	6010      	str	r0, [r2, #0]
 800b396:	7019      	strb	r1, [r3, #0]
 800b398:	4608      	mov	r0, r1
 800b39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <__sfputs_r>:
 800b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	460f      	mov	r7, r1
 800b3a6:	4614      	mov	r4, r2
 800b3a8:	18d5      	adds	r5, r2, r3
 800b3aa:	42ac      	cmp	r4, r5
 800b3ac:	d101      	bne.n	800b3b2 <__sfputs_r+0x12>
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	e007      	b.n	800b3c2 <__sfputs_r+0x22>
 800b3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b6:	463a      	mov	r2, r7
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff ffda 	bl	800b372 <__sfputc_r>
 800b3be:	1c43      	adds	r3, r0, #1
 800b3c0:	d1f3      	bne.n	800b3aa <__sfputs_r+0xa>
 800b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3c4 <_vfiprintf_r>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	460d      	mov	r5, r1
 800b3ca:	b09d      	sub	sp, #116	@ 0x74
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	4698      	mov	r8, r3
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	b118      	cbz	r0, 800b3dc <_vfiprintf_r+0x18>
 800b3d4:	6a03      	ldr	r3, [r0, #32]
 800b3d6:	b90b      	cbnz	r3, 800b3dc <_vfiprintf_r+0x18>
 800b3d8:	f7fc fdf8 	bl	8007fcc <__sinit>
 800b3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3de:	07d9      	lsls	r1, r3, #31
 800b3e0:	d405      	bmi.n	800b3ee <_vfiprintf_r+0x2a>
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	059a      	lsls	r2, r3, #22
 800b3e6:	d402      	bmi.n	800b3ee <_vfiprintf_r+0x2a>
 800b3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ea:	f7fc ff06 	bl	80081fa <__retarget_lock_acquire_recursive>
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	071b      	lsls	r3, r3, #28
 800b3f2:	d501      	bpl.n	800b3f8 <_vfiprintf_r+0x34>
 800b3f4:	692b      	ldr	r3, [r5, #16]
 800b3f6:	b99b      	cbnz	r3, 800b420 <_vfiprintf_r+0x5c>
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f000 f938 	bl	800b670 <__swsetup_r>
 800b400:	b170      	cbz	r0, 800b420 <_vfiprintf_r+0x5c>
 800b402:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b404:	07dc      	lsls	r4, r3, #31
 800b406:	d504      	bpl.n	800b412 <_vfiprintf_r+0x4e>
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	b01d      	add	sp, #116	@ 0x74
 800b40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	0598      	lsls	r0, r3, #22
 800b416:	d4f7      	bmi.n	800b408 <_vfiprintf_r+0x44>
 800b418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b41a:	f7fc feef 	bl	80081fc <__retarget_lock_release_recursive>
 800b41e:	e7f3      	b.n	800b408 <_vfiprintf_r+0x44>
 800b420:	2300      	movs	r3, #0
 800b422:	9309      	str	r3, [sp, #36]	@ 0x24
 800b424:	2320      	movs	r3, #32
 800b426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b42a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b42e:	2330      	movs	r3, #48	@ 0x30
 800b430:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5e0 <_vfiprintf_r+0x21c>
 800b434:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b438:	f04f 0901 	mov.w	r9, #1
 800b43c:	4623      	mov	r3, r4
 800b43e:	469a      	mov	sl, r3
 800b440:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b444:	b10a      	cbz	r2, 800b44a <_vfiprintf_r+0x86>
 800b446:	2a25      	cmp	r2, #37	@ 0x25
 800b448:	d1f9      	bne.n	800b43e <_vfiprintf_r+0x7a>
 800b44a:	ebba 0b04 	subs.w	fp, sl, r4
 800b44e:	d00b      	beq.n	800b468 <_vfiprintf_r+0xa4>
 800b450:	465b      	mov	r3, fp
 800b452:	4622      	mov	r2, r4
 800b454:	4629      	mov	r1, r5
 800b456:	4630      	mov	r0, r6
 800b458:	f7ff ffa2 	bl	800b3a0 <__sfputs_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	f000 80a7 	beq.w	800b5b0 <_vfiprintf_r+0x1ec>
 800b462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b464:	445a      	add	r2, fp
 800b466:	9209      	str	r2, [sp, #36]	@ 0x24
 800b468:	f89a 3000 	ldrb.w	r3, [sl]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f000 809f 	beq.w	800b5b0 <_vfiprintf_r+0x1ec>
 800b472:	2300      	movs	r3, #0
 800b474:	f04f 32ff 	mov.w	r2, #4294967295
 800b478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b47c:	f10a 0a01 	add.w	sl, sl, #1
 800b480:	9304      	str	r3, [sp, #16]
 800b482:	9307      	str	r3, [sp, #28]
 800b484:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b488:	931a      	str	r3, [sp, #104]	@ 0x68
 800b48a:	4654      	mov	r4, sl
 800b48c:	2205      	movs	r2, #5
 800b48e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b492:	4853      	ldr	r0, [pc, #332]	@ (800b5e0 <_vfiprintf_r+0x21c>)
 800b494:	f7f4 fe9c 	bl	80001d0 <memchr>
 800b498:	9a04      	ldr	r2, [sp, #16]
 800b49a:	b9d8      	cbnz	r0, 800b4d4 <_vfiprintf_r+0x110>
 800b49c:	06d1      	lsls	r1, r2, #27
 800b49e:	bf44      	itt	mi
 800b4a0:	2320      	movmi	r3, #32
 800b4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4a6:	0713      	lsls	r3, r2, #28
 800b4a8:	bf44      	itt	mi
 800b4aa:	232b      	movmi	r3, #43	@ 0x2b
 800b4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4b6:	d015      	beq.n	800b4e4 <_vfiprintf_r+0x120>
 800b4b8:	9a07      	ldr	r2, [sp, #28]
 800b4ba:	4654      	mov	r4, sl
 800b4bc:	2000      	movs	r0, #0
 800b4be:	f04f 0c0a 	mov.w	ip, #10
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4c8:	3b30      	subs	r3, #48	@ 0x30
 800b4ca:	2b09      	cmp	r3, #9
 800b4cc:	d94b      	bls.n	800b566 <_vfiprintf_r+0x1a2>
 800b4ce:	b1b0      	cbz	r0, 800b4fe <_vfiprintf_r+0x13a>
 800b4d0:	9207      	str	r2, [sp, #28]
 800b4d2:	e014      	b.n	800b4fe <_vfiprintf_r+0x13a>
 800b4d4:	eba0 0308 	sub.w	r3, r0, r8
 800b4d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	46a2      	mov	sl, r4
 800b4e2:	e7d2      	b.n	800b48a <_vfiprintf_r+0xc6>
 800b4e4:	9b03      	ldr	r3, [sp, #12]
 800b4e6:	1d19      	adds	r1, r3, #4
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	9103      	str	r1, [sp, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	bfbb      	ittet	lt
 800b4f0:	425b      	neglt	r3, r3
 800b4f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4f6:	9307      	strge	r3, [sp, #28]
 800b4f8:	9307      	strlt	r3, [sp, #28]
 800b4fa:	bfb8      	it	lt
 800b4fc:	9204      	strlt	r2, [sp, #16]
 800b4fe:	7823      	ldrb	r3, [r4, #0]
 800b500:	2b2e      	cmp	r3, #46	@ 0x2e
 800b502:	d10a      	bne.n	800b51a <_vfiprintf_r+0x156>
 800b504:	7863      	ldrb	r3, [r4, #1]
 800b506:	2b2a      	cmp	r3, #42	@ 0x2a
 800b508:	d132      	bne.n	800b570 <_vfiprintf_r+0x1ac>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	1d1a      	adds	r2, r3, #4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	9203      	str	r2, [sp, #12]
 800b512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b516:	3402      	adds	r4, #2
 800b518:	9305      	str	r3, [sp, #20]
 800b51a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5f0 <_vfiprintf_r+0x22c>
 800b51e:	7821      	ldrb	r1, [r4, #0]
 800b520:	2203      	movs	r2, #3
 800b522:	4650      	mov	r0, sl
 800b524:	f7f4 fe54 	bl	80001d0 <memchr>
 800b528:	b138      	cbz	r0, 800b53a <_vfiprintf_r+0x176>
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	eba0 000a 	sub.w	r0, r0, sl
 800b530:	2240      	movs	r2, #64	@ 0x40
 800b532:	4082      	lsls	r2, r0
 800b534:	4313      	orrs	r3, r2
 800b536:	3401      	adds	r4, #1
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b53e:	4829      	ldr	r0, [pc, #164]	@ (800b5e4 <_vfiprintf_r+0x220>)
 800b540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b544:	2206      	movs	r2, #6
 800b546:	f7f4 fe43 	bl	80001d0 <memchr>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d03f      	beq.n	800b5ce <_vfiprintf_r+0x20a>
 800b54e:	4b26      	ldr	r3, [pc, #152]	@ (800b5e8 <_vfiprintf_r+0x224>)
 800b550:	bb1b      	cbnz	r3, 800b59a <_vfiprintf_r+0x1d6>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	3307      	adds	r3, #7
 800b556:	f023 0307 	bic.w	r3, r3, #7
 800b55a:	3308      	adds	r3, #8
 800b55c:	9303      	str	r3, [sp, #12]
 800b55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b560:	443b      	add	r3, r7
 800b562:	9309      	str	r3, [sp, #36]	@ 0x24
 800b564:	e76a      	b.n	800b43c <_vfiprintf_r+0x78>
 800b566:	fb0c 3202 	mla	r2, ip, r2, r3
 800b56a:	460c      	mov	r4, r1
 800b56c:	2001      	movs	r0, #1
 800b56e:	e7a8      	b.n	800b4c2 <_vfiprintf_r+0xfe>
 800b570:	2300      	movs	r3, #0
 800b572:	3401      	adds	r4, #1
 800b574:	9305      	str	r3, [sp, #20]
 800b576:	4619      	mov	r1, r3
 800b578:	f04f 0c0a 	mov.w	ip, #10
 800b57c:	4620      	mov	r0, r4
 800b57e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b582:	3a30      	subs	r2, #48	@ 0x30
 800b584:	2a09      	cmp	r2, #9
 800b586:	d903      	bls.n	800b590 <_vfiprintf_r+0x1cc>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d0c6      	beq.n	800b51a <_vfiprintf_r+0x156>
 800b58c:	9105      	str	r1, [sp, #20]
 800b58e:	e7c4      	b.n	800b51a <_vfiprintf_r+0x156>
 800b590:	fb0c 2101 	mla	r1, ip, r1, r2
 800b594:	4604      	mov	r4, r0
 800b596:	2301      	movs	r3, #1
 800b598:	e7f0      	b.n	800b57c <_vfiprintf_r+0x1b8>
 800b59a:	ab03      	add	r3, sp, #12
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	462a      	mov	r2, r5
 800b5a0:	4b12      	ldr	r3, [pc, #72]	@ (800b5ec <_vfiprintf_r+0x228>)
 800b5a2:	a904      	add	r1, sp, #16
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7fb feb9 	bl	800731c <_printf_float>
 800b5aa:	4607      	mov	r7, r0
 800b5ac:	1c78      	adds	r0, r7, #1
 800b5ae:	d1d6      	bne.n	800b55e <_vfiprintf_r+0x19a>
 800b5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5b2:	07d9      	lsls	r1, r3, #31
 800b5b4:	d405      	bmi.n	800b5c2 <_vfiprintf_r+0x1fe>
 800b5b6:	89ab      	ldrh	r3, [r5, #12]
 800b5b8:	059a      	lsls	r2, r3, #22
 800b5ba:	d402      	bmi.n	800b5c2 <_vfiprintf_r+0x1fe>
 800b5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5be:	f7fc fe1d 	bl	80081fc <__retarget_lock_release_recursive>
 800b5c2:	89ab      	ldrh	r3, [r5, #12]
 800b5c4:	065b      	lsls	r3, r3, #25
 800b5c6:	f53f af1f 	bmi.w	800b408 <_vfiprintf_r+0x44>
 800b5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5cc:	e71e      	b.n	800b40c <_vfiprintf_r+0x48>
 800b5ce:	ab03      	add	r3, sp, #12
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	4b05      	ldr	r3, [pc, #20]	@ (800b5ec <_vfiprintf_r+0x228>)
 800b5d6:	a904      	add	r1, sp, #16
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7fc f937 	bl	800784c <_printf_i>
 800b5de:	e7e4      	b.n	800b5aa <_vfiprintf_r+0x1e6>
 800b5e0:	0800bca1 	.word	0x0800bca1
 800b5e4:	0800bcab 	.word	0x0800bcab
 800b5e8:	0800731d 	.word	0x0800731d
 800b5ec:	0800b3a1 	.word	0x0800b3a1
 800b5f0:	0800bca7 	.word	0x0800bca7

0800b5f4 <__swbuf_r>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	460e      	mov	r6, r1
 800b5f8:	4614      	mov	r4, r2
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	b118      	cbz	r0, 800b606 <__swbuf_r+0x12>
 800b5fe:	6a03      	ldr	r3, [r0, #32]
 800b600:	b90b      	cbnz	r3, 800b606 <__swbuf_r+0x12>
 800b602:	f7fc fce3 	bl	8007fcc <__sinit>
 800b606:	69a3      	ldr	r3, [r4, #24]
 800b608:	60a3      	str	r3, [r4, #8]
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	071a      	lsls	r2, r3, #28
 800b60e:	d501      	bpl.n	800b614 <__swbuf_r+0x20>
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	b943      	cbnz	r3, 800b626 <__swbuf_r+0x32>
 800b614:	4621      	mov	r1, r4
 800b616:	4628      	mov	r0, r5
 800b618:	f000 f82a 	bl	800b670 <__swsetup_r>
 800b61c:	b118      	cbz	r0, 800b626 <__swbuf_r+0x32>
 800b61e:	f04f 37ff 	mov.w	r7, #4294967295
 800b622:	4638      	mov	r0, r7
 800b624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	6922      	ldr	r2, [r4, #16]
 800b62a:	1a98      	subs	r0, r3, r2
 800b62c:	6963      	ldr	r3, [r4, #20]
 800b62e:	b2f6      	uxtb	r6, r6
 800b630:	4283      	cmp	r3, r0
 800b632:	4637      	mov	r7, r6
 800b634:	dc05      	bgt.n	800b642 <__swbuf_r+0x4e>
 800b636:	4621      	mov	r1, r4
 800b638:	4628      	mov	r0, r5
 800b63a:	f7ff fa47 	bl	800aacc <_fflush_r>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d1ed      	bne.n	800b61e <__swbuf_r+0x2a>
 800b642:	68a3      	ldr	r3, [r4, #8]
 800b644:	3b01      	subs	r3, #1
 800b646:	60a3      	str	r3, [r4, #8]
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	6022      	str	r2, [r4, #0]
 800b64e:	701e      	strb	r6, [r3, #0]
 800b650:	6962      	ldr	r2, [r4, #20]
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	429a      	cmp	r2, r3
 800b656:	d004      	beq.n	800b662 <__swbuf_r+0x6e>
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	07db      	lsls	r3, r3, #31
 800b65c:	d5e1      	bpl.n	800b622 <__swbuf_r+0x2e>
 800b65e:	2e0a      	cmp	r6, #10
 800b660:	d1df      	bne.n	800b622 <__swbuf_r+0x2e>
 800b662:	4621      	mov	r1, r4
 800b664:	4628      	mov	r0, r5
 800b666:	f7ff fa31 	bl	800aacc <_fflush_r>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d0d9      	beq.n	800b622 <__swbuf_r+0x2e>
 800b66e:	e7d6      	b.n	800b61e <__swbuf_r+0x2a>

0800b670 <__swsetup_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4b29      	ldr	r3, [pc, #164]	@ (800b718 <__swsetup_r+0xa8>)
 800b674:	4605      	mov	r5, r0
 800b676:	6818      	ldr	r0, [r3, #0]
 800b678:	460c      	mov	r4, r1
 800b67a:	b118      	cbz	r0, 800b684 <__swsetup_r+0x14>
 800b67c:	6a03      	ldr	r3, [r0, #32]
 800b67e:	b90b      	cbnz	r3, 800b684 <__swsetup_r+0x14>
 800b680:	f7fc fca4 	bl	8007fcc <__sinit>
 800b684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b688:	0719      	lsls	r1, r3, #28
 800b68a:	d422      	bmi.n	800b6d2 <__swsetup_r+0x62>
 800b68c:	06da      	lsls	r2, r3, #27
 800b68e:	d407      	bmi.n	800b6a0 <__swsetup_r+0x30>
 800b690:	2209      	movs	r2, #9
 800b692:	602a      	str	r2, [r5, #0]
 800b694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	f04f 30ff 	mov.w	r0, #4294967295
 800b69e:	e033      	b.n	800b708 <__swsetup_r+0x98>
 800b6a0:	0758      	lsls	r0, r3, #29
 800b6a2:	d512      	bpl.n	800b6ca <__swsetup_r+0x5a>
 800b6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6a6:	b141      	cbz	r1, 800b6ba <__swsetup_r+0x4a>
 800b6a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6ac:	4299      	cmp	r1, r3
 800b6ae:	d002      	beq.n	800b6b6 <__swsetup_r+0x46>
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f7fd fbf9 	bl	8008ea8 <_free_r>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6063      	str	r3, [r4, #4]
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f043 0308 	orr.w	r3, r3, #8
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	b94b      	cbnz	r3, 800b6ea <__swsetup_r+0x7a>
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6e0:	d003      	beq.n	800b6ea <__swsetup_r+0x7a>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 f883 	bl	800b7f0 <__smakebuf_r>
 800b6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ee:	f013 0201 	ands.w	r2, r3, #1
 800b6f2:	d00a      	beq.n	800b70a <__swsetup_r+0x9a>
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	60a2      	str	r2, [r4, #8]
 800b6f8:	6962      	ldr	r2, [r4, #20]
 800b6fa:	4252      	negs	r2, r2
 800b6fc:	61a2      	str	r2, [r4, #24]
 800b6fe:	6922      	ldr	r2, [r4, #16]
 800b700:	b942      	cbnz	r2, 800b714 <__swsetup_r+0xa4>
 800b702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b706:	d1c5      	bne.n	800b694 <__swsetup_r+0x24>
 800b708:	bd38      	pop	{r3, r4, r5, pc}
 800b70a:	0799      	lsls	r1, r3, #30
 800b70c:	bf58      	it	pl
 800b70e:	6962      	ldrpl	r2, [r4, #20]
 800b710:	60a2      	str	r2, [r4, #8]
 800b712:	e7f4      	b.n	800b6fe <__swsetup_r+0x8e>
 800b714:	2000      	movs	r0, #0
 800b716:	e7f7      	b.n	800b708 <__swsetup_r+0x98>
 800b718:	20000018 	.word	0x20000018

0800b71c <_raise_r>:
 800b71c:	291f      	cmp	r1, #31
 800b71e:	b538      	push	{r3, r4, r5, lr}
 800b720:	4605      	mov	r5, r0
 800b722:	460c      	mov	r4, r1
 800b724:	d904      	bls.n	800b730 <_raise_r+0x14>
 800b726:	2316      	movs	r3, #22
 800b728:	6003      	str	r3, [r0, #0]
 800b72a:	f04f 30ff 	mov.w	r0, #4294967295
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b732:	b112      	cbz	r2, 800b73a <_raise_r+0x1e>
 800b734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b738:	b94b      	cbnz	r3, 800b74e <_raise_r+0x32>
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 f830 	bl	800b7a0 <_getpid_r>
 800b740:	4622      	mov	r2, r4
 800b742:	4601      	mov	r1, r0
 800b744:	4628      	mov	r0, r5
 800b746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b74a:	f000 b817 	b.w	800b77c <_kill_r>
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d00a      	beq.n	800b768 <_raise_r+0x4c>
 800b752:	1c59      	adds	r1, r3, #1
 800b754:	d103      	bne.n	800b75e <_raise_r+0x42>
 800b756:	2316      	movs	r3, #22
 800b758:	6003      	str	r3, [r0, #0]
 800b75a:	2001      	movs	r0, #1
 800b75c:	e7e7      	b.n	800b72e <_raise_r+0x12>
 800b75e:	2100      	movs	r1, #0
 800b760:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b764:	4620      	mov	r0, r4
 800b766:	4798      	blx	r3
 800b768:	2000      	movs	r0, #0
 800b76a:	e7e0      	b.n	800b72e <_raise_r+0x12>

0800b76c <raise>:
 800b76c:	4b02      	ldr	r3, [pc, #8]	@ (800b778 <raise+0xc>)
 800b76e:	4601      	mov	r1, r0
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	f7ff bfd3 	b.w	800b71c <_raise_r>
 800b776:	bf00      	nop
 800b778:	20000018 	.word	0x20000018

0800b77c <_kill_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d07      	ldr	r5, [pc, #28]	@ (800b79c <_kill_r+0x20>)
 800b780:	2300      	movs	r3, #0
 800b782:	4604      	mov	r4, r0
 800b784:	4608      	mov	r0, r1
 800b786:	4611      	mov	r1, r2
 800b788:	602b      	str	r3, [r5, #0]
 800b78a:	f7f6 fe87 	bl	800249c <_kill>
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	d102      	bne.n	800b798 <_kill_r+0x1c>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	b103      	cbz	r3, 800b798 <_kill_r+0x1c>
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	bd38      	pop	{r3, r4, r5, pc}
 800b79a:	bf00      	nop
 800b79c:	20000898 	.word	0x20000898

0800b7a0 <_getpid_r>:
 800b7a0:	f7f6 be74 	b.w	800248c <_getpid>

0800b7a4 <__swhatbuf_r>:
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	b096      	sub	sp, #88	@ 0x58
 800b7b0:	4615      	mov	r5, r2
 800b7b2:	461e      	mov	r6, r3
 800b7b4:	da0d      	bge.n	800b7d2 <__swhatbuf_r+0x2e>
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7bc:	f04f 0100 	mov.w	r1, #0
 800b7c0:	bf14      	ite	ne
 800b7c2:	2340      	movne	r3, #64	@ 0x40
 800b7c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	6031      	str	r1, [r6, #0]
 800b7cc:	602b      	str	r3, [r5, #0]
 800b7ce:	b016      	add	sp, #88	@ 0x58
 800b7d0:	bd70      	pop	{r4, r5, r6, pc}
 800b7d2:	466a      	mov	r2, sp
 800b7d4:	f000 f848 	bl	800b868 <_fstat_r>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	dbec      	blt.n	800b7b6 <__swhatbuf_r+0x12>
 800b7dc:	9901      	ldr	r1, [sp, #4]
 800b7de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7e6:	4259      	negs	r1, r3
 800b7e8:	4159      	adcs	r1, r3
 800b7ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7ee:	e7eb      	b.n	800b7c8 <__swhatbuf_r+0x24>

0800b7f0 <__smakebuf_r>:
 800b7f0:	898b      	ldrh	r3, [r1, #12]
 800b7f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f4:	079d      	lsls	r5, r3, #30
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	460c      	mov	r4, r1
 800b7fa:	d507      	bpl.n	800b80c <__smakebuf_r+0x1c>
 800b7fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	6123      	str	r3, [r4, #16]
 800b804:	2301      	movs	r3, #1
 800b806:	6163      	str	r3, [r4, #20]
 800b808:	b003      	add	sp, #12
 800b80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80c:	ab01      	add	r3, sp, #4
 800b80e:	466a      	mov	r2, sp
 800b810:	f7ff ffc8 	bl	800b7a4 <__swhatbuf_r>
 800b814:	9f00      	ldr	r7, [sp, #0]
 800b816:	4605      	mov	r5, r0
 800b818:	4639      	mov	r1, r7
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7fd fbb8 	bl	8008f90 <_malloc_r>
 800b820:	b948      	cbnz	r0, 800b836 <__smakebuf_r+0x46>
 800b822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b826:	059a      	lsls	r2, r3, #22
 800b828:	d4ee      	bmi.n	800b808 <__smakebuf_r+0x18>
 800b82a:	f023 0303 	bic.w	r3, r3, #3
 800b82e:	f043 0302 	orr.w	r3, r3, #2
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	e7e2      	b.n	800b7fc <__smakebuf_r+0xc>
 800b836:	89a3      	ldrh	r3, [r4, #12]
 800b838:	6020      	str	r0, [r4, #0]
 800b83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b83e:	81a3      	strh	r3, [r4, #12]
 800b840:	9b01      	ldr	r3, [sp, #4]
 800b842:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b846:	b15b      	cbz	r3, 800b860 <__smakebuf_r+0x70>
 800b848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b84c:	4630      	mov	r0, r6
 800b84e:	f000 f81d 	bl	800b88c <_isatty_r>
 800b852:	b128      	cbz	r0, 800b860 <__smakebuf_r+0x70>
 800b854:	89a3      	ldrh	r3, [r4, #12]
 800b856:	f023 0303 	bic.w	r3, r3, #3
 800b85a:	f043 0301 	orr.w	r3, r3, #1
 800b85e:	81a3      	strh	r3, [r4, #12]
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	431d      	orrs	r5, r3
 800b864:	81a5      	strh	r5, [r4, #12]
 800b866:	e7cf      	b.n	800b808 <__smakebuf_r+0x18>

0800b868 <_fstat_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	@ (800b888 <_fstat_r+0x20>)
 800b86c:	2300      	movs	r3, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	4608      	mov	r0, r1
 800b872:	4611      	mov	r1, r2
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	f7f6 fe71 	bl	800255c <_fstat>
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	d102      	bne.n	800b884 <_fstat_r+0x1c>
 800b87e:	682b      	ldr	r3, [r5, #0]
 800b880:	b103      	cbz	r3, 800b884 <_fstat_r+0x1c>
 800b882:	6023      	str	r3, [r4, #0]
 800b884:	bd38      	pop	{r3, r4, r5, pc}
 800b886:	bf00      	nop
 800b888:	20000898 	.word	0x20000898

0800b88c <_isatty_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d06      	ldr	r5, [pc, #24]	@ (800b8a8 <_isatty_r+0x1c>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	602b      	str	r3, [r5, #0]
 800b898:	f7f6 fe70 	bl	800257c <_isatty>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d102      	bne.n	800b8a6 <_isatty_r+0x1a>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	b103      	cbz	r3, 800b8a6 <_isatty_r+0x1a>
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	20000898 	.word	0x20000898

0800b8ac <_init>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr

0800b8b8 <_fini>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr
